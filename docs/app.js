(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};

require.register("curvature/animate/Ease.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ease = void 0;

var _Mixin = require("../base/Mixin");

var _PromiseMixin = require("../mixin/PromiseMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Ease = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Ease, _Mixin$with);

  var _super = _createSuper(Ease);

  function Ease(interval) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Ease);

    _this = _super.call(this);
    _this.interval = interval;
    _this.terminal = false;
    _this.initial = false;
    _this.timeout = false;
    _this["final"] = false;
    _this.canceled = false;
    _this.done = false;
    _this.calculate = _this.calculate || 'calculate' in options ? options.calculate : false;
    _this.bounded = 'bounded' in options ? options.bounded : true;
    _this.repeat = 'repeat' in options ? options.repeat : 1;
    _this.reverse = 'reverse' in options ? options.reverse : false;
    return _this;
  }

  _createClass(Ease, [{
    key: "start",
    value: function start() {
      var _this2 = this;

      this.done = false;
      requestAnimationFrame(function () {
        _this2.initial = Date.now();
        _this2.terminal = _this2.initial + _this2.interval;

        if (_this2.repeat >= 0) {
          _this2.terminal = _this2.initial + _this2.interval * _this2.repeat;
          _this2.timeout = setTimeout(function () {
            if (_this2.done) {
              return _this2.reverse ? 0 : 1;
            }

            _this2.done = true;

            _this2[_PromiseMixin.PromiseMixin.Accept](_this2.reverse ? 0 : 1);
          }, _this2.interval * _this2.repeat);
        }
      });
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this.done) {
        return this["final"];
      }

      clearTimeout(this.timeout);
      this["final"] = this.current();
      this.canceled = this.done = true;

      this[_PromiseMixin.PromiseMixin.Reject](this["final"]);

      return this["final"];
    }
  }, {
    key: "fraction",
    value: function fraction() {
      if (this.done) {
        return this.reverse ? 0 : 1;
      }

      if (this.initial === false) {
        return this.reverse ? 1 : 0;
      }

      var elapsed = Date.now() - this.initial;

      if (elapsed / this.interval >= this.repeat) {
        return this.reverse ? 0 : 1;
      }

      var fraction = elapsed % this.interval / this.interval;
      return this.reverse ? 1 - fraction : fraction;
    }
  }, {
    key: "current",
    value: function current() {
      var t = this.fraction();

      if (this.calculate) {
        return this.calculate(t);
      }

      return t;
    }
  }]);

  return Ease;
}(_Mixin.Mixin["with"](_PromiseMixin.PromiseMixin));

exports.Ease = Ease;
  })();
});

require.register("curvature/animate/ease/CubicInOut.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CubicInOut = void 0;

var _Ease2 = require("../Ease");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CubicInOut = /*#__PURE__*/function (_Ease) {
  _inherits(CubicInOut, _Ease);

  var _super = _createSuper(CubicInOut);

  function CubicInOut() {
    var _this;

    _classCallCheck(this, CubicInOut);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "calculate", function (t) {
      return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    });

    return _this;
  }

  return CubicInOut;
}(_Ease2.Ease);

exports.CubicInOut = CubicInOut;
  })();
});

require.register("curvature/animate/ease/QuintInOut.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuintInOut = void 0;

var _Ease2 = require("../Ease");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var QuintInOut = /*#__PURE__*/function (_Ease) {
  _inherits(QuintInOut, _Ease);

  var _super = _createSuper(QuintInOut);

  function QuintInOut() {
    var _this;

    _classCallCheck(this, QuintInOut);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "calculate", function (t) {
      return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    });

    return _this;
  }

  return QuintInOut;
}(_Ease2.Ease);

exports.QuintInOut = QuintInOut;
  })();
});

require.register("curvature/base/Bag.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bag = void 0;

var _Bindable = require("./Bindable");

var _Mixin = require("./Mixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var toId = function toId(_int) {
  return Number(_int);
};

var fromId = function fromId(id) {
  return parseInt(id);
};

var Bag = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Bag, _Mixin$with);

  var _super = _createSuper(Bag);

  function Bag() {
    var _this;

    var changeCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, Bag);

    _this = _super.call(this);
    _this.meta = Symbol('meta');
    _this.content = new Map();
    _this.list = _Bindable.Bindable.makeBindable([]);
    _this.current = 0;
    _this.type = undefined;
    _this.length = 0;
    _this.changeCallback = changeCallback;
    return _this;
  }

  _createClass(Bag, [{
    key: "has",
    value: function has(item) {
      return this.content.has(item);
    }
  }, {
    key: "add",
    value: function add(item) {
      if (item === undefined || !(item instanceof Object)) {
        throw new Error('Only objects may be added to Bags.');
      }

      if (this.type && !(item instanceof this.type)) {
        console.error(this.type, item);
        throw new Error("Only objects of type ".concat(this.type, " may be added to this Bag."));
      }

      if (this.content.has(item)) {
        return;
      }

      var adding = new CustomEvent('adding', {
        detail: {
          item: item
        }
      });

      if (!this.dispatchEvent(adding)) {
        return;
      }

      var id = toId(this.current++);
      this.content.set(item, id);
      this.list[id] = item;

      if (this.changeCallback) {
        this.changeCallback(item, this.meta, Bag.ITEM_ADDED, id);
      }

      var add = new CustomEvent('added', {
        detail: {
          item: item,
          id: id
        }
      });
      this.dispatchEvent(add);
      this.length = this.size;
    }
  }, {
    key: "remove",
    value: function remove(item) {
      if (item === undefined || !(item instanceof Object)) {
        throw new Error('Only objects may be removed from Bags.');
      }

      if (this.type && !(item instanceof this.type)) {
        console.error(this.type, item);
        throw new Error("Only objects of type ".concat(this.type, " may be removed from this Bag."));
      }

      if (!this.content.has(item)) {
        if (this.changeCallback) {
          this.changeCallback(item, this.meta, 0, undefined);
        }

        return false;
      }

      var removing = new CustomEvent('removing', {
        detail: {
          item: item
        }
      });

      if (!this.dispatchEvent(removing)) {
        return;
      }

      var id = this.content.get(item);
      delete this.list[id];
      this.content["delete"](item);

      if (this.changeCallback) {
        this.changeCallback(item, this.meta, Bag.ITEM_REMOVED, id);
      }

      var remove = new CustomEvent('removed', {
        detail: {
          item: item,
          id: id
        }
      });
      this.dispatchEvent(remove);
      this.length = this.size;
      return item;
    }
  }, {
    key: "size",
    get: function get() {
      return this.content.size;
    }
  }, {
    key: "items",
    value: function items() {
      return Array.from(this.content.entries()).map(function (entry) {
        return entry[0];
      });
    }
  }]);

  return Bag;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Bag = Bag;
Object.defineProperty(Bag, 'ITEM_ADDED', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: 1
});
Object.defineProperty(Bag, 'ITEM_REMOVED', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: -1
});
  })();
});

require.register("curvature/base/Bindable.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bindable = void 0;

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Ref = Symbol('ref');
var Original = Symbol('original');
var Deck = Symbol('deck');
var Binding = Symbol('binding');
var SubBinding = Symbol('subBinding');
var BindingAll = Symbol('bindingAll');
var IsBindable = Symbol('isBindable');
var Wrapping = Symbol('wrapping');
var Names = Symbol('Names');
var Executing = Symbol('executing');
var Stack = Symbol('stack');
var ObjSymbol = Symbol('object');
var Wrapped = Symbol('wrapped');
var Unwrapped = Symbol('unwrapped');
var GetProto = Symbol('getProto');
var OnGet = Symbol('onGet');
var OnAllGet = Symbol('onAllGet');
var BindChain = Symbol('bindChain');
var Descriptors = Symbol('Descriptors');
var NoGetters = Symbol('NoGetters');
var TypedArray = Object.getPrototypeOf(Int8Array);
var SetIterator = Set.prototype[Symbol.iterator];
var MapIterator = Map.prototype[Symbol.iterator];
var win = globalThis;
var excludedClasses = [win.Node, win.File, win.Map, win.Set, win.WeakMap, win.WeakSet, win.ArrayBuffer, win.ResizeObserver, win.MutationObserver, win.PerformanceObserver, win.IntersectionObserver].filter(function (x) {
  return typeof x === 'function';
});

var Bindable = /*#__PURE__*/function () {
  function Bindable() {
    _classCallCheck(this, Bindable);
  }

  _createClass(Bindable, null, [{
    key: "isBindable",
    value: function isBindable(object) {
      if (!object || !object[IsBindable]) {
        return false;
      }

      return object[IsBindable] === Bindable;
    }
  }, {
    key: "onDeck",
    value: function onDeck(object, key) {
      return object[Deck][key] || false;
    }
  }, {
    key: "ref",
    value: function ref(object) {
      return object[Ref] || object || false;
    }
  }, {
    key: "makeBindable",
    value: function makeBindable(object) {
      return this.make(object);
    }
  }, {
    key: "shuck",
    value: function shuck(original, seen) {
      seen = seen || new Map();
      var clone = {};

      if (original instanceof TypedArray || original instanceof ArrayBuffer) {
        var _clone = original.slice(0);

        seen.set(original, _clone);
        return _clone;
      }

      var properties = Object.keys(original);

      for (var i in properties) {
        var ii = properties[i];

        if (ii.substring(0, 3) === '___') {
          continue;
        }

        var alreadyCloned = seen.get(original[ii]);

        if (alreadyCloned) {
          clone[ii] = alreadyCloned;
          continue;
        }

        if (original[ii] === original) {
          seen.set(original[ii], clone);
          clone[ii] = clone;
          continue;
        }

        if (original[ii] && _typeof(original[ii]) === 'object') {
          var originalProp = original[ii];

          if (Bindable.isBindable(original[ii])) {
            originalProp = original[ii][Original];
          }

          clone[ii] = this.shuck(originalProp, seen);
        } else {
          clone[ii] = original[ii];
        }

        seen.set(original[ii], clone[ii]);
      }

      if (Bindable.isBindable(original)) {
        delete clone.bindTo;
        delete clone.isBound;
      }

      return clone;
    }
  }, {
    key: "make",
    value: function make(object) {
      var _this = this;

      if (!object || !['function', 'object'].includes(_typeof(object))) {
        return object;
      }

      if (excludedClasses.filter(function (x) {
        return object instanceof x;
      }).length || Object.isSealed(object) || !Object.isExtensible(object)) {
        return object;
      }

      if (object[Ref]) {
        return object[Ref];
      }

      if (object[Binding]) {
        return object;
      }

      Object.defineProperty(object, Ref, {
        configurable: true,
        enumerable: false,
        writable: true,
        value: false
      });
      Object.defineProperty(object, Original, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: object
      });
      Object.defineProperty(object, Deck, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, Binding, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, SubBinding, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Map()
      });
      Object.defineProperty(object, BindingAll, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, IsBindable, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Bindable
      });
      Object.defineProperty(object, Executing, {
        enumerable: false,
        writable: true
      });
      Object.defineProperty(object, Wrapping, {
        enumerable: false,
        writable: true
      });
      Object.defineProperty(object, Stack, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, '___before___', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, '___after___', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, Wrapped, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Map()
      });
      Object.defineProperty(object, Unwrapped, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, Descriptors, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Map()
      });

      var bindTo = function bindTo(property) {
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var bindToAll = false;

        if (Array.isArray(property)) {
          var debinders = property.map(function (p) {
            return bindTo(p, callback, options);
          });
          return function () {
            return debinders.map(function (d) {
              return d();
            });
          };
        }

        if (property instanceof Function) {
          options = callback || {};
          callback = property;
          bindToAll = true;
        }

        if (options.delay >= 0) {
          callback = _this.wrapDelayCallback(callback, options.delay);
        }

        if (options.throttle >= 0) {
          callback = _this.wrapThrottleCallback(callback, options.throttle);
        }

        if (options.wait >= 0) {
          callback = _this.wrapWaitCallback(callback, options.wait);
        }

        if (options.frame) {
          callback = _this.wrapFrameCallback(callback, options.frame);
        }

        if (options.idle) {
          callback = _this.wrapIdleCallback(callback);
        }

        if (bindToAll) {
          var bindIndex = object[BindingAll].length;
          object[BindingAll].push(callback);

          if (!('now' in options) || options.now) {
            for (var i in object) {
              callback(object[i], i, object, false);
            }
          }

          return function () {
            delete object[BindingAll][bindIndex];
          };
        }

        if (!object[Binding][property]) {
          object[Binding][property] = new Set();
        } // let bindIndex = object[Binding][property].length;


        if (options.children) {
          var original = callback;

          callback = function callback() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var v = args[0];
            var subDebind = object[SubBinding].get(original);

            if (subDebind) {
              object[SubBinding]["delete"](original);
              subDebind();
            }

            if (_typeof(v) !== 'object') {
              original.apply(void 0, args);
              return;
            }

            var vv = Bindable.make(v);

            if (Bindable.isBindable(vv)) {
              object[SubBinding].set(original, vv.bindTo(function () {
                for (var _len2 = arguments.length, subArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  subArgs[_key2] = arguments[_key2];
                }

                return original.apply(void 0, args.concat(subArgs));
              }, Object.assign({}, options, {
                children: false
              })));
            }

            original.apply(void 0, args);
          };
        }

        object[Binding][property].add(callback);

        if (!('now' in options) || options.now) {
          callback(object[property], property, object, false);
        }

        var debinder = function debinder() {
          var subDebind = object[SubBinding].get(callback);

          if (subDebind) {
            object[SubBinding]["delete"](callback);
            subDebind();
          }

          if (!object[Binding][property]) {
            return;
          }

          if (!object[Binding][property].has(callback)) {
            return;
          }

          object[Binding][property]["delete"](callback);
        };

        if (options.removeWith && options.removeWith instanceof View) {
          options.removeWith.onRemove(function () {
            return debinder;
          });
        }

        return debinder;
      };

      Object.defineProperty(object, 'bindTo', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: bindTo
      });

      var ___before = function ___before(callback) {
        var beforeIndex = object.___before___.length;

        object.___before___.push(callback);

        var cleaned = false;
        return function () {
          if (cleaned) {
            return;
          }

          cleaned = true;
          delete object.___before___[beforeIndex];
        };
      };

      var ___after = function ___after(callback) {
        var afterIndex = object.___after___.length;

        object.___after___.push(callback);

        var cleaned = false;
        return function () {
          if (cleaned) {
            return;
          }

          cleaned = true;
          delete object.___after___[afterIndex];
        };
      };

      Object.defineProperty(object, BindChain, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: function value(path, callback) {
          var parts = path.split('.');
          var node = parts.shift();
          var subParts = parts.slice(0);
          var debind = [];
          debind.push(object.bindTo(node, function (v, k, t, d) {
            var rest = subParts.join('.');

            if (subParts.length === 0) {
              callback(v, k, t, d);
              return;
            }

            if (v === undefined) {
              v = t[k] = _this.makeBindable({});
            }

            debind = debind.concat(v[BindChain](rest, callback));
          }));
          return function () {
            return debind.map(function (x) {
              return x();
            });
          };
        }
      });
      Object.defineProperty(object, '___before', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: ___before
      });
      Object.defineProperty(object, '___after', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: ___after
      });

      var isBound = function isBound() {
        for (var i in object[BindingAll]) {
          if (object[BindingAll][i]) {
            return true;
          }
        }

        for (var _i in object[Binding]) {
          for (var j in object[Binding][_i]) {
            if (object[Binding][_i][j]) {
              return true;
            }
          }
        }

        return false;
      };

      Object.defineProperty(object, 'isBound', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: isBound
      });

      if (!object[NoGetters]) {
        var _loop = function _loop(i) {
          if (object[i] && object[i] instanceof Object && !object[i] instanceof Promise) {
            if (!excludedClasses.filter(function (excludeClass) {
              return object[i] instanceof excludeClass;
            }).length && Object.isExtensible(object[i]) && !Object.isSealed(object[i])) {
              object[i] = Bindable.make(object[i]);
            }
          }
        };

        for (var i in object) {
          _loop(i);
        }
      }

      var set = function set(target, key, value) {
        if (key === Original) {
          return true;
        }

        if (object[Deck][key] !== undefined && object[Deck][key] === value) {
          return true;
        }

        if (typeof key === 'string' && key.substring(0, 3) === '___' && key.slice(-3) === '___') {
          return true;
        }

        if (target[key] === value) {
          return true;
        }

        if (value && value instanceof Object) {
          if (!excludedClasses.filter(function (x) {
            return object instanceof x;
          }).length && Object.isExtensible(object) && !Object.isSealed(object)) {
            if (!object[NoGetters]) {
              value = Bindable.makeBindable(value);
            }
          }
        }

        object[Deck][key] = value;

        for (var _i2 in object[BindingAll]) {
          if (!object[BindingAll][_i2]) {
            continue;
          }

          object[BindingAll][_i2](value, key, target, false);
        }

        var stop = false;

        if (key in object[Binding]) {
          var _iterator = _createForOfIteratorHelper(object[Binding][key]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var callback = _step.value;

              // if(!object[Binding][key])
              // {
              // 	continue;
              // }
              // if(!object[Binding][key][i])
              // {
              // 	continue;
              // }
              if (callback(value, key, target, false, target[key]) === false) {
                stop = true;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        delete object[Deck][key];

        if (!stop) {
          var descriptor = Object.getOwnPropertyDescriptor(target, key);
          var excluded = target instanceof File && key == 'lastModifiedDate';

          if (!excluded && (!descriptor || descriptor.writable) && target[key] === value) {
            target[key] = value;
          }
        }

        var result = Reflect.set(target, key, value);

        if (Array.isArray(target) && object[Binding]['length']) {
          for (var _i3 in object[Binding]['length']) {
            var _callback = object[Binding]['length'][_i3];

            _callback(target.length, 'length', target, false, target.length);
          }
        }

        return result;
      };

      var deleteProperty = function deleteProperty(target, key) {
        if (!(key in target)) {
          return true;
        }

        if (descriptors.has(key)) {
          var descriptor = descriptors.get(key);

          if (descriptor && !descriptor.configurable) {
            return false;
          }

          descriptors["delete"](key);
        }

        for (var _i4 in object[BindingAll]) {
          object[BindingAll][_i4](undefined, key, target, true, target[key]);
        }

        if (key in object[Binding]) {
          for (var _i5 in object[Binding][key]) {
            if (!object[Binding][key][_i5]) {
              continue;
            }

            object[Binding][key][_i5](undefined, key, target, true, target[key]);
          }
        }

        delete target[key];
        return true;
      };

      var construct = function construct(target, args) {
        var key = 'constructor';

        for (var _i6 in target.___before___) {
          target.___before___[_i6](target, key, object[Stack], undefined, args);
        }

        var instance = Bindable.make(_construct(target[Original], _toConsumableArray(args)));

        for (var _i7 in target.___after___) {
          target.___after___[_i7](target, key, object[Stack], instance, args);
        }

        return instance;
      };

      var descriptors = object[Descriptors];
      var wrapped = object[Wrapped];
      var stack = object[Stack];

      var get = function get(target, key) {
        if (wrapped.has(key)) {
          return wrapped.get(key);
        }

        if (key === Ref || key === Original || key === 'apply' || key === 'isBound' || key === 'bindTo' || key === '__proto__' || key === 'constructor') {
          return object[key];
        }

        var descriptor;

        if (descriptors.has(key)) {
          descriptor = descriptors.get(key);
        } else {
          descriptor = Object.getOwnPropertyDescriptor(object, key);
          descriptors.set(key, descriptor);
        }

        if (descriptor && !descriptor.configurable && !descriptor.writable) {
          return object[key];
        }

        if (OnAllGet in object) {
          return object[OnAllGet](key);
        }

        if (OnGet in object && !(key in object)) {
          return object[OnGet](key);
        }

        if (descriptor && !descriptor.configurable && !descriptor.writable) {
          wrapped.set(key, object[key]);
          return object[key];
        }

        if (typeof object[key] === 'function') {
          if (Names in object[key]) {
            return object[key];
          }

          Object.defineProperty(object[Unwrapped], key, {
            configurable: false,
            enumerable: false,
            writable: false,
            value: object[key]
          });
          var prototype = Object.getPrototypeOf(object);
          var isMethod = prototype[key] === object[key];
          var objRef = typeof Promise === 'function' && object instanceof Promise || typeof Map === 'function' && object instanceof Map || typeof Set === 'function' && object instanceof Set || typeof MapIterator === 'function' && object.prototype === MapIterator || typeof SetIterator === 'function' && object.prototype === SetIterator || typeof SetIterator === 'function' && object.prototype === SetIterator || typeof WeakMap === 'function' && object instanceof WeakMap || typeof WeakSet === 'function' && object instanceof WeakSet || typeof Date === 'function' && object instanceof Date || typeof TypedArray === 'function' && object instanceof TypedArray || typeof ArrayBuffer === 'function' && object instanceof ArrayBuffer || typeof EventTarget === 'function' && object instanceof EventTarget || typeof ResizeObserver === 'function' && object instanceof ResizeObserver || typeof MutationObserver === 'function' && object instanceof MutationObserver || typeof PerformanceObserver === 'function' && object instanceof PerformanceObserver || typeof IntersectionObserver === 'function' && object instanceof IntersectionObserver || typeof object[Symbol.iterator] === 'function' && key === 'next' ? object : object[Ref];

          var wrappedMethod = function wrappedMethod() {
            object[Executing] = key;
            stack.unshift(key);

            for (var _len3 = arguments.length, providedArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              providedArgs[_key3] = arguments[_key3];
            }

            var _iterator2 = _createForOfIteratorHelper(object.___before___),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var beforeCallback = _step2.value;
                beforeCallback(object, key, stack, object, providedArgs);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            var ret;

            if (new.target) {
              ret = _construct(object[Unwrapped][key], providedArgs);
            } else {
              var func = object[Unwrapped][key];

              if (isMethod) {
                ret = func.apply(objRef || object, providedArgs);
              } else {
                ret = func.apply(void 0, providedArgs);
              }
            }

            var _iterator3 = _createForOfIteratorHelper(object.___after___),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var afterCallback = _step3.value;
                afterCallback(object, key, stack, object, providedArgs);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            object[Executing] = null;
            stack.shift();
            return ret;
          };

          wrappedMethod[Names] = wrappedMethod[Names] || new WeakMap();
          wrappedMethod[Names].set(object, key);

          wrappedMethod[OnAllGet] = function (key) {
            var selfName = wrappedMethod[Names].get(object);
            return object[selfName][key];
          };

          var result = Bindable.make(wrappedMethod);
          wrapped.set(key, result);
          return result;
        }

        return object[key];
      };

      var getPrototypeOf = function getPrototypeOf(target) {
        if (GetProto in object) {
          return object[GetProto];
        }

        return Reflect.getPrototypeOf(target);
      };

      var handler = {
        get: get,
        set: set,
        construct: construct,
        getPrototypeOf: getPrototypeOf,
        deleteProperty: deleteProperty
      };

      if (object[NoGetters]) {
        delete handler.get;
      }

      Object.defineProperty(object, Ref, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Proxy(object, handler)
      });
      return object[Ref];
    }
  }, {
    key: "clearBindings",
    value: function clearBindings(object) {
      var clearObj = function clearObj(o) {
        return Object.keys(o).map(function (k) {
          return delete o[k];
        });
      };

      var maps = function maps(func) {
        return function () {
          for (var _len4 = arguments.length, os = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            os[_key4] = arguments[_key4];
          }

          return os.map(func);
        };
      };

      var clearObjs = maps(clearObj);
      clearObjs(object[Wrapped], object[Binding], object[BindingAll], object.___after___, object.___before___);
    }
  }, {
    key: "resolve",
    value: function resolve(object, path) {
      var owner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var node;
      var pathParts = path.split('.');
      var top = pathParts[0];

      while (pathParts.length) {
        if (owner && pathParts.length === 1) {
          var obj = object.NoGetters ? this.make(object) : object;
          return [obj, pathParts.shift(), top];
        }

        node = pathParts.shift();

        if (!node in object || !object[node] || !(object[node] instanceof Object)) {
          object[node] = {};
        }

        object = object.NoGetters ? this.make(object[node]) : object[node];
      }

      return [this.make(object), node, top];
    }
  }, {
    key: "wrapDelayCallback",
    value: function wrapDelayCallback(callback, delay) {
      return function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return setTimeout(function () {
          return callback.apply(void 0, args);
        }, delay);
      };
    }
  }, {
    key: "wrapThrottleCallback",
    value: function wrapThrottleCallback(callback, throttle) {
      var _this2 = this;

      this.throttles.set(callback, false);
      return function () {
        if (_this2.throttles.get(callback, true)) {
          return;
        }

        callback.apply(void 0, arguments);

        _this2.throttles.set(callback, true);

        setTimeout(function () {
          _this2.throttles.set(callback, false);
        }, throttle);
      };
    }
  }, {
    key: "wrapWaitCallback",
    value: function wrapWaitCallback(callback, wait) {
      var _this3 = this;

      return function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        var waiter;

        if (waiter = _this3.waiters.get(callback)) {
          _this3.waiters["delete"](callback);

          clearTimeout(waiter);
        }

        waiter = setTimeout(function () {
          return callback.apply(void 0, args);
        }, wait);

        _this3.waiters.set(callback, waiter);
      };
    }
  }, {
    key: "wrapFrameCallback",
    value: function wrapFrameCallback(callback, frames) {
      return function () {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        requestAnimationFrame(function () {
          return callback.apply(void 0, args);
        });
      };
    }
  }, {
    key: "wrapIdleCallback",
    value: function wrapIdleCallback(callback) {
      return function () {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        // Compatibility for Safari 08/2020
        var req = window.requestIdleCallback || requestAnimationFrame;
        req(function () {
          return callback.apply(void 0, args);
        });
      };
    }
  }]);

  return Bindable;
}();

exports.Bindable = Bindable;

_defineProperty(Bindable, "waiters", new WeakMap());

_defineProperty(Bindable, "throttles", new WeakMap());

Object.defineProperty(Bindable, 'OnGet', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: OnGet
});
Object.defineProperty(Bindable, 'NoGetters', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: NoGetters
});
Object.defineProperty(Bindable, 'GetProto', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: GetProto
});
Object.defineProperty(Bindable, 'OnAllGet', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: OnAllGet
});
  })();
});

require.register("curvature/base/Cache.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cache = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cache = /*#__PURE__*/function () {
  function Cache() {
    _classCallCheck(this, Cache);
  }

  _createClass(Cache, null, [{
    key: "store",
    value: function store(key, value, expiry) {
      var bucket = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'standard';
      var expiration = 0;

      if (expiry) {
        expiration = expiry * 1000 + new Date().getTime();
      }

      if (!this.buckets) {
        this.buckets = new Map();
      }

      if (!this.buckets.has(bucket)) {
        this.buckets.set(bucket, new Map());
      }

      var eventEnd = new CustomEvent('cvCacheStore', {
        cancelable: true,
        detail: {
          key: key,
          value: value,
          expiry: expiry,
          bucket: bucket
        }
      });

      if (document.dispatchEvent(eventEnd)) {
        this.buckets.get(bucket).set(key, {
          value: value,
          expiration: expiration
        });
      }
    }
  }, {
    key: "load",
    value: function load(key) {
      var defaultvalue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var bucket = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'standard';
      var eventEnd = new CustomEvent('cvCacheLoad', {
        cancelable: true,
        detail: {
          key: key,
          defaultvalue: defaultvalue,
          bucket: bucket
        }
      });

      if (!document.dispatchEvent(eventEnd)) {
        return defaultvalue;
      }

      if (this.buckets && this.buckets.has(bucket) && this.buckets.get(bucket).has(key)) {
        var entry = this.buckets.get(bucket).get(key); // console.log(this.bucket[bucket][key].expiration, (new Date).getTime());

        if (entry.expiration === 0 || entry.expiration > new Date().getTime()) {
          return this.buckets.get(bucket).get(key).value;
        }
      }

      return defaultvalue;
    }
  }]);

  return Cache;
}();

exports.Cache = Cache;
  })();
});

require.register("curvature/base/Config.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AppConfig = {};

try {
  AppConfig = require('/Config').Config || {};
} catch (error) {
  window.devMode === true && console.error(error);
}

var Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }

  _createClass(Config, null, [{
    key: "get",
    value: function get(name) {
      return this.configs[name];
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this.configs[name] = value;
      return this;
    }
  }, {
    key: "dump",
    value: function dump() {
      return this.configs;
    }
  }, {
    key: "init",
    value: function init() {
      for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {
        configs[_key] = arguments[_key];
      }

      for (var i in configs) {
        var config = configs[i];

        if (typeof config === 'string') {
          config = JSON.parse(config);
        }

        for (var name in config) {
          var value = config[name];
          return this.configs[name] = value;
        }
      }

      return this;
    }
  }]);

  return Config;
}();

exports.Config = Config;
Object.defineProperty(Config, 'configs', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: AppConfig
});
  })();
});

require.register("curvature/base/Dom.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dom = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var traversals = 0;

var Dom = /*#__PURE__*/function () {
  function Dom() {
    _classCallCheck(this, Dom);
  }

  _createClass(Dom, null, [{
    key: "mapTags",
    value: function mapTags(doc, selector, callback, startNode, endNode) {
      var result = [];
      var started = true;

      if (startNode) {
        started = false;
      }

      var ended = false;
      var treeWalker = document.createTreeWalker(doc, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
        acceptNode: function acceptNode(node, walker) {
          if (!started) {
            if (node === startNode) {
              started = true;
            } else {
              return NodeFilter.FILTER_SKIP;
            }
          }

          if (endNode && node === endNode) {
            ended = true;
          }

          if (ended) {
            return NodeFilter.FILTER_SKIP;
          }

          if (selector) {
            if (node instanceof Element) {
              if (node.matches(selector)) {
                return NodeFilter.FILTER_ACCEPT;
              }
            }

            return NodeFilter.FILTER_SKIP;
          }

          return NodeFilter.FILTER_ACCEPT;
        }
      }, false);
      var traversal = traversals++;

      while (treeWalker.nextNode()) {
        result.push(callback(treeWalker.currentNode, treeWalker));
      }

      return result;
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(doc, event) {
      doc.dispatchEvent(event);
      Dom.mapTags(doc, false, function (node) {
        node.dispatchEvent(event);
      });
    }
  }]);

  return Dom;
}();

exports.Dom = Dom;
  })();
});

require.register("curvature/base/Mixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mixin = void 0;

var _Bindable = require("./Bindable");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Constructor = Symbol('constructor');
var MixinList = Symbol('mixinList');

var Mixin = /*#__PURE__*/function () {
  function Mixin() {
    _classCallCheck(this, Mixin);
  }

  _createClass(Mixin, null, [{
    key: "from",
    value: function from(baseClass) {
      for (var _len = arguments.length, mixins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        mixins[_key - 1] = arguments[_key];
      }

      var constructors = [];

      var newClass = /*#__PURE__*/function (_baseClass) {
        _inherits(newClass, _baseClass);

        var _super = _createSuper(newClass);

        function newClass() {
          var _this;

          _classCallCheck(this, newClass);

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var instance = _this = _super.call.apply(_super, [this].concat(args));

          var _iterator = _createForOfIteratorHelper(mixins),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mixin = _step.value;

              if (mixin[Mixin.Constructor]) {
                mixin[Mixin.Constructor].apply(_assertThisInitialized(_this));
              }

              switch (_typeof(mixin)) {
                // case 'function':
                // 	this.mixClass(mixin, newClass);
                // 	break;
                case 'object':
                  Mixin.mixObject(mixin, _assertThisInitialized(_this));
                  break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return _possibleConstructorReturn(_this, instance);
        }

        return newClass;
      }(baseClass);

      return newClass;
    }
  }, {
    key: "to",
    value: function to(base) {
      var descriptors = {};

      for (var _len3 = arguments.length, mixins = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        mixins[_key3 - 1] = arguments[_key3];
      }

      mixins.map(function (mixin) {
        switch (_typeof(mixin)) {
          case 'object':
            Object.assign(descriptors, Object.getOwnPropertyDescriptors(mixin));
            break;

          case 'function':
            Object.assign(descriptors, Object.getOwnPropertyDescriptors(mixin.prototype));
            break;
        }

        delete descriptors.constructor;
        Object.defineProperties(base.prototype, descriptors);
      });
    }
  }, {
    key: "with",
    value: function _with() {
      for (var _len4 = arguments.length, mixins = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        mixins[_key4] = arguments[_key4];
      }

      return this.from.apply(this, [Object].concat(mixins));
    }
  }, {
    key: "mixObject",
    value: function mixObject(mixin, instance) {
      var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(mixin)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var func = _step2.value;

          if (typeof mixin[func] === 'function') {
            instance[func] = mixin[func].bind(instance);
            continue;
          }

          instance[func] = mixin[func];
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(mixin)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _func = _step3.value;

          if (typeof mixin[_func] === 'function') {
            instance[_func] = mixin[_func].bind(instance);
            continue;
          }

          instance[_func] = mixin[_func];
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "mixClass",
    value: function mixClass(cls, newClass) {
      var _iterator4 = _createForOfIteratorHelper(Object.getOwnPropertyNames(cls.prototype)),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var func = _step4.value;
          newClass.prototype[func] = cls.prototype[func].bind(newClass.prototype);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(cls.prototype)),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _func2 = _step5.value;
          newClass.prototype[_func2] = cls.prototype[_func2].bind(newClass.prototype);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(Object.getOwnPropertyNames(cls)),
          _step6;

      try {
        var _loop = function _loop() {
          var func = _step6.value;

          if (typeof cls[func] !== 'function') {
            return "continue";
          }

          var prev = newClass[func] || false;
          var meth = cls[func].bind(newClass);

          newClass[func] = function () {
            prev && prev.apply(void 0, arguments);
            return meth.apply(void 0, arguments);
          };
        };

        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(cls)),
          _step7;

      try {
        var _loop2 = function _loop2() {
          var func = _step7.value;

          if (typeof cls[func] !== 'function') {
            return "continue";
          }

          var prev = newClass[func] || false;
          var meth = cls[func].bind(newClass);

          newClass[func] = function () {
            prev && prev.apply(void 0, arguments);
            return meth.apply(void 0, arguments);
          };
        };

        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _ret2 = _loop2();

          if (_ret2 === "continue") continue;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "mix",
    value: function mix(mixinTo) {
      var constructors = [];
      var allStatic = {};
      var allInstance = {};

      var mixable = _Bindable.Bindable.makeBindable(mixinTo);

      var _loop3 = function _loop3(base) {
        var instanceNames = Object.getOwnPropertyNames(base.prototype);
        var staticNames = Object.getOwnPropertyNames(base);
        var prefix = /^(before|after)__(.+)/;

        var _iterator8 = _createForOfIteratorHelper(staticNames),
            _step8;

        try {
          var _loop5 = function _loop5() {
            var methodName = _step8.value;
            var match = methodName.match(prefix);

            if (match) {
              switch (match[1]) {
                case 'before':
                  mixable.___before(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;

                case 'after':
                  mixable.___after(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;
              }

              return "continue";
            }

            if (allStatic[methodName]) {
              return "continue";
            }

            if (typeof base[methodName] !== 'function') {
              return "continue";
            }

            allStatic[methodName] = base[methodName];
          };

          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _ret3 = _loop5();

            if (_ret3 === "continue") continue;
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        var _iterator9 = _createForOfIteratorHelper(instanceNames),
            _step9;

        try {
          var _loop6 = function _loop6() {
            var methodName = _step9.value;
            var match = methodName.match(prefix);

            if (match) {
              switch (match[1]) {
                case 'before':
                  mixable.___before(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base.prototype[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;

                case 'after':
                  mixable.___after(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base.prototype[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;
              }

              return "continue";
            }

            if (allInstance[methodName]) {
              return "continue";
            }

            if (typeof base.prototype[methodName] !== 'function') {
              return "continue";
            }

            allInstance[methodName] = base.prototype[methodName];
          };

          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var _ret4 = _loop6();

            if (_ret4 === "continue") continue;
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      };

      for (var base = this; base && base.prototype; base = Object.getPrototypeOf(base)) {
        _loop3(base);
      }

      for (var methodName in allStatic) {
        mixinTo[methodName] = allStatic[methodName].bind(mixinTo);
      }

      var _loop4 = function _loop4(_methodName) {
        mixinTo.prototype[_methodName] = function () {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          return allInstance[_methodName].apply(this, args);
        };
      };

      for (var _methodName in allInstance) {
        _loop4(_methodName);
      }

      return mixable;
    }
  }]);

  return Mixin;
}();

exports.Mixin = Mixin;
Mixin.Constructor = Constructor;
  })();
});

require.register("curvature/base/Router.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = void 0;

var _View = require("./View");

var _Cache = require("./Cache");

var _Config = require("./Config");

var _Routes = require("./Routes");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NotFoundError = Symbol('NotFound');
var InternalError = Symbol('Internal');

var Router = /*#__PURE__*/function () {
  function Router() {
    _classCallCheck(this, Router);
  }

  _createClass(Router, null, [{
    key: "wait",
    value: function wait(view) {
      var _this = this;

      var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DOMContentLoaded';
      var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      node.addEventListener(event, function () {
        _this.listen(view);
      });
    }
  }, {
    key: "listen",
    value: function listen(listener) {
      var _this2 = this;

      var routes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.routes = routes || listener.routes;
      Object.assign(this.query, this.queryOver({}));

      var listen = function listen(event) {
        event.preventDefault();

        if (event.state && 'routedId' in event.state) {
          if (event.state.routedId <= _this2.routeCount) {
            _this2.history.splice(event.state.routedId);

            _this2.routeCount = event.state.routedId;
          } else if (event.state.routedId > _this2.routeCount) {
            _this2.history.push(event.state.prev);

            _this2.routeCount = event.state.routedId;
          }

          _this2.state = event.state;
        } else {
          if (_this2.prevPath !== null && _this2.prevPath !== location.pathname) {
            _this2.history.push(_this2.prevPath);
          }
        }

        if (location.origin !== 'null') {
          _this2.match(location.pathname, listener);
        } else {
          _this2.match(_this2.nextPath, listener);
        }

        for (var i in _this2.query) {
          delete _this2.query[i];
        }

        Object.assign(_this2.query, _this2.queryOver({}));
      };

      window.addEventListener('popstate', listen);
      window.addEventListener('cvUrlChanged', listen);
      var route = location.origin !== 'null' ? location.pathname + location.search : false;

      if (location.origin && location.hash) {
        route += location.hash;
      }

      var state = {
        routedId: this.routeCount,
        url: location.pathname,
        prev: this.prevPath
      };
      history.replaceState(state, null, location.pathname);
      this.go(route !== false ? route : '/');
    }
  }, {
    key: "go",
    value: function go(path, silent) {
      var configTitle = _Config.Config.get('title');

      if (configTitle) {
        document.title = configTitle;
      }

      var state = {
        routedId: this.routeCount,
        prev: this.prevPath,
        url: location.pathname
      };

      if (location.origin === 'null') {
        this.nextPath = path;
      } else if (silent === 2 && location.pathname !== path) {
        history.replaceState(state, null, path);
      } else if (location.pathname !== path) {
        history.pushState(state, null, path);
      }

      if (!silent) {
        if (silent === false) {
          this.path = null;
        }

        if (path.substring(0, 1) === '#') {
          window.dispatchEvent(new HashChangeEvent('hashchange'));
        } else {
          window.dispatchEvent(new CustomEvent('cvUrlChanged'));
        }
      }

      for (var i in this.query) {
        delete this.query[i];
      }

      Object.assign(this.query, this.queryOver({}));
      this.prevPath = path;
    }
  }, {
    key: "match",
    value: function match(path, listener) {
      var _this3 = this;

      var forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (this.path === path && !forceRefresh) {
        return;
      }

      this.queryString = location.search;
      this.path = path;
      var prev = this.prevPath;
      var current = listener.args.content;

      var routes = this.routes || listener.routes || _Routes.Routes.dump();

      var query = new URLSearchParams(location.search);

      for (var i in this.query) {
        delete this.query[i];
      }

      Object.assign(this.query, this.queryOver({}));
      var args = {},
          selected = false,
          result = '';
      path = path.substr(1).split('/');

      for (var _i in this.query) {
        args[_i] = this.query[_i];
      }

      L1: for (var _i2 in routes) {
        var route = _i2.split('/');

        if (route.length < path.length && route[route.length - 1] !== '*') {
          continue;
        }

        L2: for (var j in route) {
          if (route[j].substr(0, 1) == '%') {
            var argName = null;
            var groups = /^%(\w+)\??/.exec(route[j]);

            if (groups && groups[1]) {
              argName = groups[1];
            }

            if (!argName) {
              throw new Error("".concat(route[j], " is not a valid argument segment in route \"").concat(_i2, "\""));
            }

            if (!path[j]) {
              if (route[j].substr(route[j].length - 1, 1) == '?') {
                args[argName] = '';
              } else {
                continue L1;
              }
            } else {
              args[argName] = path[j];
            }
          } else if (route[j] !== '*' && path[j] !== route[j]) {
            continue L1;
          }
        }

        selected = _i2;
        result = routes[_i2];

        if (route[route.length - 1] === '*') {
          args.pathparts = path.slice(route.length - 1);
        }

        break;
      }

      var eventStart = new CustomEvent('cvRouteStart', {
        cancelable: true,
        detail: {
          path: path,
          prev: prev,
          root: listener,
          selected: selected,
          routes: routes
        }
      });

      if (!document.dispatchEvent(eventStart)) {
        return;
      }

      if (!forceRefresh && listener && current && result instanceof Object && current instanceof result && !(result instanceof Promise) && current.update(args)) {
        listener.args.content = current;
        return true;
      }

      try {
        if (!(selected in routes)) {
          routes[selected] = routes[NotFoundError];
        }

        var processRoute = function processRoute(selected) {
          var result = false;

          if (typeof routes[selected] === 'function') {
            if (routes[selected].prototype instanceof _View.View) {
              result = new routes[selected](args);
            } else {
              result = routes[selected](args);
            }
          } else {
            result = routes[selected];
          }

          return result;
        };

        result = processRoute(selected);

        if (result === false) {
          result = processRoute(NotFoundError);
        }

        if (result instanceof Promise) {
          return result.then(function (realResult) {
            _this3.update(listener, path, realResult, routes, selected, args, forceRefresh);
          })["catch"](function (error) {
            document.dispatchEvent(new CustomEvent('cvRouteError', {
              detail: {
                error: error,
                path: path,
                prev: prev,
                view: listener,
                routes: routes,
                selected: selected
              }
            }));

            _this3.update(listener, path, window['devMode'] ? String(error) : 'Error: 500', routes, selected, args, forceRefresh);

            throw error;
          });
        } else {
          return this.update(listener, path, result, routes, selected, args, forceRefresh);
        }
      } catch (error) {
        document.dispatchEvent(new CustomEvent('cvRouteError', {
          detail: {
            error: error,
            path: path,
            prev: prev,
            view: listener,
            routes: routes,
            selected: selected
          }
        }));
        this.update(listener, path, window['devMode'] ? String(error) : 'Error: 500', routes, selected, args, forceRefresh);
        throw error;
      }
    }
  }, {
    key: "update",
    value: function update(listener, path, result, routes, selected, args, forceRefresh) {
      if (!listener) {
        return;
      }

      var prev = this.prevPath;
      var event = new CustomEvent('cvRoute', {
        cancelable: true,
        detail: {
          result: result,
          path: path,
          prev: prev,
          view: listener,
          routes: routes,
          selected: selected
        }
      });

      if (result !== false) {
        if (listener.args.content instanceof _View.View) {
          listener.args.content.pause(true);
          listener.args.content.remove();
        }

        if (document.dispatchEvent(event)) {
          listener.args.content = result;
        }

        if (result instanceof _View.View) {
          result.pause(false);
          result.update(args, forceRefresh);
        }
      }

      var eventEnd = new CustomEvent('cvRouteEnd', {
        cancelable: true,
        detail: {
          result: result,
          path: path,
          prev: prev,
          view: listener,
          routes: routes,
          selected: selected
        }
      });
      document.dispatchEvent(eventEnd);
    }
  }, {
    key: "queryOver",
    value: function queryOver() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var params = new URLSearchParams(location.search);
      var finalArgs = {};
      var query = {};

      var _iterator = _createForOfIteratorHelper(params),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var pair = _step.value;
          query[pair[0]] = pair[1];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      finalArgs = Object.assign(finalArgs, query, args);
      delete finalArgs['api'];
      return finalArgs; // for(let i in query)
      // {
      // 	finalArgs[i] = query[i];
      // }
      // for(let i in args)
      // {
      // 	finalArgs[i] = args[i];
      // }
    }
  }, {
    key: "queryToString",
    value: function queryToString() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parts = [],
          finalArgs = args;

      if (!fresh) {
        finalArgs = this.queryOver(args);
      }

      for (var i in finalArgs) {
        if (finalArgs[i] === '') {
          continue;
        }

        parts.push(i + '=' + encodeURIComponent(finalArgs[i]));
      }

      return parts.join('&');
    }
  }, {
    key: "setQuery",
    value: function setQuery(name, value, silent) {
      var args = this.queryOver();
      args[name] = value;

      if (value === undefined) {
        delete args[name];
      }

      var queryString = this.queryToString(args, true);
      this.go(location.pathname + (queryString ? '?' + queryString : ''), silent);
    }
  }]);

  return Router;
}();

exports.Router = Router;
Object.defineProperty(Router, 'query', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: {}
});
Object.defineProperty(Router, 'history', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: []
});
Object.defineProperty(Router, 'routeCount', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: 0
});
Object.defineProperty(Router, 'prevPath', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: null
});
Object.defineProperty(Router, 'queryString', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: null
});
Object.defineProperty(Router, 'InternalError', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: InternalError
});
Object.defineProperty(Router, 'NotFoundError', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: NotFoundError
});
  })();
});

require.register("curvature/base/Routes.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Routes = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AppRoutes = {};

try {
  Object.assign(AppRoutes, require('Routes').Routes || {});
} catch (error) {
  globalThis.devMode === true && console.warn(error);
}

var Routes = /*#__PURE__*/function () {
  function Routes() {
    _classCallCheck(this, Routes);
  }

  _createClass(Routes, null, [{
    key: "get",
    value: function get(name) {
      return this.routes[name];
    }
  }, {
    key: "dump",
    value: function dump() {
      return this.routes;
    }
  }]);

  return Routes;
}();

exports.Routes = Routes;
Object.defineProperty(Routes, 'routes', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: AppRoutes
});
  })();
});

require.register("curvature/base/RuleSet.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleSet = void 0;

var _Dom = require("./Dom");

var _Tag = require("./Tag");

var _View = require("./View");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RuleSet = /*#__PURE__*/function () {
  function RuleSet() {
    _classCallCheck(this, RuleSet);
  }

  _createClass(RuleSet, [{
    key: "add",
    value: function add(selector, callback) {
      this.rules = this.rules || {};
      this.rules[selector] = this.rules[selector] || [];
      this.rules[selector].push(callback);
      return this;
    }
  }, {
    key: "apply",
    value: function apply() {
      var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
      var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      RuleSet.apply(doc, view);

      for (var selector in this.rules) {
        for (var i in this.rules[selector]) {
          var callback = this.rules[selector][i];
          var wrapped = RuleSet.wrap(doc, callback, view);
          var nodes = doc.querySelectorAll(selector);

          var _iterator = _createForOfIteratorHelper(nodes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var node = _step.value;
              wrapped(node);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }
  }, {
    key: "purge",
    value: function purge() {
      if (!this.rules) {
        return;
      }

      for (var _i = 0, _Object$entries = Object.entries(this.rules); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            k = _Object$entries$_i[0],
            v = _Object$entries$_i[1];

        if (!this.rules[k]) {
          continue;
        }

        for (var kk in this.rules[k]) {
          delete this.rules[k][kk];
        }
      }
    }
  }], [{
    key: "add",
    value: function add(selector, callback) {
      this.globalRules = this.globalRules || {};
      this.globalRules[selector] = this.globalRules[selector] || [];
      this.globalRules[selector].push(callback);
      return this;
    }
  }, {
    key: "apply",
    value: function apply() {
      var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
      var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      for (var selector in this.globalRules) {
        for (var i in this.globalRules[selector]) {
          var callback = this.globalRules[selector][i];
          var wrapped = this.wrap(doc, callback, view);
          var nodes = doc.querySelectorAll(selector);

          var _iterator2 = _createForOfIteratorHelper(nodes),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var node = _step2.value;
              wrapped(node);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }
  }, {
    key: "wait",
    value: function wait() {
      var _this = this;

      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'DOMContentLoaded';
      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

      var listener = function (event, node) {
        return function () {
          node.removeEventListener(event, listener);
          return _this.apply();
        };
      }(event, node);

      node.addEventListener(event, listener);
    }
  }, {
    key: "wrap",
    value: function wrap(doc, originalCallback) {
      var view = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var callback = originalCallback;

      if (originalCallback instanceof _View.View || originalCallback && originalCallback.prototype && originalCallback.prototype instanceof _View.View) {
        callback = function callback() {
          return originalCallback;
        };
      }

      return function (element) {
        if (typeof element.___cvApplied___ === 'undefined') {
          Object.defineProperty(element, '___cvApplied___', {
            enumerable: false,
            writable: false,
            value: new WeakSet()
          });
        }

        if (element.___cvApplied___.has(originalCallback)) {
          return;
        }

        var direct, parentView;

        if (view) {
          direct = parentView = view;

          if (view.viewList) {
            parentView = view.viewList.parent;
          }
        }

        var tag = new _Tag.Tag(element, parentView, null, undefined, direct);
        var parent = tag.element.parentNode;
        var sibling = tag.element.nextSibling;
        var result = callback(tag);

        if (result !== false) {
          element.___cvApplied___.add(originalCallback);
        }

        if (result instanceof HTMLElement) {
          result = new _Tag.Tag(result);
        }

        if (result instanceof _Tag.Tag) {
          if (!result.element.contains(tag.element)) {
            while (tag.element.firstChild) {
              result.element.appendChild(tag.element.firstChild);
            }

            tag.remove();
          }

          if (sibling) {
            parent.insertBefore(result.element, sibling);
          } else {
            parent.appendChild(result.element);
          }
        }

        if (result && result.prototype && result.prototype instanceof _View.View) {
          result = new result({}, view);
        }

        if (result instanceof _View.View) {
          if (view) {
            view.cleanup.push(function (r) {
              return function () {
                r.remove();
              };
            }(result));
            view.cleanup.push(view.args.bindTo(function (v, k, t) {
              t[k] = v;
              result.args[k] = v;
            }));
            view.cleanup.push(result.args.bindTo(function (v, k, t, d) {
              t[k] = v;
              view.args[k] = v;
            }));
          }

          tag.clear();
          result.render(tag.element);
        }
      };
    }
  }]);

  return RuleSet;
}();

exports.RuleSet = RuleSet;
  })();
});

require.register("curvature/base/SetMap.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetMap = void 0;

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SetMap = /*#__PURE__*/function () {
  function SetMap() {
    _classCallCheck(this, SetMap);

    _defineProperty(this, "_map", new Map());
  }

  _createClass(SetMap, [{
    key: "has",
    value: function has(key) {
      return this._map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._map.get(key);
    }
  }, {
    key: "getOne",
    value: function getOne(key) {
      var set = this.get(key);

      var _iterator = _createForOfIteratorHelper(set),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          return entry;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "add",
    value: function add(key, value) {
      var set = this._map.get(key);

      if (!set) {
        this._map.set(key, set = new Set());
      }

      return set.add(value);
    }
  }, {
    key: "remove",
    value: function remove(key, value) {
      var set = this._map.get(key);

      if (!set) {
        return;
      }

      var res = set["delete"](value);

      if (!set.size) {
        this._map["delete"](key);
      }

      return res;
    }
  }, {
    key: "values",
    value: function values() {
      return _construct(Set, _toConsumableArray(_toConsumableArray(this._map.values()).map(function (set) {
        return _toConsumableArray(set.values());
      })));
    }
  }]);

  return SetMap;
}();

exports.SetMap = SetMap;
  })();
});

require.register("curvature/base/Tag.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tag = void 0;

var _Bindable = require("./Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Tag = /*#__PURE__*/function () {
  function Tag(element, parent, ref, index, direct) {
    var _this2 = this;

    _classCallCheck(this, Tag);

    if (typeof element === 'string') {
      var subdoc = document.createRange().createContextualFragment(element);
      element = subdoc.firstChild;
    }

    this.element = _Bindable.Bindable.makeBindable(element);
    this.node = this.element;
    this.parent = parent;
    this.direct = direct;
    this.ref = ref;
    this.index = index;
    this.cleanup = [];

    this[_Bindable.Bindable.OnAllGet] = function (name) {
      if (typeof _this2[name] === 'function') {
        return _this2[name];
      }

      if (_this2.node && typeof _this2.node[name] === 'function') {
        return function () {
          var _this2$node;

          return (_this2$node = _this2.node)[name].apply(_this2$node, arguments);
        };
      }

      if (_this2.node && name in _this2.node) {
        return _this2.node[name];
      }

      return _this2[name];
    };

    var generateStyler = function generateStyler(_this) {
      return _Bindable.Bindable.make(function (styles) {
        if (!_this.node) {
          return;
        }

        for (var property in styles) {
          if (property[0] === '-') {
            _this.node.style.setProperty(property, String(styles[property]));
          } else {
            _this.node.style[property] = String(styles[property]);
          }
        }
      });
    };

    this.style = generateStyler(this);
    this.proxy = _Bindable.Bindable.make(this);
    this.proxy.style.bindTo(function (v, k) {
      _this2.element.style[k] = v;
    });
    this.proxy.bindTo(function (v, k) {
      if (k in element) {
        element[k] = v;
      }

      return false;
    });
    return this.proxy;
  }

  _createClass(Tag, [{
    key: "attr",
    value: function attr(attributes) {
      for (var attribute in attributes) {
        if (attributes[attribute] === undefined) {
          this.node.removeAttribute(attribute);
        } else if (attributes[attribute] === null) {
          this.node.setAttribute(attribute, '');
        } else {
          this.node.setAttribute(attribute, attributes[attribute]);
        }
      }
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.node) {
        this.node.remove();
      }

      _Bindable.Bindable.clearBindings(this);

      var cleanup;

      while (cleanup = this.cleanup.shift()) {
        cleanup();
      }

      this.clear();

      if (!this.node) {
        return;
      }

      var detachEvent = new Event('cvDomDetached');
      this.node.dispatchEvent(detachEvent);
      this.node = this.element = this.ref = this.parent = undefined;
    }
  }, {
    key: "clear",
    value: function clear() {
      if (!this.node) {
        return;
      }

      var detachEvent = new Event('cvDomDetached');

      while (this.node.firstChild) {
        this.node.firstChild.dispatchEvent(detachEvent);
        this.node.removeChild(this.node.firstChild);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      var paused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    }
  }, {
    key: "listen",
    value: function listen(eventName, callback, options) {
      var node = this.node;
      node.addEventListener(eventName, callback, options);

      var remove = function remove() {
        node.removeEventListener(eventName, callback, options);
      };

      var remover = function remover() {
        remove();

        remove = function remove() {
          return console.warn('Already removed!');
        };
      };

      this.parent.onRemove(function () {
        return remover();
      });
      return remover;
    }
  }]);

  return Tag;
}();

exports.Tag = Tag;
  })();
});

require.register("curvature/base/View.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _Bindable = require("./Bindable");

var _ViewList = require("./ViewList");

var _Router = require("./Router");

var _Dom = require("./Dom");

var _Tag = require("./Tag");

var _Bag = require("./Bag");

var _RuleSet = require("./RuleSet");

var _Mixin = require("./Mixin");

var _PromiseMixin = require("../mixin/PromiseMixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var dontParse = Symbol('dontParse');
var expandBind = Symbol('expandBind');
var uuid = Symbol('uuid');
var moveIndex = 0;

var View = /*#__PURE__*/function (_Mixin$with) {
  _inherits(View, _Mixin$with);

  var _super = _createSuper(View);

  function View() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var mainView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, View);

    _this = _super.call(this, args, mainView);
    Object.defineProperty(_assertThisInitialized(_this), 'args', {
      value: _Bindable.Bindable.make(args)
    });
    Object.defineProperty(_assertThisInitialized(_this), uuid, {
      value: _this.constructor.uuid()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodesAttached', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodesDetached', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), '_onRemove', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'cleanup', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'parent', {
      value: mainView
    });
    Object.defineProperty(_assertThisInitialized(_this), 'views', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'viewLists', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'withViews', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'tags', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodes', {
      value: _Bindable.Bindable.make([])
    });
    Object.defineProperty(_assertThisInitialized(_this), 'timeouts', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'intervals', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'frames', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'ruleSet', {
      value: new _RuleSet.RuleSet()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'preRuleSet', {
      value: new _RuleSet.RuleSet()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'subBindings', {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), 'templates', {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), 'eventCleanup', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'unpauseCallbacks', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'interpolateRegex', {
      value: /(\[\[((?:\$+)?[\w\.\|-]+)\]\])/g
    });
    Object.defineProperty(_assertThisInitialized(_this), 'rendered', {
      value: new Promise(function (accept, reject) {
        return Object.defineProperty(_assertThisInitialized(_this), 'renderComplete', {
          value: accept
        });
      })
    });
    _this.loaded = Promise.resolve(_assertThisInitialized(_this));
    _this.template = "";
    _this.firstNode = null;
    _this.lastNode = null;
    _this.viewList = null;
    _this.mainView = null;
    _this.preserve = false;
    _this.removed = false; // return Bindable.make(this);

    return _this;
  }

  _createClass(View, [{
    key: "_id",
    get: function get() {
      return this[uuid];
    }
  }, {
    key: "onFrame",
    value: function onFrame(callback) {
      var _this2 = this;

      var stopped = false;

      var cancel = function cancel() {
        stopped = true;
      };

      var c = function c(timestamp) {
        if (_this2.removed || stopped) {
          return;
        }

        if (!_this2.paused) {
          callback(Date.now());
        }

        requestAnimationFrame(c);
      };

      requestAnimationFrame(function () {
        return c(Date.now());
      });
      this.frames.push(cancel);
      return cancel;
    }
  }, {
    key: "onNextFrame",
    value: function onNextFrame(callback) {
      return requestAnimationFrame(function () {
        return callback(Date.now());
      });
    }
  }, {
    key: "onIdle",
    value: function onIdle(callback) {
      return requestIdleCallback(function () {
        return callback(Date.now());
      });
    }
  }, {
    key: "onTimeout",
    value: function onTimeout(time, callback) {
      var _this3 = this;

      var timeoutInfo = {
        timeout: null,
        callback: null,
        time: time,
        fired: false,
        created: new Date().getTime(),
        paused: false
      };

      var wrappedCallback = function wrappedCallback() {
        callback();
        timeoutInfo.fired = true;

        _this3.timeouts["delete"](timeoutInfo.timeout);
      };

      var timeout = setTimeout(wrappedCallback, time);
      timeoutInfo.callback = wrappedCallback;
      timeoutInfo.timeout = timeout;
      this.timeouts.set(timeoutInfo.timeout, timeoutInfo);
      return timeout;
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout(_x) {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function (timeout) {
      var _iterator = _createForOfIteratorHelper(this.timeouts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              callback = _step$value[0],
              timeoutInfo = _step$value[1];

          clearTimeout(timeoutInfo.timeout);
          this.timeouts["delete"](timeoutInfo.timeout);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    })
  }, {
    key: "onInterval",
    value: function onInterval(time, callback) {
      var timeout = setInterval(callback, time);
      this.intervals.push({
        timeout: timeout,
        callback: callback,
        time: time,
        paused: false
      });
      return timeout;
    }
  }, {
    key: "clearInterval",
    value: function (_clearInterval) {
      function clearInterval(_x2) {
        return _clearInterval.apply(this, arguments);
      }

      clearInterval.toString = function () {
        return _clearInterval.toString();
      };

      return clearInterval;
    }(function (timeout) {
      for (var i in this.intervals) {
        if (timeout === this.intervals[i].timeout) {
          clearInterval(this.intervals[i].timeout);
          delete this.intervals[i];
        }
      }
    })
  }, {
    key: "pause",
    value: function pause() {
      var paused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (paused === undefined) {
        this.paused = !this.paused;
      }

      this.paused = paused;

      if (this.paused) {
        var _iterator2 = _createForOfIteratorHelper(this.timeouts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                callback = _step2$value[0],
                timeout = _step2$value[1];

            if (timeout.fired) {
              this.timeouts["delete"](timeout.timeout);
              continue;
            }

            clearTimeout(timeout.timeout);
            timeout.paused = true;
            timeout.time = Math.max(0, timeout.time - (Date.now() - timeout.created));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        for (var i in this.intervals) {
          clearInterval(this.intervals[i].timeout);
        }
      } else {
        var _iterator3 = _createForOfIteratorHelper(this.timeouts),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                _callback = _step3$value[0],
                _timeout = _step3$value[1];

            if (!_timeout.paused) {
              continue;
            }

            if (_timeout.fired) {
              this.timeouts["delete"](_timeout.timeout);
              continue;
            }

            _timeout.timeout = setTimeout(_timeout.callback, _timeout.time);
            _timeout.paused = false;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        for (var _i2 in this.intervals) {
          if (!this.intervals[_i2].timeout.paused) {
            continue;
          }

          this.intervals[_i2].timeout.paused = false;
          this.intervals[_i2].timeout = setInterval(this.intervals[_i2].callback, this.intervals[_i2].time);
        }

        var _iterator4 = _createForOfIteratorHelper(this.unpauseCallbacks),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _step4$value = _slicedToArray(_step4.value, 2),
                _callback2 = _step4$value[1];

            _callback2();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        this.unpauseCallbacks.clear();
      }

      var _iterator5 = _createForOfIteratorHelper(this.viewLists),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              tag = _step5$value[0],
              viewList = _step5$value[1];

          viewList.pause(!!paused);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      for (var _i3 in this.tags) {
        if (Array.isArray(this.tags[_i3])) {
          for (var j in this.tags[_i3]) {
            this.tags[_i3][j].pause(!!paused);
          }

          continue;
        }

        this.tags[_i3].pause(!!paused);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$nodes,
          _this4 = this;

      var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var insertPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (parentNode instanceof View) {
        parentNode = parentNode.firstNode.parentNode;
      }

      if (insertPoint instanceof View) {
        insertPoint = insertPoint.firstNode;
      }

      if (this.firstNode) {
        return this.reRender(parentNode, insertPoint);
      }

      this.dispatchEvent(new CustomEvent('render'));
      var templateParsed = this.template instanceof DocumentFragment ? this.template.cloneNode(true) : View.templates.has(this.template);
      var subDoc = templateParsed ? this.template instanceof DocumentFragment ? templateParsed : View.templates.get(this.template).cloneNode(true) : document.createRange().createContextualFragment(this.template);

      if (!templateParsed && !(this.template instanceof DocumentFragment)) {
        View.templates.set(this.template, subDoc.cloneNode(true));
      }

      this.mainView || this.preRuleSet.apply(subDoc, this);
      this.mapTags(subDoc);
      this.mainView || this.ruleSet.apply(subDoc, this);

      if (window.devMode === true) {
        this.firstNode = document.createComment("Template ".concat(this._id, " Start"));
        this.lastNode = document.createComment("Template ".concat(this._id, " End"));
      } else {
        this.firstNode = document.createTextNode('');
        this.lastNode = document.createTextNode('');
      }

      (_this$nodes = this.nodes).push.apply(_this$nodes, [this.firstNode].concat(_toConsumableArray(Array.from(subDoc.childNodes)), [this.lastNode]));

      this.postRender(parentNode);
      this.dispatchEvent(new CustomEvent('rendered'));

      if (!this.dispatchAttach()) {
        return;
      }

      if (parentNode) {
        var rootNode = parentNode.getRootNode();
        var moveType = 'internal';
        var toRoot = false;

        if (rootNode.isConnected) {
          moveType = 'external';
          toRoot = true;
        }

        if (insertPoint) {
          parentNode.insertBefore(this.firstNode, insertPoint);
          parentNode.insertBefore(this.lastNode, insertPoint);
        } else {
          parentNode.appendChild(this.firstNode);
          parentNode.appendChild(this.lastNode);
        }

        parentNode.insertBefore(subDoc, this.lastNode);
        moveIndex++;

        if (toRoot) {
          this.attached(rootNode, parentNode);
          this.dispatchAttached(rootNode, parentNode);
        } else {
          var firstDomAttach = function firstDomAttach(event) {
            if (!event.target.isConnected) {
              return;
            }

            _this4.attached(rootNode, parentNode);

            _this4.dispatchAttached(rootNode, parentNode);

            parentNode.removeEventListener('cvDomAttached', firstDomAttach);
          };

          parentNode.addEventListener('cvDomAttached', firstDomAttach);
        }
      }

      this.renderComplete(this.nodes);
      return this.nodes;
    }
  }, {
    key: "dispatchAttach",
    value: function dispatchAttach() {
      return this.dispatchEvent(new CustomEvent('attach', {
        cancelable: true,
        target: this
      }));
    }
  }, {
    key: "dispatchAttached",
    value: function dispatchAttached(rootNode, parentNode) {
      var view = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      this.dispatchEvent(new CustomEvent('attached', {
        detail: {
          view: view || this,
          node: parentNode,
          root: rootNode,
          mainView: this
        }
      }));
      var attach = this.nodesAttached.items();

      for (var i in attach) {
        attach[i](rootNode, parentNode);
      }

      this.dispatchDomAttached(view);
    }
  }, {
    key: "dispatchDomAttached",
    value: function dispatchDomAttached(view) {
      var _this5 = this;

      this.nodes.filter(function (n) {
        return n.nodeType !== Node.COMMENT_NODE;
      }).map(function (child) {
        if (!child.matches) {
          return;
        }

        _Dom.Dom.mapTags(child, false, function (tag, walker) {
          if (!tag.matches) {
            return;
          }

          tag.dispatchEvent(new CustomEvent('cvDomAttached', {
            target: tag,
            detail: {
              view: view || _this5,
              mainView: _this5
            }
          }));
        });

        child.dispatchEvent(new CustomEvent('cvDomAttached', {
          target: child,
          detail: {
            view: view || _this5,
            mainView: _this5
          }
        }));
      });
    }
  }, {
    key: "reRender",
    value: function reRender(parentNode, insertPoint) {
      var willReRender = this.dispatchEvent(new CustomEvent('reRender'), {
        cancelable: true,
        target: this
      });

      if (!willReRender) {
        return;
      }

      var subDoc = new DocumentFragment();

      if (this.firstNode.isConnected) {
        var detach = this.nodesDetached.items();

        for (var i in detach) {
          detach[i]();
        }
      }

      subDoc.append.apply(subDoc, _toConsumableArray(this.nodes));

      if (parentNode) {
        if (insertPoint) {
          parentNode.insertBefore(this.firstNode, insertPoint);
          parentNode.insertBefore(this.lastNode, insertPoint);
        } else {
          parentNode.appendChild(this.firstNode);
          parentNode.appendChild(this.lastNode);
        }

        parentNode.insertBefore(subDoc, this.lastNode);
        this.dispatchEvent(new CustomEvent('reRendered'), {
          cancelable: true,
          target: this
        });
        var rootNode = parentNode.getRootNode();

        if (rootNode.isConnected) {
          this.attached(rootNode, parentNode);
          this.dispatchAttached(rootNode, parentNode);
        }
      }

      return this.nodes;
    }
  }, {
    key: "mapTags",
    value: function mapTags(subDoc) {
      var _this6 = this;

      _Dom.Dom.mapTags(subDoc, false, function (tag, walker) {
        if (tag[dontParse]) {
          return;
        }

        if (tag.matches) {
          tag = _this6.mapInterpolatableTag(tag);
          tag = tag.matches('[cv-template]') && _this6.mapTemplateTag(tag) || tag;
          tag = tag.matches('[cv-slot]') && _this6.mapSlotTag(tag) || tag;
          tag = tag.matches('[cv-prerender]') && _this6.mapPrendererTag(tag) || tag;
          tag = tag.matches('[cv-link]') && _this6.mapLinkTag(tag) || tag;
          tag = tag.matches('[cv-attr]') && _this6.mapAttrTag(tag) || tag;
          tag = tag.matches('[cv-expand]') && _this6.mapExpandableTag(tag) || tag;
          tag = tag.matches('[cv-ref]') && _this6.mapRefTag(tag) || tag;
          tag = tag.matches('[cv-on]') && _this6.mapOnTag(tag) || tag;
          tag = tag.matches('[cv-each]') && _this6.mapEachTag(tag) || tag;
          tag = tag.matches('[cv-bind]') && _this6.mapBindTag(tag) || tag;
          tag = tag.matches('[cv-with]') && _this6.mapWithTag(tag) || tag;
          tag = tag.matches('[cv-if]') && _this6.mapIfTag(tag) || tag;
          tag = tag.matches('[cv-view]') && _this6.mapViewTag(tag) || tag;
        } else {
          tag = _this6.mapInterpolatableTag(tag);
        }

        if (tag !== walker.currentNode) {
          walker.currentNode = tag;
        }
      });
    }
  }, {
    key: "mapExpandableTag",
    value: function mapExpandableTag(tag) {
      /*/
      const tagCompiler = this.compileExpandableTag(tag);
      	const newTag = tagCompiler(this);
      	tag.replaceWith(newTag);
      	return newTag;
      /*/
      var existing = tag[expandBind];

      if (existing) {
        existing();
        tag[expandBind] = false;
      }

      var _Bindable$resolve = _Bindable.Bindable.resolve(this.args, tag.getAttribute('cv-expand'), true),
          _Bindable$resolve2 = _slicedToArray(_Bindable$resolve, 2),
          proxy = _Bindable$resolve2[0],
          expandProperty = _Bindable$resolve2[1];

      tag.removeAttribute('cv-expand');

      if (!proxy[expandProperty]) {
        proxy[expandProperty] = {};
      }

      proxy[expandProperty] = _Bindable.Bindable.make(proxy[expandProperty]);
      this.onRemove(tag[expandBind] = proxy[expandProperty].bindTo(function (v, k, t, d, p) {
        if (d || v === undefined) {
          tag.removeAttribute(k, v);
          return;
        }

        if (v === null) {
          tag.setAttribute(k, '');
          return;
        }

        tag.setAttribute(k, v);
      })); // let expandProperty = tag.getAttribute('cv-expand');
      // let expandArg = Bindable.makeBindable(
      // 	this.args[expandProperty] || {}
      // );
      // tag.removeAttribute('cv-expand');
      // for(let i in expandArg)
      // {
      // 	if(i === 'name' || i === 'type')
      // 	{
      // 		continue;
      // 	}
      // 	let debind = expandArg.bindTo(i, ((tag,i)=>(v)=>{
      // 		tag.setAttribute(i, v);
      // 	})(tag,i));
      // 	this.onRemove(()=>{
      // 		debind();
      // 		if(expandArg.isBound())
      // 		{
      // 			Bindable.clearBindings(expandArg);
      // 		}
      // 	});
      // }

      return tag; //*/
    }
  }, {
    key: "compileExpandableTag",
    value: function compileExpandableTag(sourceTag) {
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);
        var expandProperty = tag.getAttribute('cv-expand');

        var expandArg = _Bindable.Bindable.make(bindingView.args[expandProperty] || {});

        tag.removeAttribute('cv-expand');

        var _loop = function _loop(i) {
          if (i === 'name' || i === 'type') {
            return "continue";
          }

          var debind = expandArg.bindTo(i, function (tag, i) {
            return function (v) {
              tag.setAttribute(i, v);
            };
          }(tag, i));
          bindingView.onRemove(function () {
            debind();

            if (expandArg.isBound()) {
              _Bindable.Bindable.clearBindings(expandArg);
            }
          });
        };

        for (var i in expandArg) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return tag;
      };
    }
  }, {
    key: "mapAttrTag",
    value: function mapAttrTag(tag) {
      //*/
      var tagCompiler = this.compileAttrTag(tag);
      var newTag = tagCompiler(this);
      tag.replaceWith(newTag);
      return newTag;
      /*/
      	let attrProperty = tag.getAttribute('cv-attr');
      	tag.removeAttribute('cv-attr');
      	let pairs = attrProperty.split(',');
      let attrs = pairs.map((p) => p.split(':'));
      	for (let i in attrs)
      {
      	let proxy        = this.args;
      	let bindProperty = attrs[i][1];
      	let property     = bindProperty;
      		if(bindProperty.match(/\./))
      	{
      		[proxy, property] = Bindable.resolve(
      			this.args
      			, bindProperty
      			, true
      		);
      	}
      		let attrib = attrs[i][0];
      		this.onRemove(proxy.bindTo(
      		property
      		, (v)=>{
      			if(v == null)
      			{
      				tag.setAttribute(attrib, '');
      				return;
      			}
      			tag.setAttribute(attrib, v);
      		}
      	));
      }
      	return tag;
      	//*/
    }
  }, {
    key: "compileAttrTag",
    value: function compileAttrTag(sourceTag) {
      var attrProperty = sourceTag.getAttribute('cv-attr');
      var pairs = attrProperty.split(',');
      var attrs = pairs.map(function (p) {
        return p.split(':');
      });
      sourceTag.removeAttribute('cv-attr');
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);

        var _loop2 = function _loop2(i) {
          var bindProperty = attrs[i][1] || attrs[i][0];

          var _Bindable$resolve3 = _Bindable.Bindable.resolve(bindingView.args, bindProperty, true),
              _Bindable$resolve4 = _slicedToArray(_Bindable$resolve3, 2),
              proxy = _Bindable$resolve4[0],
              property = _Bindable$resolve4[1];

          var attrib = attrs[i][0];
          bindingView.onRemove(proxy.bindTo(property, function (v, k, t, d) {
            if (d || v === undefined) {
              tag.removeAttribute(attrib, v);
              return;
            }

            if (v === null) {
              tag.setAttribute(attrib, '');
              return;
            }

            tag.setAttribute(attrib, v);
          }));
        };

        for (var i in attrs) {
          _loop2(i);
        }

        return tag;
      };
    }
  }, {
    key: "mapInterpolatableTag",
    value: function mapInterpolatableTag(tag) {
      var _this7 = this;

      var regex = this.interpolateRegex;

      if (tag.nodeType === Node.TEXT_NODE) {
        var original = tag.nodeValue;

        if (!this.interpolatable(original)) {
          return tag;
        }

        var header = 0;
        var match;

        var _loop3 = function _loop3() {
          var bindProperty = match[2];
          var unsafeHtml = false;
          var unsafeView = false;
          var propertySplit = bindProperty.split('|');
          var transformer = false;

          if (propertySplit.length > 1) {
            transformer = _this7.stringTransformer(propertySplit.slice(1));
            bindProperty = propertySplit[0];
          }

          if (bindProperty.substr(0, 2) === '$$') {
            unsafeHtml = true;
            unsafeView = true;
            bindProperty = bindProperty.substr(2);
          }

          if (bindProperty.substr(0, 1) === '$') {
            unsafeHtml = true;
            bindProperty = bindProperty.substr(1);
          }

          if (bindProperty.substr(0, 3) === '000') {
            expand = true;
            bindProperty = bindProperty.substr(3);
            return "continue";
          }

          var staticPrefix = original.substring(header, match.index);
          header = match.index + match[1].length;
          var staticNode = document.createTextNode(staticPrefix);
          staticNode[dontParse] = true;
          tag.parentNode.insertBefore(staticNode, tag);
          var dynamicNode = void 0;

          if (unsafeHtml) {
            dynamicNode = document.createElement('div');
          } else {
            dynamicNode = document.createTextNode('');
          }

          dynamicNode[dontParse] = true;
          var proxy = _this7.args;
          var property = bindProperty;

          if (bindProperty.match(/\./)) {
            var _Bindable$resolve5 = _Bindable.Bindable.resolve(_this7.args, bindProperty, true);

            var _Bindable$resolve6 = _slicedToArray(_Bindable$resolve5, 2);

            proxy = _Bindable$resolve6[0];
            property = _Bindable$resolve6[1];
          }

          tag.parentNode.insertBefore(dynamicNode, tag);

          if (_typeof(proxy) !== 'object') {
            return "break";
          }

          proxy = _Bindable.Bindable.make(proxy);
          var debind = proxy.bindTo(property, function (v, k, t) {
            if (t[k] !== v && (t[k] instanceof View || t[k] instanceof Node || t[k] instanceof _Tag.Tag)) {
              if (!t[k].preserve) {
                t[k].remove();
              }
            }

            dynamicNode.nodeValue = '';

            if (unsafeView && !(v instanceof View)) {
              var unsafeTemplate = v;
              v = new View(_this7.args, _this7);
              v.template = unsafeTemplate;
            }

            if (transformer) {
              v = transformer(v);
            }

            if (v instanceof View) {
              var onAttach = function onAttach(rootNode, parentNode) {
                v.dispatchDomAttached(_this7); // if(v.nodes.length && v.dispatchAttach())
                // {
                // 	v.attached(rootNode, parentNode, this);
                // 	v.dispatchAttached(rootNode, parentNode, this);
                // }
              };

              _this7.nodesAttached.add(onAttach);

              v.render(tag.parentNode, dynamicNode);

              var cleanup = function cleanup() {
                if (!v.preserve) {
                  v.remove();
                }
              };

              _this7.onRemove(cleanup);

              v.onRemove(function () {
                _this7.nodesAttached.remove(onAttach);

                _this7._onRemove.remove(cleanup);
              });
            } else if (v instanceof Node) {
              tag.parentNode.insertBefore(v, dynamicNode);

              _this7.onRemove(function () {
                return v.remove();
              });
            } else if (v instanceof _Tag.Tag) {
              tag.parentNode.insertBefore(v.node, dynamicNode);

              _this7.onRemove(function () {
                return v.remove();
              });
            } else {
              if (v instanceof Object && v.__toString instanceof Function) {
                v = v.__toString();
              }

              if (unsafeHtml) {
                dynamicNode.innerHTML = v;
              } else {
                dynamicNode.nodeValue = v;
              }
            }

            dynamicNode[dontParse] = true;
          });

          _this7.onRemove(debind);
        };

        while (match = regex.exec(original)) {
          var _ret2 = _loop3();

          if (_ret2 === "continue") continue;
          if (_ret2 === "break") break;
        }

        var staticSuffix = original.substring(header);
        var staticNode = document.createTextNode(staticSuffix);
        staticNode[dontParse] = true;
        tag.parentNode.insertBefore(staticNode, tag);
        tag.nodeValue = '';
      } else if (tag.nodeType === Node.ELEMENT_NODE) {
        var _loop4 = function _loop4(i) {
          if (!_this7.interpolatable(tag.attributes[i].value)) {
            return "continue";
          }

          var header = 0;
          var match = void 0;
          var original = tag.attributes[i].value;
          var attribute = tag.attributes[i];
          var bindProperties = {};
          var segments = [];

          while (match = regex.exec(original)) {
            segments.push(original.substring(header, match.index));

            if (!bindProperties[match[2]]) {
              bindProperties[match[2]] = [];
            }

            bindProperties[match[2]].push(segments.length);
            segments.push(match[1]);
            header = match.index + match[1].length;
          }

          segments.push(original.substring(header));

          var _loop5 = function _loop5(j) {
            var proxy = _this7.args;
            var property = j;
            var propertySplit = j.split('|');
            var transformer = false;
            var longProperty = j;

            if (propertySplit.length > 1) {
              transformer = _this7.stringTransformer(propertySplit.slice(1));
              property = propertySplit[0];
            }

            if (property.match(/\./)) {
              var _Bindable$resolve7 = _Bindable.Bindable.resolve(_this7.args, property, true);

              var _Bindable$resolve8 = _slicedToArray(_Bindable$resolve7, 2);

              proxy = _Bindable$resolve8[0];
              property = _Bindable$resolve8[1];
            }

            var matching = [];
            var bindProperty = j;
            var matchingSegments = bindProperties[longProperty]; // const changeAttribute = (v, k, t, d) => {
            // 	tag.setAttribute(attribute.name, segments.join(''));
            // };

            _this7.onRemove(proxy.bindTo(property, function (v, k, t, d) {
              if (transformer) {
                v = transformer(v);
              }

              for (var _i4 in bindProperties) {
                for (var _j in bindProperties[longProperty]) {
                  segments[bindProperties[longProperty][_j]] = t[_i4];

                  if (k === property) {
                    segments[bindProperties[longProperty][_j]] = v;
                  }
                }
              }

              if (!_this7.paused) {
                // changeAttribute(v,k,t,d);
                tag.setAttribute(attribute.name, segments.join(''));
              } else {
                // this.unpauseCallbacks.set(attribute, () => changeAttribute(v,k,t,d));
                _this7.unpauseCallbacks.set(attribute, function () {
                  return tag.setAttribute(attribute.name, segments.join(''));
                });
              }
            }));

            _this7.onRemove(function () {
              if (!proxy.isBound()) {
                _Bindable.Bindable.clearBindings(proxy);
              }
            });
          };

          for (var j in bindProperties) {
            _loop5(j);
          }
        };

        for (var i = 0; i < tag.attributes.length; i++) {
          var _ret3 = _loop4(i);

          if (_ret3 === "continue") continue;
        }
      }

      return tag;
    }
  }, {
    key: "mapRefTag",
    value: function mapRefTag(tag) {
      var refAttr = tag.getAttribute('cv-ref');

      var _refAttr$split = refAttr.split(':'),
          _refAttr$split2 = _slicedToArray(_refAttr$split, 3),
          refProp = _refAttr$split2[0],
          _refAttr$split2$ = _refAttr$split2[1],
          refClassname = _refAttr$split2$ === void 0 ? null : _refAttr$split2$,
          _refAttr$split2$2 = _refAttr$split2[2],
          refKey = _refAttr$split2$2 === void 0 ? null : _refAttr$split2$2;

      var refClass = _Tag.Tag;

      if (refClassname) {
        refClass = this.stringToClass(refClassname);
      }

      tag.removeAttribute('cv-ref');
      Object.defineProperty(tag, '___tag___', {
        enumerable: false,
        writable: true
      });
      this.onRemove(function () {
        tag.___tag___ = null;
        tag.remove();
      });
      var parent = this;
      var direct = this;

      if (this.viewList) {
        parent = this.viewList.parent; // if(!this.viewList.parent.tags[refProp])
        // {
        // 	this.viewList.parent.tags[refProp] = [];
        // }
        // let refKeyVal = this.args[refKey];
        // this.viewList.parent.tags[refProp][refKeyVal] = new refClass(
        // 	tag, this, refProp, refKeyVal
        // );
      } else {// this.tags[refProp] = new refClass(
          // 	tag, this, refProp
          // );
        }

      var tagObject = new refClass(tag, this, refProp, undefined, direct);
      tag.___tag___ = tagObject;
      this.tags[refProp] = tagObject;

      while (parent) {
        if (!parent.parent) {}

        var refKeyVal = this.args[refKey];

        if (refKeyVal !== undefined) {
          if (!parent.tags[refProp]) {
            parent.tags[refProp] = [];
          }

          parent.tags[refProp][refKeyVal] = tagObject;
        } else {
          parent.tags[refProp] = tagObject;
        }

        parent = parent.parent;
      }

      return tag;
    }
  }, {
    key: "mapBindTag",
    value: function mapBindTag(tag) {
      var _this8 = this;

      var bindArg = tag.getAttribute('cv-bind');
      var proxy = this.args;
      var property = bindArg;
      var top = null;

      if (bindArg.match(/\./)) {
        var _Bindable$resolve9 = _Bindable.Bindable.resolve(this.args, bindArg, true);

        var _Bindable$resolve10 = _slicedToArray(_Bindable$resolve9, 3);

        proxy = _Bindable$resolve10[0];
        property = _Bindable$resolve10[1];
        top = _Bindable$resolve10[2];
      }

      if (proxy !== this.args) {
        this.subBindings[bindArg] = this.subBindings[bindArg] || [];
        this.onRemove(this.args.bindTo(top, function () {
          while (_this8.subBindings.length) {
            _this8.subBindings.shift()();
          }
        }));
      }

      var unsafeHtml = false;

      if (property.substr(0, 1) === '$') {
        property = property.substr(1);
        unsafeHtml = true;
      }

      var debind = proxy.bindTo(property, function (v, k, t, d, p) {
        if ((p instanceof View || p instanceof Node || p instanceof _Tag.Tag) && p !== v) {
          p.remove();
        }

        var autoChangedEvent = new CustomEvent('cvAutoChanged', {
          bubbles: true
        });

        if (['INPUT', 'SELECT', 'TEXTAREA'].includes(tag.tagName)) {
          var _type = tag.getAttribute('type');

          if (_type && _type.toLowerCase() === 'checkbox') {
            tag.checked = !!v;
            tag.dispatchEvent(autoChangedEvent);
          } else if (_type && _type.toLowerCase() === 'radio') {
            tag.checked = v == tag.value;
            tag.dispatchEvent(autoChangedEvent);
          } else if (_type !== 'file') {
            if (tag.tagName === 'SELECT') {
              var selectOption = function selectOption() {
                for (var i = 0; i < tag.options.length; i++) {
                  var option = tag.options[i];

                  if (option.value == v) {
                    tag.selectedIndex = i;
                  }
                }
              };

              selectOption();

              _this8.nodesAttached.add(selectOption);
            } else {
              tag.value = v == null ? '' : v;
            }

            tag.dispatchEvent(autoChangedEvent);
          }
        } else {
          if (v instanceof View) {
            var _iterator6 = _createForOfIteratorHelper(tag.childNodes),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var node = _step6.value;
                node.remove();
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }

            var onAttach = function onAttach(parentNode) {
              v.dispatchDomAttached(_this8); // if(v.nodes.length && v.dispatchAttach())
              // {
              // 	v.attached(parentNode.getRootNode(), parentNode, this);
              // 	v.dispatchAttached(parentNode.getRootNode(), parentNode, this);
              // }
            };

            _this8.nodesAttached.add(onAttach);

            v.render(tag);
            v.onRemove(function () {
              return _this8.nodesAttached.remove(onAttach);
            });
          } else if (v instanceof Node) {
            tag.insert(v);
          } else if (v instanceof _Tag.Tag) {
            tag.append(v.node);
          } else if (unsafeHtml) {
            if (tag.innerHTML !== v) {
              v = String(v);

              if (tag.innerHTML === v.substring(0, tag.innerHTML.length)) {
                tag.innerHTML += v.substring(tag.innerHTML.length);
              } else {
                var _iterator7 = _createForOfIteratorHelper(tag.childNodes),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var _node = _step7.value;

                    _node.remove();
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }

                tag.innerHTML = v;
              }

              _Dom.Dom.mapTags(tag, false, function (t) {
                return t[dontParse] = true;
              });
            }
          } else {
            if (tag.textContent !== v) {
              var _iterator8 = _createForOfIteratorHelper(tag.childNodes),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var _node2 = _step8.value;

                  _node2.remove();
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }

              tag.textContent = v;
            }
          }
        }
      });

      if (proxy !== this.args) {
        this.subBindings[bindArg].push(debind);
      }

      this.onRemove(debind);
      var type = tag.getAttribute('type');
      var multi = tag.getAttribute('multiple');

      var inputListener = function inputListener(event) {
        if (event.target !== tag) {
          return;
        }

        if (type && type.toLowerCase() === 'checkbox') {
          if (tag.checked) {
            proxy[property] = event.target.getAttribute('value');
          } else {
            proxy[property] = false;
          }
        } else if (event.target.matches('[contenteditable=true]')) {
          proxy[property] = event.target.innerHTML;
        } else if (type === 'file' && multi) {
          var files = Array.from(event.target.files);

          var current = proxy[property] || _Bindable.Bindable.onDeck(proxy, property);

          if (!current || !files.length) {
            proxy[property] = files;
          } else {
            var _loop6 = function _loop6(i) {
              if (files[i] !== current[i]) {
                files[i].toJSON = function () {
                  return {
                    name: file[i].name,
                    size: file[i].size,
                    type: file[i].type,
                    date: file[i].lastModified
                  };
                };

                current[i] = files[i];
                return "break";
              }
            };

            for (var i in files) {
              var _ret4 = _loop6(i);

              if (_ret4 === "break") break;
            }
          }
        } else if (type === 'file' && !multi && event.target.files.length) {
          var _file = event.target.files.item(0);

          _file.toJSON = function () {
            return {
              name: _file.name,
              size: _file.size,
              type: _file.type,
              date: _file.lastModified
            };
          };

          proxy[property] = _file;
        } else {
          proxy[property] = event.target.value;
        }
      };

      if (type === 'file' || type === 'radio') {
        tag.addEventListener('change', inputListener);
      } else {
        tag.addEventListener('input', inputListener);
        tag.addEventListener('change', inputListener);
        tag.addEventListener('value-changed', inputListener);
      }

      this.onRemove(function () {
        if (type === 'file' || type === 'radio') {
          tag.removeEventListener('change', inputListener);
        } else {
          tag.removeEventListener('input', inputListener);
          tag.removeEventListener('change', inputListener);
          tag.removeEventListener('value-changed', inputListener);
        }
      });
      tag.removeAttribute('cv-bind');
      return tag;
    }
  }, {
    key: "mapOnTag",
    value: function mapOnTag(tag) {
      var _this9 = this;

      var referents = String(tag.getAttribute('cv-on'));
      referents.split(';').map(function (a) {
        return a.split(':');
      }).map(function (a) {
        a = a.map(function (a) {
          return a.trim();
        });
        var argLen = a.length;
        var eventName = String(a.shift()).trim();
        var callbackName = String(a.shift() || eventName).trim();
        var eventFlags = String(a.shift() || '').trim();
        var argList = [];
        var groups = /(\w+)(?:\(([$\w\s-'",]+)\))?/.exec(callbackName);

        if (groups) {
          callbackName = groups[1].replace(/(^[\s\n]+|[\s\n]+$)/, '');

          if (groups[2]) {
            argList = groups[2].split(',').map(function (s) {
              return s.trim();
            });
          }

          if (groups.length) {}
        } else {
          argList.push('$event');
        }

        if (!eventName || argLen === 1) {
          eventName = callbackName;
        }

        var eventMethod;
        var parent = _this9;

        while (parent) {
          if (typeof parent[callbackName] === 'function') {
            var _ret5 = function () {
              var _parent = parent;
              var _callBackName = callbackName;

              eventMethod = function eventMethod() {
                _parent[_callBackName].apply(_parent, arguments);
              };

              return "break";
            }();

            if (_ret5 === "break") break;
          }

          if (parent.parent) {
            parent = parent.parent;
          } else {
            break;
          }
        }

        var eventListener = function eventListener(event) {
          var argRefs = argList.map(function (arg) {
            var match;

            if (Number(arg) == arg) {
              return arg;
            } else if (arg === 'event' || arg === '$event') {
              return event;
            } else if (arg === '$view') {
              return parent;
            } else if (arg === '$tag') {
              return tag;
            } else if (arg === '$parent') {
              return _this9.parent;
            } else if (arg === '$subview') {
              return _this9;
            } else if (arg in _this9.args) {
              return _this9.args[arg];
            } else if (match = /^['"]([\w-]+?)["']$/.exec(arg)) {
              return match[1];
            }
          });

          if (!(typeof eventMethod === 'function')) {
            throw new Error("".concat(callbackName, " is not defined on View object.") + "\n" + "Tag:" + "\n" + "".concat(tag.outerHTML));
          }

          eventMethod.apply(void 0, _toConsumableArray(argRefs));
        };

        var eventOptions = {};

        if (eventFlags.includes('p')) {
          eventOptions.passive = true;
        } else if (eventFlags.includes('P')) {
          eventOptions.passive = false;
        }

        if (eventFlags.includes('c')) {
          eventOptions.capture = true;
        } else if (eventFlags.includes('C')) {
          eventOptions.capture = false;
        }

        if (eventFlags.includes('o')) {
          eventOptions.once = true;
        } else if (eventFlags.includes('O')) {
          eventOptions.once = false;
        }

        switch (eventName) {
          case '_init':
            eventListener();
            break;

          case '_attach':
            _this9.nodesAttached.add(eventListener);

            break;

          case '_detach':
            _this9.nodesDetached.add(eventListener);

            break;

          default:
            tag.addEventListener(eventName, eventListener, eventOptions);

            _this9.onRemove(function () {
              tag.removeEventListener(eventName, eventListener, eventOptions);
            });

            break;
        }

        return [eventName, callbackName, argList];
      });
      tag.removeAttribute('cv-on');
      return tag;
    }
  }, {
    key: "mapLinkTag",
    value: function mapLinkTag(tag) {
      /*/
      const tagCompiler = this.compileLinkTag(tag);
      	const newTag = tagCompiler(this);
      	tag.replaceWith(newTag);
      	return newTag;
      /*/
      var linkAttr = tag.getAttribute('cv-link');
      tag.setAttribute('href', linkAttr);

      var linkClick = function linkClick(event) {
        event.preventDefault();

        if (linkAttr.substring(0, 4) === 'http' || linkAttr.substring(0, 2) === '//') {
          window.open(tag.getAttribute('href', linkAttr));
          return;
        }

        _Router.Router.go(tag.getAttribute('href'));
      };

      tag.addEventListener('click', linkClick);
      this.onRemove(function (tag, eventListener) {
        return function () {
          tag.removeEventListener('click', eventListener);
          tag = undefined;
          eventListener = undefined;
        };
      }(tag, linkClick));
      tag.removeAttribute('cv-link');
      return tag; //*/
    }
  }, {
    key: "compileLinkTag",
    value: function compileLinkTag(sourceTag) {
      var linkAttr = sourceTag.getAttribute('cv-link');
      sourceTag.removeAttribute('cv-link');
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);
        tag.setAttribute('href', linkAttr);
        return tag;
      };
    }
  }, {
    key: "mapPrendererTag",
    value: function mapPrendererTag(tag) {
      var prerenderAttr = tag.getAttribute('cv-prerender');
      var prerendering = window.prerenderer || navigator.userAgent.match(/prerender/i);

      if (prerendering) {
        window.prerenderer = window.prerenderer || true;
      }

      if (prerenderAttr === 'never' && prerendering || prerenderAttr === 'only' && !prerendering) {
        tag.parentNode.removeChild(tag);
      }

      return tag;
    }
  }, {
    key: "mapWithTag",
    value: function mapWithTag(tag) {
      var _this10 = this;

      var withAttr = tag.getAttribute('cv-with');
      var carryAttr = tag.getAttribute('cv-carry');
      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-with');
      tag.removeAttribute('cv-carry');
      tag.removeAttribute('cv-view');
      var viewClass = viewAttr ? this.stringToClass(viewAttr) : View;
      var subTemplate = new DocumentFragment();

      _toConsumableArray(tag.childNodes).map(function (n) {
        return subTemplate.appendChild(n);
      });

      var carryProps = [];

      if (carryAttr) {
        carryProps = carryAttr.split(',').map(function (s) {
          return s.trim();
        });
      }

      var debind = this.args.bindTo(withAttr, function (v, k, t, d) {
        if (_this10.withViews.has(tag)) {
          _this10.withViews["delete"](tag);
        }

        while (tag.firstChild) {
          tag.removeChild(tag.firstChild);
        }

        var view = new viewClass({}, _this10);

        _this10.onRemove(function (view) {
          return function () {
            view.remove();
          };
        }(view));

        view.template = subTemplate;

        var _loop7 = function _loop7(i) {
          var debind = _this10.args.bindTo(carryProps[i], function (v, k) {
            view.args[k] = v;
          });

          view.onRemove(debind);

          _this10.onRemove(function () {
            debind();
            view.remove();
          });
        };

        for (var i in carryProps) {
          _loop7(i);
        }

        var _loop8 = function _loop8(_i5) {
          if (_typeof(v) !== 'object') {
            return "continue";
          }

          v = _Bindable.Bindable.make(v);
          var debind = v.bindTo(_i5, function (vv, kk) {
            view.args[kk] = vv;
          });
          var debindUp = view.args.bindTo(_i5, function (vv, kk) {
            v[kk] = vv;
          });

          _this10.onRemove(function () {
            debind();

            if (!v.isBound()) {
              _Bindable.Bindable.clearBindings(v);
            }

            view.remove();
          });

          view.onRemove(function () {
            debind();

            if (!v.isBound()) {
              _Bindable.Bindable.clearBindings(v);
            }
          });
        };

        for (var _i5 in v) {
          var _ret6 = _loop8(_i5);

          if (_ret6 === "continue") continue;
        }

        view.render(tag);

        _this10.withViews.set(tag, view);
      });
      this.onRemove(function () {
        _this10.withViews["delete"](tag);

        debind();
      });
      return tag;
    }
  }, {
    key: "mapViewTag",
    value: function mapViewTag(tag) {
      var _this11 = this;

      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-view');
      var subTemplate = new DocumentFragment();

      _toConsumableArray(tag.childNodes).map(function (n) {
        return subTemplate.appendChild(n);
      });

      var parts = viewAttr.split(':');
      var viewClass = parts.pop() ? this.stringToClass(viewAttr) : View;
      var viewName = parts.shift();
      var view = new viewClass(this.args, this);
      this.views.set(tag, view);

      if (viewName) {
        this.views.set(viewName, view);
      }

      this.onRemove(function (view) {
        return function () {
          view.remove();

          _this11.views["delete"](tag);

          _this11.views["delete"](viewName);
        };
      }(view));
      view.template = subTemplate;
      view.render(tag);
      return tag;
    }
  }, {
    key: "mapEachTag",
    value: function mapEachTag(tag) {
      var _this12 = this;

      var eachAttr = tag.getAttribute('cv-each');
      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-each');
      tag.removeAttribute('cv-view');
      var viewClass = viewAttr ? this.stringToClass(viewAttr) : View;
      var subTemplate = new DocumentFragment();
      Array.from(tag.childNodes).map(function (n) {
        return subTemplate.appendChild(n);
      });

      var _eachAttr$split = eachAttr.split(':'),
          _eachAttr$split2 = _slicedToArray(_eachAttr$split, 3),
          eachProp = _eachAttr$split2[0],
          asProp = _eachAttr$split2[1],
          keyProp = _eachAttr$split2[2];

      var debind = this.args.bindTo(eachProp, function (v, k, t, d, p) {
        if (_this12.viewLists.has(tag)) {
          _this12.viewLists.get(tag).remove();
        }

        var viewList = new _ViewList.ViewList(subTemplate, asProp, v, _this12, keyProp, viewClass);

        var viewListRemover = function viewListRemover() {
          return viewList.remove();
        };

        _this12.onRemove(viewListRemover);

        viewList.onRemove(function () {
          return _this12._onRemove.remove(viewListRemover);
        });

        var debindA = _this12.args.bindTo(function (v, k, t, d) {
          if (k === '_id') {
            return;
          }

          if (d) {
            delete viewList.subArgs[k];
          }

          viewList.subArgs[k] = v;
        });

        var debindB = viewList.args.bindTo(function (v, k, t, d, p) {
          if (k === '_id' || k === 'value' || k.substring(0, 3) === '___') {
            return;
          }

          if (d) {
            delete _this12.args[k];
          }

          if (k in _this12.args) {
            _this12.args[k] = v;
          }
        });
        viewList.onRemove(debindA);
        viewList.onRemove(debindB);

        _this12.onRemove(debindA);

        _this12.onRemove(debindB);

        while (tag.firstChild) {
          tag.removeChild(tag.firstChild);
        }

        _this12.viewLists.set(tag, viewList);

        viewList.render(tag);
      });
      this.onRemove(debind);
      return tag;
    }
  }, {
    key: "mapIfTag",
    value: function mapIfTag(tag) {
      var _this13 = this;

      var sourceTag = tag;
      var viewProperty = sourceTag.getAttribute('cv-view');
      var ifProperty = sourceTag.getAttribute('cv-if');
      var isProperty = sourceTag.getAttribute('cv-is');
      var inverted = false;
      var defined = false;
      sourceTag.removeAttribute('cv-view');
      sourceTag.removeAttribute('cv-if');
      sourceTag.removeAttribute('cv-is');
      var viewClass = viewProperty ? this.stringToClass(viewProperty) : View;

      if (ifProperty.substr(0, 1) === '!') {
        ifProperty = ifProperty.substr(1);
        inverted = true;
      }

      if (ifProperty.substr(0, 1) === '?') {
        ifProperty = ifProperty.substr(1);
        defined = true;
      }

      var subTemplate = new DocumentFragment();
      Array.from(sourceTag.childNodes).map(function (n) {
        return subTemplate.appendChild(n);
      } // n => subTemplate.appendChild(n.cloneNode(true))
      );
      var bindingView = this;
      var ifDoc = new DocumentFragment();
      var view = new viewClass(this.args, bindingView);
      this.onRemove(view.tags.bindTo(function (v, k) {
        _this13.tags[k] = v;
      }));
      view.template = subTemplate;
      var proxy = bindingView.args;
      var property = ifProperty;

      if (ifProperty.match(/\./)) {
        var _Bindable$resolve11 = _Bindable.Bindable.resolve(bindingView.args, ifProperty, true);

        var _Bindable$resolve12 = _slicedToArray(_Bindable$resolve11, 2);

        proxy = _Bindable$resolve12[0];
        property = _Bindable$resolve12[1];
      }

      view.render(ifDoc);
      var propertyDebind = proxy.bindTo(property, function (v, k) {
        var o = v;

        if (defined) {
          v = v !== null && v !== undefined;
        }

        if (Array.isArray(v)) {
          v = !!v.length;
        }

        if (isProperty !== null) {
          v = o == isProperty;
        }

        if (inverted) {
          v = !v;
        }

        if (v) {
          tag.appendChild(ifDoc);

          var nodes = _toConsumableArray(ifDoc.childNodes);

          nodes.map(function (node) {
            return _Dom.Dom.mapTags(node, false, function (tag, walker) {
              if (!tag.matches) {
                return;
              }

              tag.dispatchEvent(new CustomEvent('cvDomAttached', {
                target: tag,
                detail: {
                  view: view || _this13,
                  mainView: _this13
                }
              }));
            });
          });
        } else {
          view.nodes.map(function (n) {
            return ifDoc.appendChild(n);
          });

          _Dom.Dom.mapTags(ifDoc, false, function (tag, walker) {
            if (!tag.matches) {
              return;
            }

            tag.dispatchEvent(new CustomEvent('cvDomDetached', {
              target: tag,
              detail: {
                view: view || _this13,
                mainView: _this13
              }
            }));
          });
        }
      }, {
        wait: 0,
        children: Array.isArray(proxy[property])
      }); // const propertyDebind = this.args.bindChain(property, onUpdate);

      bindingView.onRemove(propertyDebind);

      var bindableDebind = function bindableDebind() {
        if (!proxy.isBound()) {
          _Bindable.Bindable.clearBindings(proxy);
        }
      };

      var viewDebind = function viewDebind() {
        propertyDebind();
        bindableDebind();

        bindingView._onRemove.remove(propertyDebind);

        bindingView._onRemove.remove(bindableDebind);
      };

      bindingView.onRemove(viewDebind);
      this.onRemove(function () {
        view.remove();

        if (bindingView !== _this13) {
          bindingView.remove();
        }
      });
      return tag; //*/
    }
  }, {
    key: "compileIfTag",
    value: function compileIfTag(sourceTag) {
      var ifProperty = sourceTag.getAttribute('cv-if');
      var inverted = false;
      sourceTag.removeAttribute('cv-if');

      if (ifProperty.substr(0, 1) === '!') {
        ifProperty = ifProperty.substr(1);
        inverted = true;
      }

      var subTemplate = new DocumentFragment();
      Array.from(sourceTag.childNodes).map(function (n) {
        return subTemplate.appendChild(n.cloneNode(true));
      });
      return function (bindingView) {
        var tag = sourceTag.cloneNode();
        var ifDoc = new DocumentFragment();
        var view = new View({}, bindingView);
        view.template = subTemplate; // view.parent   = bindingView;

        bindingView.syncBind(view);
        var proxy = bindingView.args;
        var property = ifProperty;

        if (ifProperty.match(/\./)) {
          var _Bindable$resolve13 = _Bindable.Bindable.resolve(bindingView.args, ifProperty, true);

          var _Bindable$resolve14 = _slicedToArray(_Bindable$resolve13, 2);

          proxy = _Bindable$resolve14[0];
          property = _Bindable$resolve14[1];
        }

        var hasRendered = false;
        var propertyDebind = proxy.bindTo(property, function (v, k) {
          if (!hasRendered) {
            var renderDoc = bindingView.args[property] || inverted ? tag : ifDoc;
            view.render(renderDoc);
            hasRendered = true;
            return;
          }

          if (Array.isArray(v)) {
            v = !!v.length;
          }

          if (inverted) {
            v = !v;
          }

          if (v) {
            tag.appendChild(ifDoc);
          } else {
            view.nodes.map(function (n) {
              return ifDoc.appendChild(n);
            });
          }
        }); // let cleaner = bindingView;
        // while(cleaner.parent)
        // {
        // 	cleaner = cleaner.parent;
        // }

        bindingView.onRemove(propertyDebind);

        var bindableDebind = function bindableDebind() {
          if (!proxy.isBound()) {
            _Bindable.Bindable.clearBindings(proxy);
          }
        };

        var viewDebind = function viewDebind() {
          propertyDebind();
          bindableDebind();

          bindingView._onRemove.remove(propertyDebind);

          bindingView._onRemove.remove(bindableDebind);
        };

        view.onRemove(viewDebind);
        return tag;
      };
    }
  }, {
    key: "mapTemplateTag",
    value: function mapTemplateTag(tag) {
      var templateName = tag.getAttribute('cv-template');
      tag.removeAttribute('cv-template');

      this.templates[templateName] = function () {
        return tag.tagName === 'TEMPLATE' ? tag.content.cloneNode(true) : new DocumentFragment(tag.innerHTML);
      };

      this.rendered.then(function () {
        return tag.remove();
      });
      return tag;
    }
  }, {
    key: "mapSlotTag",
    value: function mapSlotTag(tag) {
      var templateName = tag.getAttribute('cv-slot');
      var getTemplate = this.templates[templateName];

      if (!getTemplate) {
        var parent = this;

        while (parent) {
          getTemplate = parent.templates[templateName];

          if (getTemplate) {
            break;
          }

          parent = this.parent;
        }

        if (!getTemplate) {
          console.error("Template ".concat(templateName, " not found."));
          return;
        }
      }

      var template = getTemplate();
      tag.removeAttribute('cv-slot');

      while (tag.firstChild) {
        tag.firstChild.remove();
      }

      tag.appendChild(template);
      return tag;
    }
  }, {
    key: "syncBind",
    value: function syncBind(subView) {
      var _this14 = this;

      var debindA = this.args.bindTo(function (v, k, t, d) {
        if (k === '_id') {
          return;
        }

        if (subView.args[k] !== v) {
          subView.args[k] = v;
        }
      }); // for(let i in this.args)
      // {
      // 	if(i == '_id')
      // 	{
      // 		continue;
      // 	}
      // 	subView.args[i] = this.args[i];
      // }

      var debindB = subView.args.bindTo(function (v, k, t, d, p) {
        if (k === '_id') {
          return;
        }

        var newRef = v;
        var oldRef = p;

        if (newRef instanceof View) {
          newRef = newRef.___ref___;
        }

        if (oldRef instanceof View) {
          oldRef = oldRef.___ref___;
        }

        if (newRef !== oldRef && oldRef instanceof View) {
          p.remove();
        }

        if (k in _this14.args) {
          _this14.args[k] = v;
        }
      });
      this.onRemove(debindA);
      this.onRemove(debindB);
      subView.onRemove(function () {
        _this14._onRemove.remove(debindA);

        _this14._onRemove.remove(debindB);
      });
    }
  }, {
    key: "postRender",
    value: function postRender(parentNode) {}
  }, {
    key: "attached",
    value: function attached(parentNode) {}
  }, {
    key: "interpolatable",
    value: function interpolatable(str) {
      return !!String(str).match(this.interpolateRegex);
    }
  }, {
    key: "remove",
    value: function remove() {
      var _this15 = this;

      var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var remover = function remover() {
        for (var _i6 in _this15.tags) {
          if (Array.isArray(_this15.tags[_i6])) {
            _this15.tags[_i6] && _this15.tags[_i6].map(function (t) {
              return t.remove();
            });

            _this15.tags[_i6].splice(0);
          } else {
            _this15.tags[_i6] && _this15.tags[_i6].remove();
            _this15.tags[_i6] = undefined;
          }
        }

        for (var _i7 in _this15.nodes) {
          _this15.nodes[_i7] && _this15.nodes[_i7].dispatchEvent(new Event('cvDomDetached'));
          _this15.nodes[_i7] && _this15.nodes[_i7].remove();
          _this15.nodes[_i7] = undefined;
        }

        _this15.nodes.splice(0);

        _this15.firstNode = _this15.lastNode = undefined;
      };

      if (now) {
        remover();
      } else {
        requestAnimationFrame(remover);
      }

      var callbacks = this._onRemove.items();

      var _iterator9 = _createForOfIteratorHelper(callbacks),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var callback = _step9.value;

          this._onRemove.remove(callback);

          callback();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      var cleanup;

      while (cleanup = this.cleanup.shift()) {
        cleanup && cleanup();
      }

      var _iterator10 = _createForOfIteratorHelper(this.viewLists),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              tag = _step10$value[0],
              viewList = _step10$value[1];

          viewList.remove();
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      this.viewLists.clear();

      var _iterator11 = _createForOfIteratorHelper(this.timeouts),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _step11$value = _slicedToArray(_step11.value, 2),
              _callback3 = _step11$value[0],
              timeout = _step11$value[1];

          clearTimeout(timeout.timeout);
          this.timeouts["delete"](timeout.timeout);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      for (var i in this.intervals) {
        clearInterval(this.intervals[i].timeout);
        delete this.intervals[i];
      }

      for (var i in this.frames) {
        this.frames[i]();
        delete this.frames[i];
      }

      this.preRuleSet.purge();
      this.ruleSet.purge();
      this.removed = true;
    }
  }, {
    key: "findTag",
    value: function findTag(selector) {
      for (var i in this.nodes) {
        var result = void 0;

        if (!this.nodes[i].querySelector) {
          continue;
        }

        if (this.nodes[i].matches(selector)) {
          return new _Tag.Tag(this.nodes[i], this, undefined, undefined, this);
        }

        if (result = this.nodes[i].querySelector(selector)) {
          return new _Tag.Tag(result, this, undefined, undefined, this);
        }
      }
    }
  }, {
    key: "findTags",
    value: function findTags(selector) {
      var _this16 = this;

      return this.nodes.filter(function (n) {
        return n.querySelectorAll;
      }).map(function (n) {
        return _toConsumableArray(n.querySelectorAll(selector));
      }).flat().map(function (n) {
        return new _Tag.Tag(n, _this16, undefined, undefined, _this16);
      }) || [];
    }
  }, {
    key: "onRemove",
    value: function onRemove(callback) {
      this._onRemove.add(callback);
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "beforeUpdate",
    value: function beforeUpdate(args) {}
  }, {
    key: "afterUpdate",
    value: function afterUpdate(args) {}
  }, {
    key: "stringTransformer",
    value: function stringTransformer(methods) {
      var _this17 = this;

      return function (x) {
        for (var m in methods) {
          var parent = _this17;
          var method = methods[m];

          while (parent && !parent[method]) {
            parent = parent.parent;
          }

          if (!parent) {
            return;
          }

          x = parent[methods[m]](x);
        }

        return x;
      };
    }
  }, {
    key: "stringToClass",
    value: function stringToClass(refClassname) {
      if (View.refClasses.has(refClassname)) {
        return View.refClasses.get(refClassname);
      }

      var refClassSplit = refClassname.split('/');
      var refShortClass = refClassSplit[refClassSplit.length - 1];

      var refClass = require(refClassname);

      View.refClasses.set(refClassname, refClass[refShortClass]);
      return refClass[refShortClass];
    }
  }, {
    key: "preventParsing",
    value: function preventParsing(node) {
      node[dontParse] = true;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.nodes.map(function (n) {
        return n.outerHTML;
      }).join(' ');
    }
  }, {
    key: "listen",
    value: function listen(node, eventName, callback, options) {
      var _this18 = this;

      if (typeof node === 'string') {
        options = callback;
        callback = eventName;
        eventName = node;
        node = this;
      }

      if (node instanceof View) {
        return this.listen(node.nodes, eventName, callback, options);
      }

      if (Array.isArray(node)) {
        var removers = node.map(function (n) {
          return _this18.listen(n, eventName, callback, options);
        });
        return function () {
          return removers.map(function (r) {
            return r();
          });
        };
      }

      if (node instanceof _Tag.Tag) {
        return this.listen(node.element, eventName, callback, options);
      }

      node.addEventListener(eventName, callback, options);

      var remove = function remove() {
        return node.removeEventListener(eventName, callback, options);
      };

      var remover = function remover() {
        remove();

        remove = function remove() {};
      };

      this.onRemove(function () {
        return remover();
      });
      return remover;
    }
  }, {
    key: "detach",
    value: function detach() {
      for (var n in this.nodes) {
        this.nodes[n].remove();
      }

      return this.nodes;
    }
  }], [{
    key: "from",
    value: function from(template) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var view = new this(args, parent);
      view.template = template;
      return view;
    }
  }, {
    key: "isView",
    value: function isView() {
      return View;
    }
  }, {
    key: "uuid",
    value: function uuid() {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
        return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
      });
    }
  }]);

  return View;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.View = View;
Object.defineProperty(View, 'templates', {
  value: new Map()
});
Object.defineProperty(View, 'refClasses', {
  value: new Map()
});
  })();
});

require.register("curvature/base/ViewList.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewList = void 0;

var _Bindable = require("./Bindable");

var _SetMap = require("./SetMap");

var _View = require("./View");

var _Bag = require("./Bag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ViewList = /*#__PURE__*/function () {
  function ViewList(template, subProperty, list, parent) {
    var _this = this;

    var keyProperty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var viewClass = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

    _classCallCheck(this, ViewList);

    this.removed = false;
    this.args = _Bindable.Bindable.makeBindable({});
    this.args.value = _Bindable.Bindable.makeBindable(list || {});
    this.subArgs = _Bindable.Bindable.makeBindable({});
    this.views = [];
    this.cleanup = [];
    this.viewClass = viewClass || _View.View;
    this._onRemove = new _Bag.Bag();
    this.template = template;
    this.subProperty = subProperty;
    this.keyProperty = keyProperty;
    this.tag = null;
    this.paused = false;
    this.parent = parent;
    this.rendered = new Promise(function (accept, reject) {
      Object.defineProperty(_this, 'renderComplete', {
        configurable: false,
        writable: true,
        value: accept
      });
    });
    this.willReRender = false;

    this.args.___before(function (t, e, s, o, a) {
      if (e == 'bindTo') {
        return;
      }

      _this.paused = true;
    });

    this.args.___after(function (t, e, s, o, a) {
      if (e == 'bindTo') {
        return;
      }

      _this.paused = s.length > 1;

      _this.reRender();
    });

    var debind = this.args.value.bindTo(function (v, k, t, d) {
      if (_this.paused) {
        return;
      }

      var kk = k;

      if (_typeof(k) === 'symbol') {
        return;
      }

      if (isNaN(k)) {
        kk = '_' + k;
      }

      if (d) {
        if (_this.views[kk]) {
          _this.views[kk].remove();
        }

        delete _this.views[kk];

        for (var i in _this.views) {
          if (isNaN(i)) {
            _this.views[i].args[_this.keyProperty] = i.substr(1);
            continue;
          }

          _this.views[i].args[_this.keyProperty] = i;
        }
      } else if (!_this.views[kk] && !_this.willReRender) {
        cancelAnimationFrame(_this.willReRender);
        _this.willReRender = requestAnimationFrame(function () {
          _this.reRender();
        });
      } else if (_this.views[kk] && _this.views[kk].args) {
        _this.views[kk].args[_this.keyProperty] = k;
        _this.views[kk].args[_this.subProperty] = v;
      }
    });

    this._onRemove.add(debind);
  }

  _createClass(ViewList, [{
    key: "render",
    value: function render(tag) {
      var _this2 = this;

      var renders = [];

      var _iterator = _createForOfIteratorHelper(this.views),
          _step;

      try {
        var _loop = function _loop() {
          var view = _step.value;
          view.render(tag);
          renders.push(view.rendered.then(function () {
            return view;
          }));
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.tag = tag;
      Promise.all(renders).then(function (views) {
        return _this2.renderComplete(views);
      });
      this.parent.dispatchEvent(new CustomEvent('listRendered', {
        detail: {
          detail: {
            key: this.subProperty,
            value: this.args.value
          }
        }
      }));
    }
  }, {
    key: "reRender",
    value: function reRender() {
      var _this3 = this;

      if (this.paused || !this.tag) {
        return;
      }

      var views = [];
      var existingViews = new _SetMap.SetMap();

      for (var i in this.views) {
        var view = this.views[i];
        var rawValue = view.args[this.subProperty];
        existingViews.add(rawValue, view);
        views[i] = view;
      }

      var finalViews = [];
      var finalViewSet = new Set();
      this.upDebind && this.upDebind.map(function (d) {
        return d && d();
      });
      this.downDebind && this.downDebind.map(function (d) {
        return d && d();
      });
      this.upDebind = [];
      this.downDebind = [];
      var minKey = Infinity;
      var anteMinKey = Infinity;

      var _loop2 = function _loop2(_i) {
        var found = false;
        var k = _i;

        if (isNaN(k)) {
          k = '_' + _i;
        } else if (String(k).length) {
          k = Number(k);
        }

        if (_this3.args.value[_i] !== undefined && existingViews.has(_this3.args.value[_i])) {
          var existingView = existingViews.getOne(_this3.args.value[_i]);

          if (existingView) {
            existingView.args[_this3.keyProperty] = _i;
            finalViews[k] = existingView;
            finalViewSet.add(existingView);
            found = true;

            if (!isNaN(k)) {
              minKey = Math.min(minKey, k);
              k > 0 && (anteMinKey = Math.min(anteMinKey, k));
            }

            existingViews.remove(_this3.args.value[_i], existingView);
          }
        } // for(let j = views.length - 1; j >= 0; j--)
        // {
        // 	if(views[j]
        // 		&& this.args.value[i] !== undefined
        // 		&& this.args.value[i] === views[j].args[ this.subProperty ]
        // 	){
        // 		found = true;
        // 		finalViews[k] = views[j];
        // 		if(!isNaN(k))
        // 		{
        // 			minKey = Math.min(minKey, k);
        // 			k > 0 && (anteMinKey = Math.min(anteMinKey, k));
        // 		}
        // 		finalViews[k].args[ this.keyProperty ] = i;
        // 		delete views[j];
        // 		break;
        // 	}
        // }


        if (!found) {
          var viewArgs = {};

          var _view = finalViews[k] = new _this3.viewClass(viewArgs, _this3.parent);

          if (!isNaN(k)) {
            minKey = Math.min(minKey, k);
            k > 0 && (anteMinKey = Math.min(anteMinKey, k));
          }

          finalViews[k].template = _this3.template instanceof Object ? _this3.template : _this3.template;
          finalViews[k].viewList = _this3;
          finalViews[k].args[_this3.keyProperty] = _i;
          finalViews[k].args[_this3.subProperty] = _this3.args.value[_i];
          _this3.upDebind[k] = viewArgs.bindTo(_this3.subProperty, function (v, k, t, d) {
            var index = viewArgs[_this3.keyProperty];

            if (d) {
              delete _this3.args.value[index];
              return;
            }

            _this3.args.value[index] = v;
          });
          _this3.downDebind[k] = _this3.subArgs.bindTo(function (v, k, t, d) {
            if (d) {
              delete viewArgs[k];
              return;
            }

            viewArgs[k] = v;
          });

          var upDebind = function upDebind() {
            _this3.upDebind.filter(function (x) {
              return x;
            }).map(function (d) {
              return d();
            });

            _this3.upDebind.splice(0);
          };

          var downDebind = function downDebind() {
            _this3.downDebind.filter(function (x) {
              return x;
            }).map(function (d) {
              return d();
            });

            _this3.downDebind.splice(0);
          };

          _view.onRemove(function () {
            _this3._onRemove.remove(upDebind);

            _this3._onRemove.remove(downDebind);

            _this3.upDebind[k] && _this3.upDebind[k]();
            _this3.downDebind[k] && _this3.downDebind[k]();
            delete _this3.upDebind[k];
            delete _this3.downDebind[k];
          });

          _this3._onRemove.add(upDebind);

          _this3._onRemove.add(downDebind);

          viewArgs[_this3.subProperty] = _this3.args.value[_i];
        }
      };

      for (var _i in this.args.value) {
        _loop2(_i);
      }

      for (var _i2 in views) {
        if (!finalViewSet.has(views[_i2])) {
          views[_i2].remove();
        }
      }

      if (Array.isArray(this.args.value)) {
        var localMin = minKey === 0 && finalViews[1] !== undefined && finalViews.length > 1 || anteMinKey === Infinity ? minKey : anteMinKey;

        var renderRecurse = function renderRecurse() {
          var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var ii = finalViews.length - i - 1;

          while (ii > localMin && finalViews[ii] === undefined) {
            ii--;
          }

          if (ii < localMin) {
            return Promise.resolve();
          }

          if (finalViews[ii] === _this3.views[ii]) {
            if (!finalViews[ii].firstNode) {
              finalViews[ii].render(_this3.tag, finalViews[ii + 1]);
              return finalViews[ii].rendered.then(function () {
                return renderRecurse(Number(i) + 1);
              });
            }

            return renderRecurse(Number(i) + 1);
          }

          finalViews[ii].render(_this3.tag, finalViews[ii + 1]);

          _this3.views.splice(ii, 0, finalViews[ii]);

          return finalViews[ii].rendered.then(function () {
            return renderRecurse(Number(i) + 1);
          });
        };

        this.rendered = renderRecurse();
        this.rendered.then(function () {
          return finalViews.splice(0);
        });
      } else {
        var renders = [];
        var leftovers = Object.assign({}, finalViews);

        var _loop3 = function _loop3(_i3) {
          delete leftovers[_i3];

          if (finalViews[_i3].firstNode && finalViews[_i3] === _this3.views[_i3]) {
            return "continue";
          }

          finalViews[_i3].render(_this3.tag);

          renders.push(finalViews[_i3].rendered.then(function () {
            return finalViews[_i3];
          }));
        };

        for (var _i3 in finalViews) {
          var _ret = _loop3(_i3);

          if (_ret === "continue") continue;
        }

        for (var _i4 in leftovers) {
          delete this.args.views[_i4];
          leftovers.remove();
        }

        this.rendered = Promise.all(renders);
      }

      for (var _i5 in finalViews) {
        if (isNaN(_i5)) {
          finalViews[_i5].args[this.keyProperty] = _i5.substr(1);
          continue;
        }

        finalViews[_i5].args[this.keyProperty] = _i5;
      }

      this.views = [].concat(finalViews);
      finalViewSet.clear();
      this.willReRender = false;
      this.parent.dispatchEvent(new CustomEvent('listRendered', {
        detail: {
          detail: {
            key: this.subProperty,
            value: this.args.value
          }
        }
      }));
    }
  }, {
    key: "pause",
    value: function pause() {
      var _pause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      for (var i in this.views) {
        this.views[i].pause(_pause);
      }
    }
  }, {
    key: "onRemove",
    value: function onRemove(callback) {
      this._onRemove.add(callback);
    }
  }, {
    key: "remove",
    value: function remove() {
      for (var i in this.views) {
        this.views[i].remove();
      }

      var onRemove = this._onRemove.items();

      for (var _i6 in onRemove) {
        this._onRemove.remove(onRemove[_i6]);

        onRemove[_i6]();
      }

      var cleanup;

      while (this.cleanup.length) {
        cleanup = this.cleanup.pop();
        cleanup();
      }

      this.views = [];

      while (this.tag && this.tag.firstChild) {
        this.tag.removeChild(this.tag.firstChild);
      }

      if (this.subArgs) {
        _Bindable.Bindable.clearBindings(this.subArgs);
      }

      _Bindable.Bindable.clearBindings(this.args);

      if (this.args.value && !this.args.value.isBound()) {
        _Bindable.Bindable.clearBindings(this.args.value);
      }

      this.removed = true;
    }
  }]);

  return ViewList;
}();

exports.ViewList = ViewList;
  })();
});

require.register("curvature/input/Keyboard.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyboard = void 0;

var _Bindable = require("../base/Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Keyboard = /*#__PURE__*/function () {
  function Keyboard() {
    var _this = this;

    _classCallCheck(this, Keyboard);

    this.maxDecay = 120;
    this.comboTime = 500;
    this.listening = false;
    this.focusElement = document.body;
    Object.defineProperty(this, 'combo', {
      value: _Bindable.Bindable.make([])
    });
    Object.defineProperty(this, 'whichs', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'codes', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'keys', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedWhich', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedCode', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedKey', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedWhich', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedCode', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedKey', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'keyRefs', {
      value: _Bindable.Bindable.make({})
    });
    document.addEventListener('keyup', function (event) {
      if (!_this.listening) {
        return;
      }

      if (_this.focusElement && document.activeElement !== _this.focusElement && (!_this.focusElement.contains(document.activeElement) || document.activeElement.matches('input,textarea'))) {
        return;
      }

      event.preventDefault();
      _this.releasedWhich[event.which] = Date.now();
      _this.releasedCode[event.code] = Date.now();
      _this.releasedKey[event.key] = Date.now();
      _this.whichs[event.which] = -1;
      _this.codes[event.code] = -1;
      _this.keys[event.key] = -1;
    });
    document.addEventListener('keydown', function (event) {
      if (!_this.listening) {
        return;
      }

      if (_this.focusElement && document.activeElement !== _this.focusElement && (!_this.focusElement.contains(document.activeElement) || document.activeElement.matches('input,textarea'))) {
        return;
      }

      event.preventDefault();

      if (event.repeat) {
        return;
      }

      _this.combo.push(event.code);

      clearTimeout(_this.comboTimer);
      _this.comboTimer = setTimeout(function () {
        return _this.combo.splice(0);
      }, _this.comboTime);
      _this.pressedWhich[event.which] = Date.now();
      _this.pressedCode[event.code] = Date.now();
      _this.pressedKey[event.key] = Date.now();

      if (_this.keys[event.key] > 0) {
        return;
      }

      _this.whichs[event.which] = 1;
      _this.codes[event.code] = 1;
      _this.keys[event.key] = 1;
    });

    var windowBlur = function windowBlur(event) {
      for (var i in _this.keys) {
        if (_this.keys[i] < 0) {
          continue;
        }

        _this.releasedKey[i] = Date.now();
        _this.keys[i] = -1;
      }

      for (var _i in _this.codes) {
        if (_this.codes[_i] < 0) {
          continue;
        }

        _this.releasedCode[_i] = Date.now();
        _this.codes[_i] = -1;
      }

      for (var _i2 in _this.whichs) {
        if (_this.whichs[_i2] < 0) {
          continue;
        }

        _this.releasedWhich[_i2] = Date.now();
        _this.whichs[_i2] = -1;
      }
    };

    window.addEventListener('blur', windowBlur);
    window.addEventListener('visibilitychange', function () {
      if (document.visibilityState === 'visible') {
        return;
      }

      windowBlur();
    });
  }

  _createClass(Keyboard, [{
    key: "getKeyRef",
    value: function getKeyRef(keyCode) {
      var keyRef = this.keyRefs[keyCode] = this.keyRefs[keyCode] || _Bindable.Bindable.make({});

      return keyRef;
    }
  }, {
    key: "getKeyTime",
    value: function getKeyTime(key) {
      var released = this.releasedKey[key];
      var pressed = this.pressedKey[key];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getCodeTime",
    value: function getCodeTime(code) {
      var released = this.releasedCode[code];
      var pressed = this.pressedCode[code];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getWhichTime",
    value: function getWhichTime(code) {
      var released = this.releasedWhich[code];
      var pressed = this.pressedWhich[code];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getKey",
    value: function getKey(key) {
      if (!this.keys[key]) {
        return 0;
      }

      return this.keys[key];
    }
  }, {
    key: "getKeyCode",
    value: function getKeyCode(code) {
      if (!this.codes[code]) {
        return 0;
      }

      return this.codes[code];
    }
  }, {
    key: "reset",
    value: function reset() {
      for (var i in this.keys) {
        delete this.keys[i];
      }

      for (var i in this.codes) {
        delete this.codes[i];
      }

      for (var i in this.whichs) {
        delete this.whichs[i];
      }
    }
  }, {
    key: "update",
    value: function update() {
      for (var i in this.keys) {
        if (this.keys[i] > 0) {
          this.keys[i]++;
        } else if (this.keys[i] > -this.maxDecay) {
          this.keys[i]--;
        } else {
          delete this.keys[i];
        }
      }

      for (var i in this.codes) {
        var released = this.releasedCode[i];
        var pressed = this.pressedCode[i];
        var keyRef = this.getKeyRef(i);

        if (this.codes[i] > 0) {
          keyRef.frames = this.codes[i]++;
          keyRef.time = pressed ? Date.now() - pressed : 0;
          keyRef.down = true;

          if (!released || released < pressed) {
            return;
          }

          return (Date.now() - released) * -1;
        } else if (this.codes[i] > -this.maxDecay) {
          keyRef.frames = this.codes[i]--;
          keyRef.time = released - Date.now();
          keyRef.down = false;
        } else {
          keyRef.frames = 0;
          keyRef.time = 0;
          keyRef.down = false;
          delete this.codes[i];
        }
      }

      for (var i in this.whichs) {
        if (this.whichs[i] > 0) {
          this.whichs[i]++;
        } else if (this.whichs[i] > -this.maxDecay) {
          this.whichs[i]--;
        } else {
          delete this.whichs[i];
        }
      }
    }
  }], [{
    key: "get",
    value: function get() {
      return this.instance = this.instance || _Bindable.Bindable.make(new this());
    }
  }]);

  return Keyboard;
}();

exports.Keyboard = Keyboard;
  })();
});

require.register("curvature/mixin/EventTargetMixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventTargetMixin = void 0;

var _Mixin = require("../base/Mixin");

var _EventTargetMixin;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _EventTarget = Symbol('Target');

var EventTargetMixin = (_EventTargetMixin = {}, _defineProperty(_EventTargetMixin, _Mixin.Mixin.Constructor, function () {
  try {
    this[_EventTarget] = new EventTarget();
  } catch (error) {
    this[_EventTarget] = document.createDocumentFragment();
  }
}), _defineProperty(_EventTargetMixin, "dispatchEvent", function dispatchEvent() {
  var _this$_EventTarget;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var event = args[0];

  if (typeof event === 'string') {
    event = new CustomEvent(event);
    args[0] = event;
  }

  (_this$_EventTarget = this[_EventTarget]).dispatchEvent.apply(_this$_EventTarget, args);

  var defaultHandler = "on".concat(event.type[0].toUpperCase() + event.type.slice(1));

  if (typeof this[defaultHandler] === 'function') {
    this[defaultHandler](event);
  }

  return event.returnValue;
}), _defineProperty(_EventTargetMixin, "addEventListener", function addEventListener() {
  var _this$_EventTarget2;

  (_this$_EventTarget2 = this[_EventTarget]).addEventListener.apply(_this$_EventTarget2, arguments);
}), _defineProperty(_EventTargetMixin, "removeEventListener", function removeEventListener() {
  var _this$_EventTarget3;

  (_this$_EventTarget3 = this[_EventTarget]).removeEventListener.apply(_this$_EventTarget3, arguments);
}), _EventTargetMixin);
exports.EventTargetMixin = EventTargetMixin;
  })();
});

require.register("curvature/mixin/PromiseMixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromiseMixin = void 0;

var _Mixin = require("../base/Mixin");

var _PromiseMixin;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _Promise = Symbol('Promise');

var Accept = Symbol('Accept');
var Reject = Symbol('Reject');
var PromiseMixin = (_PromiseMixin = {}, _defineProperty(_PromiseMixin, _Mixin.Mixin.Constructor, function () {
  var _this = this;

  this[_Promise] = new Promise(function (accept, reject) {
    _this[Accept] = accept;
    _this[Reject] = reject;
  });
}), _defineProperty(_PromiseMixin, "then", function then() {
  var _this$_Promise;

  return (_this$_Promise = this[_Promise]).then.apply(_this$_Promise, arguments);
}), _defineProperty(_PromiseMixin, "catch", function _catch() {
  var _this$_Promise2;

  return (_this$_Promise2 = this[_Promise])["catch"].apply(_this$_Promise2, arguments);
}), _defineProperty(_PromiseMixin, "finally", function _finally() {
  var _this$_Promise3;

  return (_this$_Promise3 = this[_Promise])["finally"].apply(_this$_Promise3, arguments);
}), _PromiseMixin);
exports.PromiseMixin = PromiseMixin;
Object.defineProperty(PromiseMixin, 'Reject', {
  value: Reject
});
Object.defineProperty(PromiseMixin, 'Accept', {
  value: Accept
});
  })();
});

require.register("subspace-console/Console.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Console = void 0;

var _View2 = require("curvature/base/View");

var _Bag = require("curvature/base/Bag");

var _MeltingText = require("./view/MeltingText");

var _EchoMessage = require("./view/EchoMessage");

var _Task = require("./Task");

var _Path = require("./Path");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Console = /*#__PURE__*/function (_View) {
  _inherits(Console, _View);

  var _super = _createSuper(Console);

  function Console() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Console);

    _this = _super.call(this, args);
    var defaults = {
      init: false,
      path: _Path.Path
    };
    var allOptions = Object.assign({}, defaults, options);
    _this.template = "<div class = \"terminal [[inverted]]\" cv-on = \"click:focus(event)\">\n\t<div class = \"output\" cv-each = \"output:line:l\" cv-ref = \"output:curvature/base/Tag\">\n\t\t<p>[[line]]</p>\n\t</div>\n\t<div class = \"bottom\">\n\t\t<div>[[prompt]]&nbsp;</div>\n\t\t<div>\n\t\t\t<form cv-on = \"submit:cancel(event)\">\n\t\t\t\t<textarea\n\t\t\t\t\tcv-bind = \"input\"\n\t\t\t\t\tcv-on   = \":keydown(event);:keyup(event)\"\n\t\t\t\t\tcv-ref  = \"input:curvature/base/Tag\"\n\t\t\t\t\trow     = \"1\"\n\t\t\t\t></textarea>\n\t\t\t</form>\n\n\t\t\t<form cv-on = \"submit:cancel(event)\">\n\t\t\t\t<input\n\t\t\t\t\tautocomplete = \"one-time-code\"\n\t\t\t\t\tname    = \"pw-input\"\n\t\t\t\t\ttype    = \"password\"\n\t\t\t\t\tcv-bind = \"input\"\n\t\t\t\t\tcv-ref  = \"password:curvature/base/Tag\"\n\t\t\t\t\tcv-on   = \":keydown(event,false);:keyup(event,false)\"\n\t\t\t\t/>\n\t\t\t</form>\n\n\t\t\t<input\n\t\t\t\tcv-on  = \"input:fileLoaded(event)\"\n\t\t\t\tcv-ref = \"file:curvature/base/Tag\"\n\t\t\t\tname   = \"file-input\"\n\t\t\t\ttype   = \"file\"\n\t\t\t\tstyle  = \"display: none\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n</div>\n\n<div class = \"scanlines\"></div>\n";
    _this.args.input = '';
    _this.args.output = [];
    _this.args.inverted = '';
    _this.localEcho = true;
    _this.postToken = null;
    _this.args.prompt = '::';
    _this.routes = {};
    _this.args.passwordMode = false;
    _this.tasks = [];
    _this.taskList = new _Bag.Bag();
    _this.taskList.type = _Task.Task;
    _this.max = 512;
    _this.historyCursor = -1;
    _this.history = [];
    _this.env = new Map();

    _this.args.output.___after(function (t, k, o, a) {
      if (k !== 'push') {
        return;
      }

      if (_this.args.output.length > _this.max) {
        var removed = _this.args.output.shift();

        if (_typeof(removed) === 'object') {
          removed.remove();
        }
      }

      _this.scrollToBottom();
    });

    if (allOptions.init) {
      _this.runScript(allOptions.init);
    }

    _this.scroller = allOptions.scroller || document.body;
    _this.path = allOptions.path || {};
    _this.originalInput = '';
    return _this;
  }

  _createClass(Console, [{
    key: "runCommand",
    value: function runCommand(command) {
      var _this2 = this;

      if (this.historyCursor != 0) {
        this.history.unshift(command);
      }

      return new Promise(function (accept) {
        var task;

        if (command.substring(0, 1) === '/') {
          if (!_this2.args.passwordMode) {
            var output = new _EchoMessage.EchoMessage({
              message: command
            });

            _this2.args.output.push(output);
          }

          task = _this2.interpret(command.substr(1));
        } else if (_this2.tasks.length) {
          if (!_this2.args.passwordMode) {
            var _output = new _EchoMessage.EchoMessage({
              message: command,
              prompt: _this2.tasks[0].prompt
            });

            _this2.args.output.push(_output);
          }

          task = _this2.tasks[0].write(command) || Promise.resolve();
        } else {
          if (!_this2.args.passwordMode) {
            _this2.args.output.push(":: ".concat(command));
          }

          task = _this2.interpret(command); // this.args.output.push(`${this.tasks[0].prompt} ${command}`);

          var _output2 = new _EchoMessage.EchoMessage({
            message: command
          });

          _this2.args.output.push(_output2);
        }

        if (!(task instanceof _Task.Task) && !(task instanceof Promise)) {
          task = Promise.resolve(task);

          _this2.args.output.push(":: ".concat(command));
        }

        _this2.historyCursor = -1;
        _this2.originalInput = _this2.args.input = '';
        task.then(function (result) {
          return accept(result);
        });
      })["catch"](function (error) {
        _this2.args.output.push("Unexpected error: ".concat(error));
      });
    }
  }, {
    key: "runScript",
    value: function runScript(url) {
      var _this3 = this;

      fetch(url + '?api=txt').then(function (response) {
        return response.text();
      }).then(function (init) {
        var lines = init.split("\n");

        var process = function process(lines) {
          if (!lines.length) {
            return;
          }

          var line = lines.shift();

          if (line && line[0] == '!') {
            _this3.args.output.push(line.substring(1));

            process(lines);
          } else if (line) {
            _this3.runCommand(line).then(function () {
              return process(lines);
            });
          } else {
            process(lines);
          }
        };

        process(lines);
      });
    }
  }, {
    key: "postRender",
    value: function postRender() {
      var _this4 = this;

      var inputBox = this.tags.input.element;
      var passwordBox = this.tags.password.element;
      this.args.bindTo('input', function (v) {
        inputBox.style.height = 'auto';
        inputBox.style.height = inputBox.scrollHeight + 'px';
      }, {
        frame: 1
      });
      this.args.bindTo('passwordMode', function (v) {
        if (v) {
          inputBox.style.display = 'none';
          passwordBox.style.display = 'unset';
        } else {
          inputBox.style.display = 'unset';
          passwordBox.style.display = 'none';
        }
      });
      this.args.bindTo('passwordMode', function (v) {
        _this4.focus(null, v);
      }, {
        frame: 1
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var passwordMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (event) {
        event.preventDefault();
      }

      if (event && event.target && event.target.matches('input,textarea')) {
        return;
      }

      if (window.getSelection().toString()) {
        return;
      }

      if (passwordMode || this.args.passwordMode) {
        this.tags.password.element.focus();
        return;
      }

      this.tags.input.element.focus();
    }
  }, {
    key: "interpret",
    value: function interpret(input) {
      var _this5 = this;

      this.historyCursor = -1;
      var expressions = input.split(/\s*\;\s*/);
      var lastTask = null;

      var _iterator = _createForOfIteratorHelper(expressions),
          _step;

      try {
        var _loop = function _loop() {
          var expression = _step.value;

          var task = _this5.pipe(expression.split(/\s*\|\s*/));

          if (task) {
            _this5.tasks.unshift(task);

            var output = function output(event) {
              var prompt = task.outPrompt || task.prompt || _this5.args.prompt || '::';

              _this5.args.output.push("".concat(prompt, " ").concat(event.detail));
            };

            var error = function error(event) {
              var errorPrompt = task.errorPrompt || '!!';

              _this5.args.output.push("".concat(errorPrompt, " ").concat(event.detail));
            };

            task.addEventListener('output', output);
            task.addEventListener('error', error);
            task.execute();
            task["catch"](function (error) {
              return console.error(error);
            });
            task["catch"](function (error) {
              return _this5.args.output.push("!! ".concat(error));
            });
            _this5.args.prompt = task.prompt;
            task["finally"](function (done) {
              task.removeEventListener('error', error);
              task.removeEventListener('output', output);

              _this5.tasks.shift();

              if (_this5.tasks.length) {
                _this5.args.prompt = _this5.tasks[0].prompt;
              } else {
                _this5.args.prompt = '::';
              }
            });
          }

          lastTask = task;
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return lastTask;
    }
  }, {
    key: "pipe",
    value: function pipe(commands, previousTask) {
      var task = null;
      var commandString = commands.shift();
      var args = commandString.trim().split(' ');
      var command = args.shift().trim();

      if (command.length > 1 && command.substr(-1) == "?") {
        command = command.substr(0, command.length - 1);

        if (command in this.path) {
          this.args.output.push("?? ".concat(this.path[command].helpText));
          this.args.output.push("?? ".concat(this.path[command].useText));
        }

        return;
      }

      if (command in this.path) {
        var cmdClass = this.path[command];
        task = new cmdClass(args, previousTask, this);
      } else {
        switch (command) {
          case 'clear':
            this.args.output.splice(0);
            break;

          case 'z':
            this.args.output.splice(0);
            this.args.output.push(new _MeltingText.MeltingText({
              input: '!!!'
            }));
            break;

          case 'commands':
          case '?':
            this.args.output.push("   Subspace Console 0.29a \xA92018-2021 Sean Morris");

            for (var cmd in this.path) {
              this.args.output.push(" * ".concat(cmd, " - ").concat(this.path[cmd].helpText));
              this.path[cmd].useText && this.args.output.push("   ".concat(this.path[cmd].useText));
              this.args.output.push("  ");
            }

            break;

          default:
            this.args.output.push("!! Bad command: ".concat(command));
        }
      }

      if (commands.length) {
        return this.pipe(commands, task);
      }

      return task;
    }
  }, {
    key: "keydown",
    value: function keydown(event, autocomplete) {
      switch (event.key) {
        case 'Tab':
          if (autocomplete) {
            break;
          }

          event.preventDefault();
          break;

        case 'Enter':
          if (!event.ctrlKey) {
            event.preventDefault();
          }

          break;
      }
    }
  }, {
    key: "keyup",
    value: function keyup(event, autocomplete) {
      var _this6 = this;

      switch (event.key) {
        case 'ArrowDown':
          this.historyCursor--;

          if (this.historyCursor <= -1) {
            this.historyCursor = -1;
            this.args.input = this.originalInput;
            return;
          }

          this.args.input = this.history[this.historyCursor];
          this.onNextFrame(function () {
            var element = _this6.tags.input.element;
            element.selectionStart = element.value.length;
            element.selectionEnd = element.value.length;
          });
          break;

        case 'ArrowUp':
          if (this.historyCursor == -1) {
            this.originalInput = this.args.input;
          }

          this.historyCursor++;

          if (this.historyCursor >= this.history.length) {
            this.historyCursor--;
            return;
          }

          this.args.input = this.history[this.historyCursor];
          this.onNextFrame(function () {
            var element = _this6.tags.input.element;
            element.selectionStart = element.value.length;
            element.selectionEnd = element.value.length;
          });
          break;

        case 'Escape':
          if (this.tasks.length) {
            console.log(_Task.Task.KILL);
            this.tasks[0]["finally"](function () {
              return _this6.args.output.push(":: Killed.");
            });
            this.tasks[0].signal(_Task.Task.KILL);
            this.tasks[0].signal('kill');
          }

          this.args.passwordMode = false;
          break;

        case 'Tab':
          event.preventDefault();

          if (!this.args.input || this.args.input[0] !== '/') {
            break;
          }

          var search = this.args.input.substr(1);

          for (var cmd in this.path) {
            if (cmd.length < search.length) {
              continue;
            }

            if (search === cmd.substr(0, search.length)) {
              this.args.input = '/' + cmd;
              break;
            }
          }

          break;

        case 'Enter':
          if (!event.ctrlKey) {
            event.preventDefault();
          } else {
            return;
          }

          this.runCommand(this.args.input);
          this.args.input = '';
          break;

        default:
          this.historyCursor = -1;
          this.scrollToBottom();
          break;
      }
    }
  }, {
    key: "cancel",
    value: function cancel(event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }, {
    key: "scrollToBottom",
    value: function scrollToBottom() {
      var scroller = (this.scroller === document.body ? window : this.scroller) || window;
      var scrollTo = (this.scroller === document.body ? this.scroller : document.body).scrollHeight;
      this.onNextFrame(function () {
        scroller.scrollTo({
          behavior: 'smooth',
          left: 0,
          top: scrollTo
        });
      });
    }
  }]);

  return Console;
}(_View2.View);

exports.Console = Console;
  })();
});

require.register("subspace-console/Path.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Path = void 0;

var _Task = require("subspace-console/Task");

var Path = {};
exports.Path = Path;
  })();
});

require.register("subspace-console/Task.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Task = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Mixin = require("curvature/base/Mixin");

var _Target = require("./mixin/Target");

var _TaskSignals = require("./mixin/TaskSignals");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var taskId = 0;
var target = Symbol('target');
var Accept = Symbol('accept');
var Reject = Symbol('reject');
var Execute = Symbol('execute');

var Task = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Task, _Mixin$with);

  var _super = _createSuper(Task);

  function Task() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Task);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "title", 'Generic Task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '::');

    _this.args = args;
    _this.prev = prev;
    _this.term = term;
    _this.status = -1;
    _this.thread = new Promise(function (accept, reject) {
      _this[Accept] = accept;
      _this[Reject] = reject;
    });
    _this.id = taskId++;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(Task, [{
    key: "then",
    value: function then(callback) {
      return this.thread.then(callback);
    }
  }, {
    key: "catch",
    value: function _catch(callback) {
      return this.thread["catch"](callback);
    }
  }, {
    key: "finally",
    value: function _finally(callback) {
      return this.thread["finally"](callback);
    }
  }, {
    key: "print",
    value: function print(detail) {
      this.dispatchEvent(new CustomEvent('output', {
        detail: detail
      }));
    }
  }, {
    key: "printErr",
    value: function printErr(detail) {
      this.dispatchEvent(new CustomEvent('error', {
        detail: detail
      }));
    }
  }, {
    key: "write",
    value: function write(line) {
      return this.main(line);
    }
  }, {
    key: "signal",
    value: function signal(signalName) {
      if (this["signal::".concat(signalName)]) {
        this["signal::".concat(signalName)]();
      }

      switch (signalName) {
        case 'close':
          if (this.dispatchEvent(new CustomEvent('close'))) {
            this.status > 0 ? this[Reject]() : this[Accept]();
          }

          break;

        case 'kill':
          this.status > 0 ? this[Reject]() : this[Accept]();
          break;
      }
    }
  }, {
    key: "execute",
    value: function execute() {
      return this[Execute](this.prev);
    }
  }, {
    key: Execute,
    value: function value() {
      var _this2 = this;

      var onOutputEvent = function onOutputEvent(_ref) {
        var detail = _ref.detail;
        return _this2.write(detail);
      };

      var init = this.init.apply(this, _toConsumableArray(this.args));
      var prev = this.prev;

      if (prev) {
        prev.addEventListener('output', onOutputEvent);
      }

      if (!(init instanceof Promise)) {
        init = Promise.resolve(init);
      }

      if (prev) {
        prev[Execute]();
        return Promise.allSettled([prev, init])["finally"](function () {
          prev.then(function (r) {
            return _this2[Accept](r);
          });
          prev["catch"](function (e) {
            return _this2[Reject](r);
          });
          prev.removeEventListener('output', onOutputEvent);
          return _this2.done();
        });
      } else {
        return Promise.allSettled([init]).then(function (result) {
          try {
            _this2.main(undefined);

            _this2[Accept]();
          } catch (_unused) {
            _this2[Reject]();
          }

          _this2.done();
        });
      }
    }
  }, {
    key: "init",
    value: function init() {}
  }, {
    key: "main",
    value: function main() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    }
  }, {
    key: "done",
    value: function done(results) {
      return this.status;
    }
  }]);

  return Task;
}(_Mixin.Mixin["with"](_Target.Target, _TaskSignals.TaskSignals));

exports.Task = Task;
  })();
});

require.register("subspace-console/mixin/Target.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Target = void 0;

var _Mixin = require("curvature/base/Mixin");

var _Target;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var target = Symbol('target');
var index = 0;
var Target = (_Target = {}, _defineProperty(_Target, _Mixin.Mixin.Constructor, function () {
  try {
    this[target] = new EventTarget();
  } catch (error) {
    this[target] = document.createDocumentFragment();
  }

  this[target].x = index++;
}), _defineProperty(_Target, "dispatchEvent", function dispatchEvent() {
  var _this$target;

  (_this$target = this[target]).dispatchEvent.apply(_this$target, arguments);
}), _defineProperty(_Target, "addEventListener", function addEventListener() {
  var _this$target2;

  (_this$target2 = this[target]).addEventListener.apply(_this$target2, arguments);
}), _defineProperty(_Target, "removeEventListener", function removeEventListener() {
  var _this$target3;

  (_this$target3 = this[target]).removeEventListener.apply(_this$target3, arguments);
}), _Target);
exports.Target = Target;
  })();
});

require.register("subspace-console/mixin/TaskSignals.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaskSignals = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TaskSignals = /*#__PURE__*/function () {
  function TaskSignals() {
    _classCallCheck(this, TaskSignals);
  }

  _createClass(TaskSignals, [{
    key: 'signal::kill',
    value: function signalKill() {
      console.log('KILL!');
      this.status > 0 ? this[Reject]() : this[Accept]();
    }
  }, {
    key: 'signal::close',
    value: function signalClose() {
      if (this.dispatchEvent(new CustomEvent('error', {
        detail: detail
      }))) {
        this.status > 0 ? this[Reject]() : this[Accept]();
      }
    }
  }]);

  return TaskSignals;
}();

exports.TaskSignals = TaskSignals;

_defineProperty(TaskSignals, "KILL", 'kill');

_defineProperty(TaskSignals, "CLOSE", 'close');
  })();
});

require.register("subspace-console/view/EchoMessage.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EchoMessage = void 0;

var _View2 = require("curvature/base/View");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EchoMessage = /*#__PURE__*/function (_View) {
  _inherits(EchoMessage, _View);

  var _super = _createSuper(EchoMessage);

  function EchoMessage() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EchoMessage);

    _this = _super.call(this, args);
    _this.args.prompt = _this.args.prompt || '<<';
    _this.template = "<span>[[prompt]]&nbsp;</span><span class = \"text\">[[message]]</span>";
    return _this;
  }

  return EchoMessage;
}(_View2.View);

exports.EchoMessage = EchoMessage;
  })();
});

require.register("subspace-console/view/MeltingText.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeltingText = void 0;

var _View = require("curvature/base/View");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MeltingText = /*#__PURE__*/function (_BaseView) {
  _inherits(MeltingText, _BaseView);

  var _super = _createSuper(MeltingText);

  function MeltingText(args) {
    var _this;

    _classCallCheck(this, MeltingText);

    _this = _super.call(this, args);
    _this.last = _this.init = Date.now();
    _this.charUp = [// '\u030d', /*     ̍     */		'\u030e', /*     ̎     */		'\u0304', /*     ̄     */		'\u0305', /*     ̅     */
    // '\u033f', /*     ̿     */		'\u0311', /*     ̑     */		'\u0306', /*     ̆     */		'\u0310', /*     ̐     */
    // '\u0352', /*     ͒     */		'\u0357', /*     ͗     */		'\u0351', /*     ͑     */		'\u0307', /*     ̇     */
    // '\u0308', /*     ̈     */		'\u030a', /*     ̊     */		'\u0342', /*     ͂     */		'\u0343', /*     ̓     */
    "\u0344",
    /*     ̈́     */

    /*	'\u034a', /*     ͊     */

    /*	'\u034b', /*     ͋     */

    /*	'\u034c', /*     ͌     */
    "\u0303",
    /*     ̃     */

    /*	'\u0302', /*     ̂     */

    /*	'\u030c', /*     ̌     */

    /*	'\u0350', /*     ͐     */
    "\u0300"
    /*     ̀     */
    //	'\u0301', /*     ́     */		'\u030b', /*     ̋     */		'\u030f', /*     ̏     */
    // '\u0312', /*     ̒     */		'\u0313', /*     ̓     */		'\u0314', /*     ̔     */		'\u033d', /*     ̽     */
    // '\u0309', /*     ̉     */		'\u0363', /*     ͣ     */		'\u0364', /*     ͤ     */		'\u0365', /*     ͥ     */
    // '\u0366', /*     ͦ     */		'\u0367', /*     ͧ     */		'\u0368', /*     ͨ     */		'\u0369', /*     ͩ     */
    // '\u036a', /*     ͪ     */		'\u036b', /*     ͫ     */		'\u036c', /*     ͬ     */		'\u036d', /*     ͭ     */
    // '\u036e', /*     ͮ     */		'\u036f', /*     ͯ     */		'\u033e', /*     ̾     */		'\u035b', /*     ͛     */
    ];
    _this.charMid = ["\u0315",
    /*     ̕     */
    "\u031B",
    /*     ̛     */
    "\u0340",
    /*     ̀     */
    "\u0341",
    /*     ́     */
    "\u0358",
    /*     ͘     */
    "\u0321",
    /*     ̡     */
    "\u0322",
    /*     ̢     */
    "\u0327",
    /*     ̧     */
    "\u0328",
    /*     ̨     */
    "\u0334",
    /*     ̴     */
    "\u0335",
    /*     ̵     */
    "\u0336",
    /*     ̶     */
    "\u034F",
    /*     ͏     */
    "\u035C",
    /*     ͜     */
    "\u035D",
    /*     ͝     */
    "\u035E",
    /*     ͞     */
    "\u035F",
    /*     ͟     */
    "\u0360",
    /*     ͠     */

    /*'\u0362',      ͢     */
    "\u0338",
    /*     ̸     */
    "\u0337",
    /*     ̷     */
    "\u0361"
    /*     ͡     */

    /*'\u0489'     ҉_     */
    ];
    _this.charDown = [// '\u0316', /*     ̖     */		'\u0317', /*     ̗     */		'\u0318', /*     ̘     */		'\u0319', /*     ̙     */
    // '\u0316', /*     ̖     */		'\u0317', /*     ̗     */		'\u0318', /*     ̘     */		'\u0319', /*     ̙     */
    // '\u0320', /*     ̠     */		'\u0324', /*     ̤     */		'\u0325', /*     ̥     */		'\u0326', /*     ̦     */
    // '\u0329', /*     ̩     */		'\u032a', /*     ̪     */		'\u032b', /*     ̫     */		'\u032c', /*     ̬     */
    // '\u032d', /*     ̭     */		'\u032e', /*     ̮     */		'\u032f', /*     ̯     */		'\u0330', /*     ̰     */
    // '\u0331', /*     ̱     */		'\u0332', /*     ̲     */		'\u0333', /*     ̳     */		'\u0339', /*     ̹     */
    "\u033A",
    /*     ̺     */
    "\u033B",
    /*     ̻     */
    "\u033C",
    /*     ̼     */
    "\u0345"
    /*     ͅ     */
    //'\u0347', /*     ͇     */		'\u0348', /*     ͈     */		'\u0349', /*     ͉     */		'\u034d', /*     ͍     */
    //'\u034e', /*     ͎     */		'\u0353', /*     ͓     */		'\u0354', /*     ͔     */		'\u0355', /*     ͕     */
    // '\u0356', /*     ͖     */		'\u0359', /*     ͙     */		'\u035a', /*     ͚     */		'\u0323' /*     ̣     */
    ];
    _this.template = "\n\t\t\t<div cv-bind = \"output\" class = \"melting\"></div>\n\t\t";
    _this.args.input = "Magic is no more than the art of employing consciously invisible means to produce visible effects. Will, love, and imagination are magic powers that everyone possesses; and whoever knows how to develop them to their fullest extent is a magician. Magic has but one dogma, namely, that the seen is the measure of the unseen\n"; // this.args.input      = 'anything';

    _this.args.output = 'uh.';
    _this.corruptors = [];
    _this.maxMaxCorrupt = 25;
    _this.maxCorrupt = 0;
    _this.type = '';

    _this.onFrame(function () {
      _this.typewriter(_this.args.input);
    });

    _this.onInterval(16 * 4, function () {
      var selection = window.getSelection();

      if (selection.anchorOffset !== selection.focusOffset) {
        return;
      }

      if (selection.anchorNode !== selection.focusNode) {
        return;
      }

      _this.args.output = _this.corrupt(_this.type); // this.args.output = this.type;
    });

    _this.args.bindTo('input', function (v) {
      _this.type = '';
      _this.corruptors = [];
    });

    return _this;
  }

  _createClass(MeltingText, [{
    key: "age",
    value: function age() {
      return this.init - Date.now();
    }
  }, {
    key: "lastFrame",
    value: function lastFrame() {
      return this.last - Date.now();
    }
  }, {
    key: "corrupt",
    value: function corrupt(v) {
      if (v.length * 1.15 < this.args.input.length) {
        return this.type;
      }

      var chars = v.split('');

      var random = function random(x) {
        return parseInt(Math.random() * x);
      };

      if (random(1024) < 256 && this.maxCorrupt < this.maxMaxCorrupt) {
        this.maxCorrupt += 5;
      }

      for (var _i in chars) {
        this.corruptors[_i] = this.corruptors[_i] || [];

        if (chars[_i].match(/\W/)) {
          continue;
        }

        var charSets = [// this.charDown // Melt Slow
        this.charDown, this.charMid // Melt
        // this.charDown, this.charUp,   this.charMid, // Boil
        // this.charMid, this.charUp, // Burn
        // this.charMid // Simmer
        // this.charUp // Rain
        ];
        var charSet = charSets[random(charSets.length)];

        if (random(8192) < 1) {
          this.corruptors[_i].unshift(charSet[random(charSet.length)]);
        }

        if (this.corruptors[_i].length < this.maxCorrupt) {
          this.corruptors[_i].unshift(charSet[random(charSet.length)]);
        }

        if (random(2048) < 1 && this.maxCorrupt > 25) {
          this.corruptors[_i].splice(5 * random(5));
        }

        this.corruptors[_i].push(this.corruptors[_i].shift());
      }

      for (var i in chars) {
        if (this.corruptors[i]) {
          chars[i] += this.corruptors[i].join('');
        }
      }

      return chars.join('');
    }
  }, {
    key: "typewriter",
    value: function typewriter(v) {
      this.type = this.type || '';

      if (this.type !== v) {
        this.type += v.substr(this.type.length, 1);
        this.onTimeout(150, function () {
          var max = window.scrollY + window.innerHeight;

          if (document.body.scrollHeight > max) {
            window.scrollTo({
              top: document.body.scrollHeight,
              left: 0,
              behavior: 'smooth'
            });
          }
        });
      } else {
        return true;
      }

      return false;
    }
  }]);

  return MeltingText;
}(_View.View);

exports.MeltingText = MeltingText;
  })();
});
require.register("BackdropPalette.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackdropPalette = void 0;

var _MarbleGarden = require("backdrop/MarbleGarden");

var _ProtoLabrynth = require("backdrop/ProtoLabrynth");

var _Industrial = require("backdrop/Industrial");

var _MysticCave = require("backdrop/MysticCave");

var _WestSideCloudy = require("backdrop/WestSideCloudy");

var _WestSide = require("backdrop/WestSide");

var BackdropPalette = {
  'west-side-cloudy': _WestSideCloudy.WestSideCloudy,
  'west-side': _WestSide.WestSide,
  'proto-labrynth': _ProtoLabrynth.ProtoLabrynth,
  'marble-garden': _MarbleGarden.MarbleGarden,
  'industrial': _Industrial.Industrial,
  'mystic-cave': _MysticCave.MysticCave
};
exports.BackdropPalette = BackdropPalette;
});

;require.register("Classifier.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Classifier = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Classifier = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Classifier, _Mixin$with);

  var _super = _createSuper(Classifier);

  function Classifier(criteria) {
    var _this;

    var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (criterion, item) {
      return item instanceof criterion;
    };

    _classCallCheck(this, Classifier);

    _this = _super.call(this);
    _this.compare = comparator;
    _this.index = new Map();

    for (var i in criteria) {
      _this.index.set(criteria[i], new Set());
    }

    return _this;
  }

  _createClass(Classifier, [{
    key: "add",
    value: function add(object) {
      var before = new CustomEvent('adding', {
        detail: {
          object: object
        }
      });

      if (!this.dispatchEvent(before)) {
        return;
      }

      var indexes = new Set();

      var _iterator = _createForOfIteratorHelper(this.index.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              index = _step$value[0],
              list = _step$value[1];

          if (this.compare(index, object)) {
            indexes.add(index);
            list.add(object);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var after = new CustomEvent('added', {
        detail: {
          object: object,
          indexes: indexes
        }
      });
      this.dispatchEvent(after);
    }
  }, {
    key: "remove",
    value: function remove(object) {
      var before = new CustomEvent('removing', {
        detail: {
          object: object
        }
      });

      if (!this.dispatchEvent(before)) {
        return;
      }

      var indexes = new Set();

      var _iterator2 = _createForOfIteratorHelper(this.index.entries()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
              index = _step2$value[0],
              list = _step2$value[1];

          if (this.compare(index, object)) {
            indexes.add(index);
            list["delete"](object);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var after = new CustomEvent('added', {
        detail: {
          object: object,
          indexes: indexes
        }
      });
      this.dispatchEvent(after);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.index.clear();
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.index.get(key);
    }
  }, {
    key: "count",
    value: function count(key) {
      return this.index.has(key) && this.get(key).size;
    }
  }, {
    key: "has",
    value: function has(key) {
      return !!this.count(key);
    }
  }]);

  return Classifier;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Classifier = Classifier;
});

;require.register("Menu/MainMenu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MainMenu = void 0;

var _Card = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Droop = require("../effects/Droop");

var _Twist = require("../effects/Twist");

var _Menu2 = require("./Menu");

var _SettingsMenu = require("./SettingsMenu");

var _TileMap = require("../tileMap/TileMap");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MainMenu = /*#__PURE__*/function (_Menu) {
  _inherits(MainMenu, _Menu);

  var _super = _createSuper(MainMenu);

  function MainMenu(args, parent) {
    var _this;

    _classCallCheck(this, MainMenu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./main-menu.html'));

    _this.args.cardName = 'main-menu';
    _this.args.haveToken = false;
    _this.args.joinGame = false;
    _this.args.hostGame = false;
    _this.args.copy = 'copy';

    _this.refreshConnection();

    _this.args.items = {
      'Single Player': {
        available: 'available',
        children: {
          'Sonic Control Tutorial': {
            subtext: 'Learn the controls for Sonic',
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/sonic-movement.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Radical City Zone': {
            subtext: 'Gotta go fast!',
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/empty-zone.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Seaview Park Zone': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/west-side-zone.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Pixel Hill Zone': {
            subtext: 'Movement Sandbox - all characters',
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/pixel-hill-zone.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Tails Control Tutorial': {
            subtext: 'Learn the controls for Tails',
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/tails-movement.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Knuckles Control Tutorial': {
            subtext: 'Learn the controls for Knuckles',
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/knuckles-movement.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Terrain Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/bendy-bridges.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Light Dash Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/light-dash-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Block Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/block-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Vehicle Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/vehicle-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Half Pipe Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/half-pipe-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Flickie Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/flickie-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'Water Test': {
            callback: function callback() {
              var tileMap = new _TileMap.TileMap({
                mapUrl: '/map/water-test.json'
              });
              _this.parent.args.networked = false;
              _this.parent.tileMap = tileMap;
              _this.parent.args.started = false;
              tileMap.ready.then(function () {
                _this.parent.startLevel();

                _this.accept();
              });
            }
          },
          'locked': {
            available: 'unavailable'
          },
          'locked ': {
            available: 'unavailable'
          },
          'locked  ': {
            available: 'unavailable'
          }
        } // , callback: () => {
        // 	this.parent.args.networked = false;
        // 	this.remove()
        // }

      },
      '2 Player P2P': {
        children: {
          'Host a game': {
            callback: function callback() {
              _this.args.hostOutput = '';
              _this.args.hostGame = true;
              _this.args.copy = 'copy';
            }
          },
          'Join a game': {
            callback: function callback() {
              _this.args.joinOutput = '';
              _this.args.joinGame = true;
              _this.args.copy = 'copy';

              _this.client.offer().then(function (token) {
                var tokenString = JSON.stringify(token);
                var encodedToken = "s3ktp://request/".concat(btoa(tokenString));
                _this.args.joinOutput = encodedToken;
                _this.args.haveToken = true;
              });
            }
          }
        }
      },
      'Connect To Server': {
        available: 'unavailable'
      },
      Settings: (0, _SettingsMenu.SettingsMenu)(parent)
    };
    _this.bgm = new Audio('/Sonic/s3k-competition.mp3');
    _this.bgm.volume = 0.5;

    _this.onRemove(function () {
      return _this.bgm.pause();
    });

    _this.bgm.loop = true;
    return _this;
  }

  _createClass(MainMenu, [{
    key: "clear",
    value: function clear() {
      this.args.input = '';
      this.args.joinOutput = '';
      this.args.hostOutput = '';
    }
  }, {
    key: "input",
    value: function input(controller) {
      _get(_getPrototypeOf(MainMenu.prototype), "input", this).call(this, controller);

      if (this.args.pinch) {
        var xAxis = controller.axes[2] ? controller.axes[2].magnitude : 0;
        var yAxis = controller.axes[3] ? controller.axes[3].magnitude : 0;
        var pressure = 0;

        if (controller.buttons[6]) {
          pressure = 0.25 + controller.buttons[6].pressure - controller.buttons[7].pressure;
        }

        this.args.pinch.args.scale = pressure * 256;
        this.args.pinch.args.dx = 64 * 1.618 * xAxis;
        this.args.pinch.args.dy = 64 * 1.000 * yAxis;
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.clear();

      if (this.args.hostGame) {
        this.server.close();
      } else if (this.args.joinGame) {
        this.client.close();
      }

      this.args.connected = false;
      this.args.hostGame = false;
      this.args.joinGame = false;
      this.refreshConnection();
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var debind = this.parent.args.bindTo('audio', function (v) {
        v ? _this2.onTimeout(500, function () {
          return _this2.bgm.play();
        }) : _this2.bgm.pause();
      });

      _get(_getPrototypeOf(MainMenu.prototype), "onRendered", this).call(this, event);

      this.onRemove(debind);
      this.args.pinch = new _Twist.Twist({
        id: 'menu-twist',
        scale: 64,
        width: Math.floor(64 * 1.618),
        height: 64
      });
      this.args.pinch = new _Pinch.Pinch({
        id: 'menu-pinch',
        scale: 64,
        width: Math.floor(64 * 1.618),
        height: 64
      });
    }
  }, {
    key: "back",
    value: function back() {
      _get(_getPrototypeOf(MainMenu.prototype), "back", this).call(this);

      this.disconnect();
    }
  }, {
    key: "answer",
    value: function answer() {
      var _this3 = this;

      var offerString = this.args.input;
      var isEncoded = /^s3ktp:\/\/request\/(.+)/.exec(offerString);

      if (isEncoded) {
        offerString = atob(isEncoded[1]);
      }

      var offer = JSON.parse(offerString);
      var answer = this.server.answer(offer);
      answer.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://accept/".concat(btoa(tokenString));
        _this3.args.hostOutput = encodedToken;
        _this3.args.haveToken = true;
      });
      return answer;
    }
  }, {
    key: "acceptRtp",
    value: function acceptRtp() {
      var answerString = this.args.input;
      var isEncoded = /^s3ktp:\/\/accept\/(.+)/.exec(answerString);

      if (isEncoded) {
        answerString = atob(isEncoded[1]);
      }

      var answer = JSON.parse(answerString);
      this.client.accept(answer);
    }
  }, {
    key: "select",
    value: function select() {
      if (this.args.hostGame) {
        this.tags.hostOutput.select();
      } else if (this.args.joinGame) {
        this.tags.joinOutput.select();
      }
    }
  }, {
    key: "copy",
    value: function copy() {
      if (this.args.hostGame) {
        if (!this.args.input) {
          return;
        }

        this.tags.hostOutput.select();
      } else if (this.args.joinGame) {
        if (!this.args.joinOutput) {
          return;
        }

        this.tags.joinOutput.select();
      }

      document.execCommand("copy");
      this.args.copy = 'copied!';
    }
  }, {
    key: "paste",
    value: function paste(event) {
      var _this4 = this;

      navigator.clipboard.readText().then(function (copied) {
        if (_this4.args.hostGame && copied.match(/^s3ktp:\/\/request\//)) {
          _this4.args.input = copied;

          _this4.answer().then(function (token) {
            _this4.copy();
          });
        }

        if (_this4.args.joinGame && copied.match(/^s3ktp:\/\/accept\//)) {
          _this4.args.input = copied;

          _this4.acceptRtp();
        }
      });
    }
  }, {
    key: "refreshConnection",
    value: function refreshConnection() {
      var _this5 = this;

      this.server = this.parent.getServer(true);
      this.client = this.parent.getClient(true);
      var server = this.server;
      var client = this.client;

      var onOpen = function onOpen(event) {
        var tileMap = new _TileMap.TileMap({
          mapUrl: '/map/pixel-hill-zone.json'
        });
        _this5.parent.args.networked = true;
        _this5.parent.tileMap = tileMap;
        tileMap.ready.then(function () {
          _this5.parent.startLevel();

          _this5.accept();

          console.log('Peer connection opened!');
        });
      };

      var onClose = function onClose(event) {
        return _this5.disconnect();
      };

      this.listen(server, 'open', onOpen);
      this.listen(server, 'close', onClose);
      this.listen(client, 'open', onOpen);
      this.listen(client, 'close', onClose);
    }
  }, {
    key: "play",
    value: function play() {
      var _this6 = this;

      _get(_getPrototypeOf(MainMenu.prototype), "play", this).call(this);

      var done = this.done;
      done.then(function () {
        return _this6.onTimeout(250, function () {
          return _this6.remove();
        });
      });
      return done;
    }
  }]);

  return MainMenu;
}(_Menu2.Menu);

exports.MainMenu = MainMenu;
});

;require.register("Menu/Menu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = void 0;

var _Card2 = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Menu = /*#__PURE__*/function (_Card) {
  _inherits(Menu, _Card);

  var _super = _createSuper(Menu);

  function Menu(args, parent) {
    var _this;

    _classCallCheck(this, Menu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./main-menu.html'));

    _this.args.cardName = 'menu';
    _this.args.items = {};
    _this.currentItem = null;
    _this.include = 'a, button, input, textarea, select, details,[tabindex]';
    _this.exclude = '[tabindex="-1"]';

    _this.onRemove(function () {
      return parent.focus();
    });

    return _this;
  }

  _createClass(Menu, [{
    key: "onRendered",
    value: function onRendered(event) {
      var _this2 = this;

      this.args.bindTo('items', function (v) {
        for (var i in v) {
          var item = v[i];

          if (item.get) {
            item.setting = item.get();
          }
        }
      });
      this.args.bindTo('items', function (v) {
        if (!v || !Object.keys(v).length) {
          return;
        }

        var next = _this2.findNext(_this2.currentItem, _this2.tags.bound.node);

        if (next) {
          _this2.focus(next);
        }
      }, {
        wait: 10
      });
      this.focusFirst();
    }
  }, {
    key: "focusFirst",
    value: function focusFirst() {
      if (!this.tags.bound) {
        return;
      }

      var bounds = this.tags.bound;
      var element = this.findNext(null, bounds);
      element && this.focus(element);
    }
  }, {
    key: "findNext",
    value: function findNext(current, bounds) {
      var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var elements = bounds.querySelectorAll(this.include);

      if (!elements.length) {
        return;
      }

      var found = false;
      var first = null;
      var last = null;

      var _iterator = _createForOfIteratorHelper(elements),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var element = _step.value;

          if (element.matches(this.exclude)) {
            continue;
          }

          if (!first) {
            if (!current && !reverse) {
              return element;
            }

            first = element;
          }

          if (!reverse && found) {
            return element;
          }

          if (element === current) {
            if (reverse && last) {
              return last;
            }

            found = true;
          }

          last = element;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (reverse) {
        return last;
      }

      return this.findNext(undefined, bounds, reverse);
    }
  }, {
    key: "focus",
    value: function focus(element) {
      if (this.currentItem && this.currentItem !== element) {
        this.blur(this.currentItem);
      }

      if (element) {
        element.classList.add('focused');
        element.focus();
      }

      this.currentItem = element;
    }
  }, {
    key: "blur",
    value: function blur(element) {
      element.classList.remove('focused');
      element.blur();
    }
  }, {
    key: "input",
    value: function input(controller) {
      var _this3 = this;

      this.zeroMe = controller;

      if (!this.tags.bound) {
        return;
      }

      var next;

      if (controller.buttons[12] && controller.buttons[12].time === 1) {
        next = this.findNext(this.currentItem, this.tags.bound.node, true);
      } else if (controller.buttons[13] && controller.buttons[13].time === 1) {
        next = this.findNext(this.currentItem, this.tags.bound.node);
        this.focus(next);
      } else if (controller.buttons[14] && controller.buttons[14].time === 1) {
        this.currentItem && this.contract(this.currentItem);
      } else if (controller.buttons[15] && controller.buttons[15].time === 1) {
        this.expand(this.currentItem);
      }

      if (controller.buttons[0] && controller.buttons[0].time === 1) {
        this.currentItem && this.currentItem.click();
        this.args.last = 'A';
      } else if (controller.buttons[1] && controller.buttons[1].time === 1) {
        this.back();
        this.args.last = 'B';
      }

      next && this.onTimeout(100, function () {
        return _this3.focus(next);
      });
    }
  }, {
    key: "run",
    value: function run(item) {
      var _this4 = this;

      if (this.zeroMe) {
        this.zeroMe.zero();
      }

      item.callback && this.onTimeout(100, function () {
        return item.callback();
      });

      if (item.children) {
        var prev = this.args.items;
        var back = {
          callback: function callback() {
            _this4.args.items = prev;

            _this4.onNextFrame(function () {
              return _this4.focusFirst();
            });
          }
        };
        this.args.items = item.children;
        this.args.items['back'] = this.args.items['back'] || back;
        this.onNextFrame(function () {
          return _this4.focusFirst();
        });
      }
    }
  }, {
    key: "back",
    value: function back() {
      if (this.args.items['back']) {
        this.args.items['back'].callback();
      }
    }
  }, {
    key: "expand",
    value: function expand(element) {
      var input = element.querySelector('input');
      var title = element.getAttribute('data-title');
      var item = this.args.items[title];

      if (!item) {
        return;
      }

      if (item.input === 'number') {
        item.setting = Number(item.setting) + 1;

        if (item.setting > item.max) {
          item.setting = item.max;
        }

        item.set(item.setting);
      } else if (item.input === 'boolean') {
        item.setting = !item.setting;
        item.set(item.setting);
      } else if (input) {
        input.focus();
      }
    }
  }, {
    key: "contract",
    value: function contract(element) {
      var title = element.getAttribute('data-title');
      var item = this.args.items[title]; // console.log(element, this.args.items, title, item);

      if (item.input === 'number') {
        item.setting = Number(item.setting) - 1;

        if (item.setting < item.min) {
          item.setting = item.min;
        }

        item.set(item.setting);
      } else if (item.input === 'boolean') {
        item.setting = !item.setting;
        item.set(item.setting);
      } else {
        this.focus(element);
      }
    }
  }, {
    key: "keyup",
    value: function keyup(event) {
      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
        event.preventDefault();
        event.stopPropagation();
        var next = this.findNext(this.currentItem, this.tags.bound.node, event.key === 'ArrowUp');

        if (next) {
          this.focus(next);
        }
      }
    }
  }, {
    key: "change",
    value: function change(event) {
      if (!this.currentItem) {
        return;
      }

      var title = this.currentItem.getAttribute('data-title');
      var item = this.args.items[title];
      item.setting = event.target.value;
      item.set(item.setting);
    }
  }, {
    key: "toggle",
    value: function toggle(event, item) {
      event.preventDefault();
      item.setting = !item.setting;
      item.set(item.setting);
    }
  }]);

  return Menu;
}(_Card2.Card);

exports.Menu = Menu;
});

;require.register("Menu/PauseMenu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PauseMenu = void 0;

var _Card = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Menu2 = require("./Menu");

var _SettingsMenu = require("./SettingsMenu");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PauseMenu = /*#__PURE__*/function (_Menu) {
  _inherits(PauseMenu, _Menu);

  var _super = _createSuper(PauseMenu);

  function PauseMenu(args, parent) {
    var _this;

    _classCallCheck(this, PauseMenu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./pause-menu.html'));

    _this.args.cardName = 'pause-menu';
    _this.args.animation = '';
    _this.args.items = {
      Continue: {
        callback: function callback() {
          return parent.unpauseGame();
        }
      },
      Reset: {
        callback: function callback() {
          parent.unpauseGame();
          parent.reset();
          parent.startLevel();
        }
      },
      Demos: {
        children: {
          record: {
            callback: function callback() {
              return _this.parent.record();
            },
            subtext: 'Restart and record your run.'
          },
          stop: {
            callback: function callback() {
              return _this.parent.stop();
            },
            subtext: 'Replay your run.'
          },
          replay: {
            callback: function callback() {
              return _this.parent.playback();
            },
            subtext: 'Replay your run.'
          }
        }
      },
      Settings: (0, _SettingsMenu.SettingsMenu)(parent),
      Quit: {
        children: {
          'No': {
            callback: function callback() {
              return _this.args.items.back.callback();
            }
          },
          'Yes': {
            callback: function callback() {
              _this.args.items.back.callback();

              parent.unpauseGame();
              parent.quit();
            }
          }
        }
      }
    };
    return _this;
  }

  _createClass(PauseMenu, [{
    key: "input",
    value: function input(controller) {
      if (controller.buttons[1012] && controller.buttons[1012].active) {
        this.args.hideMenu = 'pause-menu-hide';
      } else {
        this.args.hideMenu = '';
      }

      if (controller.buttons[1011] && controller.buttons[1011].time === 1) {
        this.args.hideMenu = 'pause-menu-hide';
        this.parent.args.paused = 1;
      }

      _get(_getPrototypeOf(PauseMenu.prototype), "input", this).call(this, controller);
    }
  }]);

  return PauseMenu;
}(_Menu2.Menu);

exports.PauseMenu = PauseMenu;
});

;require.register("Menu/SettingsMenu.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SettingsMenu = void 0;

var SettingsMenu = function SettingsMenu(parent) {
  return {
    children: {
      Video: {
        children: {
          'Motion Blur Effects': {
            input: 'boolean',
            subtext: 'Enable/Disable motion blur effects',
            set: function set(value) {
              return parent.settings.blur = value;
            },
            get: function get() {
              return parent.settings.blur;
            }
          },
          'Displacement Effects': {
            input: 'boolean',
            subtext: 'Enable/Disable displacement effects',
            set: function set(value) {
              return parent.settings.displace = value;
            },
            get: function get() {
              return parent.settings.displace;
            }
          },
          'Outline Thickness': {
            input: 'number',
            subtext: 'Change the outline thickness',
            set: function set(value) {
              return parent.settings.outline = value;
            },
            get: function get() {
              return parent.settings.outline;
            },
            max: 15,
            min: 0
          },
          'Display HUD': {
            input: 'boolean',
            subtext: 'Enable/Disable the HUD',
            set: function set(value) {
              return parent.settings.showHud = value;
            },
            get: function get() {
              return parent.settings.showHud;
            }
          },
          'Debug OSD': {
            input: 'boolean',
            subtext: 'Enable/Disable debug OSD',
            set: function set(value) {
              return parent.settings.debugOsd = value;
            },
            get: function get() {
              return parent.settings.debugOsd;
            }
          },
          'FPS Meter': {
            input: 'boolean',
            subtext: 'Enable/Disable the FPS meter',
            set: function set(value) {
              return parent.settings.showFps = value;
            },
            get: function get() {
              return parent.settings.showFps;
            }
          },
          'Mute/Fullscreen': {
            input: 'boolean',
            subtext: 'Show the mute & fullscreen controls in the bottom right.',
            set: function set(value) {
              return parent.settings.shortcuts = value;
            },
            get: function get() {
              return parent.settings.shortcuts;
            }
          }
        }
      },
      Network: {
        children: {
          'Username': {
            input: 'string',
            subtext: 'Name to display in online games',
            set: function set(value) {
              return parent.settings.username = value;
            },
            get: function get() {
              return parent.settings.username;
            },
            max: 15,
            min: 0
          },
          'Subspace Hub Servers': {},
          'ICE Servers': {
            children: {
              'ICE Server #1': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #2': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #3': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #4': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              }
            }
          }
        }
      },
      Audio: {
        children: {
          'Music Volume': {
            input: 'number',
            subtext: 'Background music volume - 0% - 100%',
            available: 'unavailable',
            set: function set(value) {
              return parent.settings.musicVol = value;
            },
            get: function get() {
              return parent.settings.musicVol;
            },
            max: 100,
            min: 0
          },
          'SFX': {
            input: 'number',
            subtext: 'Sound effect music volume - 0% - 100%',
            available: 'unavailable',
            set: function set(value) {
              return parent.settings.sfxVol = value;
            },
            get: function get() {
              return parent.settings.sfxVol;
            },
            max: 100,
            min: 0
          },
          'Mono / Stereo': {
            available: 'unavailable'
          }
        }
      }
    }
  };
};

exports.SettingsMenu = SettingsMenu;
});

;require.register("Menu/main-menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[pinch]]\n\t[[twist]]\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\t\t<div class = \"menu-container\">\n\n\t\t\t<div>Sonic 3000</div>\n\n\t\t\t<div>\n\n\t\t\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\n\t\t\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(item);\" tabindex=\"0\">\n\t\t\t\t\t\t<span class = \"title\">[[title]]</span>\n\t\t\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\">\n\t\t\t\t\t\t\t: <span data-wraps = \"string\"><input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event)\" tabindex=\"-1\" /></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\">\n\t\t\t\t\t\t\t: <span data-wraps = \"number\"><input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" /></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\">\n\t\t\t\t\t\t\t: <span data-wraps = \"select\"><select cv-on = \"mousedown:toggle(event, item);change(event)\" cv-ref = \"boolean\" cv-bind = \"item.setting\" tabindex=\"-1\">\n\t\t\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t\t\t</select></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\n\t\t\t\t</ul>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t</section>\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\n\t\t<section class = \"contents\" cv-if = \"hostGame\">\n\t\t\t<div class = \"token-exchange\" data-have-token = \"[[haveToken]]\">\n\n\t\t\t\t<label>\n\t\t\t\t\t<p>Input the token from your friend here.</p>\n\t\t\t\t\t<textarea cv-bind = \"input\" cv-on = \"click:paste(event)\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:answer\">go!</button>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\t<p>Send this token to your friend to get started.</p>\n\t\t\t\t\t<textarea cv-on = \"click:copy\" cv-ref = \"hostOutput\" cv-bind = \"hostOutput\" readonly = \"true\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:copy\">[[copy]]</button>\n\n\t\t\t\t\t<div class = \"close\" cv-on = \"click:disconnect\"></div>\n\t\t\t\t</label>\n\n\t\t\t</div>\n\t\t</section>\n\n\t\t<section class = \"contents\" cv-if = \"joinGame\">\n\t\t\t<div class = \"token-exchange\">\n\n\t\t\t\t<label cv-if = \"haveToken\">\n\t\t\t\t\t<p>Send this token to your friend to get started.</p>\n\t\t\t\t\t<textarea cv-on = \"click:copy\" cv-ref = \"joinOutput\" cv-bind = \"joinOutput\" readonly = \"true\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:copy\">[[copy]]</button>\n\t\t\t\t</label>\n\n\t\t\t\t<label cv-if = \"haveToken\">\n\t\t\t\t\t<p>Input the token they send back here.</p>\n\t\t\t\t\t<textarea cv-bind = \"input\" cv-on = \"click:paste(event)\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:acceptRtp\">go!</button>\n\t\t\t\t\t<div class = \"close\" cv-on = \"click:disconnect\"></div>\n\t\t\t\t</label>\n\n\t\t\t</div>\n\t\t</section>\n\n\t</section>\n</div>\n"
});

;require.register("Menu/menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[warp]]\n\n\t<div class = \"menu-container\">\n\n\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\n\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(item);\" tabindex=\"0\">\n\t\t\t\t<span class = \"title\">[[title]]</span>\n\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\">\n\t\t\t\t\t: <span data-wraps = \"string\"><input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event)\" tabindex=\"-1\" /></span>\n\t\t\t\t</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\">\n\t\t\t\t\t: <span data-wraps = \"number\"><input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" /></span>\n\t\t\t\t</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\">\n\t\t\t\t\t: <span data-wraps = \"select\"><select cv-on = \"mousedown:toggle(event, item);change(event)\" cv-ref = \"boolean\" cv-bind = \"item.setting\" tabindex=\"-1\">\n\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t</select></span>\n\t\t\t\t</span>\n\t\t\t</li>\n\n\t\t</ul>\n\n\t</div>\n\n\t</section>\n\n</div>\n"
});

;require.register("Menu/pause-menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[hideMenu]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[warp]]\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\n\t\t<div class = \"menu-container\">\n\n\t\t\t<div>Sonic 3000</div>\n\n\t\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\n\t\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(item);\" tabindex=\"0\">\n\t\t\t\t\t<span class = \"title\">[[title]]</span>\n\t\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\">\n\t\t\t\t\t\t: <input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event)\" tabindex=\"-1\" />\n\t\t\t\t\t</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\">\n\t\t\t\t\t\t: <input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" />\n\t\t\t\t\t</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\">\n\t\t\t\t\t\t: <select cv-on = \"mousedown:toggle(event, item);change(event)\" cv-ref = \"boolean\" cv-bind = \"item.setting\" tabindex=\"-1\">\n\t\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</span>\n\t\t\t\t</li>\n\n\t\t</ul>\n\n\t\t</div>\n\n\t</section>\n\n</div>\n"
});

;require.register("ObjectPalette.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectPalette = void 0;

var _PointActor = require("./actor/PointActor");

var _LayerSwitch = require("./actor/LayerSwitch");

var _Region = require("./region/Region");

var _ShadeRegion = require("./region/ShadeRegion");

var _BgShadeRegion = require("./region/BgShadeRegion");

var _FgShadeRegion = require("./region/FgShadeRegion");

var _WaterRegion = require("./region/WaterRegion");

var _LavaRegion = require("./region/LavaRegion");

var _RollingRegion = require("./region/RollingRegion");

var _GrindingRegion = require("./region/GrindingRegion");

var _ForceRegion = require("./region/ForceRegion");

var _CorkscrewRegion = require("./region/CorkscrewRegion");

var _BossRegion = require("./region/BossRegion");

var _ExitRegion = require("./region/ExitRegion");

var _ExplodingRegion = require("./region/ExplodingRegion");

var _SwitchRegion = require("./region/SwitchRegion");

var _RainRegion = require("./region/RainRegion");

var _WaterfallRegion = require("./region/WaterfallRegion");

var _CompanionBlock = require("./actor/CompanionBlock");

var _QuestionBlock = require("./actor/QuestionBlock");

var _MarbleBlock = require("./actor/MarbleBlock");

var _BreakableBlock = require("./actor/BreakableBlock");

var _Stopper = require("./actor/Stopper");

var _Block = require("./actor/Block");

var _Monitor = require("./actor/Monitor");

var _RingMonitor = require("./actor/monitor/RingMonitor");

var _SheildStarMonitor = require("./actor/monitor/SheildStarMonitor");

var _SheildFireMonitor = require("./actor/monitor/SheildFireMonitor");

var _SheildWaterMonitor = require("./actor/monitor/SheildWaterMonitor");

var _SheildElectricMonitor = require("./actor/monitor/SheildElectricMonitor");

var _Bumper = require("./actor/Bumper");

var _Cinematic = require("./actor/Cinematic");

var _Flickie = require("./actor/Flickie");

var _Bubbles = require("./actor/Bubbles");

var _GuardBot = require("./actor/GuardBot");

var _CrabMeat = require("./actor/CrabMeat");

var _BuzzBomber = require("./actor/BuzzBomber");

var _MechaFroggy = require("./actor/MechaFroggy");

var _DrainFly = require("./actor/DrainFly");

var _Explosion = require("./actor/Explosion");

var _StarPost = require("./actor/StarPost");

var _ArrowSign = require("./actor/ArrowSign");

var _Emerald = require("./actor/Emerald");

var _Window = require("./actor/Window");

var _Spring = require("./actor/Spring");

var _BrokenMonitor = require("./actor/BrokenMonitor");

var _Ring = require("./actor/Ring");

var _Coin = require("./actor/Coin");

var _WaterFall = require("./actor/WaterFall");

var _WaterJet = require("./actor/WaterJet");

var _PowerupGlow = require("./actor/PowerupGlow");

var _Projectile = require("./actor/Projectile");

var _TextActor = require("./actor/TextActor");

var _EggMobile = require("./actor/EggMobile");

var _SnowBoard = require("./actor/SnowBoard");

var _DrillCar = require("./actor/DrillCar");

var _Tornado = require("./actor/Tornado");

var _RailCar = require("./actor/RailCar");

var _NuclearSuperball = require("./actor/NuclearSuperball");

var _MechaSonic = require("./actor/MechaSonic");

var _Eggrobo = require("./actor/Eggrobo");

var _Eggman = require("./actor/Eggman");

var _Sonic = require("./actor/Sonic");

var _Tails = require("./actor/Tails");

var _Knuckles = require("./actor/Knuckles");

var _Seymour = require("./actor/Seymour");

var _Chalmers = require("./actor/Chalmers");

var _Sean = require("./actor/Sean");

var _Rocks = require("./actor/Rocks");

var _Switch = require("./actor/Switch");

var _Balloon = require("./actor/Balloon");

var _StarBalloon = require("./actor/StarBalloon");

var _Spinner = require("./actor/Spinner");

var _Springboard = require("./actor/Springboard");

var _GrapplePoint = require("./actor/GrapplePoint");

var _WoodenCrate = require("./actor/WoodenCrate");

var _SteelCrate = require("./actor/SteelCrate");

var _UnbreakableCrate = require("./actor/UnbreakableCrate");

var _Rocket = require("./actor/Rocket");

var _RoadBarrier = require("./actor/RoadBarrier");

var _Spikes = require("./actor/Spikes");

var _Cone = require("./actor/Cone");

var _Signpost = require("./actor/Signpost");

var _RedEyeJet = require("./actor/RedEyeJet");

var _MiniMace = require("./actor/MiniMace");

var _Beelzebub = require("./actor/Beelzebub");

var _Magnet = require("./actor/Magnet");

var _Orb = require("./actor/Orb");

var _BackdropSwapper = require("./actor/BackdropSwapper");

var _LayerController = require("./actor/LayerController");

var _WaterController = require("./actor/WaterController");

var _TilesetSwapper = require("./actor/TilesetSwapper");

var _CutScene = require("./actor/CutScene");

var _HtmlFrame = require("./actor/HtmlFrame");

// import { SuperRing }   from './actor/SuperRing';
var ObjectPalette = {
  player: _NuclearSuperball.NuclearSuperball,
  cinematic: _Cinematic.Cinematic,
  spring: _Spring.Spring,
  'layer-switch': _LayerSwitch.LayerSwitch,
  'layer-controller': _LayerController.LayerController,
  'water-controller': _WaterController.WaterController,
  'backdrop-swapper': _BackdropSwapper.BackdropSwapper,
  'tileset-swapper': _TilesetSwapper.TilesetSwapper,
  'star-post': _StarPost.StarPost,
  'arrow-sign': _ArrowSign.ArrowSign,
  'projectile': _Projectile.Projectile,
  'block': _Block.Block,
  'q-block': _QuestionBlock.QuestionBlock,
  'marble-block': _MarbleBlock.MarbleBlock,
  'companion-block': _CompanionBlock.CompanionBlock,
  'breakable-block': _BreakableBlock.BreakableBlock,
  'stopper': _Stopper.Stopper,
  'bumper': _Bumper.Bumper,
  'drill-car': _DrillCar.DrillCar,
  'rail-car': _RailCar.RailCar,
  'tornado': _Tornado.Tornado,
  'snow-board': _SnowBoard.SnowBoard,
  'egg-mobile': _EggMobile.EggMobile,
  'rocks-tall': _Rocks.Rocks,
  'rocks-med': _Rocks.Rocks,
  'rocks-short': _Rocks.Rocks,
  'mecha-sonic': _MechaSonic.MechaSonic,
  'sonic': _Sonic.Sonic,
  'tails': _Tails.Tails,
  'knuckles': _Knuckles.Knuckles,
  'eggman': _Eggman.Eggman,
  'eggrobo': _Eggrobo.Eggrobo,
  'seymour': _Seymour.Seymour,
  'chalmers': _Chalmers.Chalmers,
  'sean': _Sean.Sean,
  'switch': _Switch.Switch,
  'window': _Window.Window,
  'emerald': _Emerald.Emerald,
  'base-region': _Region.Region,
  'region': _WaterRegion.WaterRegion,
  'lava-region': _LavaRegion.LavaRegion,
  'shade-region': _ShadeRegion.ShadeRegion,
  'force-region': _ForceRegion.ForceRegion,
  'corkscrew-region': _CorkscrewRegion.CorkscrewRegion,
  'rolling-region': _RollingRegion.RollingRegion,
  'grinding-region': _GrindingRegion.GrindingRegion,
  'exploding-region': _ExplodingRegion.ExplodingRegion,
  'boss-region': _BossRegion.BossRegion,
  'exit-region': _ExitRegion.ExitRegion,
  'switch-region': _SwitchRegion.SwitchRegion,
  'rain-region': _RainRegion.RainRegion,
  'waterfall-region': _WaterfallRegion.WaterfallRegion,
  'ring': _Ring.Ring // , 'super-ring':   SuperRing
  ,
  'coin': _Coin.Coin,
  'powerup-glow': _PowerupGlow.PowerupGlow,
  'explosion': _Explosion.Explosion,
  'text-actor': _TextActor.TextActor,
  'water-jet': _WaterJet.WaterJet,
  'water-fall': _WaterFall.WaterFall,
  'balloon': _Balloon.Balloon,
  'star-balloon': _StarBalloon.StarBalloon,
  'ring-monitor': _RingMonitor.RingMonitor,
  'sheild-fire-monitor': _SheildFireMonitor.SheildFireMonitor,
  'sheild-star-monitor': _SheildStarMonitor.SheildStarMonitor,
  'sheild-water-monitor': _SheildWaterMonitor.SheildWaterMonitor,
  'sheild-electric-monitor': _SheildElectricMonitor.SheildElectricMonitor,
  'flickie': _Flickie.Flickie,
  'crabmeat': _CrabMeat.CrabMeat,
  'guard-bot': _GuardBot.GuardBot,
  'mecha-froggy': _MechaFroggy.MechaFroggy,
  'buzz-bomber': _BuzzBomber.BuzzBomber,
  'bubbles': _Bubbles.Bubbles,
  'drainfly': _DrainFly.DrainFly,
  'grapple-point': _GrapplePoint.GrapplePoint,
  'rocket': _Rocket.Rocket,
  'spinner': _Spinner.Spinner,
  'springboard': _Springboard.Springboard,
  'wooden-crate': _WoodenCrate.WoodenCrate,
  'steel-crate': _SteelCrate.SteelCrate,
  'unbreakable-crate': _UnbreakableCrate.UnbreakableCrate,
  'road-barrier': _RoadBarrier.RoadBarrier,
  'signpost': _Signpost.Signpost,
  'red-eye-jet': _RedEyeJet.RedEyeJet,
  'beelzebub': _Beelzebub.Beelzebub,
  'mini-mace': _MiniMace.MiniMace,
  'magnet': _Magnet.Magnet,
  'spikes': _Spikes.Spikes,
  'cone': _Cone.Cone,
  'orb': _Orb.Orb,
  'cut-scene': _CutScene.CutScene,
  'html-frame': _HtmlFrame.HtmlFrame
};
exports.ObjectPalette = ObjectPalette;
});

require.register("World.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.World = void 0;

var _Bag = require("curvature/base/Bag");

var _Bindable = require("curvature/base/Bindable");

var _TileMap = require("tileMap/TileMap");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var World = /*#__PURE__*/function () {
  function World() {
    var _this = this;

    _classCallCheck(this, World);

    _defineProperty(this, "tileMap", new _TileMap.TileMap());

    this.viewports = new _Bag.Bag(function (i, s, a) {
      switch (a) {
        case BAG.ITEM_ADDED:
          i.world = _this;
          break;

        case BAG.ITEM_REMOVED:
          i.world = null;
          break;
      }
    });
    this.actors = new _Bag.Bag(function (i, s, a) {
      switch (a) {
        case BAG.ITEM_ADDED:
          i.world = _this;
          break;

        case BAG.ITEM_REMOVED:
          i.world = null;
          break;
      }
    });
  }

  _createClass(World, [{
    key: "getOnScreenObjects",
    value: function getOnScreenObjects(tolerance) {}
  }, {
    key: "update",
    value: function update() {}
  }]);

  return World;
}();

exports.World = World;

_defineProperty(World, "globals", _Bindable.Bindable.make({}));
});

;require.register("abilities/LightDash.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightDash = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LightDash = function LightDash() {
  _classCallCheck(this, LightDash);
};

exports.LightDash = LightDash;
});

;require.register("actor/ArrowSign.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrowSign = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Projectile = require("../actor/Projectile");

var _Monitor = require("./Monitor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildFireMonitor = require("./monitor/SheildFireMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

var _SheildElectricMonitor = require("./monitor/SheildElectricMonitor");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArrowSign = /*#__PURE__*/function (_PointActor) {
  _inherits(ArrowSign, _PointActor);

  var _super = _createSuper(ArrowSign);

  function ArrowSign(args, parent) {
    var _this;

    _classCallCheck(this, ArrowSign);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-arrow-sign';
    _this.args["float"] = -1;
    _this.args["static"] = true;
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 64;
    return _this;
  }

  _createClass(ArrowSign, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      if (this.headBox) {
        return;
      }

      this.sprite = this.findTag('div.sprite');
      this.box = this.findTag('div');
      this.headBox = new _Tag.Tag('<div class = "arrow-sign-head-box">');
      this.post = new _Tag.Tag('<div class = "arrow-sign-post">');
      this.head = new _Tag.Tag('<div class = "arrow-sign-head">');
      this.sprite.appendChild(this.post.node);
      this.headBox.appendChild(this.head.node);
      this.sprite.appendChild(this.headBox.node);
      this.args.bindTo(['point', 'height'], function (v, k) {
        _this2.headBox.style(_defineProperty({}, '--' + k, v));
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(ArrowSign), "fromDef", this).call(this, objDef);

      obj.args.rotation = objDef.rotation;
      obj.args.height = objDef.height;
      return obj;
    }
  }]);

  return ArrowSign;
}(_PointActor2.PointActor);

exports.ArrowSign = ArrowSign;
});

;require.register("actor/BackdropSwapper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackdropSwapper = void 0;

var _PointActor2 = require("./PointActor");

var _BackdropPalette = require("../BackdropPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BackdropSwapper = /*#__PURE__*/function (_PointActor) {
  _inherits(BackdropSwapper, _PointActor);

  var _super = _createSuper(BackdropSwapper);

  function BackdropSwapper(args, parent) {
    var _this;

    _classCallCheck(this, BackdropSwapper);

    _this = _super.call(this, args, parent);
    _this.args.hidden = true;
    return _this;
  }

  _createClass(BackdropSwapper, [{
    key: "activate",
    value: function activate(other, button) {// this.viewport.tilemap.replacements.set(
      // 	this.args.original//'../Sonic/tiles/azure-lake/azure-lake.png'
      // 	, this.args.replacement//'../Sonic/tiles/azure-lake/azure-lake-burnt.png'
      // );
    }
  }]);

  return BackdropSwapper;
}(_PointActor2.PointActor);

exports.BackdropSwapper = BackdropSwapper;
});

;require.register("actor/Balloon.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Balloon = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Balloon = /*#__PURE__*/function (_PointActor) {
  _inherits(Balloon, _PointActor);

  var _super = _createSuper(Balloon);

  function Balloon() {
    var _this;

    _classCallCheck(this, Balloon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-balloon';
    _this.args.width = 32;
    _this.args.height = 33;
    _this.args["float"] = -1;
    _this.args.airAngle = -Math.PI;
    return _this;
  }

  _createClass(Balloon, [{
    key: "collideA",
    value: function collideA(other) {
      if (!other.controllable) {
        return;
      }
    }
  }]);

  return Balloon;
}(_PointActor2.PointActor);

exports.Balloon = Balloon;
});

;require.register("actor/Beelzebub.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Beelzebub = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _CanPop = require("../mixin/CanPop");

var _CutScene = require("./CutScene");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Beelzebub = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Beelzebub, _Mixin$from);

  var _super = _createSuper(Beelzebub);

  function Beelzebub(args, parent) {
    var _this;

    _classCallCheck(this, Beelzebub);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-beelzebub';
    _this.args.width = 64;
    _this.args.height = 32;
    _this.args["float"] = -1;
    _this.args.damagers = new Map();
    _this.args.phase = 'idle';
    _this.dieSound = new Audio('/Sonic/object-destroyed.wav');
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    _this.dudSound = new Audio('/Sonic/S2_59.wav');
    _this.args.hitPoints = 8;
    _this.args.noseAngle = Math.PI / 2 * 3;
    _this.args.drillPush = 0;
    _this.args.phaseFrameId = 0;
    _this.args.frameId = 0;
    _this.args.direction = -1;
    _this.args.facing = 'left';

    _this.args.bindTo('phase', function (v) {
      return _this.args.phaseFrameId = 0;
    });

    _this.clearScene = new _CutScene.CutScene({
      src: '/cutscenes/clear-seaview.json'
    });
    return _this;
  }

  _createClass(Beelzebub, [{
    key: "onAttached",
    value: function onAttached() {
      this.autoStyle.get(this.box)['--nose-angle'] = 'noseAngle';
      this.autoStyle.get(this.box)['--drill-push'] = 'drillPush';
      this.autoAttr.get(this.box)['data-phase'] = 'phase';
      this.drill = new _Tag.Tag("<div class = \"drill\">");
      this.body = new _Tag.Tag("<div class = \"body\">");
      this.nose = new _Tag.Tag("<div class = \"nose\">");
      this.eyeBack = new _Tag.Tag("<div class = \"eye-back\">");
      this.eyeFore = new _Tag.Tag("<div class = \"eye-fore\">");
      this.body.appendChild(this.eyeBack.node);
      this.body.appendChild(this.eyeFore.node);
      this.body.appendChild(this.nose.node);
      this.sprite.appendChild(this.body.node);
      this.nose.appendChild(this.drill.node);
      this.attractor = null;
      this.clearScene.viewport = this.viewport;
    }
  }, {
    key: "update",
    value: function update() {
      this.args.phaseFrameId++;
      this.args.frameId++;

      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      viewport.auras.add(this);
      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      if (!this.attractor) {
        this.attractor = {};
        this.attractor.x = this.x;
        this.attractor.y = this.y;
      }

      var xDiff = Math.abs(this.x - this.attractor.x);
      var yDiff = Math.abs(this.y - this.attractor.y);
      var xSign = Math.sign(this.x - this.attractor.x);
      var ySign = Math.sign(this.y - this.attractor.y);

      switch (this.args.phase) {
        case 'idle':
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;
          break;

        case 'intro':
          if (this.args.phaseFrameId > 30) {
            this.args.phase = 'stalking';
          }

          break;

        case 'alert':
          if (this.args.phaseFrameId > 4) {
            this.args.drillPush = 1;
            this.args.falling = true;
            this.args["float"] = -1;

            if (this.y > this.args.alertTo) {
              this.args.ySpeed--;
            } else {
              this.args.y = this.args.alertTo;
              this.args.ySpeed = 0;
            }
          }

          if (this.args.phaseFrameId > 0) {
            this.args.phase = 'stalking';
          }

          break;

        case 'damaged':
          if (this.args.hitPoints > 0) {
            if (this.args.phaseFrameId > 20) {
              this.args.phase = 'stalking';
            }
          } else {
            if (this.args.phaseFrameId > 6) {
              this.args.phase = 'dead';
            }
          }

          break;

        case 'knocked':
          this.args.xSpeed = 0;

          if (this.args.phaseFrameId > 30) {
            this.args.phase = 'stalking';
          }

          break;

        case 'dead':
          this.args["float"] = 0;
          break;

        case 'stalking':
          {
            this.args.xSpeed = -xSign * Math.max(1, xDiff / 25);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 25);
            this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;

            if (this.pointIsSafe(mainChar.x, mainChar.y - 128)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y - 128;
            }

            this.args.noseAngle = Math.PI / 2 * 3;
            this.args.drillPush = 0;

            if (this.args.phaseFrameId > 10) {
              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            if (this.args.phaseFrameId > 20) {
              this.args.drillPush = 0.5;
            }

            if (this.args.phaseFrameId > 45) {
              this.args.phase = 'ready';
            }

            break;
          }

        case 'buzzing':
          {
            if (this.pointIsSafe(mainChar.x, mainChar.y + -mainChar.args.height + -34)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y + -mainChar.args.height + -34;
            }

            this.args.xSpeed = -xSign * Math.max(1, xDiff / 15);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 15);
            this.args.noseAngle = Math.PI / 2 * 3;
            this.args.drillPush = 1;

            if (this.args.phaseFrameId > 10) {
              this.args.drillPush = 0.5;
            }

            if (this.args.phaseFrameId > 20) {
              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            if (this.args.phaseFrameId > 30) {
              this.args.phase = 'ready';
            }

            break;
          }

        case 'ready':
          {
            if (this.args.phaseFrameId < 10) {
              this.readySide = Math.sign(mainChar.xSpeedLast || mainChar.gSpeedLast);
            }

            if (this.pointIsSafe(mainChar.x + 128 * this.readySide, mainChar.y + -mainChar.args.height + -128)) {
              this.attractor.x = mainChar.x + 128 * this.readySide;
              this.attractor.y = mainChar.y + -mainChar.args.height + -128;
            }

            this.args.xSpeed = -xSign * Math.max(1, xDiff / 15);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 15);
            this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;
            this.args.drillPush = 0.75;

            if (this.args.phaseFrameId > 40) {
              var dieRoll = Math.random();

              if (!mainChar.args.falling) {
                if (dieRoll > 0.5) {
                  this.args.phase = 'swooping';
                } else {
                  this.args.phase = 'attacking';
                }
              } else {
                if (dieRoll > 0.5) {
                  this.args.phase = 'buzzing';
                } else {
                  this.args.phase = 'stalking';
                }
              }
            }

            break;
          }

        case 'attacking':
          {
            this.args["float"] = -1;
            this.args.falling = true;

            if (this.args.phaseFrameId > 100) {
              this.args.phase = 'stalking';
            }

            if (this.args.phaseFrameId < 50) {
              if (this.pointIsSafe(mainChar.x + 256 * (this.readySide || 1), mainChar.y - 32)) {
                this.attractor.x = mainChar.x + 256 * (this.readySide || 1);
                this.attractor.y = mainChar.y - 32;
              }

              this.args.noseAngle = 0;
            } else {
              if (this.pointIsSafe(mainChar.x + 256 * (-this.readySide || -1), mainChar.y - 16)) {
                this.attractor.x = mainChar.x + 256 * (-this.readySide || -1);
                this.attractor.y = mainChar.y - 16;
              }

              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            this.args.drillPush = 1;
            this.args["float"] = -1;
            var mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;
            this.args.xSpeed = -xSign * Math.max(1, xDiff / 10) + mainSpeed * 1.1;
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 10);
            break;
          }

        case 'swooping':
          {
            if (this.pointIsSafe(mainChar.x, mainChar.y - 32)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y - 32;
            }

            this.args.xSpeed += -xSign * Math.max(1, xDiff / 10000);
            this.args.ySpeed += -ySign * Math.max(1, yDiff / 10000);
            this.args.noseAngle = this.angleTo({
              x: mainChar.x,
              y: Math.max(this.y, mainChar.y)
            });
            this.args.drillPush = 1;
            this.args["float"] = -1;

            if (this.args.phaseFrameId > 180) {
              this.args.phase = 'stalking';
            }

            var _mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;

            break;
          }

        case 'exploding':
          if (this.args.phaseFrameId === 90) {
            this.args.falling = true;
            this.args.ySpeed = -14;
            this.args.xSpeed = 0;
            this.args.gSpeed = 0;
            this.noClip = true;
            this.viewport.auras["delete"](this);
            this.args.phase = 'exploded';
            this.clearScene.activate(mainChar, this, true);

            if (this.viewport.args.audio) {
              this.dieSound.volume = 0.5;
              this.dieSound.play();
            }
          }

          if (this.args.phaseFrameId > 90) {
            return;
          }

          if (viewport && viewport.args.frameId % 3 === 0) {
            var explosion = new _Tag.Tag('<div class = "particle-explosion">');

            if (viewport.args.audio) {
              this.hitSound.currentTime = 0;
              this.hitSound.volume = 0.35 + Math.random() * -0.15;
              this.hitSound.play();
            }

            var xOff = this.args.width * Math.random() - this.args.width / 2;
            var yOff = this.args.height * Math.random() - this.args.height / 2;
            explosion.style({
              '--x': this.x + xOff,
              '--y': this.y + yOff + -16
            });
            viewport.particles.add(explosion);
            setTimeout(function () {
              return viewport.particles.remove(explosion);
            }, 512);
          }

          break;
      }

      if (this.args.phase !== 'knocked') {
        if (this.args.ySpeed < 0 && !this.pointIsSafe(this.x, this.y + -this.args.height + this.args.ySpeed + -1)) {
          this.args.ySpeed = 0;
        }
      }

      _get(_getPrototypeOf(Beelzebub.prototype), "update", this).call(this);
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(Beelzebub.prototype), "updateEnd", this).call(this);

      if (!this.viewport) {
        return;
      }

      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      var xDiff = Math.abs(this.x - mainChar.x);
      var yDiff = Math.abs(this.y - mainChar.y);
      var xSign = Math.sign(this.x - mainChar.x);
      var ySign = Math.sign(this.y - mainChar.y);

      switch (this.args.phase) {
        case 'attacking':
        case 'swooping':
        case 'stalking':
        case 'knocked':
        case 'damaged':
        case 'ready':
          {
            if (xDiff > 384) {
              this.args.x = mainChar.x + 384 * xSign;
            }

            if (yDiff > 192) {
              this.args.y = mainChar.y + 192 * ySign;
            }

            if (this.args.hitPoints <= 0) {
              this.viewport.auras["delete"](this);
              this.args.phase = 'dead';
              this.noClip = false;
              this.args["float"] = 0;

              if (typeof ga === 'function') {
                ga('send', 'event', {
                  eventCategory: 'boss',
                  eventAction: 'defeated',
                  eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
                });
              }
            }

            break;
          }
      }

      if (this.args.xSpeed < 0) {
        this.args.facing = 'left';
      } else if (this.args.xSpeed > 0) {
        this.args.facing = 'right';
      }

      this.args.groundAngle = 0;

      switch (this.args.phase) {
        case 'attacking':
        case 'swooping':
        case 'stalking':
        case 'ready':
          {
            if (this.checkBelow(this.x, this.y)) {
              this.args.falling = true;
              this.args.ySpeed = -4;
              this.args.y--;
            }
          }
          break;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.args.phase === 'exploded') {
        return false;
      }

      if (!other.controllable && !other.hazard) {
        return true;
      }

      if (type === -1) {
        return;
      }

      var xSign = Math.sign(this.x - other.x);
      var ySign = Math.sign(this.y - other.y);
      var impactSpeed = Math.max(Math.abs(other.args.xSpeed), 5);
      var impactSign = Math.sign(other.args.xSpeed);

      if (this.args.hitPoints > 0 && other.controllable) {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          other.damage();
          this.args.phase = 'ready';

          if (typeof ga === 'function') {
            ga('send', 'event', {
              eventCategory: 'boss',
              eventAction: 'damaged-player',
              eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id, "::").concat(other.args.id)
            });
          }

          return true;
        }
      }

      if (this.args.phase === 'dead') {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          return true;
        }

        this.args.explodeFrame = this.viewport.args.frameId;
        this.args.phase = 'exploding';
      }

      if (type === 1 || type === 3) // Side collisions
        {
          if (other.args.falling) {
            this.ignores.set(other, 15);
          } else {
            other.args.gSpeed = 4 * -Math.sign(this.x - other.x);

            if (other.args.rolling) {
              this.onNextFrame(function () {
                other.args.gSpeed = -Math.sign(_this2.x - other.x);
                other.args.rolling = true;
                other.args.direction = Math.sign(other.args.gSpeed);
              });
            }
          }

          this.args.ySpeed = 0;

          if (this.args.hitPoints > 0) {
            this.damage(other);
          }

          if (this.args.hitPoints > 0) {
            other.args.xSpeed = -xSign * impactSpeed;
            this.args.xSpeed = xSign * impactSpeed;
          } else {
            other.args.xSpeed = -xSign;
            this.args.xSpeed = xSign;
          }
        }

      if (type === 2) // Collide from bottom
        {
          if (this.viewport.args.audio) {
            this.dudSound.currentTime = 0;
            this.dudSound.volume = 0.35 + Math.random() * -0.15;
            this.dudSound.play();
          }

          if (other.args.falling) {
            this.args.ySpeed = other.args.ySpeed * 2.5;

            if (other.args.controllable) {
              other.args.ySpeed = Math.max(7, Math.abs(other.args.ySpeed));
            }
          }

          this.args.xSpeed = 0;

          if (this.args.hitPoints > 0) {
            this.args.phase = 'knocked';
          }

          this.ignores.set(other, 15);
        }

      if (type === 0) // Collide from top
        {
          if (other.args.falling) {
            this.ignores.set(other, 15);
          }

          if (other.controllable) {
            other.args.y = this.y - this.args.height;
            var animation = other.args.animation;
            var ySpeed = other.args.ySpeed;
            this.onNextFrame(function () {
              other.args.ySpeed = -Math.floor(Math.abs(ySpeed)) || -4;
            });
          }

          this.args.xSpeed = 0;
          this.damage(other);
        }

      other.args.ignore = 1;

      if (!this.args.hitPoints) {
        other.args.ignore = -2;
      }

      return true;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

      if (this.args.hitPoints <= 0) {
        return;
      }

      var lastHit = this.args.damagers.get(other);

      if (this.args.frameId - lastHit < 5) {
        return;
      }

      this.args.hitPoints--;
      this.args.damagers.set(other, this.args.frameId);
      this.args.phase = 'damaged';

      if (this.viewport.args.audio) {
        this.hitSound.currentTime = 0;
        this.hitSound.volume = 0.35 + Math.random() * -0.15;
        this.hitSound.play();
      }
    }
  }, {
    key: "pointIsSafe",
    value: function pointIsSafe(x, y) {
      var hazards = this.viewport.actorsAtPoint(x, y).filter(function (a) {
        return a.hazard;
      });

      if (hazards.length) {
        return false;
      }

      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return this.args.hitPoints > 0;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return Beelzebub;
}(_Mixin.Mixin.from(_PointActor.PointActor));

exports.Beelzebub = Beelzebub;
});

;require.register("actor/Block.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Block = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _QuintInOut = require("curvature/animate/ease/QuintInOut");

var _CubicInOut = require("curvature/animate/ease/CubicInOut");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Block = /*#__PURE__*/function (_PointActor) {
  _inherits(Block, _PointActor);

  var _super = _createSuper(Block);

  function Block() {
    var _args$collapse;

    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Block);

    _this = _super.call(this, args, parent);
    _this.args.yForce = 0;
    _this.args.yLean = 0;
    _this.args.type = 'actor-item actor-block';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.originalX = _this.args.x;
    _this.originalY = _this.args.y;
    _this.args.solid = true;
    _this.args.gravity = 0.5;
    _this.args.collapse = (_args$collapse = args.collapse) !== null && _args$collapse !== void 0 ? _args$collapse : false; // this.moving = this.reverse = false;
    // this.remaining = 0;
    // this.ease = new QuintInOut(this.public.period);
    // this.args.active = this.args.active ?? -1;

    _this.args.active = -1; // if(this.args.active)
    // {
    // 	this.ease.start();
    // }

    return _this;
  }

  _createClass(Block, [{
    key: "onRendered",
    value: function onRendered(event) {
      var _this2 = this;

      _get(_getPrototypeOf(Block.prototype), "onRendered", this).call(this, event);

      this.onNextFrame(function () {
        return _this2.droop(0);
      });

      if (this.screen) {
        return;
      }

      this.screen = new _Tag.Tag("<input type = \"text\" placeholder = \"this effect is dynamic\">");
      this.screen2 = new _Tag.Tag("<input tabindex = \"0\" type = \"button\" value = \"submit\">"); // this.sprite.appendChild(this.screen.node);
      // this.sprite.appendChild(this.screen2.node);
      // this.screen.style({'pointer-events':'initial', 'z-index': 1000});

      this.args.spriteSheet = this.args.spriteSheet || '/Sonic/marble-zone-block.png';
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this3 = this;

      if (other instanceof this.constructor) {
        return false;
      }

      if (this.args.droop && other.args.ySpeed >= 0 && other.args.standingOn !== this) {
        return true;
      }

      if (type === -1 && !this.args.platform && other.controllable && other.args.ySpeed) {
        if (other.args.y < this.args.y) {
          other.args.y = this.y + -this.args.height + this.args.ySpeed + -1;

          if (other.args.ySpeed < 0) {
            other.args.ySpeed = this.args.ySpeed;
          }
        } else {
          other.args.y = this.y + other.args.height + -this.args.ySpeed + 1;
          other.args.ySpeed = this.args.ySpeed;
        }

        return;
      }

      if (this["public"].droop && (type === 0 || type === 2)) {
        var blockTop = this.originalY + -this["public"].height;
        var half = Math.floor(this.args.width / 2);
        var speed = other["public"].gSpeed;
        var absSpeed = Math.abs(speed);

        if (absSpeed > half) {
          this.args.y = this.originalY;
          other.args.y = blockTop + -1;
          this.args.yForce = 0;
          this.args.yLean = 0;
          return true;
        }

        var pos = (this.x + -other.x + -(speed * 2)) / half;
        var droop = Number(this["public"].droop) * 0.9;
        var absPos = Math.abs(pos);
        this.screen.placeholder = "drooping at ".concat(pos.toFixed(2));

        if (absPos >= 0.9) {
          this.args.yForce = 0;
          this.args.yLean = 0;
          return true;
        }

        var yForceMax = Math.round(droop * (1 - Math.abs(pos)) * 4) / 4;
        this.args.yForce += Math.max(other.args.ySpeed, 4);
        this.args.yForce = Math.min(yForceMax, this["public"].yForce);
        this.args.yForce = Math.max(this.args.yForce, -yForceMax);
        this.droopPos = this.x - other.x;

        if (this.args.output) {
          var output = this.viewport.actorsById[this.args.output];

          if (output) {
            output.args.content = this.screen.value;
          }
        }
      }

      if (this["public"].platform) {
        if (other.willStick) {
          return false;
        }

        var otherTop = other.y - other["public"].height;

        var _blockTop = this.y - this["public"].height;

        var halfWidth = this.args.width / 2;

        if (other.args.falling && other.y - _blockTop < 16 && other.args.ySpeed >= 0 && Math.abs(other.x - this.x) < halfWidth - 16) {
          other.args.y = _blockTop;
        }

        if (other.y <= _blockTop && (other.args.falling === false || other.args.ySpeed > 0)) {
          return true;
        }

        return false;
      }

      if (!other.controllable && !other.isVehicle) {
        return true;
      }

      if (this.args.collapse && (type === 0 || type === 2) && this.args["float"] <= 0) {
        if (other["public"].ySpeed > 15) {
          this.args["float"] = 1;
          this.args.goBack = false;
          var ySpeed = other["public"].ySpeed;
          this.onNextFrame(function () {
            if (_this3["public"].falling || _this3["public"]["float"]) {
              _this3.args.ySpeed = ySpeed;
              _this3.args["float"] = 1;
            } else {
              _this3.args.ySpeed = -1;
              _this3.args["float"] = 1;
            }

            _this3["public"].falling = true;
          });
        } else if (other["public"].ySpeed > 0 || other["public"].gSpeed) {
          this.args["float"] = this.args["float"] > 0 ? this.args["float"] : 5;
        }
      }

      return true;
    }
  }, {
    key: "onAttach",
    value: function onAttach(event) {
      var _this4 = this;

      if (!this.viewport) {
        return;
      }

      this["public"].collapse && this.tags.sprite.classList.add('collapse');
      this["public"].platform && this.tags.sprite.classList.add('platform');

      if (this["public"].hidden) {
        event && event.preventDefault();
        return false;
      }

      this.viewport.tileMap.ready.then(function (event) {
        var tile = _this4.viewport.tileMap.getTile(_this4["public"].tileId - 1);

        if (!tile) {
          return;
        }

        _this4.args.spriteX = tile[0];
        _this4.args.spriteY = tile[1];
        _this4.args.spriteSheet = '/map/' + tile[2];

        if (_this4["public"].droop) {
          _this4.droop(0);
        }
      });
    }
  }, {
    key: "activate",
    value: function activate() {
      this.args.active = true;
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.args.active = false;
    }
  }, {
    key: "update",
    value: function update() {
      var _this5 = this;

      if (!this.viewport) {
        return;
      }

      if (this["public"].collapse) {
        this.args.gSpeed = 0;
      }

      if (this["public"]["float"] && (this["public"].oscillateX || this["public"].oscillateY)) {
        var current = Math.pow(Math.cos(Math.pow(Math.sin(this.viewport.args.frameId / 90), 5)), 5 * 3.333);

        if (this["public"].oscillateX) {
          var moveX = Math.round(current * this["public"].oscillateX);
          this.args.x = this.originalX - moveX;
        }

        if (this["public"].oscillateY) {
          var moveY = Math.round(current * this["public"].oscillateY);
          this.args.y = this.originalY - moveY;
        }
      }

      if (this.args.collapse) {
        if (!this.reset && !this.args.once) {
          this.reset = true;
          this.viewport.onFrameOut(300, function () {
            _this5.args.groundAngle = 0;
            _this5.args.falling = true;
            _this5.args.goBack = true;
            _this5.args["float"] = -1;
            _this5.reset = false;
          });
        }

        if (this.args.goBack) {
          this.args["float"] = -1;
          this.noClip = true;
          var distX = this.originalX - this.args.x;
          var distY = this.originalY - this.args.y;
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;
          this.args.gSpeed = 0;

          if (Math.abs(distX) > 3) {
            this.args.x += Math.sign(distX) * 3;
          } else {
            this.args.x = this.originalX;
          }

          if (Math.abs(distY) > 3) {
            this.args.y += Math.sign(distY) * 3;
          } else {
            this.args.y = this.originalY;
          }

          if (this["public"].x === this.originalX && this.args.y === this.originalY) {
            this.args.goBack = false;
            this.noClip = false;
          }

          this.args.groundAngle = 0;
          this.args.airAngle = 0;
        }
      } else if (this["public"].droop) {
        this.snapBack = this.snapBack || false;

        if (!this.args.colliding && this.args.yForce && this.viewport) {
          this.viewport.onFrameOut(4, function () {
            if (!_this5.args.colliding) {
              _this5.snapBack = true;
            }
          });
        }

        if (!this.args.colliding && this.args.yForce && this.snapBack) {
          this.args.yForce *= 0.15;
        }

        if (Math.abs(this["public"].yForce) <= 1) {
          // this.screen.placeholder = `flat.`;
          this.snapBack = false;
        }

        if (this.args.yForce !== this.args.yLean) {
          var diff = this.args.yLean - this.args.yForce;
          var step = 16;
          this.args.yLean -= Math.sign(diff) * step;

          if (Math.abs(diff) < step) {
            this.args.yLean = this.args.yForce;
          }
        }

        if (!this["public"].yLean) {
          this.args.y = this.originalY;
        } else {
          this.args.y = Math.ceil(this.originalY + this["public"].yLean) || this.originalY;
          this.droop(-1 * this["public"].yLean, this.droopPos || 0);
          this.onNextFrame(function () {
            _this5.args.y = Math.ceil(_this5.originalY + _this5["public"].yLean) || _this5.originalY;

            _this5.droop(-1 * _this5["public"].yLean, _this5.droopPos || 0);
          });
        }
      }

      _get(_getPrototypeOf(Block.prototype), "update", this).call(this);
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(Block.prototype), "updateEnd", this).call(this); // if(!this.viewport.collisions.has(this))
      // {
      // 	return;
      // }
      // const collidees = this.viewport.collisions.get(this);
      // for(const [collidee, type] of collidees)
      // {
      // 	console.log(type);
      // }

    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (this.args.collapse && this.args.once && !this.args["float"]) {
        this.viewport.actors.remove(this);
      }
    }
  }, {
    key: "popOut",
    value: function popOut(other) {
      if (this.args.platform) {
        return;
      }

      _get(_getPrototypeOf(Block.prototype), "popOut", this).call(this, other);
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return !this["public"].platform;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this["public"].collapse || this["public"]["float"] !== 0 || !this["public"].goBack;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Block), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.tileId = objDef.gid; // obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);

      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return Block;
}(_PointActor2.PointActor);

exports.Block = Block;
});

;require.register("actor/Block3d.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Block3d = void 0;

var _MarbleBlock2 = require("./MarbleBlock");

var _LavaRegion = require("../region/LavaRegion");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Block3d = /*#__PURE__*/function (_MarbleBlock) {
  _inherits(Block3d, _MarbleBlock);

  var _super = _createSuper(Block3d);

  function Block3d() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Block3d);

    _this = _super.call(this, args);
    _this.args.type = 'actor-item actor-block-3d';
    return _this;
  }

  return Block3d;
}(_MarbleBlock2.MarbleBlock);

exports.Block3d = Block3d;
});

;require.register("actor/BreakableBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BreakableBlock = void 0;

var _Block2 = require("./Block");

var _Orb = require("./Orb");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BreakableBlock = /*#__PURE__*/function (_Block) {
  _inherits(BreakableBlock, _Block);

  var _super = _createSuper(BreakableBlock);

  function BreakableBlock() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, BreakableBlock);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-breakable-block';
    _this.args["static"] = true;
    _this.fragmentsX = new _Tag.Tag('<div class = "fragmentsX">');
    _this.fragmentsY = new _Tag.Tag('<div class = "fragmentsY">');
    _this.fragmentTopLeft = new _Tag.Tag('<div class = "fragment fragment-top-left">');
    _this.fragmentTopRight = new _Tag.Tag('<div class = "fragment fragment-top-right">');
    _this.fragmentBottomLeft = new _Tag.Tag('<div class = "fragment fragment-bottom-left">');
    _this.fragmentBottomRight = new _Tag.Tag('<div class = "fragment fragment-bottom-right">');

    _this.fragmentsY.append(_this.fragmentTopLeft.node);

    _this.fragmentsY.append(_this.fragmentTopRight.node);

    _this.fragmentsY.append(_this.fragmentBottomLeft.node);

    _this.fragmentsY.append(_this.fragmentBottomRight.node);

    _this.fragmentsX.append(_this.fragmentsY.node);

    _this.broken = false;
    return _this;
  }

  _createClass(BreakableBlock, [{
    key: "onRendered",
    value: function onRendered() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.box.append(this.fragmentsX.node);

      _get(_getPrototypeOf(BreakableBlock.prototype), "onRendered", this).call(this);
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler() {
      var _get2;

      if (this.broken) {
        return false;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_get2 = _get(_getPrototypeOf(BreakableBlock.prototype), "callCollideHandler", this)).call.apply(_get2, [this].concat(args));
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (!(other.args.rolling && other.args.mode) && !other.isVehicle) {
        if (other.args.falling && !(other.dashed || other.args.jumping) || !other.args.falling && type === 0) {
          return true;
        }
      }

      if (other instanceof _Block2.Block && (other["public"]["float"] || this["public"]["float"])) {
        return false;
      }

      if (!(other instanceof _Orb.Orb) && !other.isVehicle && !other.controllable && !other.args.rolling) {
        return !this.broken;
      }

      if (!(other instanceof _Orb.Orb) && !other.falling && !other.isVehicle && !other["public"].gSpeed && !other["public"].xSpeed && !other["public"].ySpeed) {
        return !this.broken;
      }

      if (other instanceof _Orb.Orb || other.isVehicle || other["public"].rolling || other["public"].jumping || other["public"].dashed || other.punching) {
        var top = this.y - this["public"].height;

        if (this["public"].bounceBack && other["public"].jumping && other.y < top) {
          other.args.ySpeed *= -bounceBack;
          other.args.y = top;
        }

        this["break"](other);
        return false;
      }

      return !this.broken;
    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (this.args.dontRestore) {
        return;
      }

      this.box.classList.remove('broken');
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y') + 1;
      this.args.active = 0;
      this.broken = false;
    }
  }, {
    key: "break",
    value: function _break(other) {
      var _this2 = this;

      this.broken = true;
      this.box.classList.add('broken');
      this.box.classList.add('breaking');
      this.viewport.onFrameOut(4, function () {
        _this2.box.classList.remove('breaking');
      });

      if (other && other.args.mode % 2 === 0) {
        var x = other.args.xSpeed || other.args.gSpeed;

        if (other.isVehicle) {
          this.fragmentsX.style({
            '--xSpeed': Math.round(x * 1.1)
          });
        } else {
          this.fragmentsX.style({
            '--xSpeed': Math.round(x)
          });
        }
      }

      if (!this.refresher) {
        this.refresher = true;
      }

      this.args.active = 1;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.broken;
    }
  }]);

  return BreakableBlock;
}(_Block2.Block);

exports.BreakableBlock = BreakableBlock;
});

;require.register("actor/BrokenMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrokenMonitor = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Monitor = require("../actor/Monitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BrokenMonitor = /*#__PURE__*/function (_PointActor) {
  _inherits(BrokenMonitor, _PointActor);

  var _super = _createSuper(BrokenMonitor);

  function BrokenMonitor() {
    var _this;

    _classCallCheck(this, BrokenMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-monitor actor-monitor-broken';
    _this.args.width = 28;
    _this.args.height = 32;
    return _this;
  }

  _createClass(BrokenMonitor, [{
    key: "collideA",
    value: function collideA(other) {
      // if(other instanceof Monitor)
      // {
      // 	this.viewport && this.viewport.actors.remove(this);
      // 	return false;
      // }
      _get(_getPrototypeOf(BrokenMonitor.prototype), "collideA", this).call(this, other);

      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return BrokenMonitor;
}(_PointActor2.PointActor);

exports.BrokenMonitor = BrokenMonitor;
});

;require.register("actor/Bubbles.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bubbles = void 0;

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _Flickie = require("./Flickie");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var _ElectricSheild = require("../powerups/ElectricSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Bubbles = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Bubbles, _Mixin$from);

  var _super = _createSuper(Bubbles);

  function Bubbles() {
    var _this;

    _classCallCheck(this, Bubbles);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-bubbles';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 32;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args["float"] = -1;
    _this.args["static"] = true;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    _this.aiming = false;
    return _this;
  }

  _createClass(Bubbles, [{
    key: "onAttached",
    value: function onAttached() {
      this.shield = new _ElectricSheild.ElectricSheild();

      if (this.args.electric) {
        this.inventory.add(this.shield);
        this.args.currentSheild = this.shield;
      }

      this.autoAttr.get(this.box)['data-gold'] = 'gold';
      this.autoAttr.get(this.box)['data-fade'] = 'fade';
      this.chain = new _Tag.Tag('<div class = "bubbles-flame">');
      this.sprite.appendChild(this.chain.node);
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.viewport) {
        return;
      }

      if (this.args.gold && !this.args.fading) {
        if (Math.abs(this.viewport.controlActor.x - this.x) < 256 && Math.abs(this.viewport.controlActor.y - this.y) < 128) {
          this.args.fading = true;
          var viewport = this.viewport;
          viewport.onFrameOut(25, function () {
            return _this2.args.fade = true;
          });
          viewport.onFrameOut(55, function () {
            return viewport.actors.remove(_this2);
          });
        }
      }

      if (this.viewport && this.args.electric && this.viewport.args.frameId % 100 === 0) {
        this.args.currentSheild = this.args.currentSheild ? null : this.shield;
      }

      this.args.ySpeed = this.yAxis;

      if (this.box) {
        this.box.setAttribute('data-animation', 'standing');
      }

      this.args.falling = true;
      this.args.flying = true;

      _get(_getPrototypeOf(Bubbles.prototype), "update", this).call(this);
    }
  }, {
    key: "hold_1",
    value: function hold_1() {
      this.aiming = true;
    }
  }, {
    key: "release_1",
    value: function release_1() {
      this.aiming = false;
    }
  }, {
    key: "effect",
    value: function effect(other) {// this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }]);

  return Bubbles;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.Bubbles = Bubbles;
});

;require.register("actor/Bumper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bumper = void 0;

var _PointActor2 = require("./PointActor");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Bumper = /*#__PURE__*/function (_PointActor) {
  _inherits(Bumper, _PointActor);

  var _super = _createSuper(Bumper);

  function Bumper() {
    var _this;

    _classCallCheck(this, Bumper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-bumper';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.ignores = new Map();
    _this.sample = new Audio('/Sonic/S3K_AA.wav');
    return _this;
  }

  _createClass(Bumper, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Bumper.prototype), "update", this).call(this);

      var _iterator = _createForOfIteratorHelper(this.ignores),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              val = _step$value[1];

          this.ignores.set(key, -1 + val);

          if (val === 0) {
            this.ignores["delete"](key);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (this.ignores.has(other)) {
        return;
      }

      if (other.args.falling) {
        if (this.viewport.args.audio) {
          this.sample.volume = 0.15 + Math.random() * -0.05;
          this.sample.currentTime = 0;
          this.sample.play();
        }

        var xDiff = this.x - other.x;
        var yDiff = this.y - other.y;
        var speed = Math.max(12, Math.sqrt(Math.pow(other.args.xSpeed, 2), Math.pow(other.args.ySpeed, 2)));
        var angle = Math.atan2(yDiff, xDiff);
        var otherRadius = other.args.width / 2;
        other.args.x = this.x; // + Math.cos(angle) * 10;

        other.args.y = this.y; // + Math.sin(angle) * 10;

        other.args.xSpeed = -speed * Math.cos(angle);
        other.args.ySpeed = -speed * Math.sin(angle);
      } else {
        other.args.gSpeed *= -1;

        if (Math.abs(other.args.gSpeed) < 7) {
          other.args.gSpeed = 7 * Math.sign(other.args.gSpeed);
        }
      }

      this.ignores.set(other, 4);
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return Bumper;
}(_PointActor2.PointActor);

exports.Bumper = Bumper;
});

;require.register("actor/BuzzBomber.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BuzzBomber = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BuzzBomber = /*#__PURE__*/function (_Mixin$from) {
  _inherits(BuzzBomber, _Mixin$from);

  var _super = _createSuper(BuzzBomber);

  function BuzzBomber() {
    var _this;

    _classCallCheck(this, BuzzBomber);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-buzz-bomber';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 32;
    _this.args.height = 16;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args["float"] = -1;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    _this.aiming = false;
    return _this;
  }

  _createClass(BuzzBomber, [{
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(BuzzBomber.prototype), "onRendered", this).call(this);

      this.flame = new _Tag.Tag('<div class = "buzz-bomber-flame">');
      this.wings = new _Tag.Tag('<div class = "buzz-bomber-wings">');
      this.sprite.appendChild(this.flame.node);
      this.sprite.appendChild(this.wings.node);

      if (this.aiming) {
        this.box.setAttribute('data-animation', 'aiming');
      } else {
        var direction = this.args.direction;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      this.args.ySpeed = this.yAxis;

      if (!this.flame) {}

      if (this.args.xSpeed === 0 && this.viewport) {
        this.viewport.onFrameOut(10, function () {
          _this2.attack();
        });
      }

      this.args.falling = true;
      this.args.flying = true;

      _get(_getPrototypeOf(BuzzBomber.prototype), "update", this).call(this);
    }
  }, {
    key: "command_1",
    value: function command_1() {
      this.aiming = !this.aiming; // if(this.aiming)
      // {
      // 	this.args.xSpeed = 0;
      // 	this.args.ySpeed = 0;
      // }
    }
  }, {
    key: "command_2",
    value: function command_2() {
      if (!this.aiming || !this.viewport) {
        return;
      }

      var offset = [0, -24];
      var projectile = new _Projectile.Projectile({
        direction: this["public"].direction,
        x: this.args.x + offset[0] + (this.args.xSpeed || this.args.gSpeed),
        y: this.args.y + offset[1],
        owner: this,
        xSpeed: this.args.xSpeed || this.args.gSpeed,
        YSpeed: this.args.YSpeed
      });
      projectile.impulse(18, 1.57 + Math.PI / 4 * 1);
      this.viewport.auras.add(projectile);
      this.viewport.spawn.add({
        object: projectile
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {// this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});
    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {
      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      this.sleeping = false;
      this.attack();
    }
  }, {
    key: "attack",
    value: function attack() {
      var _this3 = this;

      if (this.sleeping || this.attacking) {
        return;
      }

      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      this.args.direction = -1;
      this.args.facing = 'left';
      this.args.xSpeed = -10;
      this.aiming = false;
      this.attacking = true;
      viewport.onFrameOut(15, function () {
        _this3.aiming = true;
        viewport.onFrameOut(10, function () {
          var shots = 2;
          var cancelInterval = viewport.onFrameInterval(15, function () {
            _this3.command_2();

            shots-- || cancelInterval();
          });
        });
      });
      viewport.onFrameOut(50, function () {
        var xSpeed = _this3.args.xSpeed;
        _this3.args.xSpeed = 0.5 * -xSpeed;
        viewport.onFrameOut(100, function () {
          _this3.aiming = false;
          _this3.attacking = false;
          _this3.args.xSpeed = 0;
          _this3.args.ySpeed = 0;
        });
      });
    }
  }, {
    key: "sleep",
    value: function sleep() {
      var _this4 = this;

      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.onNextFrame(function () {
        if (!_this4.viewport) {
          return;
        }

        _this4.args.x = _this4.def.get('x');
        _this4.args.y = _this4.def.get('y');

        _this4.viewport.setColCell(_this4);

        _this4.args.xSpeed = 0;
        _this4.args.ySpeed = 0;
        _this4.args.pushed = 0;
        _this4.args["float"] = 0;
        _this4.attacking = false;
        _this4.sleeping = true;
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return BuzzBomber;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.BuzzBomber = BuzzBomber;
});

;require.register("actor/Chalmers.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chalmers = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Chalmers = /*#__PURE__*/function (_PointActor) {
  _inherits(Chalmers, _PointActor);

  var _super = _createSuper(Chalmers);

  function Chalmers() {
    var _this;

    _classCallCheck(this, Chalmers);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-chalmers';
    _this.args.normalHeight = 64;
    _this.args.rollingHeight = 23;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 16;
    _this.args.height = 48;
    return _this;
  }

  _createClass(Chalmers, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Chalmers.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this["public"].rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
            this.box.setAttribute('data-animation', 'standing');
          }
      } else if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.box.setAttribute('data-animation', 'standing');
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Chalmers.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Chalmers;
}(_PointActor2.PointActor);

exports.Chalmers = Chalmers;
});

;require.register("actor/Cinematic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cinematic = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Cinematic = /*#__PURE__*/function (_PointActor) {
  _inherits(Cinematic, _PointActor);

  var _super = _createSuper(Cinematic);

  function Cinematic(args, parent) {
    var _this;

    _classCallCheck(this, Cinematic);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "noClip", true);

    _defineProperty(_assertThisInitialized(_this), "panSpeed", 9);

    _this.args["float"] = -1;
    _this.target = null;
    _this.targets = [[250, 6500], [5900, 6600], [250, 6500], [7700, 7800], [6800, 4200], [6800, 4200], [8000, 4300], [1450, 1800]];
    return _this;
  }

  _createClass(Cinematic, [{
    key: "setCameraMode",
    value: function setCameraMode() {
      this.args.cameraMode = 'cinematic';
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Cinematic.prototype), "update", this).call(this);

      if (!this.args.selected) {
        return;
      }

      if (!this.target || this.x === this.target[0] && this.y === this.target[1]) {
        if (!this.targets.length) {
          this.remove();
        }

        this.target = this.targets.shift();
        return;
      }

      var target = this.target;

      if (this.x !== target[0]) {
        var space = target[0] - this.x;
        this.args.x += Math.sign(space) * this.panSpeed;

        if (Math.abs(space) < this.panSpeed) {
          this.args.x = target[0];
        }
      }

      if (this.y !== target[1]) {
        var _space = target[1] - this.y;

        this.args.y += Math.sign(_space) * this.panSpeed;

        if (Math.abs(_space) < this.panSpeed) {
          this.args.y = target[1];
        }
      }
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Cinematic;
}(_PointActor2.PointActor);

exports.Cinematic = Cinematic;
});

;require.register("actor/Coin.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Coin = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Coin = /*#__PURE__*/function (_PointActor) {
  _inherits(Coin, _PointActor);

  var _super = _createSuper(Coin);

  function Coin() {
    var _this;

    _classCallCheck(this, Coin);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-coin';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.gone = false;
    return _this;
  }

  _createClass(Coin, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Coin.prototype), "update", this).call(this);

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/mario/smw_coin.wav');
        this.sample.volume = 1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      _get(_getPrototypeOf(Coin.prototype), "collideA", this).call(this, other);

      if (this.args.gone) {
        return;
      }

      this.args.type = 'actor-item actor-coin collected';

      if (!this.args.gone) {
        if (this.viewport.args.audio && this.sample) {
          this.sample.play();
        }

        this.viewport.onFrameOut(40, function () {
          _this2.args.type = 'actor-item actor-coin collected gone';
        });
        this.viewport.onFrameOut(80, function () {
          _this2.viewport.actors.remove(_this2);

          _this2.remove();
        });
        var x = this.x;
        var y = this.y; // const viewport = this.viewport;
        // viewport.spawn.add({
        // 	time: Date.now() + 7500
        // 	, frame:  this.viewport.args.frameId + 450
        // 	, object: new Coin({x,y})
        // });

        if (other.args.owner) {
          other.args.owner.args.coins += 1;
        } else if (other.occupant) {
          other.occupant.args.coins += 1;
        } else {
          other.args.coins += 1;
        }
      }

      this.args.gone = true;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return Coin;
}(_PointActor2.PointActor);

exports.Coin = Coin;
});

;require.register("actor/CompanionBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompanionBlock = void 0;

var _MarbleBlock2 = require("./MarbleBlock");

var _LavaRegion = require("../region/LavaRegion");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CompanionBlock = /*#__PURE__*/function (_MarbleBlock) {
  _inherits(CompanionBlock, _MarbleBlock);

  var _super = _createSuper(CompanionBlock);

  function CompanionBlock() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CompanionBlock);

    _this = _super.call(this, args);
    _this.args.type = 'actor-item actor-marble-companion-block';
    _this.args.density = _this.args.density || 9.5;
    _this.sample = new Audio('/Sonic/S3K_35.wav');
    _this.played = false;
    return _this;
  }

  _createClass(CompanionBlock, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this["public"].pushed) {
        var tileMap = this.viewport.tileMap;

        if (!tileMap.getSolid(this.x + this["public"].width / 2 * (this["public"].pushed || 0), this.y)) {
          if (this.args.falling) {
            this.args.x += this["public"].pushed;
          }
        } else {
          this["public"].pushed = 0;
        }
      }

      var _iterator = _createForOfIteratorHelper(this.regions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var region = _step.value;

          if (!this.played && region instanceof _LavaRegion.LavaRegion) {
            this.onTimeout(50, function () {
              if (_this2.viewport.args.audio) {
                _this2.sample.volume = 0.15 + Math.random() * -0.05;

                _this2.sample.play();
              }
            });

            if (typeof ga === 'function') {
              ga('send', 'event', {
                eventCategory: 'companion-block',
                eventAction: 'pushed',
                eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
              });
            }

            this.played = true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      _get(_getPrototypeOf(CompanionBlock.prototype), "update", this).call(this);
    }
  }, {
    key: "sleep",
    value: function sleep() {
      var _this3 = this;

      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.onNextFrame(function () {
        _this3.args.x = _this3.def.get('x');
        _this3.args.y = _this3.def.get('y');

        _this3.viewport.setColCell(_this3);

        _this3.args.xSpeed = 0;
        _this3.args.ySpeed = 0;
        _this3.args.pushed = 0;
        _this3.args["float"] = 0;
      });
    }
  }]);

  return CompanionBlock;
}(_MarbleBlock2.MarbleBlock);

exports.CompanionBlock = CompanionBlock;
});

;require.register("actor/Cone.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cone = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Cone = /*#__PURE__*/function (_PointActor) {
  _inherits(Cone, _PointActor);

  var _super = _createSuper(Cone);

  function Cone() {
    var _this;

    _classCallCheck(this, Cone);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 16;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-cone';
    return _this;
  }

  _createClass(Cone, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Cone;
}(_PointActor2.PointActor);

exports.Cone = Cone;
});

;require.register("actor/CrabMeat.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrabMeat = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CrabMeat = /*#__PURE__*/function (_Mixin$from) {
  _inherits(CrabMeat, _Mixin$from);

  var _super = _createSuper(CrabMeat);

  function CrabMeat() {
    var _this;

    _classCallCheck(this, CrabMeat);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-crabmeat';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(CrabMeat, [{
    key: "update",
    value: function update() {
      var direction = this.args.direction;

      if (this.box) {
        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      _get(_getPrototypeOf(CrabMeat.prototype), "update", this).call(this);
    }
  }, {
    key: "effect",
    value: function effect(other) {// this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }]);

  return CrabMeat;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.CrabMeat = CrabMeat;
});

;require.register("actor/CutScene.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CutScene = void 0;

var _PointActor2 = require("./PointActor");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CutScene = /*#__PURE__*/function (_PointActor) {
  _inherits(CutScene, _PointActor);

  var _super = _createSuper(CutScene);

  function CutScene(args, parent) {
    var _this;

    _classCallCheck(this, CutScene);

    _this = _super.call(this, args, parent);

    if (args.src) {
      _this.fetcher = fetch(args.src).then(function (r) {
        return r.json();
      });
    } else if (args.frames) {
      _this.fetcher = Promise.resolve(args.frames);
    }

    _this.args.hidden = true;
    return _this;
  }

  _createClass(CutScene, [{
    key: "activate",
    value: function activate(other, button) {
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (!other.controllable || other.args.falling && !force) {
        return;
      }

      var viewport = this.viewport;

      if (!viewport || this.args.running) {
        return;
      }

      this.args.running = true;
      other.args.gSpeed = 0;
      viewport.args.cutScene = true;
      other.controller.zero();
      this.fetcher.then(function (scene) {
        var timer = 0;

        var _iterator = _createForOfIteratorHelper(scene),
            _step;

        try {
          var _loop = function _loop() {
            var frame = _step.value;

            var frameCallback = function frameCallback() {
              switch (frame.event) {
                case 'dialog':
                  viewport.showDialog(frame.lines, frame.classes);
                  break;

                case 'input':
                  if (frame.axes) {
                    other.controller.replay({
                      axes: frame.axes
                    });
                  }

                  if (frame.buttons) {
                    other.controller.replay({
                      buttons: frame.buttons
                    });
                  }

                  other.readInput();
                  break;

                case 'superdrop':
                  other.dropDashCharge = 30;
                  break;

                case 'clearAct':
                  viewport.clearAct(frame.message);
                  break;

                case 'clear':
                  viewport.clearDialog();
                  break;

                case 'message':
                  viewport.showCenterMessage(frame.message);
                  break;

                case 'hide':
                  viewport.hideCenterMessage();
                  viewport.hideDialog();
                  break;

                case 'wait':
                  viewport.args.cutScene = false;
                  viewport.hideCenterMessage();
                  viewport.hideDialog();
                  break;
              }
            };

            if (timer) {
              viewport.onFrameOut(timer, frameCallback);
            } else {
              frameCallback();
            }

            timer += frame.time;
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }]);

  return CutScene;
}(_PointActor2.PointActor);

exports.CutScene = CutScene;
});

;require.register("actor/DrainFly.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrainFly = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _CanPop = require("../mixin/CanPop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DrainFly = /*#__PURE__*/function (_Mixin$from) {
  _inherits(DrainFly, _Mixin$from);

  var _super = _createSuper(DrainFly);

  function DrainFly(args, parent) {
    var _this;

    _classCallCheck(this, DrainFly);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-drainfly';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.args["float"] = -1;
    _this.args.gravity = 0;
    _this.args.phase = 'idle';
    return _this;
  }

  _createClass(DrainFly, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(DrainFly.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      var mainChar = this.viewport.controlActor;

      switch (this.args.phase) {
        case 'idle':
          this.args.alertTo = this.y - 64;

          if (mainChar.x + -this.x > -128) {
            this.args.phase = 'alert';
          }

          break;

        case 'alert':
          if (this.y > this.args.alertTo) {
            this.args.ySpeed--;
          } else {
            this.args.phase = 'attacking';
            this.args.y = this.args.alertTo;
            this.args.ySpeed = 0;
          }

          break;

        case 'attacking':
          {
            var drawX = Math.sign(mainChar.x + -this.x);
            var drawY = Math.sign(mainChar.y + -this.y + -24);
            this.args.xSpeed += drawX * 0.2 - Math.random() / 10;
            this.args.ySpeed += drawY * 0.5 - Math.random() / 10;

            if (Math.abs(this.args.xSpeed) > 6) {
              this.args.xSpeed = 4 * drawX;
            }

            if (Math.abs(this.args.ySpeed) > 8) {
              this.args.ySpeed = 4 * drawY;
            }

            if (this.checkBelow(this.x, this.y)) {
              this.args.ySpeed = -1;
              this.args.y -= 1;
            }

            break;
          }
      } // if(!this.args.ySpeed)
      // {
      // 	this.args.y -= 2;
      // }


      this.args.facing = this.args.xSpeed > 0 ? 'left' : 'right';
      this.args["float"] = -1;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return DrainFly;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.DrainFly = DrainFly;
});

;require.register("actor/DrillCar.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrillCar = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DrillCar = /*#__PURE__*/function (_Vehicle) {
  _inherits(DrillCar, _Vehicle);

  var _super = _createSuper(DrillCar);

  function DrillCar() {
    var _this;

    _classCallCheck(this, DrillCar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "instructions", ['Jump ⓿', 'Fly ⓿+⓿']);

    _this.args.type = 'actor-item actor-drill-car';
    _this.args.width = 38;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 26;
    _this.args.decel = 0.30;
    _this.args.accel = 0.75;
    _this.args.seatHeight = 34;
    _this.args.skidTraction = 0.95;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    return _this;
  }

  _createClass(DrillCar, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.backSprite = new _Tag.Tag('<div class = "sprite-back sprite">');
      this.drill = new _Tag.Tag('<div class = "drill-car-drill">');
      this.seat = new _Tag.Tag('<div class = "drill-car-seat">');
      this.windsheild = new _Tag.Tag('<div class = "drill-car-windsheild">');
      this.copterCap = new _Tag.Tag('<div class = "drill-car-copter-cap">');
      this.copterBladeA = new _Tag.Tag('<div class = "drill-car-copter-blade-a">');
      this.copterBladeB = new _Tag.Tag('<div class = "drill-car-copter-blade-b">');
      this.frontWheelA = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-front-a">');
      this.frontWheelB = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-front-b">');
      this.backWheelA = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-back-a">');
      this.backWheelB = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-back-b">');
      this.sprite.appendChild(this.drill.node);
      this.backSprite.appendChild(this.copterCap.node);
      this.backSprite.appendChild(this.copterBladeA.node);
      this.backSprite.appendChild(this.copterBladeB.node);
      this.sprite.appendChild(this.windsheild.node);
      this.backSprite.appendChild(this.seat.node);
      this.sprite.appendChild(this.frontWheelA.node);
      this.backSprite.appendChild(this.frontWheelB.node);
      this.sprite.appendChild(this.backWheelA.node);
      this.backSprite.appendChild(this.backWheelB.node);
      this.box.appendChild(this.backSprite.node);
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (this.viewport.args.audio && !this.flyingSound) {
        this.flyingSound = new Audio('/Sonic/drill-car-copter.wav');
        this.flyingSound.volume = 0.35 + Math.random() * -0.2;
        this.flyingSound.loop = true;
      }

      if (this.flyingSound) {
        if (!this.flyingSound.paused) {
          this.flyingSound.volume = 0.25 + Math.random() * -0.2;
        }

        if (this.flyingSound.currentTime > 0.2) {
          this.flyingSound.currentTime = 0.0;
        }
      }

      if (!this.box) {
        _get(_getPrototypeOf(DrillCar.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        this.flyingSound && this.flyingSound.pause();
        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.dustCount > 0) {
          this.dustCount--;
        }

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
          var viewport = this.viewport;
          var particleA = new _Tag.Tag('<div class = "particle-dust">');
          var pointA = this.rotatePoint(this.args.gSpeed, 0);
          particleA.style({
            '--x': pointA[0] + this.x,
            '--y': pointA[1] + this.y,
            'z-index': 0,
            opacity: Math.random() * 2
          });
          var particleB = new _Tag.Tag('<div class = "particle-dust">');
          var pointB = this.rotatePoint(this.args.gSpeed + 40 * this.args.direction, 0);
          particleB.style({
            '--x': pointB[0] + this.x,
            '--y': pointB[1] + this.y,
            'z-index': 0,
            opacity: Math.random() * 2
          });
          viewport.particles.add(particleA);
          viewport.particles.add(particleB);
          setTimeout(function () {
            viewport.particles.remove(particleA);
            viewport.particles.remove(particleB);
          }, 350);
        } else if (this.args.moving && speed > maxSpeed * 0.75) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && speed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else if (this.args.flying) {
        this.box.setAttribute('data-animation', 'flying');
      } else if (this.args.falling) {
        this.flyingSound && this.flyingSound.pause();
        this.box.setAttribute('data-animation', 'jumping');
      }

      if (this.args.copterCoolDown == 0) {
        if (this.args.ySpeed > 5) {
          this.flyingSound && this.flyingSound.pause();
          this.args.flying = false;
        }
      } else if (this.args.copterCoolDown > 0) {
        this.args.copterCoolDown--;
      }

      _get(_getPrototypeOf(DrillCar.prototype), "update", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0() {
      if (!this.args.falling) {
        this.args.copterCoolDown = 15;

        _get(_getPrototypeOf(DrillCar.prototype), "command_0", this).call(this);

        return;
      }

      if (this.args.copterCoolDown > 0) {
        return;
      }

      if (this.args.ySpeed > -16) {
        if (!this.args.flying) {
          this.flyingSound && this.flyingSound.play();
        }

        this.args.flying = true;

        if (this.args.copterCoolDown == 0) {
          this.args.copterCoolDown = 7;
        }

        this.args.ySpeed = -1;
        this.args.ySpeed = -4;
        this.args["float"] = 8;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.flyingSound && this.flyingSound.pause();
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return DrillCar;
}(_Vehicle2.Vehicle);

exports.DrillCar = DrillCar;
});

;require.register("actor/EggMobile.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggMobile = void 0;

var _Vehicle2 = require("./Vehicle");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EggMobile = /*#__PURE__*/function (_Vehicle) {
  _inherits(EggMobile, _Vehicle);

  var _super = _createSuper(EggMobile);

  function EggMobile() {
    var _this;

    _classCallCheck(this, EggMobile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-vehicle actor-eggmobile';
    _this.args.accel = 0.15;
    _this.args.decel = 0.8;
    _this.args.gSpeedMax = 15;
    _this.args.xSpeedMax = 45;
    _this.args.ySpeedMax = 45;
    _this.args.jumpForce = 12;
    _this.args.gravity = 0.6;
    _this.args.width = 28;
    _this.args.height = 20;
    _this.args.yMargin = 42;
    _this.args.falling = true;
    _this.args.flying = true;
    _this.args["float"] = -1;
    return _this;
  }

  _createClass(EggMobile, [{
    key: "update",
    value: function update() {
      if (this.checkBelow(this.x, this.y)) {
        this.args.y--;
      }

      if (Math.abs(this.yAxis) > 0.5) {
        if (Math.abs(this.args.ySpeed) < this.args.ySpeedMax) {
          var ySpeed = this.args.ySpeed;

          if (Math.sign(this.yAxis) === Math.sign(this.args.ySpeed)) {
            ySpeed += this.yAxis * this.args.accel * 3;
          } else {
            ySpeed += this.yAxis * this.args.accel * 6;
          }

          if (ySpeed > 0) {
            ySpeed = Math.floor(ySpeed * 1000) / 1000;
          } else {
            ySpeed = Math.ceil(ySpeed * 1000) / 1000;
          }

          this.args.ySpeed = ySpeed;
        }
      } else {
        this.args.ySpeed = this.args.ySpeed * this.args.decel;
      }

      if (!this.xAxis) {
        if (Math.abs(this["public"].xSpeed) <= 1) {
          this["public"].xSpeed = 0;
        }

        if (this.args.xSpeed > 0) {
          this.args.xSpeed = Math.floor(this.args.xSpeed * this.args.decel);
        } else {
          this.args.xSpeed = Math.ceil(this.args.xSpeed * this.args.decel);
        }
      } // else
      // {
      // 	this.args.xSpeed = Math.ceil(this.args.xSpeed * this.args.decel);
      // }


      if (!this.occupant) {
        this.args.xSpeed = 0;
        this.args.ySpeed = 0;
      }

      this.args.falling = true;
      this.args.flying = true;
      this.args.mode = 0;
      this.args.cameraMode = 'aerial';

      _get(_getPrototypeOf(EggMobile.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return EggMobile;
}(_Vehicle2.Vehicle);

exports.EggMobile = EggMobile;
});

;require.register("actor/Eggman.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Eggman = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Eggman = /*#__PURE__*/function (_PointActor) {
  _inherits(Eggman, _PointActor);

  var _super = _createSuper(Eggman);

  function Eggman() {
    var _this;

    _classCallCheck(this, Eggman);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-eggman';
    _this.accelNormal = 0.15;
    _this.accelSuper = 0.30;
    _this.args.accel = 0.15;
    _this.args.decel = 0.3;
    _this.args.normalHeight = 40;
    _this.args.rollingHeight = 32;
    _this.gSpeedMaxNormal = 18;
    _this.gSpeedMaxSuper = 28;
    _this.args.gSpeedMax = _this.gSpeedMaxNormal;
    _this.args.normalHeight = 57;
    _this.args.rollingHeight = 29;
    _this.jumpForceNormal = 11;
    _this.jumpForceSuper = 18;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 57;
    _this.args.spriteSheet = _this.spriteSheet = '/Sonic/eggman.png';
    _this.superSpriteSheet = '/Sonic/eggman-super.png';
    return _this;
  }

  _createClass(Eggman, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Eggman.prototype), "update", this).call(this);

        return;
      } else if (this.yAxis > 0) {
        this.args.crouching = true;
      } else {
        this.args.crouching = false;
      }

      var direction = this.args.direction;
      var gSpeed = this.args.gSpeed;
      var speed = Math.abs(gSpeed);
      var maxSpeed = this.args.gSpeedMax;

      if (falling) {
        if (this["public"].jumping) {
          this.box.setAttribute('data-animation', 'jumping');
        }

        this.args.height = this["public"].rollingHeight;
      } else if (this["public"].rolling) {
        this.args.height = this["public"].rollingHeight;

        if (this["public"].direction !== Math.sign(this["public"].gSpeed)) {
          this.args.direction = Math.sign(this["public"].gSpeed);

          if (this.args.direction < 0) {
            this.args.facing = 'left';
          } else {
            this.args.facing = 'right';
          }
        }

        this.box.setAttribute('data-animation', 'rolling');
      } else {
        this.args.height = this["public"].normalHeight;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (speed > maxSpeed / 2) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else if (this.args.crouching || this.args.standingOn && this.args.standingOn.isVehicle) {
          this.box.setAttribute('data-animation', 'crouching');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      _get(_getPrototypeOf(Eggman.prototype), "update", this).call(this);
    }
  }, {
    key: "command_3",
    value: function command_3() {
      var _this2 = this;

      this.isSuper = !this.isSuper;
      this.onTimeout(150, function () {
        if (_this2.args.rings === 0) {
          // this.isSuper = false;
          _this2.setProfile();
        }

        ;
      });
      this.setProfile();
    }
  }, {
    key: "setProfile",
    value: function setProfile() {
      if (this.isSuper) {
        this.args.spriteSheet = this.superSpriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxSuper;
        this.args.jumpForce = this.jumpForceSuper;
        this.args.accel = this.accelSuper;
      } else {
        this.args.spriteSheet = this.spriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxNormal;
        this.args.jumpForce = this.jumpForceNormal;
        this.args.accel = this.accelNormal;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Eggman;
}(_PointActor2.PointActor);

exports.Eggman = Eggman;
});

;require.register("actor/Eggrobo.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Eggrobo = void 0;

var _PointActor2 = require("./PointActor");

var _Projectile = require("./Projectile");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Eggrobo = /*#__PURE__*/function (_PointActor) {
  _inherits(Eggrobo, _PointActor);

  var _super = _createSuper(Eggrobo);

  function Eggrobo() {
    var _this;

    _classCallCheck(this, Eggrobo);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-eggrobo';
    _this.args.accel = 0.125;
    _this.args.decel = 0.3;
    _this.args.gSpeedMax = 14;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 57;
    return _this;
  }

  _createClass(Eggrobo, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.flame = new _Tag.Tag('<div class = "eggrobo-flame">');
      this.muzzleFlash = new _Tag.Tag('<div class = "eggrobo-muzzle-flash">');
      this.sprite.appendChild(this.flame.node);
      this.sprite.appendChild(this.muzzleFlash.node);
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (this.viewport.args.audio && !this.shootingSample) {
        this.shootingSample = new Audio('/Sonic/shot-fired.wav');
        this.thrusterSound = new Audio('/Sonic/mecha-sonic-thruster.wav');
        this.thrusterSound.loop = true;
      }

      if (this.thrusterSound) {
        if (this.thrusterSound.currentTime > 0.4 + Math.random() / 10) {
          this.thrusterSound.currentTime = 0.05;
        }

        this.thrusterSound.volume = 0.2 + Math.random() * -0.05;
      }

      if (!this.box) {
        _get(_getPrototypeOf(Eggrobo.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.thrusterSound && this.thrusterSound.pause();
          this.box.setAttribute('data-animation', 'skidding');
        } else if (speed > maxSpeed / 2) {
          this.thrusterSound && this.thrusterSound.pause();
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else if (this.args.crouching || this.standingOn && this.standingOn.isVehicle) {
          this.box.setAttribute('data-animation', 'crouching');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else {
        this.args.crouching = false;

        if (this["public"].jumping) {
          this.box.setAttribute('data-animation', 'jumping');
        }
      }

      if (!this.args.falling) {
        this.args.flying = false;
      }

      if (this.args.flying) {
        this.box.setAttribute('data-animation', 'flying');
      } else if (this.args.falling) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      if (this.args.shotCoolDown > 0) {
        this.args.shotCoolDown--;
      }

      if (this.args.rocketCoolDown == 0) {
        this.thrusterSound && this.thrusterSound.pause();
      }

      if (this.args.rocketCoolDown > 0) {
        this.args.rocketCoolDown--;
      }

      if (this.args.rocketCoolDown == 0) {
        this.args.flying = false;
      }

      _get(_getPrototypeOf(Eggrobo.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "hold_0",
    value: function hold_0() {
      if (!this.args.falling) {
        this.args.rocketCoolDown = 5;
        return;
      }

      if (this.args.ySpeed > 1 || this.args.flying) {
        this.args.flying = true;

        if (this.args.rocketCoolDown <= 1) {
          this.thrusterSound && this.thrusterSound.play();
          this.args.rocketCoolDown = 3;
        }

        this.args.ySpeed = 0;
        this.args["float"] = 4;
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      var _this2 = this;

      if (this.args.shotCoolDown > 0) {
        return;
      }

      var direction = Math.sign(this.args.direction);
      var groundAngle = this.args.groundAngle;
      var offset, trajectory, spotAngle;

      switch (this.args.mode) {
        case 0:
          spotAngle = -groundAngle - Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle;
          break;

        case 1:
          spotAngle = -groundAngle + Math.PI / 4 * direction;
          trajectory = -groundAngle + Math.PI / 2;
          break;

        case 2:
          spotAngle = -groundAngle + Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI;
          break;

        case 3:
          spotAngle = -groundAngle - Math.PI + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI / 2;
          break;
      }

      offset = [50 * Math.cos(spotAngle), 50 * Math.sin(spotAngle)];

      if (this.args.falling || this.args.crouching) {
        trajectory = 0;
        offset = [26 * direction, -26];
      }

      var projectile = new _Projectile.Projectile({
        direction: this["public"].direction,
        x: this.args.x + offset[0] + (this.args.xSpeed || this.args.gSpeed),
        y: this.args.y + offset[1],
        owner: this,
        xSpeed: this.args.xSpeed || this.args.gSpeed,
        YSpeed: this.args.YSpeed
      });
      projectile.impulse(18, trajectory + (direction < 0 ? Math.PI : 0), true);
      projectile.update();
      this.viewport.auras.add(projectile);
      this.viewport.spawn.add({
        object: projectile
      });
      this.box.setAttribute('data-shooting', 'true');
      this.onTimeout(140, function () {
        _this2.box.setAttribute('data-shooting', 'false');
      });

      if (this.viewport.args.audio && this.shootingSample) {
        this.shootingSample.volume = 0.6 + Math.random() * -0.3;
        this.shootingSample.currentTime = 0;
        this.shootingSample.play();
      }

      this.args.shotCoolDown = 4;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Eggrobo;
}(_PointActor2.PointActor);

exports.Eggrobo = Eggrobo;
});

;require.register("actor/Emerald.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emerald = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Emerald = /*#__PURE__*/function (_PointActor) {
  _inherits(Emerald, _PointActor);

  var _super = _createSuper(Emerald);

  function Emerald() {
    var _this;

    _classCallCheck(this, Emerald);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-emerald emerald-' + (_this.args.color || 'white');
    _this.args.width = 12;
    _this.args.height = 12;
    return _this;
  }

  _createClass(Emerald, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Emerald.prototype), "update", this).call(this);

      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/S3K_9C.wav');
        this.sample.volume = 0.25 + Math.random() * 0.5;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      _get(_getPrototypeOf(Emerald.prototype), "collideA", this).call(this, other);

      if (this.args.gone) {
        return;
      }

      this.args.type = 'actor-item actor-emerald collected emerald-' + (this.args.color || 'white');

      if (!this.args.gone) {
        if (this.viewport.args.audio && this.sample) {
          this.sample.play();
        }

        this.args.type = 'actor-item actor-emerald collected gone emerald-' + (this.args.color || 'white');

        if (other.args.owner) {
          other.args.owner.args.emeralds += 1;
        } else if (other.occupant) {
          other.occupant.args.emeralds += 1;
        } else {
          other.args.emeralds += 1;
        }

        if (!this.viewport.args.emeralds.includes(this.args.color)) {
          this.viewport.args.emeralds.push(this.args.color);
        }

        this.viewport.actors.remove(this);
        this.remove();
      }

      this.args.gone = true;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "effect",
    get: function get() {
      return true;
    }
  }]);

  return Emerald;
}(_PointActor2.PointActor);

exports.Emerald = Emerald;
});

;require.register("actor/Explosion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Explosion = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Explosion = /*#__PURE__*/function (_PointActor) {
  _inherits(Explosion, _PointActor);

  var _super = _createSuper(Explosion);

  function Explosion() {
    var _this;

    _classCallCheck(this, Explosion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-explosion';
    _this.args.width = 48;
    _this.args.height = 48;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(Explosion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Explosion.prototype), "update", this).call(this);

      if (!this.removeTimer) {
        var viewport = this.viewport;
        this.removeTimer = this.onTimeout(360, function () {// viewport.actors.remove( this );
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return Explosion;
}(_PointActor2.PointActor);

exports.Explosion = Explosion;
});

;require.register("actor/Flickie.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Flickie = void 0;

var _Follower2 = require("./Follower");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Flickie = /*#__PURE__*/function (_Follower) {
  _inherits(Flickie, _Follower);

  var _super = _createSuper(Flickie);

  function Flickie(args, parent) {
    var _this;

    _classCallCheck(this, Flickie);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-flickie';
    _this.args.palletShift = Math.floor(Math.random() * 8);
    return _this;
  }

  return Flickie;
}(_Follower2.Follower);

exports.Flickie = Flickie;
});

;require.register("actor/Follower.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Follower = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Follower = /*#__PURE__*/function (_PointActor) {
  _inherits(Follower, _PointActor);

  var _super = _createSuper(Follower);

  function Follower(args, parent) {
    var _this;

    _classCallCheck(this, Follower);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "noClip", 1);

    _this.args.type = 'actor-item actor-follower';
    _this.args["float"] = -1;
    _this.args.width = 16;
    _this.args.height = 16;
    _this.args.z = -1;
    return _this;
  }

  _createClass(Follower, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Follower.prototype), "update", this).call(this);

      this.args.standingOn = false;
      var host = this.viewport.controlActor;

      if (!host) {
        return;
      }

      this.args.falling = true;
      this.args["float"] = -1;
      var force = Math.random();
      var fudge = Math.random();
      var xDiff = host.x + -this.x;
      var yDiff = host.y + -this.y;
      var angle = Math.atan2(yDiff, xDiff);
      var distance = Math.sqrt(Math.pow(yDiff, 2) + Math.pow(xDiff, 2));
      var maxDistance = 256;
      var minDistance = 64;
      var minSpeed = 1;
      var airSpeed = Math.max(Math.abs(host.args.gSpeed), Math.abs(host.args.xSpeed), Math.abs(host.args.ySpeed), minSpeed) * 1.1;
      var xSpeedRelativeOriginal = this.args.xSpeed - (host.args.xSpeed || host.args.gSpeed);
      var maxSpeed = airSpeed + 3;
      var facing = null;

      if (distance < minDistance) {
        if (Math.abs(this["public"].xSpeed) < minSpeed) {
          this.args.xSpeed = minSpeed * Math.sign(-0.5 + Math.random());
        }

        if (Math.abs(this["public"].ySpeed) < minSpeed) {
          this.args.ySpeed = minSpeed * Math.sign(-0.5 + Math.random());
        }
      } else if (distance >= maxDistance) {
        this.args.x = Math.floor(host.x - Math.cos(angle) * maxDistance);
        this.args.y = Math.floor(host.y - Math.sin(angle) * maxDistance);
        this.args.xSpeed = xDiff / 60 + (host.args.xSpeed || host.args.gSpeed);
        this.args.ySpeed = 0;
        this.viewport.setColCell(this);

        if (this.x > host.x) {
          facing = 'left';
        } else {
          facing = 'right';
        }

        maxSpeed *= 4;
      } else {}

      var xDir = Math.sign(xDiff);
      var yDir = Math.sign(yDiff);
      var xSame = Math.sign(this.args.xSpeed) === xDir;
      var ySame = this.args.ySpeed && Math.sign(this.args.ySpeed) === yDir;
      var xMag = Math.max(force) * 0.35 * (xSame ? 0.85 : 0.55);
      var yMag = Math.max(force) * 0.10 * (xSame ? 0.75 : 1.50);

      if (!xSame || Math.abs(this.args.xSpeed) < maxSpeed) {
        var step = xMag * xDir * fudge; // if(!this.swapZ && this.public.xSpeed && Math.sign(this.public.xSpeed) !== Math.sign(step))
        // {
        // 	this.swapZ = this.viewport.onFrameOut(1, () => {
        // 		this.swapZ = false;
        // 	})
        // }

        var xSpeed = this.args.xSpeed + step;

        if (Math.abs(this["public"].xSpeed) > maxSpeed) {
          xSpeed = maxSpeed * Math.sign(this["public"].xSpeed);
        }

        this.args.xSpeed = xSpeed;

        if (distance >= maxDistance) {
          var _xSpeed = host.args.xSpeed || host.args.gSpeed;

          var ySpeed = host.args.ySpeed;

          if (facing) {
            this.args.xSpeed = xDiff / 90 + _xSpeed;
            this.args.ySpeed = yDiff / 90 + ySpeed;
          }
        }
      }

      if (!facing && this["public"].xSpeed < 0) {
        facing = 'left';
      } else if (!facing) {
        facing = 'right';
      }

      if (!ySame || Math.abs(this["public"].ySpeed) < maxSpeed) {
        var _ySpeed = this["public"].ySpeed + yMag * yDir;

        if (Math.abs(this.args.ySpeed) > maxSpeed) {
          _ySpeed = maxSpeed * Math.sign(this.args.ySpeed);
        }

        this.args.ySpeed = _ySpeed;
      }

      if (Math.sign(xSpeedRelativeOriginal) && Math.sign(host.args.xSpeed || host.args.gSpeed) !== Math.sign(xSpeedRelativeOriginal)) {
        if (Math.abs(this.x - host.x) > minDistance || Math.abs(this.y - host.y) > minDistance) {
          this.args.z = this.args.z > -1000 ? -100000 : 100000;
        }
      }

      if (facing) {
        this.args.facing = facing;
      }

      if (this.args.ySpeed > 0) {
        if (this.args.ySpeed <= 0 || airSpeed < 1.5) {
          return;
        }

        if (this.box) {
          this.box.classList.add('decending');
          this.box.classList.remove('ascending');
        }
      } else if (this.box) {
        this.box.classList.remove('decending');
        this.box.classList.add('ascending');
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }]);

  return Follower;
}(_PointActor2.PointActor);

exports.Follower = Follower;
});

;require.register("actor/GrapplePoint.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrapplePoint = void 0;

var _PointActor = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GrapplePoint = /*#__PURE__*/function (_Mixin$from) {
  _inherits(GrapplePoint, _Mixin$from);

  var _super = _createSuper(GrapplePoint);

  function GrapplePoint() {
    var _this;

    _classCallCheck(this, GrapplePoint);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args)); // this.args.width  = this.public.width  || 32;
    // this.args.height = this.public.height || 32;

    _this.args.width = 22;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-grapple-point';
    _this.ignoreOthers = new Set(); // this.args.gravity = 0.01;

    _this.noClip = true;
    return _this;
  }

  _createClass(GrapplePoint, [{
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(GrapplePoint.prototype), "update", this).call(this);

      if (!this.args._tiedTo) {
        var _tiedTo = this.viewport.actorsById[this.args.tiedTo];
        this.args._tiedTo = _tiedTo;

        if (_tiedTo) {
          _tiedTo.hanging.set(this.constructor, this);
        }

        return;
      }

      var tiedTo = this.args._tiedTo;

      if (!tiedTo || !tiedTo.args.falling) {
        this.args.groundAngle = -1.57;
        return false;
      }

      this.args.falling = true;

      if (this.hooked) {
        if (this.hooked.xAxis && this.args.ySpeed > 0) {
          if (Math.sign(this.args.xSpeed) || Math.sign(this.args.xSpeed) === Math.sign(this.hooked.xAxis)) {
            this.args.xSpeed += this.hooked.xAxis * 0.5;
          }
        }

        this.hooked.args.x = this.x;
        this.hooked.args.y = this.y + this.hooked.args.height;

        if (this.hooked.xAxis > 0) {
          this.hooked.args.facing = 'right';
          this.hooked.args.direction = +1;
        } else if (this.hooked.xAxis < 0) {
          this.hooked.args.facing = 'left';
          this.hooked.args.direction = -1;
        }
      }

      _get(_getPrototypeOf(GrapplePoint.prototype), "updateEnd", this).call(this);

      if (this.args._tiedTo) {
        this.setPos();
      } else {
        this.noClip = true;
      }
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "collideB",
    value: function collideB(other) {
      var _this2 = this;

      var tiedTo = this.args._tiedTo;

      if (!tiedTo || !tiedTo.args.falling) {
        return false;
      }

      if (other.args.hangingFrom || this.ignoreOthers.has(other)) {
        return;
        false;
      }

      if (this.args.ignore) {
        return false;
      }

      if (Math.abs(other.y - this.y) > 8 || !other.controllable || this.hooked) {
        return;
      }

      other.args.falling = true;
      this.hooked = other;
      this.viewport.auras.add(this);
      this.args.xSpeed = other.args.xSpeed;
      this.args.ySpeed = other.args.ySpeed;
      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      other.args.gSpeed = 0;
      other.args.ignore = -4;
      other.args["float"] = -1;
      other.args.x = this.x;
      other.args.y = this.y + other.args.height;
      other.args.hangingFrom = this;
      other.args.jumping = false;

      if (this.args._tiedTo) {
        var _tiedTo2$args$flightT;

        var _tiedTo2 = this.args._tiedTo;

        _tiedTo2.dispatchEvent(new CustomEvent('hooked'), {
          detail: {
            hook: this,
            subject: other
          }
        });

        _tiedTo2.activate && _tiedTo2.activate();

        var drop = function drop() {
          if (!_this2.viewport || !_this2.hooked) {
            return;
          }

          if (_tiedTo2.explode) {
            _this2.hooked.args.gSpeed = 0;

            _this2.unhook();

            _tiedTo2.explode();

            _this2.args.ignore = 30;
            _this2.args["float"] = 60;
            _this2.args.x = _this2.def.get('x');
            _this2.args.y = _this2.def.get('y');

            _this2.viewport.setColCell(_this2);
          }
        };

        this.viewport.onFrameOut((_tiedTo2$args$flightT = _tiedTo2.args.flightTime) !== null && _tiedTo2$args$flightT !== void 0 ? _tiedTo2$args$flightT : 85, drop);

        _tiedTo2.onRemove(drop);
      }
    }
  }, {
    key: "unhook",
    value: function unhook() {
      var _this$xSpeedLast,
          _this$ySpeedLast,
          _this3 = this;

      var hooked = this.hooked;
      this.hooked = null;

      if (!hooked) {
        return;
      }

      var tiedTo = this.args._tiedTo;
      hooked.args.ignore = hooked.args["float"] = 0;
      hooked.args.y++;
      hooked.args.xSpeed += (_this$xSpeedLast = this.xSpeedLast) !== null && _this$xSpeedLast !== void 0 ? _this$xSpeedLast : 0;
      hooked.args.ySpeed += (_this$ySpeedLast = this.ySpeedLast) !== null && _this$ySpeedLast !== void 0 ? _this$ySpeedLast : 0;
      hooked.args.hangingFrom = null;
      this.ignoreOthers.add(hooked);
      hooked.args.falling = true;
      hooked.args.jumping = true;
      this.viewport.onFrameOut(15, function () {
        _this3.ignoreOthers["delete"](hooked);

        _this3.viewport.auras["delete"](_this3);
      });
    }
  }]);

  return GrapplePoint;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.GrapplePoint = GrapplePoint;
});

;require.register("actor/GuardBot.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GuardBot = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GuardBot = /*#__PURE__*/function (_Mixin$from) {
  _inherits(GuardBot, _Mixin$from);

  var _super = _createSuper(GuardBot);

  function GuardBot() {
    var _this;

    _classCallCheck(this, GuardBot);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-guard-bot';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 24;
    _this.args.height = 24;
    _this.args["static"] = true;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(GuardBot, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return GuardBot;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.GuardBot = GuardBot;
});

;require.register("actor/HtmlFrame.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HtmlFrame = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var HtmlFrame = /*#__PURE__*/function (_PointActor) {
  _inherits(HtmlFrame, _PointActor);

  var _super = _createSuper(HtmlFrame);

  function HtmlFrame() {
    var _args$collapse;

    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, HtmlFrame);

    _this = _super.call(this, args, parent);
    _this.args.yForce = 0;
    _this.args.yLean = 0;
    _this.args.type = 'actor-item actor-html-frame';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.originalX = _this.args.x;
    _this.originalY = _this.args.y;
    _this.args.z = -1000;
    _this.args["static"] = true;
    _this.args.gravity = 0.5;
    _this.args.collapse = (_args$collapse = args.collapse) !== null && _args$collapse !== void 0 ? _args$collapse : false;

    _this.onTimeout(500, function () {
      return _this.args.url = 'https://timcast.com/video/police-are-resigning-en-masse-over-vaccine-mandates-but-this-will-lead-to-australian-style-fascism/';
    });

    return _this;
  }

  _createClass(HtmlFrame, [{
    key: "onRendered",
    value: function onRendered(event) {
      var _this2 = this;

      _get(_getPrototypeOf(HtmlFrame.prototype), "onRendered", this).call(this, event);

      this.droop(0);

      if (this.screen) {
        return;
      }

      this.screen = new _Tag.Tag("<iframe>");
      this.sprite.appendChild(this.screen.node);
      this.screen.style({
        'pointer-events': 'initial'
      });
      this.args.spriteSheet = this.args.spriteSheet || '/Sonic/marble-zone-block.png';
      this.args.bindTo('url', function (v) {
        return _this2.screen.src = v;
      });
      this.args.bindTo('html', function (v) {
        return _this2.screen.srcDoc = v;
      });
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(HtmlFrame), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.tileId = objDef.gid; // obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);

      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return HtmlFrame;
}(_PointActor2.PointActor); // <iframe width="560" height="315" src="https://www.youtube.com/embed/lTsIO_bo2P8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


exports.HtmlFrame = HtmlFrame;
});

;require.register("actor/Knuckles.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Knuckles = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _KnuxBomb = require("./KnuxBomb");

var _SkidDust = require("../behavior/SkidDust");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Knuckles = /*#__PURE__*/function (_PointActor) {
  _inherits(Knuckles, _PointActor);

  var _super = _createSuper(Knuckles);

  function Knuckles(args, parent) {
    var _this;

    _classCallCheck(this, Knuckles);

    _this = _super.call(this, args, parent);

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-knuckles';
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 15;
    _this.args.height = 41;
    _this.args.normalHeight = 41;
    _this.args.rollingHeight = 23;
    _this.punchTime = 0;
    _this.punched = 0;
    _this.beforePunch = 'standing';
    _this.bombsDropped = 0;
    _this.sparks = new Set();

    _this.args.bindTo('falling', function (v) {
      if (v || !_this["public"].flying) {
        return;
      }

      if (_this["public"].mode === 1 || _this["public"].mode === 2 || _this["public"].mode === 3) {
        _this.args.climbing = true;
        _this.args.gSpeed = 0;
        _this.args.xSpeed = 0;
        _this.args.ySpeed = 0;
      }
    });

    return _this;
  }

  _createClass(Knuckles, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      var falling = this["public"].falling;

      if (!this.box) {
        _get(_getPrototypeOf(Knuckles.prototype), "update", this).call(this);

        return;
      }

      if (this.throwing && Date.now() - this.throwing > 320) {
        this.throwing = false;
        this.holdBomb = false;
        var bomb = new _KnuxBomb.KnuxBomb({
          x: this["public"].x,
          y: this["public"].y - 16,
          owner: this,
          xSpeed: this["public"].direction * 10 + (-1 + Math.random() * 2),
          ySpeed: Math.random() * -2
        });
        this.viewport.spawn.add({
          object: bomb
        });
      }

      this.readying = false;

      if (this.punchTime && Date.now() - this.punchTime > (this.willPunch ? 1536 : 512)) {
        this.punchMomentum = 0;
        this.punchTime = false;
        this.willPunch = false;
        this.punching = false;
        this.punched = 0;
      }

      if (this.punchTime && Date.now() - this.punchTime > 384) {
        this.readying = true;
      }

      if (this.punchTime && Date.now() - this.punchTime > 128) {
        this.punching = true;
      }

      this.willStick = false;
      this.stayStuck = false;

      if (!falling) {
        this.bombsDropped = 0;
        var direction = this["public"].direction;
        var gSpeed = this["public"].gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this["public"].gSpeedMax;

        if (this["public"].flying) {
          this.args.flying = false;
          this.args["float"] = 0;
        }

        this.args.knucklesFlyCoolDown = 15;
        this.args.flying = false;

        if (!this["public"].rolling) {
          if (this["public"].climbing) {
            if (this.yAxis < 0) {
              this.box.setAttribute('data-animation', 'climbing-up');

              if (Math.abs(this.args.gSpeed) < 4) {
                this.args.direction = this["public"].mode === 1 ? 1 : -1;
                this.args.gSpeed -= this["public"].direction;
              }
            } else if (this.yAxis > 0) {
              this.box.setAttribute('data-animation', 'climbing-down');

              if (Math.abs(this.args.gSpeed) < 4) {
                this.args.direction = this["public"].mode === 1 ? 1 : -1;
                this.args.gSpeed += this["public"].direction;
              }
            } else {
              this.box.setAttribute('data-animation', 'climbing');
              this.args.gSpeed = 0;
            }
          } else if (Math.sign(this["public"].gSpeed) !== direction && Math.abs(this["public"].gSpeed - direction) > 5) {
            this.box.setAttribute('data-animation', 'skidding');
          } else if (this.holdBomb) {
            this.box.setAttribute('data-animation', 'hold-bomb');
          } else if (this.throwing) {
            this.box.setAttribute('data-animation', 'throw-bomb');
          } else if (!this.readying && this.punched) {
            if (this.punched % 2) {
              this.box.setAttribute('data-animation', 'jabbing');
            } else {
              this.box.setAttribute('data-animation', 'punching');
            }
          } else if (this.readying || this.willPunch) {
            this.box.setAttribute('data-animation', 'readying');
          } else if (speed > maxSpeed * 0.75) {
            this.box.setAttribute('data-animation', 'running');
          } else if (this["public"].moving && this["public"].gSpeed) {
            this.box.setAttribute('data-animation', 'walking');
          } else {
            this.box.setAttribute('data-animation', 'standing');
          }
        } else {
          this.box.setAttribute('data-animation', 'rolling');
        }

        if (this.args.grinding) {
          this.args.rolling = false;
          this.box.setAttribute('data-animation', 'grinding');
        }
      } else {
        if (this["public"].flying) {
          this.box.setAttribute('data-animation', 'flying');
        } else if (this["public"].jumping) {
          this.box.setAttribute('data-animation', 'jumping');
        }

        if (this["public"].climbing) {
          this.args.ySpeed = 0;
          this.args.xSpeed = 0;
          this.args.ignore = 10;
          this.args.falling = false;
          this.box.setAttribute('data-animation', 'walking');
          this.args.groundAngle = 0;

          if (this.args.mode === 1) {
            this.args.x += -4;
          } else if (this.args.mode === 3) {
            this.args.x += 4;
          }

          this.args.mode = 0;
        }
      }

      if (this["public"].flying) {
        if (this.yAxis > 0 || this.checkBelow(this.x, this.y)) {
          this.args.flying = false;
          return;
        }

        if (this["public"].ySpeed > 0) {
          this.args.ySpeed = 0;
        }

        if (this["public"].ySpeed < 1) {
          this.args.ySpeed += 1;
        }

        if (this["public"].ySpeed > 1) {
          this.args.ySpeed -= 1;
        }

        if (this.xAxis) {
          this.args.flyDirection = Math.sign(this.xAxis);
        }

        this.args.direction = Math.sign(this["public"].xSpeed);

        if (this["public"].direction < 0) {
          this.args.facing = 'left';
        } else {
          this.args.facing = 'right';
        }

        if (this["public"].flyDirection) {
          if (Math.abs(this.args.xSpeed) < 16) {
            if (this["public"].flyDirection !== Math.sign(this["public"].xSpeed)) {
              this.args.xSpeed += 0.15625 * Math.sign(this["public"].flyDirection) * 4;
            } else {
              this.args.xSpeed += 0.15625 * Math.sign(this["public"].flyDirection);
            }
          }
        }

        if (Math.abs(this.args.xSpeed) > 18) {
          this.args.xSpeed = 18 * Math.sign(this.args.xSpeed);
        }

        this.args["float"] = 3;
        this.willStick = true;
        this.stayStuck = true;
        this.args.groundAngle = 0;
      } else if (this["public"].mode % 2 === 0 || this["public"].groundAngle) {
        this.args.flyDirection = 0;
      }

      if (this.args.knucklesFlyCoolDown > 0) {
        this.args.knucklesFlyCoolDown--;
      }

      _get(_getPrototypeOf(Knuckles.prototype), "update", this).call(this);

      if (this["public"].mode === 0 || this["public"].mode === 2) {
        this.args.climbing = false;
      }

      if (this.args.grinding && !this.args.falling && this.args.gSpeed) {
        var sparkParticle = new _Tag.Tag("<div class = \"particle-sparks\">");
        var sparkEnvelope = new _Tag.Tag("<div class = \"envelope-sparks\">");
        sparkEnvelope.appendChild(sparkParticle.node);
        var sparkPoint = this.rotatePoint(-this["public"].gSpeed * 1.75 * this.args.direction, 8);
        var flip = Math.sign(this.args.gSpeed);
        sparkEnvelope.style({
          '--x': sparkPoint[0] + this.x,
          '--y': sparkPoint[1] + this.y + Math.random * -3,
          'z-index': 0,
          'animation-delay': -Math.random() * 0.25 + 's',
          '--xMomentum': Math.max(Math.abs(this.args.gSpeed), 4) * flip,
          '--flip': flip,
          '--angle': this.realAngle,
          opacity: Math.random() * 2
        });
        sparkEnvelope.particle = sparkParticle;
        this.viewport.particles.add(sparkEnvelope);
        this.sparks.add(sparkEnvelope);
        this.viewport.onFrameOut(30, function () {
          _this2.viewport.particles.remove(sparkEnvelope);

          _this2.sparks["delete"](sparkEnvelope);
        });
      }

      if (this.sparks.size) {
        var _iterator = _createForOfIteratorHelper(this.sparks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var spark = _step.value;

            var _sparkPoint = this.rotatePoint(1.75 * this.args.direction, 8);

            spark.style({
              opacity: Math.random() * 2,
              '--x': _sparkPoint[0] + this.x,
              '--y': _sparkPoint[1] + this.y
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }, {
    key: "dropBomb",
    value: function dropBomb() {
      if (this["public"].falling) {
        this.args.ySpeed = -8;
      }

      var bomb = new _KnuxBomb.KnuxBomb({
        x: this["public"].x,
        y: this["public"].y - 16,
        owner: this,
        xSpeed: this["public"].xSpeed,
        ySpeed: -3
      });
      ;
      this.viewport.spawn.add({
        object: bomb
      });
    }
  }, {
    key: "release_0",
    value: function release_0() {
      _get(_getPrototypeOf(Knuckles.prototype), "release_0", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0() {
      _get(_getPrototypeOf(Knuckles.prototype), "command_0", this).call(this);

      if (!this.args.falling) {
        return;
      }

      this.args.flying = true;
      this.args.xSpeed = 9 * this.args.direction;
      this.args.willJump = false;
    }
  }, {
    key: "command_1",
    value: function command_1() {
      if (this.punchTime && Date.now() - this.punchTime < 72) {
        this.punchMomentum = 0;
        this.args.ignore = 8;
        this.willPunch = false;
        this.punchTime = false;
        this.punched = 0;
        return;
      }

      this.willPunch = true;

      if (this.punchTime) {
        this.args.ignore = 15;
        this.args.gSpeed = 0;
        return;
      }

      this.punchMomentum = this.punchMomentum || this.args.gSpeed || 4 * this.args.direction;
      this.args.ignore = 15;
      this.args.gSpeed = 0;
    }
  }, {
    key: "release_1",
    value: function release_1() {
      if (this.punchTime && Date.now() - this.punchTime < 96) {
        this.willPunch = false;
        this.punchMomentum = 0;
        this.punched = 0;
        return;
      }

      this.args.gSpeed = this.punchMomentum;
      this.punchTime = Date.now();
      this.willPunch = false;

      if (this.throwing || this.args.climbing) {
        return;
      }

      this.punched++;
    }
  }, {
    key: "command_2",
    value: function command_2() {
      if (!this["public"].ignore && this["public"].falling && !this["public"].flying && this.bombsDropped < 3) {
        this.dropBomb();
        this.bombsDropped++;
        return;
      }

      if (this["public"].falling || this["public"].climbing) {
        return;
      }

      if (Math.abs(this.args.gSpeed) > 3) {
        return;
      }

      if (this.punchTime || this.throwing) {
        return;
      }

      this.holdBomb = Date.now();
      this.args.ignore = -1;
      this.args.gSpeed = 0;
    }
  }, {
    key: "release_2",
    value: function release_2() {
      if (this["public"].falling || this["public"].climbing) {
        return;
      }

      if (Math.abs(this.args.gSpeed) > 3) {
        return;
      }

      if (!this.holdBomb) {
        return;
      }

      this.args.ignore = 4;
      this.holdBomb = false;
      this.throwing = Date.now();
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      if (this.args.climbing) {
        this.args.cameraMode = 'aerial';
      } else {
        _get(_getPrototypeOf(Knuckles.prototype), "setCameraMode", this).call(this);
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return !this["public"].climbing;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }]);

  return Knuckles;
}(_PointActor2.PointActor);

exports.Knuckles = Knuckles;
});

;require.register("actor/KnuxBomb.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnuxBomb = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Tag = require("curvature/base/Tag");

var _Region = require("../region/Region");

var _Spring = require("./Spring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var KnuxBomb = /*#__PURE__*/function (_PointActor) {
  _inherits(KnuxBomb, _PointActor);

  var _super = _createSuper(KnuxBomb);

  function KnuxBomb() {
    var _this;

    _classCallCheck(this, KnuxBomb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-knux-bomb';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(KnuxBomb, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this.removed) {
        return;
      }

      _get(_getPrototypeOf(KnuxBomb.prototype), "update", this).call(this);

      if (!this.args.xSpeed && !this.args.ySpeed && !this.args.gSpeed) {
        this.removeTimer = this.onTimeout(250, function () {
          return _this2.explode();
        });
      }

      if (!this.removeTimer) {
        this.removeTimer = this.onTimeout(1500, function () {
          return _this2.explode();
        });
      }
    } // collideA(other)
    // {
    // 	if(other === this.args.owner || other instanceof KnuxBomb || other instanceof Region || other instanceof Spring)
    // 	{
    // 		return false;
    // 	}
    // 	this.args.x += Math.cos(this.public.angle) * other.args.width / 2 * Math.sign(this.public.xSpeed);
    // 	this.args.y += Math.sin(this.public.angle) * other.args.width / 2 * Math.sign(this.public.xSpeed);
    // 	this.explode();
    // 	return false;
    // }

  }, {
    key: "explode",
    value: function explode() {
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-explosion">');
      particle.style({
        '--x': this.x,
        '--y': this.y
      });
      viewport.particles.add(particle);
      setTimeout(function () {
        return viewport.particles.remove(particle);
      }, 350);
      this.viewport.actors.remove(this);
      this.remove();
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return KnuxBomb;
}(_PointActor2.PointActor);

exports.KnuxBomb = KnuxBomb;
});

;require.register("actor/LayerController.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerController = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LayerController = /*#__PURE__*/function (_PointActor) {
  _inherits(LayerController, _PointActor);

  var _super = _createSuper(LayerController);

  function LayerController(args, parent) {
    var _this;

    _classCallCheck(this, LayerController);

    _this = _super.call(this, args, parent);
    _this.args.activated = false;
    _this.args.xLayer = 0;
    _this.args.yLayer = 0;
    _this.args.xLayerSpeed = 0;
    _this.args.yLayerSpeed = 0;
    _this.args.xLayerLimit = _this.args.xLayerLimit || null;
    _this.args.yLayerLimit = _this.args.yLayerLimit || null;
    _this.args["static"] = true;
    _this.args.hidden = true;
    return _this;
  }

  _createClass(LayerController, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (this.args.activated && this.args.yLayerSpeed < 18) {
        this.args.yLayerSpeed += 1;
      }

      if (this.args.yLayer < this.args.yLayerLimit) {
        this.args.yLayer += this.args.yLayerSpeed || 0;
      }

      if (this.args.yLayer > this.viewport.tileMap.mapData.height * this.viewport.tileMap.mapData.tileheight && this.args.yLayer > this.args.yLayerLimit) {
        this.args.yLayerSpeed = 0;
        this.args.yLayer = this.args.yLayerLimit;
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras["delete"](target);
        this.viewport.auras["delete"](this);
      }
    }
  }, {
    key: "activate",
    value: function activate(other, button) {
      var _this2 = this;

      if (this.args.activated) {
        return;
      }

      this.viewport.auras.add(this);
      this.viewport.args.shakeY = 15;
      this.viewport.onFrameOut(60, function () {
        _this2.args.activated = true;
      });
      this.args.yLayerLimit = this.args.yLayerLimit || 4096;

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }
  }]);

  return LayerController;
}(_PointActor2.PointActor);

exports.LayerController = LayerController;
});

;require.register("actor/LayerSwitch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerSwitch = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LayerSwitch = /*#__PURE__*/function (_PointActor) {
  _inherits(LayerSwitch, _PointActor);

  var _super = _createSuper(LayerSwitch);

  function LayerSwitch() {
    var _this;

    _classCallCheck(this, LayerSwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-layer-switch';
    _this.args.width = 32;
    _this.args.height = 32;
    return _this;
  }

  _createClass(LayerSwitch, [{
    key: "onAttach",
    value: function onAttach(event) {
      event && event.preventDefault();
      return false;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      var speed = other["public"].gSpeed || other["public"].direction || other.xAxis;
      var back = !!Number(this["public"].back);
      var roll = !!Number(this["public"].roll);
      var half = this.args.width / 2 + (speed > 0 ? -1 : 0);

      if (other.x < this.x + -half || other.x > this.x + half) {
        return;
      }

      if (other.y < this.y + -this["public"].height || other.y > this.y) {
        return;
      }

      if (roll && (!other["public"].rolling || other["public"].height > 28)) {
        other.args.layer = toLayer === 1 ? 2 : 1;
        return false;
      }

      if (back && other["public"].falling) {
        speed = other["public"].xSpeed || other["public"].direction;
        back = !back;
      }

      var toLayer = other["public"].layer;

      if (speed > 0) {
        toLayer = back ? 1 : 2;
      }

      if (speed < 0) {
        toLayer = back ? 2 : 1;
      }

      if (!this.viewport.tileMap.getSolid(other.x, other.y, toLayer)) {
        other.args.layer = toLayer;
      } else {
        this.onNextFrame(function () {
          if (!_this2.viewport.tileMap.getSolid(other.x, other.y, toLayer)) {
            other.args.layer = toLayer;
          }
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(LayerSwitch), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      return obj;
    }
  }]);

  return LayerSwitch;
}(_PointActor2.PointActor);

exports.LayerSwitch = LayerSwitch;
});

;require.register("actor/Magnet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Magnet = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Magnet = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Magnet, _Mixin$from);

  var _super = _createSuper(Magnet);

  function Magnet() {
    var _this;

    _classCallCheck(this, Magnet);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.gravity = 0.8;
    _this.args.width = 48;
    _this.args.height = 28;
    _this.args.type = 'actor-item actor-magnet';
    return _this;
  }

  _createClass(Magnet, [{
    key: "collideA",
    value: function collideA(other, type) {}
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (other.controllable) {// other.startle();
      }
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Magnet.prototype), "update", this).call(this);

      this.setPos();
    }
  }]);

  return Magnet;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.Magnet = Magnet;
});

;require.register("actor/MarbleBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarbleBlock = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MarbleBlock = /*#__PURE__*/function (_PointActor) {
  _inherits(MarbleBlock, _PointActor);

  var _super = _createSuper(MarbleBlock);

  function MarbleBlock() {
    var _this;

    _classCallCheck(this, MarbleBlock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-block-marble';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.spriteSheet = _this.args.spriteSheet || '/Sonic/marble-zone-block.png';
    return _this;
  }

  _createClass(MarbleBlock, [{
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(MarbleBlock.prototype), "collideA", this).call(this, other, type);

      if (other.isEffect) {
        return false;
      }

      var otherMag = Math.ceil(Math.abs(other.args.gSpeed || other.args.xSpeed));
      var otherDir = Math.sign(other.args.gSpeed || other.args.xSpeed);
      var otherSpeed = otherMag * otherDir;

      if (Math.abs(other["public"].ySpeed) > Math.abs(other["public"].xSpeed)) {
        return true;
      }

      if (!this.args.falling && type === 1 && otherSpeed <= 0) {
        return false;
      }

      if (!this.args.falling && type === 3 && otherSpeed >= 0) {
        return false;
      }

      var blockTop = this.y - this.args.height;

      if ((type === 1 || type === 3) && (other.y >= this.y || other.y > blockTop)) {
        if (!otherSpeed) {
          return true;
        }

        this.args.pushed = Math.sign(other["public"].gSpeed) || this.args.pushed;
        var tileMap = this.viewport.tileMap;
        var moveBy = type === 1 && 1 || type === 3 && -1;
        var scan = this.scanBottomEdge(moveBy);
        var blockers = tileMap.getSolid(this.x + Math.ceil(this.args.width / 2) * moveBy, this.y);

        if (blockers) {
          return true;
        }

        var radius = this.args.width / 2;

        if (moveBy > 0 && scan === 0) {
          this.args.falling = true;
        } else if (moveBy < 0 && scan === 0) {
          this.args.falling = true;
        } else if (!this.args.falling || scan > 0) {
          var nextCenter = this.findNextStep(moveBy);
          var nextWall = this.findNextStep(moveBy + radius * Math.sign(moveBy));

          if ((!nextCenter[1] || nextCenter[2]) && !nextWall[3]) {
            var otherRadius = other.args.width;
            var myRadius = this.args.width / 2;
            this.args.x = other.args.x + moveBy * (myRadius + otherRadius);
            return scan === 0;
          }

          return true;
        }
      }

      return true;
    }
  }, {
    key: "isPushable",
    get: function get() {
      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return MarbleBlock;
}(_PointActor2.PointActor);

exports.MarbleBlock = MarbleBlock;
});

;require.register("actor/MechaFroggy.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MechaFroggy = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MechaFroggy = /*#__PURE__*/function (_PointActor) {
  _inherits(MechaFroggy, _PointActor);

  var _super = _createSuper(MechaFroggy);

  function MechaFroggy() {
    var _this;

    _classCallCheck(this, MechaFroggy);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-mecha-froggy';
    _this.args.animation = 'standing';
    _this.args.accel = 0.7;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 10;
    _this.args.jumpForce = 15;
    _this.args.gravity = 0.5;
    _this.args.width = 15;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(MechaFroggy, [{
    key: "update",
    value: function update() {
      var direction = this.args.direction;

      if (!this.flame) {
        this.flame = new _Tag.Tag('<div class = "mecha-froggy-flame">');
        this.sprite.appendChild(this.flame.node);
      }

      if (!this.args.jumping || this.args.falling) {
        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed && Math.abs(this.args.gSpeed) >= 10) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && this.args.gSpeed && Math.abs(this.args.gSpeed)) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(MechaFroggy.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return MechaFroggy;
}(_PointActor2.PointActor);

exports.MechaFroggy = MechaFroggy;
});

;require.register("actor/MechaSonic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MechaSonic = void 0;

var _PointActor2 = require("./PointActor");

var _Vehicle = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MechaSonic = /*#__PURE__*/function (_PointActor) {
  _inherits(MechaSonic, _PointActor);

  var _super = _createSuper(MechaSonic);

  function MechaSonic() {
    var _this;

    _classCallCheck(this, MechaSonic);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust('particle-sparks'));

    _this.args.type = 'actor-item actor-mecha-sonic';
    _this.args.accel = 0.45;
    _this.args.decel = 0.3;
    _this.args.skidTraction = 2;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.takeoffPlayed = false;
    _this["public"].rollingHeight = 52;
    _this["public"].normalHeight = 31;
    _this.args.width = 18;
    _this.args.height = 52;

    _this.args.bindTo('falling', function (v) {
      if (!v) {
        _this.landSound();
      }
    });

    return _this;
  }

  _createClass(MechaSonic, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.sprite) {
        return;
      }

      var falling = this.args.falling;
      this.args.accel = 0.3;
      var direction = this["public"].direction;
      var gSpeed = this["public"].gSpeed;
      var speed = Math.abs(gSpeed);
      var maxSpeed = 100;
      var minRun = 100 * 0.1;
      var minRun2 = 0.75 * this["public"].gSpeedMax;

      if (!this.flame) {
        this.sparks = new _Tag.Tag('<div class = "mecha-sonic-sparks">');
        this.flame = new _Tag.Tag('<div class = "mecha-sonic-flame">');
        this.sprite.appendChild(this.sparks.node);
        this.sprite.appendChild(this.flame.node);
      }

      if (this.viewport.args.audio && !this.thrusterSound) {
        this.takeoffSound = new Audio('/Sonic/mecha-sonic-takeoff.wav');
        this.thrusterSound = new Audio('/Sonic/mecha-sonic-thruster.wav');
        this.scrapeSound = new Audio('/Sonic/mecha-sonic-scrape.wav');
        this.thrusterCloseSound = new Audio('/Sonic/mecha-sonic-thruster-close.wav');
        this.thrusterCloseSound.volume = 0.25;
        this.takeoffSound.volume = 0.5;
        this.scrapeSound.volume = 0.1;
        this.thrusterSound.loop = true;
        this.scrapeSound.loop = true;
      }

      if (this.thrusterSound) {
        this.thrusterSound.volume = 0.15 + Math.random() * -0.05;

        if (this.thrusterSound.currentTime > 1.5) {
          this.thrusterSound.currentTime = 0.5;
        }

        if (this.scrapeSound.currentTime > 1.5) {
          this.scrapeSound.currentTime = 0.5;
        }
      }

      if (!falling) {
        this.dashed = false;
      }

      if (!this["public"].rolling && !falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        if (Math.sign(this["public"].gSpeed) !== direction && Math.abs(this["public"].gSpeed - direction) > 5) {
          this.scrapeSound && this.scrapeSound.play();
          this.args.animation = 'skidding';
        } else if (speed >= minRun2) {
          this.scrapeSound && this.scrapeSound.pause();
          this.args.animation = 'running2';
          this.thrusterSound && this.thrusterSound.play();

          if (!this["public"].takeoffPlayed) {
            this.args.takeoffPlayed = true;
            this.takeoffSound && this.takeoffSound.play();
          }

          this.args.accel = 0.75;

          if (speed > maxSpeed * 0.75) {
            this.args.accel = 0.01;
          }
        } else if (speed >= minRun) {
          this.scrapeSound && this.scrapeSound.play();
          this.args.animation = 'running';
        } else if (this.args.moving && gSpeed) {
          this.scrapeSound && this.scrapeSound.play();

          if (this.args.animation === 'curling' || this.args.animation === 'jumping' || this.args.animation === 'rolling') {
            this.args.animation = 'uncurling';
            this.onTimeout(128, function () {
              _this2.args.animation = 'walking';
            });
          } else if (this.args.animation === 'standing' || this.args.animation === 'running' || this.args.animation === 'running2') {
            this.args.animation = 'walking';
          }
        } else if (this.args.crouching || this.standingOn && this.standingOn.isVehicle) {
          this.args.animation = 'crouching';
        } else {
          this.scrapeSound && this.scrapeSound.pause();

          if (this.args.animation === 'curling' || this.args.animation === 'jumping' || this.args.animation === 'rolling') {
            this.args.animation = 'uncurling';
            this.onTimeout(128, function () {
              _this2.args.animation = 'standing';
            });
          } else if (this.args.animation === 'walking' || this.args.animation === 'running' || this.args.animation === 'running2' || this.args.animation === 'skidding' || this.args.animation === 'crouching' || this.args.animation === 'rolling') {
            this.args.animation = 'standing';
          }
        }

        if (speed < minRun2) {
          this.closeThruster();
        }
      } else if (this["public"].rolling) {
        this.scrapeSound && this.scrapeSound.pause();

        if (this.args.animation !== 'curling' && this.args.animation !== 'uncurling' && this.args.animation !== 'rolling' && this.args.animation !== 'jumping') {
          this.args.animation = 'crouching';
          this.onTimeout(200, function () {
            if (_this2["public"].rolling) {
              _this2.args.animation = 'rolling';

              _this2.closeThruster();
            }
          });
        }
      } else {
        this.scrapeSound && this.scrapeSound.pause();

        if (this.dashed) {
          this.args.animation = 'running2';
        } else if (this.args.animation !== 'rolling' && this.args.animation !== 'jumping' && this.args.animation !== 'uncurling' && this.args.animation !== 'curling' && this.args.animation !== 'crouching') {
          this.args.animation = 'curling';
          this.onTimeout(200, function () {
            _this2.thrusterCloseSound && _this2.thrusterCloseSound.play();

            if (_this2["public"].falling) {
              if (_this2.dashed) {
                _this2.args.animation = 'running2';
              } else if (_this2["public"].jumping) {
                _this2.args.animation = 'jumping';
              }

              _this2.closeThruster();
            }
          });
        } else if (!this["public"].jumping) {
          this.args.animation = 'crouching';
        }
      }

      _get(_getPrototypeOf(MechaSonic.prototype), "update", this).call(this);
    }
  }, {
    key: "closeThruster",
    value: function closeThruster() {
      if (this.args.takeoffPlayed) {
        this.landSound();
      }

      this.args.takeoffPlayed = false;
      this.thrusterSound && this.thrusterSound.pause();
    }
  }, {
    key: "landSound",
    value: function landSound() {
      this.thrusterCloseSound && this.thrusterCloseSound.play();
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.thrusterSound && this.thrusterSound.pause();
      this.scrapeSound && this.scrapeSound.pause();
    }
  }, {
    key: "command_5",
    value: function command_5() {
      if (this["public"].falling) {
        this.airDash(1);
      }
    }
  }, {
    key: "command_4",
    value: function command_4() {
      if (this["public"].falling) {
        this.airDash(-1);
      }
    }
  }, {
    key: "airDash",
    value: function airDash(direction) {
      var _this3 = this;

      if (this.dashed || this["public"].ignore && this["public"].ignore !== -2) {
        return;
      }

      if (direction < 0) {
        this.args.direction = -1;
        this.args.facing = 'left';
      } else {
        this.args.direction = 1;
        this.args.facing = 'right';
      }

      var dashSpeed = direction * 7;
      this.args["float"] = 3;
      this.args.mode = 0;
      this.args["float"] = 2;
      this.args.rolling = false;
      this.args.height = this["public"].normalHeight;

      if (this["public"].xSpeed && Math.sign(this["public"].xSpeed) !== Math.sign(direction)) {
        dashSpeed = direction * 11;
        this.args["float"] = 6;
        this.args.xSpeed = 0;
      }

      this.args.falling = true;
      var finalSpeed = this.args.xSpeed + dashSpeed;
      var space = this.scanForward(dashSpeed, 0.5);

      if (space && Math.abs(finalSpeed) > Math.abs(space)) {
        dashSpeed = space * Math.sign(finalSpeed);
      }

      var foreDistance = this.castRay(finalSpeed, finalSpeed > 0 ? 0 : Math.PI, function (i, point) {
        if (_this3.getMapSolidAt.apply(_this3, _toConsumableArray(point).concat([_this3["public"].layer]))) {
          return i;
        }
      });

      if (foreDistance !== false) {
        dashSpeed = foreDistance * Math.sign(dashSpeed);
      }

      this.args.xSpeed = finalSpeed;
      this.args.ySpeed = 0;
      this.dashTimer = 0;
      this.dashed = true;
      this.args.mode = 0;
      this.args.groundAngle = 0;
      this.args.takeoffPlayed = true;

      if (this.takeoffSound) {
        this.takeoffSound.currentTime = 0;
        this.takeoffSound.play();
      }
    } // get solid() { return !this.occupant; }
    // get isVehicle() { return true; }

  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return MechaSonic;
}(_PointActor2.PointActor);

exports.MechaSonic = MechaSonic;
});

;require.register("actor/MiniMace.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MiniMace = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MiniMace = /*#__PURE__*/function (_Mixin$from) {
  _inherits(MiniMace, _Mixin$from);

  var _super = _createSuper(MiniMace);

  function MiniMace() {
    var _this;

    _classCallCheck(this, MiniMace);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-mini-mace';
    return _this;
  }

  _createClass(MiniMace, [{
    key: "collideB",
    value: function collideB(other) {
      if (other.controllable) {
        other.damage();
      }
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (this.viewport && !this.viewport.auras.has(this)) {
        this.viewport.auras.add(this);
      }

      _get(_getPrototypeOf(MiniMace.prototype), "update", this).call(this);

      if (this.args._tiedTo && this.args._tiedTo.args.hitPoints) {
        this.setPos();
      } else {
        this.noClip = true;
      }

      _get(_getPrototypeOf(MiniMace.prototype), "updateEnd", this).call(this);
    }
  }]);

  return MiniMace;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.MiniMace = MiniMace;
});

;require.register("actor/Monitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Monitor = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var _BrokenMonitor = require("../actor/BrokenMonitor");

var _WoodenCrate = require("../actor/WoodenCrate");

var _SteelCrate = require("../actor/SteelCrate");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Monitor = /*#__PURE__*/function (_PointActor) {
  _inherits(Monitor, _PointActor);

  var _super = _createSuper(Monitor);

  function Monitor() {
    var _this;

    _classCallCheck(this, Monitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-monitor';
    _this.args.width = 30;
    _this.args.height = 32;
    _this.args.decel = 5;
    _this.args.gone = false;
    return _this;
  }

  _createClass(Monitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(Monitor.prototype), "onRendered", this).call(this, event);

      this.screen = new _Tag.Tag("<div class = \"monitor-screen\">");
      this.sprite.appendChild(this.screen.node);
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Monitor.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/object-destroyed.wav');
        this.sample.volume = 0.6 + Math.random() * -0.3;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other instanceof _WoodenCrate.WoodenCrate || other instanceof _SteelCrate.SteelCrate) {
        return false;
      }

      _get(_getPrototypeOf(Monitor.prototype), "collideA", this).call(this, other, type);

      if (type === 2 && this.args["float"] && other.controllable) {
        other.args.ySpeed *= -1;
        this.args.ySpeed = -4;
        this.args["float"] = 0;
        this.ignores.set(other, 15);
        return true;
      }

      if (type !== 2 && (other.args.ySpeed > 0 && other.y < this.y || other.args.rolling) && (!this.args.falling || this.args["float"] === -1) && !this.args.gone && this.viewport) {
        this.pop(other);
        return;
      }

      if ((type === 1 || type === 3) && ( // && (Math.abs(other.args.xSpeed) > 15 || other instanceof Projectile)
      other.args.rolling || other instanceof _Projectile.Projectile) && !this.args.gone && this.viewport) {
        this.pop(other);
        return;
      }
    }
  }, {
    key: "pop",
    value: function pop(other) {
      var _this2 = this;

      var viewport = this.viewport;

      if (!viewport || this.args.gone) {
        return;
      }

      var explosion = new _Tag.Tag('<div class = "particle-explosion">');

      if (other) {
        other.args.score += 100;
      }

      explosion.style({
        '--x': this.x,
        '--y': this.y - 16
      });
      viewport.particles.add(explosion);
      setTimeout(function () {
        return viewport.particles.remove(explosion);
      }, 512);
      setTimeout(function () {
        return _this2.screen && _this2.screen.remove();
      }, 1024);
      this.args.gone = true;
      this.box.setAttribute('data-animation', 'broken');

      if (other) {
        if (other.occupant) {
          other = other.occupant;
        }

        if (other.args.owner) {
          other = other.args.owner;
        }

        if (other.controllable) {
          this.effect(other);
        }
      }

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'monitor',
          eventAction: 'popped',
          eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
        });
      }

      if (other) {
        var ySpeed = other.args.ySpeed;

        if (other.args.falling) {
          this.onNextFrame(function () {
            other.args.ySpeed = -ySpeed;
            other.args.falling = true;
          });
        }

        if (this.args.falling && other.args.falling) {
          this.onNextFrame(function () {
            return other.args.xSpeed = -other.args.xSpeed;
          });
        }
      }

      this.onTimeout(1500, function () {
        _this2.viewport.actors.remove(_this2);
      });
    }
  }, {
    key: "effect",
    value: function effect() {}
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Monitor;
}(_PointActor2.PointActor);

exports.Monitor = Monitor;
});

;require.register("actor/NuclearSuperball.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NuclearSuperball = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var NuclearSuperball = /*#__PURE__*/function (_PointActor) {
  _inherits(NuclearSuperball, _PointActor);

  var _super = _createSuper(NuclearSuperball);

  function NuclearSuperball() {
    var _this;

    _classCallCheck(this, NuclearSuperball);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.gSpeedMax = 150;
    _this.args.accel = 2;
    _this.args.jumpForce = 20;
    _this.willStick = true;
    _this.stayStuck = true;
    return _this;
  }

  _createClass(NuclearSuperball, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return NuclearSuperball;
}(_PointActor2.PointActor);

exports.NuclearSuperball = NuclearSuperball;
});

;require.register("actor/Orb.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Orb = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Pushable = require("../mixin/Pushable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Orb = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Orb, _Mixin$from);

  var _super = _createSuper(Orb);

  function Orb() {
    var _this;

    _classCallCheck(this, Orb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-orb';
    _this.args.width = 48;
    _this.args.height = 48;
    _this.args.rolled = 0;
    _this.args.decel = 0;

    _this.args.bindTo('x', function (v, k, t, d, p) {
      return _this.args.rolled += Number(v - p || 0);
    });

    _this.args.gravity = 1.35;
    return _this;
  }

  _createClass(Orb, [{
    key: "onAttached",
    value: function onAttached(event) {
      this.autoStyle.get(this.box)['--rolled'] = 'rolled';
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.viewport || !this.viewport.controlActor) {
        return;
      }

      if (this.args.falling) {
        this.viewport.onFrameOut(10, function () {
          if (_this2.args.falling) {
            _this2.viewport.auras["delete"](_this2);
          }
        });
      } else {
        this.viewport.auras.add(this);
      }

      var other = this.viewport.controlActor;
      var speedMag = Math.max(Math.abs(this.args.gSpeed), Math.abs(other.args.gSpeed), Math.abs(this.args.xSpeed), Math.abs(other.args.xSpeed), 8);
      var speedSign = Math.sign(this.args.gSpeed || this.gSpeedLast || other.args.gSpeed);
      var xSpace = this.x - other.x;

      if (speedSign && !this.args.mode && !other.args.mode) {
        if (xSpace < -96) {
          this.args.gSpeed = speedMag * speedSign * 0.8;
        }

        if (xSpace < -144) {
          this.args.gSpeed = speedMag * speedSign;
        }

        if (xSpace < -160) {
          this.args.x -= xSpace + 160;
          this.args.gSpeed = speedMag * speedSign;
        }
      } else if (this.args.mode || other.args.mode) {
        this.args.gSpeed = speedMag * speedSign;
      }

      _get(_getPrototypeOf(Orb.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      other.controllable && other.loseRings();
      other.controllable && other.die();
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Orb;
}(_Mixin.Mixin.from(_PointActor.PointActor));

exports.Orb = Orb;
});

;require.register("actor/PogoSpring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PogoSpring = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PogoSpring = /*#__PURE__*/function (_Vehicle) {
  _inherits(PogoSpring, _Vehicle);

  var _super = _createSuper(PogoSpring);

  function PogoSpring() {
    var _this;

    _classCallCheck(this, PogoSpring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-pogo-spring';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 20;
    _this.args.decel = 0.45;
    _this.args.accel = 0.45;
    _this.args.gravity = 1;
    _this.args.seatHeight = 32;
    _this.args.skidTraction = 0.05;
    _this.args.jumpForce = 8;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    return _this;
  }

  _createClass(PogoSpring, [{
    key: "onAttached",
    value: function onAttached() {// this.box = this.findTag('div');
      // this.sprite = this.findTag('div.sprite');
      // this.frontWheel = new Tag('<div class = "rail-car-wheel rail-car-wheel-front">');
      // this.backWheel = new Tag('<div class = "rail-car-wheel rail-car-wheel-back">');
      // this.frontFrag = new Tag('<div class = "rail-car-frag rail-car-frag-front">');
      // this.backFrag = new Tag('<div class = "rail-car-frag rail-car-frag-back">');
      // this.sprite.appendChild(this.frontWheel.node);
      // this.sprite.appendChild(this.backWheel.node);
      // this.sprite.appendChild(this.frontFrag.node);
      // this.sprite.appendChild(this.backFrag.node);
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return PogoSpring;
}(_Vehicle2.Vehicle);

exports.PogoSpring = PogoSpring;
});

;require.register("actor/PointActor.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointActor = void 0;

var _Bindable = require("curvature/base/Bindable");

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

var _Twist = require("../effects/Twist");

var _Droop = require("../effects/Droop");

var _Pinch = require("../effects/Pinch");

var _CharacterString = require("../ui/CharacterString");

var _Classifier = require("../Classifier");

var _Controller = require("../controller/Controller");

var _Sheild = require("../powerups/Sheild");

var _FireSheild = require("../powerups/FireSheild");

var _SuperSheild = require("../powerups/SuperSheild");

var _BubbleSheild = require("../powerups/BubbleSheild");

var _ElectricSheild = require("../powerups/ElectricSheild");

var _LayerSwitch = require("./LayerSwitch");

var _Layer = require("../viewport/Layer");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MODE_FLOOR = 0;
var MODE_LEFT = 1;
var MODE_CEILING = 2;
var MODE_RIGHT = 3;
var WALKING_SPEED = 100;
var RUNNING_SPEED = Infinity;
var CRAWLING_SPEED = 1;
var JUMP_FORCE = 15;
var DEFAULT_GRAVITY = MODE_FLOOR;

var PointActor = /*#__PURE__*/function (_View) {
  _inherits(PointActor, _View);

  var _super = _createSuper(PointActor);

  function PointActor() {
    var _this;

    _classCallCheck(this, PointActor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class  = \"point-actor [[type]]\">\n\t\t<div class = \"sprite\" cv-ref = \"sprite\">\n\t\t\t<div class = \"labels\" cv-ref = \"labels\" cv-each = \"charStrings:charString:c\">[[charString]]</div>\n\t\t</div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "profiles", {
      normal: {
        height: 1,
        width: 1,
        decel: 0.85,
        accel: 0.2,
        gravity: 0.65,
        airAccel: 0.3,
        jumpForce: 14,
        gSpeedMax: 100 // , rollSpeedMax = 37;

      }
    });

    _this[_Bindable.Bindable.NoGetters] = true;
    _this.defaultDisplay = 'initial';
    _this.springing = false;
    _this.stepCache = {};
    _this.fallTime = 0;
    _this.args.score = 0;
    _this.args.rings = 0;
    _this.args.mercy = false;
    _this.args.opacity = 1;
    _this.autoStyle = new Map();
    _this.autoAttr = new Map();
    _this.hanging = new Map();
    _this.ignores = new Map();
    _this.regions = new Set();
    _this.powerups = new Set();
    _this.behaviors = new Set();
    _this.inventory = new _Classifier.Classifier([_Sheild.Sheild, _FireSheild.FireSheild, _BubbleSheild.BubbleSheild, _ElectricSheild.ElectricSheild]);
    _this.noClip = false;
    _this.sheild = null;

    _this.inventory.addEventListener('adding', function (event) {
      var item = event.detail.object;

      if (_this.inventory.has(item.constructor)) {
        event.preventDefault();
        return;
      }

      _this.powerups.add(item);

      item.acquire && item.acquire(_assertThisInitialized(_this));
      _this.args.currentSheild = item;
      item.equip && item.equip(_assertThisInitialized(_this));
    });

    _this.inventory.addEventListener('removing', function (event) {
      var item = event.detail.object;

      _this.powerups["delete"](item);

      if (_Bindable.Bindable.make(item) === _this.args.currentSheild) {
        _this.args.currentSheild = null;
      }
    });

    _this.args.bindTo('currentSheild', function (v, k, t, d, p) {
      if (p) {
        p.unequip && p.unequip(_assertThisInitialized(_this));
      }

      var _iterator = _createForOfIteratorHelper(_this.inventory.get(_Sheild.Sheild)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var shield = _step.value;

          if (shield instanceof _SuperSheild.SuperSheild) {
            continue;
          }

          shield.detach();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      v && v.equip && v.equip(_assertThisInitialized(_this));
      v && v.render(_this.sprite);
    });

    Object.defineProperty(_assertThisInitialized(_this), 'public', {
      value: {}
    });

    _this.args.bindTo(function (v, k) {
      _this["public"][k] = v;
    });

    _this.args.type = 'actor-generic';
    _this.args.modeTime = 0;
    _this.args.charStrings = [];
    _this.args.display = _this.args.display || 'initial';
    _this.args.emeralds = 0;
    _this.args.rings = 0;
    _this.args.coins = 0;
    _this.ringSet = new Set();
    _this.ringDoc = new DocumentFragment();
    _this.args.yMargin = 0;
    _this.args.cameraMode = 'normal';
    _this.args.cameraBias = 0;
    _this.args.layer = 1;
    _this.args.moving = false;
    _this.args.active = false;
    _this.args.flySpeedMax = 40;
    _this.args.x = _this.args.x || 1024 + 256;
    _this.args.y = _this.args.y || 32;
    _this.args.z = _this.args.z || 0;
    _this.args.xOff = 0;
    _this.args.yOff = 0;
    _this.args.width = _this.args.width || 1;
    _this.args.height = _this.args.height || 1;
    _this.args.direction = Number(_this.args.direction) || 1;
    _this.args.gSpeed = _this.args.gSpeed || 0;
    _this.args.xSpeed = _this.args.xSpeed || 0;
    _this.args.ySpeed = _this.args.ySpeed || 0;
    _this.args.angle = _this.args.angle || 0;
    _this.args.groundAngle = _this.args.groundAngle || 0;
    _this.args.displayAngle = 0;
    _this.args.airAngle = 0;
    _this.lastAngles = [];
    _this.angleAvg = 8;
    _this.args.xSpeedMax = 512;
    _this.args.ySpeedMax = 512;
    _this.args.gSpeedMax = WALKING_SPEED;
    _this.args.rollSpeedMax = 24;
    _this.args.gravity = 0.65;
    _this.args.decel = 0.85;
    _this.args.accel = 0.2;
    _this.args.airAccel = 0.3;
    _this.args.jumpForce = 14;
    _this.args.jumping = false;
    _this.args.jumpedAt = null;
    _this.args.deepJump = false;
    _this.args.highJump = false;
    _this.maxStep = 14;
    _this.backStep = 0;
    _this.frontStep = 0;
    _this.args.rolling = false;
    _this.args.skidTraction = 2.25;
    _this.args.skidTraction = 5;
    _this.args.fgFilter = 'none';
    _this.args.bgFilter = 'none';
    _this.args.falling = true;
    _this.args.running = false;
    _this.args.crawling = false;
    _this.args.climbing = false;
    _this.args.rotateFixed = false;
    _this.args.mode = _this.args.mode || MODE_FLOOR;
    _this.xAxis = 0;
    _this.yAxis = 0;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args.startled = _this.args.startled || 0;
    _this.args.halted = _this.args.halted || 0;
    _this.args.ignore = _this.args.ignore || 0;
    _this.args["float"] = _this.args["float"] || 0;
    _this.colliding = false;
    _this.args.flyAngle = 0;

    _this.args.bindTo(['x', 'y'], function (v, k) {
      isNaN(v) && console.trace(k, v);
      _this.stepCache = {};
    });

    _this.args.bindTo('gSpeed', function (v) {
      _this.gSpeedLast = v || _this.gSpeedLast;
    });

    _this.args.bindTo('xSpeed', function (v) {
      _this.airAngle = Math.atan2(_this.args.ySpeed, v);
      _this.xSpeedLast = v || _this.xSpeedLast;
    });

    _this.args.bindTo('ySpeed', function (v) {
      _this.airAngle = Math.atan2(v, _this.args.xSpeed);
      _this.ySpeedLast = v || _this.ySpeedLast;
    }); // this.controllable && this.args.bindTo('animation', v => console.trace(v));
    // this.controllable && this.args.bindTo('xSpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('ySpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('gSpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('falling', v => console.trace(v));


    _this.impulseMag = null;
    _this.impulseDir = null;
    _this.args.stopped = 0;
    _this.args.particleScale = 1;
    _this.dropDashCharge = 0;

    var bindable = _Bindable.Bindable.make(_assertThisInitialized(_this));

    _this.debindGroundX = null;
    _this.debindGroundY = null;
    _this.debindGroundL = null;

    if (_this.controllable) {
      _this.controller = new _Controller.Controller({
        deadZone: 0.2
      });
      _this.args.charStrings = [new _CharacterString.CharacterString({
        value: _this["public"].name
      })];

      _this.controller.zero();
    }

    _this.debindGroundX = new Set();
    _this.debindGroundY = new Set();
    _this.debindGroundL = new Set();

    _this.args.bindTo(['mode', 'falling'], function () {
      _this.args.modeTime = 0;
    });

    _this.args.bindTo('standingOn', function (groundObject, key, target) {
      if (_this.isGhost) {
        return;
      }

      if (_this.args.standingOn === groundObject) {
        return;
      }

      var _iterator2 = _createForOfIteratorHelper(_this.debindGroundX),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var debind = _step2.value;

          _this.debindGroundX["delete"](debind);

          debind();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(_this.debindGroundY),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _debind = _step3.value;

          _this.debindGroundY["delete"](_debind);

          _debind();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(_this.debindGroundL),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _debind2 = _step4.value;

          _this.debindGroundL["delete"](_debind2);

          _debind2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var prevGroundObject = target[key];

      if (prevGroundObject && prevGroundObject.isVehicle) {
        prevGroundObject.occupant = null;
        prevGroundObject.stayStuck = false;
        prevGroundObject.willStick = false;
        prevGroundObject.xAxis = 0;
        prevGroundObject.yAxis = 0;
        prevGroundObject.args.active = false;
      }

      if (!groundObject) {
        return;
      }

      if (_this.controllable && groundObject.isVehicle) {
        groundObject.args.active = true;
        var debindGroundX = groundObject.args.bindTo('x', function (vv, kk) {
          var x = groundObject.args.direction * groundObject.args.seatForward || 0;
          var y = groundObject.args.seatHeight || groundObject.args.height || 0; // const xRot = x * Math.cos(groundObject.realAngle) - y * Math.sin(groundObject.realAngle);
          // const yRot = y * Math.cos(groundObject.realAngle) + x * Math.sin(groundObject.realAngle);

          var _groundObject$rotateP = groundObject.rotatePoint(x, y),
              _groundObject$rotateP2 = _slicedToArray(_groundObject$rotateP, 2),
              xRot = _groundObject$rotateP2[0],
              yRot = _groundObject$rotateP2[1];

          _this.args.x = xRot + vv;
          _this.args.y = yRot + groundObject.y;
        });
        var debindGroundY = groundObject.args.bindTo('y', function (vv, kk) {
          var x = groundObject.args.direction * groundObject.args.seatForward || 0;
          var y = groundObject.args.seatHeight || groundObject.args.height || 0; // const xRot = x * Math.cos(groundObject.realAngle) - y * Math.sin(groundObject.realAngle);
          // const yRot = y * Math.cos(groundObject.realAngle) + x * Math.sin(groundObject.realAngle);

          var _groundObject$rotateP3 = groundObject.rotatePoint(x, y),
              _groundObject$rotateP4 = _slicedToArray(_groundObject$rotateP3, 2),
              xRot = _groundObject$rotateP4[0],
              yRot = _groundObject$rotateP4[1];

          _this.args.x = xRot + groundObject.x;
          _this.args.y = yRot + vv;
        });
        var debindGroundL = groundObject.args.bindTo('layer', function (vv, kk) {
          _this.args.layer = vv;
        });

        _this.debindGroundX.add(debindGroundX);

        _this.debindGroundY.add(debindGroundY);

        _this.debindGroundL.add(debindGroundL);

        var occupant = groundObject.occupant;
        groundObject.args.yMargin = _this.args.height;

        if (occupant && occupant !== _assertThisInitialized(_this)) {
          occupant.args.standingOn = null;
          occupant.args.y -= 32;
          occupant.args.gSpeed = 0;
          occupant.args.xSpeed = -5 * _this.args.direction;
          occupant.args.ySpeed = -8;
          occupant.args.falling = true;
        }

        _this.args.gSpeed = 0;
        _this.args.xSpeed = 0;
        _this.args.ySpeed = 0;
        _this.args.falling = false;
        groundObject.occupant = _assertThisInitialized(_this);
      } else if (!groundObject.isVehicle) {
        if (_this.y <= _this["public"].height + groundObject.y - groundObject.args.height) {
          var _debindGroundX = groundObject.args.bindTo('x', function (vv, kk) {
            _this.args.x += vv - groundObject.args.x;
          });

          var _debindGroundY = groundObject.args.bindTo('y', function (vv, kk) {
            _this.args.y = vv - groundObject.args.height;
          });

          var _debindGroundL = groundObject.args.bindTo('layer', function (vv, kk) {
            _this.args.layer = vv;
          });

          _this.debindGroundX.add(_debindGroundX);

          _this.debindGroundY.add(_debindGroundY);

          _this.debindGroundL.add(_debindGroundL);
        }
      }

      if (prevGroundObject && prevGroundObject.isVehicle) {
        if (prevGroundObject.occupant === _assertThisInitialized(_this)) {
          prevGroundObject.occupant = null;
          prevGroundObject.stayStuck = false;
          prevGroundObject.willStick = false;
        }

        prevGroundObject.xAxis = 0;
        prevGroundObject.yAxis = 0;
      }

      groundObject.standBelow(_assertThisInitialized(_this));
    });

    return _possibleConstructorReturn(_this, bindable);
  }

  _createClass(PointActor, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      if (this.init || !this.viewport) {
        return;
      }

      var Ring = this.viewport.objectPalette.ring;

      if (this.controllable) {
        this.args.bindTo('rings', function (v) {
          if (!v) {
            return;
          }

          window.requestIdleCallback(function () {
            if (_this2.ringSet.size < v) {
              var ring = new Ring();
              ring.viewport = _this2.viewport;
              ring.render(_this2.ringDoc);

              _this2.ringSet.add(ring);
            }
          });
        });
      }

      var regionClass = this.viewport.objectPalette['base-region'];
      this.isRegion = this instanceof regionClass;
      this.box = this.findTag('div');
      this.autoStyle.set(this.box, {
        display: 'display',
        '--animation-bias': 'animationBias',
        '--bg-filter': 'bgFilter',
        '--sprite-sheet': 'spriteSheetUrl',
        '--sprite-x': 'spriteX',
        '--sprite-y': 'spriteY',
        '--angle': 'angle',
        '--palletShift': 'palletShift',
        '--fly-angle': 'flyAngle',
        '--display-angle': 'groundAngle',
        '--ground-angle': 'groundAngle',
        '--air-angle': 'airAngle',
        '--opacity': 'opacity',
        '--height': 'height',
        '--width': 'width',
        '--x': 'x',
        '--y': 'y',
        '--z': 'z'
      });
      this.autoAttr.set(this.box, {
        'data-camera-mode': 'cameraMode',
        'data-colliding': 'colliding',
        'data-respawning': 'respawning',
        'data-mercy': 'mercy',
        'data-selected': 'selected',
        'data-falling': 'falling',
        'data-facing': 'facing',
        'data-filter': 'filter',
        'data-angle': 'angleDeg',
        'data-active': 'active',
        'data-layer': 'layer',
        'data-mode': 'mode',
        'data-id': 'id'
      }); // data-camera-mode = "[[cameraMode]]"
      // data-colliding   = "[[colliding]]"
      // data-falling     = "[[falling]]"
      // data-facing      = "[[facing]]"
      // data-filter      = "[[filter]]"
      // data-angle       = "[[angle|rad2deg]]"
      // data-layer       = "[[layer]]"
      // data-mode        = "[[mode]]"
      // data-id          = "[[id]]"

      this.args.bindTo('spriteSheet', function (v) {
        return _this2.args.spriteSheetUrl = _this2.urlWrap(v);
      });
      this.args.bindTo('angle', function (v) {
        return _this2.args.angleDeg = _this2.rad2deg(v);
      });
      this.sprite = this.findTag('div.sprite');

      if (this.controllable) {
        var superSheild = new _SuperSheild.SuperSheild();
        superSheild.equip(this);
        this.inventory.add(superSheild);
      }

      this.init = true;
      this.args.bindTo('animation', function (v) {
        return _this2.box.setAttribute('data-animation', v);
      });
      this.bindTo('isSuper', function (v) {
        return _this2.box.setAttribute('data-super', v);
      });
      this.bindTo('isHyper', function (v) {
        return _this2.box.setAttribute('data-hyper', v);
      });

      if (this.controllable) {
        this.sprite.parentNode.classList.add('controllable');
      }

      this.listen('click', function () {
        var now = Date.now();
        var timeSince = now - PointActor.lastClick;

        if (timeSince < 1000) {
          _this2.viewport.auras.add(_this2);

          var clear = _this2.viewport.onFrameInterval(1, function () {
            var frame = _this2.viewport.serializePlayer();

            _this2.viewport.onFrameOut(5, function () {
              if (frame.input) {
                _this2.controller && _this2.controller.replay(frame.input);

                _this2.readInput();
              }

              if (frame.args) {
                Object.assign(_this2.args, frame.args);

                _this2.viewport.setColCell(_this2);
              }
            });
          });

          _this2.onRemove(clear);

          return;
        }

        PointActor.lastClick = now;

        if (_this2.viewport.args.networked) {
          return;
        }

        if (!_this2.controllable) {
          return;
        }

        _this2.viewport.nextControl = _Bindable.Bindable.ref(_this2);

        if (_this2.viewport.tags.currentActor) {
          var _iterator5 = _createForOfIteratorHelper(_this2.viewport.tags.currentActor.options),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var option = _step5.value;

              if (option.value === _this2.args.name) {
                _this2.viewport.tags.currentActor.value = option.value;
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      });
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      this.lastLayer = null;
      this.args.localCameraMode = null;

      if (this.args.dead) {
        return;
      }

      if (this.args.standingLayer && !this.args["static"]) {
        if (this.args.standingLayer.offsetXChanged) {
          this.args.x += this.args.standingLayer.offsetXChanged;
        }

        if (this.args.standingLayer.offsetYChanged) {
          this.args.y += this.args.standingLayer.offsetYChanged;
        }

        var layer = this.args.standingLayer.layer;
        var grindRegion = false;

        var _iterator6 = _createForOfIteratorHelper(this.regions),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var region = _step6.value;

            if (region.grind) {
              grindRegion = true;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        if (!this.controllable) {
          this.args.grinding = false;
        } else if (layer && layer.meta.grinding) {
          this.args.grinding = true;
          this.args.direction = Math.sign(this.args.xSpeed || this.args.gSpeed);
        } else if (!grindRegion) {
          this.args.grinding = false;
        }

        if (this.args.grinding && this.args.falling) {
          this.args.grinding = false;
        }
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (!this.args["static"] && this.args.falling) {
        if (this.args.standingLayer) {
          this.args.xSpeed += this.args.standingLayer.offsetXChanged;
          this.args.ySpeed += this.args.standingLayer.offsetYChanged;
        }

        this.args.standingLayer = null;
      }

      var _iterator7 = _createForOfIteratorHelper(this.autoStyle),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              tag = _step7$value[0],
              cssArgs = _step7$value[1];

          var styles = {};

          for (var _i2 = 0, _Object$entries = Object.entries(cssArgs); _i2 < _Object$entries.length; _i2++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
                prop = _Object$entries$_i[0],
                arg = _Object$entries$_i[1];

            if (arg in this["public"]) {
              styles[prop] = this["public"][arg];
            }
          }

          tag.style(styles);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      var _iterator8 = _createForOfIteratorHelper(this.autoAttr),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _step8$value = _slicedToArray(_step8.value, 2),
              _tag = _step8$value[0],
              attrsArgs = _step8$value[1];

          var attrs = {};

          for (var _i3 = 0, _Object$entries2 = Object.entries(attrsArgs); _i3 < _Object$entries2.length; _i3++) {
            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
                attr = _Object$entries2$_i[0],
                _arg = _Object$entries2$_i[1];

            if (_arg in this["public"]) {
              attrs[attr] = this["public"][_arg];
            }
          }

          _tag.attr(attrs);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      var startX = this.x;
      var startY = this.y;

      if (this.viewport && this.args.respawning && !this.viewport.args.isRecording && !this.viewport.args.isReplaying) {
        var stored = this.viewport.getCheckpoint(this.args.id);
        var toX, toY;

        if (stored && stored.checkpointId) {
          var checkpoint = this.viewport.actorsById[stored.checkpointId];
          toX = checkpoint.x;
          toY = checkpoint.y;
        } else if (this.def) {
          toX = this.def.get('x');
          toY = this.def.get('y');
        }

        this.args.standingLayer = null;
        this.args.standingOn = null;
        this.lastLayer = null;
        var xDiff = this.args.x - toX;
        var yDiff = this.args.y - toY;
        this.args.x -= xDiff / 20 || 1;
        this.args.y -= yDiff / 20 || 1;

        if (Math.abs(xDiff) < 1 || Math.abs(yDiff) < 1) {
          this.args.dead = false;
          this.noClip = false;
          this.args.respawning = false;
          this.args.display = 'initial';
          this.args.x = toX;
          this.args.y = toY;
          this.args.ignore = 4;
          var viewport = this.viewport;
          viewport.reset();
          viewport.startLevel();
          return;
        }

        this.viewport && this.viewport.setColCell(this);
        return;
      }

      if (this.viewport && this.viewport.meta.deathLine && !this.args.dead && this.controllable && this.y > this.viewport.meta.deathLine) {
        this.die();
        return;
      }

      if (this.controllable) {
        var height = Math.max(this["public"].height, 0);
        var headPoint = this.rotatePoint(0, height * 0.75);
        var jumpBlock = this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1]); // console.log(jumpBlock);

        if (Array.isArray(jumpBlock)) {
          jumpBlock = !!jumpBlock.filter(function (a) {
            return !a.args.platform && !a.isVehicle;
          }).length;
        }

        if (!this.args.falling && this.checkBelow(this.x, this.y) && jumpBlock) {
          this.die();
          return;
        }
      }

      var _iterator9 = _createForOfIteratorHelper(this.ignores),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 2),
              object = _step9$value[0],
              timeout = _step9$value[1];

          if (timeout <= 0) {
            this.ignores["delete"](object);
          } else {
            this.ignores.set(object, -1 + timeout);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      this.args.skimming = false;

      if (this.args.falling) {
        this.args.airAngle = this.airAngle;

        if (this.args.displayAngle !== this.args.groundAngle) {
          var angleDiff = this.args.groundAngle + -this.args.displayAngle;
          this.args.displayAngle += Math.sign(angleDiff) * (Math.abs(angleDiff) > 1 ? 1 : Math.abs(angleDiff)) * 0.5;
        }
      } else {
        this.args.airAngle = 0;
        this.args.displayAngle = this.args.groundAngle;
      }

      if (this["public"].halted < 1 && this["public"].halted > 0) {
        this.args.halted = 0;
      }

      if (this["public"].halted > 0) {
        this.args.halted--;
        return;
      }

      if (this.args.currentSheild && 'update' in this.args.currentSheild) {
        this.args.currentSheild.update(this);
      }

      if (this.args.rolling) {
        this.args.height = this.args.rollingHeight || this.args.height;
      } else if (this.args.jumping) {
        this.args.height = this.args.rollingHeight || this.args.height;
      } else if (this.canRoll) {
        this.args.height = this.args.normalHeight || this.args.height;
      }

      if (this.args.dontJump > 0) {
        this.args.dontJump--;
      }

      if (this.args.dontJump < 0) {
        this.args.dontJump = 0;
      }

      if (!this.viewport || this.removed) {
        return;
      }

      this.args.modeTime++;

      if (this.args.standingOn && this.args.standingOn.isVehicle && !this.isVehicle) {
        var vehicle = this.args.standingOn;
        this.args.falling = true;
        this.args.flying = false;
        this.args.jumping = false;
        this.processInput();
        this.args.cameraMode = vehicle.args.cameraMode;

        if (this.willJump && this.yAxis < 0) {
          this.args.standingLayer = false;
          this.args.standingOn = false;
          this.willJump = false;
          this.args.falling = true;
          this.args.jumping = true;
          this.args.y -= vehicle["public"].seatHeight || vehicle["public"].height;
          this.args.xSpeed = vehicle["public"].direction * 2;
          this.args.ySpeed = -this["public"].jumpForce;
          vehicle.args.ySpeed = 0;
        }

        this.args.groundAngle = vehicle.args.groundAngle || 0;

        if (this.willJump && this.yAxis >= 0) {
          this.args.standingOn.falling = false;
          this.willJump = false;
          this.args.standingOn.command_0();
        }

        return;
      }

      if (this.impulseMag !== null) {
        this.args.xSpeed += Number(Number(Math.cos(this.impulseDir) * this.impulseMag).toFixed(3));
        this.args.ySpeed += Number(Number(Math.sin(this.impulseDir) * this.impulseMag).toFixed(3));

        if (!this.impulseFal) {
          switch (this["public"].mode) {
            case MODE_FLOOR:
              this.args.gSpeed = Math.cos(this.impulseDir) * this.impulseMag;
              break;

            case MODE_CEILING:
              this.args.gSpeed = -Math.cos(this.impulseDir) * this.impulseMag;
              break;

            case MODE_LEFT:
              this.args.gSpeed = -Math.sin(this.impulseDir) * this.impulseMag;
              break;

            case MODE_RIGHT:
              this.args.gSpeed = Math.sin(this.impulseDir) * this.impulseMag;
              break;
          }
        } else {
          this.args.falling = this.impulseFal;
        }

        this.impulseMag = null;
        this.impulseDir = null;
        this.impulseFal = null;
      }

      if (this["public"].ignore === -2 && (this["public"].falling === false || this.args.ySpeed > 64)) {
        this.args.ignore = 0;
      }

      if (this["public"].ignore === -3 && (!this["public"].falling || this["public"].ySpeed >= 0)) {
        this.onNextFrame(function () {
          return _this3.args.ignore = 0;
        });
      }

      if (this["public"].ignore < 1 && this["public"].ignore > 0) {
        this.args.ignore = 0;
      }

      if (this["public"].ignore > 0) {
        this.args.ignore--;
      }

      if (this.args.startled > 0) {
        this.args.startled--;
      }

      if (this["public"]["float"] > 0) {
        this.args["float"]--;
      }

      if (this["public"].standingOn instanceof PointActor) {
        this["public"].standingOn.callCollideHandler(this);
      }

      if (!this.args["float"] && this.args.falling) {
        if (!this.args.standingOn || !this.args.standingOn.isVehicle) {
          this.args.standingOn = null;
          this.args.landed = false;
          this.lastAngles = [];

          if (this.args.jumping && this.args.jumpedAt < this.y) {
            this.args.deepJump = true;
          } else if (this.args.jumping && this.args.jumpedAt > this.y + 160) {
            this.args.highJump = true;
          } else if (this["public"].jumping) {
            this.args.deepJump = false;
            this.args.highJump = false;
          }
        }
      } else if (this["public"].jumping && !this["public"].falling) {
        this.args.jumping = false;
        this.args.deepJump = false;
        this.args.highJump = false;
        this.args.jumpedAt = null;
      }

      var drag = this.getLocalDrag();
      var regions = new Set();

      if (!this.noClip) {
        regions = this.viewport.regionsAtPoint(this.x, this.y);

        var _iterator10 = _createForOfIteratorHelper(this.regions),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var region = _step10.value;
            region.updateActor(this);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }

      var gSpeedMax = this["public"].gSpeedMax;

      if (!this.isRegion) {
        var _iterator11 = _createForOfIteratorHelper(this.regions),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _region = _step11.value;

            if (!regions.has(_region)) {
              this.regions["delete"](_region);
              this.crossRegionBoundary(_region, false);
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        var _iterator12 = _createForOfIteratorHelper(regions),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _region2 = _step12.value;

            if (this["public"].density) {
              if (_region2["public"].density && this["public"].density < _region2["public"].density) {
                var densityRatio = _region2["public"].density / this["public"].density;
                var myTop = this.y - this["public"].height;
                var regionTop = _region2.y - _region2["public"].height;
                var depth = Math.min((myTop - regionTop) / this["public"].height, 1);
                this.args["float"] = 1;
                var force = depth * drag;
                this.args.falling = true;

                if (depth > -1) {
                  this.args.ySpeed -= force;
                  this.args.ySpeed *= drag;
                } else if (depth < -1 && this.args.ySpeed < 0) {
                  if (Math.abs(depth) < 0.25 && Math.abs(this.args.ySpeed) < 1) {
                    this.args.ySpeed = 0;
                    this.args.y = -1 + regionTop + this.args.height;
                  }
                }
              }
            }

            if (!this.regions.has(_region2)) {
              this.regions.add(_region2);
              this.crossRegionBoundary(_region2, true);
            }
          } // if(!regions.size && this.def)
          // {
          // 	this.args.float = this.def.get('float') ?? this.args.float ?? 0;
          // }

        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }

      if (this.willJump && !this["public"].dontJump && (!this["public"].falling || this.falltime < 2)) {
        this.willJump = false;
        var _tileMap = this.viewport.tileMap;

        var _height = Math.max(this["public"].height, 32);

        var _headPoint = this.rotatePoint(0, _height + 1);

        var _jumpBlock = this.getMapSolidAt(this.x + _headPoint[0], this.y + _headPoint[1]);

        if (Array.isArray(_jumpBlock)) {
          _jumpBlock = !!_jumpBlock.filter(function (a) {
            return !a.args.platform && !a.isVehicle;
          }).length;
        }

        if (!_jumpBlock) {
          var _force = this.args.jumpForce * drag;

          if (this.running) {
            _force = _force * 1.5;
          } else if (this.crawling) {
            _force = _force * 0.5;
          }

          this.doJump(_force);
        }

        return;
      }

      this.willJump = false;

      if (!this.noClip && !this.args.gSpeed && !this.args.xSpeed && !this.args.ySpeed && !this.args["float"]) {
        this.args.falling = !this.checkBelow(this.x, this.y);
      }

      if (!this["public"]["static"]) {
        if (this.noClip) {
          if (this["public"].xSpeed) {
            this.args.x += this["public"].xSpeed;
          }

          if (this["public"].ySpeed) {
            this.args.y += this["public"].ySpeed;
          }
        } else if (!this.isRegion && !this.isEffect && this["public"].falling && this.viewport) {
          if (this.args.grinding) {
            this.args.grinding = false;
          }

          this.updateAirPosition();
          this.args.animationBias = Math.abs(this.args.airSpeed / this.args.flySpeedMax);

          if (this.args.animationBias > 1) {
            this.args.animationBias = 1;
          }
        } else if (this.args.standingLayer || !this.isRegion && !this.isEffect && !this["public"].falling) {
          this.updateGroundPosition();
          this.args.animationBias = Math.abs(this.args.gSpeed / this.args.gSpeedMax);

          if (this.args.animationBias > 1) {
            this.args.animationBias = 1;
          }
        }
      }

      var halfWidth = Math.ceil(this.args.width / 2);
      var halfHeight = Math.floor(this.args.height / 2); // if(!this.isRegion && (this.public.pushed || ( !this.willStick && this.controllable )))

      if (!this.noClip && !this.isRegion && this["public"].pushed) {
        var block;

        var testWallPoint = function testWallPoint(direction) {
          switch (_this3["public"].mode) {
            case MODE_FLOOR:
              block = _this3.getMapSolidAt(_this3.x + halfWidth * direction + (direction === -1 ? 0 : -1), _this3.y - halfHeight);
              break;

            case MODE_CEILING:
              block = _this3.getMapSolidAt(_this3.x + halfWidth * direction + (direction === -1 ? 0 : -1), _this3.y + halfHeight);
              break;

            case MODE_LEFT:
              block = _this3.getMapSolidAt(_this3.x + halfHeight * (direction === -1 ? 0 : 2), _this3.y);
              break;

            case MODE_RIGHT:
              block = _this3.getMapSolidAt(_this3.x - halfHeight * (direction === -1 ? 0 : 2), _this3.y);
              break;
          }

          if (block && Array.isArray(block)) {
            return block.filter(function (a) {
              return !a.isVehicle;
            });
          }

          return block;
        };

        var leftWall = testWallPoint(-1);
        var rightWall = testWallPoint(1);

        if (rightWall && !leftWall) {
          if (this["public"].xSpeed > 0) {
            this.args.xSpeed = 0;
          }

          this.args.x--;
        }

        if (leftWall && !rightWall) {
          if (this["public"].xSpeed > 0) {
            this.args.xSpeed = 0;
          }

          this.args.x++;
        }
      }

      if (!this.viewport || this.removed) {
        return;
      }

      var layerSwitch = this.viewport.objectPalette['layer-switch'];
      var regionClass = this.viewport.objectPalette['base-region'];
      var skipChecking = [regionClass];

      if (!this.isGhost && !skipChecking.some(function (x) {
        return _this3 instanceof x;
      })) {
        var colls = this.viewport.actorsAtPoint(this.x, this.y, this["public"].width, this["public"].height).filter(function (x) {
          return x.args !== _this3.args;
        }).filter(function (x) {
          return !x.isPushable;
        }).filter(function (x) {
          return x.callCollideHandler(_this3);
        });
      }

      if (!this.viewport) {
        return;
      }

      var tileMap = this.viewport.tileMap;

      if (Math.abs(this.args.gSpeed) <= 5 && !this.args.falling) {
        if (!this.stayStuck && !this.args.climbing) {
          var half = Math.floor(this.args.width / 2) || 0;

          if (!tileMap.getSolid(this.x, this.y + 1, this.args.layer)) {
            var mode = this.args.mode;
            this.lastAngles = [];

            if (mode === MODE_LEFT && this.args.groundAngle <= Math.PI / 4) {
              this.args.xSpeed = 0;
              this.args.mode = MODE_FLOOR;
              this.args.falling = true;
              this.args.groundAngle = -Math.PI / 2;
              this.args.x++;
              this.args.gSpeed = 0;
              this.args.gSpeed += 15;
              this.args.ignore = 12;
            } else if (mode === MODE_RIGHT && this.args.groundAngle >= -(Math.PI / 4)) {
              this.args.xSpeed = -0;
              this.args.mode = MODE_FLOOR;
              this.args.falling = true;
              this.args.groundAngle = Math.PI / 2;
              this.args.x--;
              this.args.gSpeed = 0;
              this.args.gSpeed -= 15;
              this.args.ignore = 12;
            } else if (mode === MODE_CEILING) {
              this.args.xSpeed = 0;
              this.args.y++;
              this.args.ignore = 8;
              this.args.falling = true;
              this.willJump = false;
              var gSpeed = this.args.gSpeed;
              this.args.groundAngle = Math.PI;
              this.args.mode = MODE_FLOOR;
              this.onNextFrame(function () {
                _this3.args.groundAngle = Math.PI;
                _this3.args.mode = MODE_FLOOR;
                _this3.willJump = false;
                _this3.args.xSpeed = -gSpeed;
              });

              if (Math.sign(this.args.xSpeed) === -1) {
                this.args.facing = 'left';
                this.args.x++;
              } else if (Math.sign(this.args.xSpeed) === 1) {
                this.args.facing = 'right';
                this.args.x--;
              }
            }
          }
        }
      }

      this.args.landed = true;

      if (this.controllable) {
        this.args.x = this["public"].x;
        this.args.y = this["public"].y;
      }

      if (!this.noClip && !this["public"].falling && !this.isRegion) {
        if (this["public"].mode === MODE_FLOOR && !this["public"].gSpeed && !this["public"].xSpeed) {
          var execs = 0;
          var heading = Math.atan2(startY - this.y, startX - this.x);
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;

          while (this.getMapSolidAt(this.x, this.y - 1, false)) {
            this.args.x += Math.cos(heading);
            this.args.y += Math.sin(heading);

            if (execs++ > 1000) {
              break;
            }
          }
        }
      }

      if (this["public"].falling) {
        this.args.gSpeed = 0;
      }

      this.controllable && this.processInput();

      if (this["public"].falling || this["public"].gSpeed) {
        this.args.stopped = 0;
      } else {
        this.args.stopped++;
      }

      if (this.lastAngles.length > 0) {
        this.args.groundAngle = this.lastAngles.map(function (a) {
          return Number(a);
        }).reduce(function (a, b) {
          return a + b;
        }) / this.lastAngles.length;
      }

      if (isNaN(this["public"].groundAngle)) {
        console.log(this.lastAngles, this.lastAngles.length);
      }

      if (!this.args["float"] && !this.args["static"]) {
        var regionsBelow = this.viewport.regionsAtPoint(this.groundPoint[0], this.groundPoint[1] + 1);
        var standingOn = this.getMapSolidAt.apply(this, _toConsumableArray(this.groundPoint));

        if (Array.isArray(standingOn) && standingOn.length && !this.args["float"]) {
          this.args.standingLayer = false;
          var groundActors = standingOn.filter(function (a) {
            return a.args !== _this3.args && a.solid;
          } //a.callCollideHandler(this)
          );

          if (groundActors.length) {
            var _iterator13 = _createForOfIteratorHelper(groundActors),
                _step13;

            try {
              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                var groundActor = _step13.value;

                if (!groundActor.isVehicle && this.y > 1 + groundActor.y + -groundActor.args.height) {
                  continue;
                }

                this.args.groundAngle = groundActor.groundAngle || 0;
                this.args.standingOn = groundActor;

                if (groundActor.args.standingLayer) {
                  this.args.standingLayer = groundActor.args.standingLayer;
                }
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }
          }
        } else if (standingOn) {
          this.args.standingOn = null;

          if (_typeof(standingOn) === 'object') {
            this.args.standingLayer = standingOn;
          } else {
            this.args.standingLayer = null;
          }
        } else if (this["public"].mode === MODE_FLOOR && regionsBelow.size) {
          var falling = !standingOn;

          var _iterator14 = _createForOfIteratorHelper(regionsBelow),
              _step14;

          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var _region3 = _step14.value;

              if ((this.broad || this.y + 1 === _region3.y - _region3["public"].height) && Math.max(Math.abs(this.args.gSpeed), Math.abs(this.args.xSpeed)) >= _region3.skimSpeed && (this.broad || !this.args.falling)) {
                var speed = this.args.falling ? Math.abs(this.args.xSpeed) : Math.abs(this.args.gSpeed);
                this.args.gSpeed = speed * Math.sign(this.args.gSpeed || this.args.xSpeed);

                if (this.y - 16 < _region3.y - _region3["public"].height) {
                  this.args.skimming = true;
                  this.args.y = _region3.y - _region3["public"].height + -1;
                  falling = false;

                  _region3.skim(this);
                } else {
                  this.args.ySpeed--;
                }

                break;
              }
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }

          this.args.standingOn = null;
          this.args.falling = falling;

          if (falling) {
            this.args.xSpeed = this.args.gSpeed || this.args.xSpeed;
            this.args.standingLayer = null;
          }
        } else {
          this.args.standingOn = null;
        }
      }

      if (this.args.falling && this.args.ySpeed < this.args.ySpeedMax) {
        if (!this.args["float"]) {
          var gravity = 1;

          var _iterator15 = _createForOfIteratorHelper(this.regions),
              _step15;

          try {
            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
              var _region4 = _step15.value;

              if (!_region4["public"].gravity && _region4["public"].gravity !== 1) {
                continue;
              }

              gravity *= _region4["public"].gravity;
            }
          } catch (err) {
            _iterator15.e(err);
          } finally {
            _iterator15.f();
          }

          this.args.ySpeed += this["public"].gravity * gravity;
        }

        this.args.landed = false;
      }

      if (!this.args.falling) {
        this.checkDropDash();
        this.args.jumping = false;
      }

      var _iterator16 = _createForOfIteratorHelper(this.behaviors),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var behavior = _step16.value;
          behavior.update(this);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      if (this.twister) {
        this.twister.args.x = this["public"].x;
        this.twister.args.y = this["public"].y;
        this.twister.args.xOff = this["public"].xOff;
        this.twister.args.yOff = this["public"].yOff;
        this.twister.args.width = this["public"].width;
        this.twister.args.height = this["public"].height;
      }

      if (this.pincherBg) {
        this.pincherBg.args.x = this["public"].x;
        this.pincherBg.args.y = this["public"].y;
        this.pincherBg.args.xOff = this["public"].xOff;
        this.pincherBg.args.yOff = this["public"].yOff;
        this.pincherBg.args.width = this["public"].width;
        this.pincherBg.args.height = this["public"].height;
      }

      if (this.pincherFg) {
        this.pincherFg.args.x = this["public"].x;
        this.pincherFg.args.y = this["public"].y;
        this.pincherFg.args.xOff = this["public"].xOff;
        this.pincherFg.args.yOff = this["public"].yOff;
        this.pincherFg.args.width = this["public"].width;
        this.pincherFg.args.height = this["public"].height;
      }

      if (this["public"].falling) {
        this.args.rolling = false;
        this.fallTime++;
      }
    }
  }, {
    key: "popOut",
    value: function popOut(other) {
      var halfWidth = this.args.width / 2;
      var otherHalfWidth = other.args.width / 2;
      var topSide = this.y - this.args.height + 1;
      var bottomSide = this.y;
      var distance = this.x - other.x;
      var minDistance = halfWidth + otherHalfWidth;

      if (this.solid && Math.abs(distance) < Math.abs(minDistance) && bottomSide > other.y && other.y > topSide) {
        other.args.x = this.x + minDistance * -Math.sign(distance);
      }
    }
  }, {
    key: "getLocalDrag",
    value: function getLocalDrag() {
      var drag = 1;

      var _iterator17 = _createForOfIteratorHelper(this.regions),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var region = _step17.value;

          if (region.skimmers.has(this) || region.skimmers.has(_Bindable.Bindable.make(this))) {
            continue;
          }

          if (!region["public"].drag && region["public"].drag !== 0) {
            continue;
          }

          if (region["public"].drag < drag) {
            drag = region["public"].drag;
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }

      return drag;
    }
  }, {
    key: "updateGroundPosition",
    value: function updateGroundPosition() {
      var _this4 = this;

      var drag = this.getLocalDrag();
      var gSpeedMax = this.args.gSpeedMax;

      if (this.running) {
        gSpeedMax = RUNNING_SPEED;
      } else if (this.crawling) {
        gSpeedMax = CRAWLING_SPEED;
      }

      var nextPosition = [0, 0];
      var radius = Math.ceil(this.args.width / 2);
      var wasPaused = this.paused;

      if (this["public"].gSpeed) {
        var scanDist = radius + Math.abs(this.args.gSpeed);
        var direction = Math.sign(this.args.gSpeed);
        var max = Math.abs(this.args.gSpeed);
        var step = 1;
        this.pause(true);
        var iter = 0;
        this.scanForward(this.args.gSpeed, 0.5);

        for (var s = 0; s < max; s += step) {
          if (!this.args.rolling) {
            var headPoint = this.rotatePoint(radius * -direction, this.args.height);
            var headBlock = this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1]);

            if (Array.isArray(headBlock)) {
              headBlock = headBlock.filter(function (x) {
                return x.args !== _this4.args;
              }).filter(function (x) {
                return x.callCollideHandler(_this4);
              }).filter(function (x) {
                return x.solid;
              }).length;
            }

            if (headBlock) {
              if (this.args.mode === MODE_CEILING) {
                this.args.x += radius * Math.sign(this.args.gSpeed);
                this.args.y += this.args.height;
                this.args.mode = MODE_FLOOR;
              }

              this.args.gSpeed = 0;
              break;
            }
          }

          var waistPoint = this.rotatePoint(radius * -direction, this.args.height * 0.5);
          var waistBlock = this.getMapSolidAt(this.x + waistPoint[0], this.y + waistPoint[1]);

          if (Array.isArray(waistBlock)) {
            waistBlock = waistBlock.filter(function (x) {
              return x.args !== _this4.args;
            }).filter(function (x) {
              return x.callCollideHandler(_this4);
            }).filter(function (x) {
              return x.solid;
            }).length;
          }

          if (waistBlock) {
            if (this.args.mode === MODE_CEILING) {
              this.args.x += radius * Math.sign(this.args.gSpeed);
              this.args.y += this.args.rollingeight || this.args.height;
              this.args.mode = MODE_FLOOR;
            }

            this.args.gSpeed = 0;
            break;
          }

          nextPosition = this.findNextStep(step * direction);

          if (!nextPosition) {
            break;
          }

          if (nextPosition[3]) {
            this.args.moving = false;
            this.args.gSpeed = 0;

            if (this["public"].mode === MODE_LEFT || this["public"].mode === MODE_RIGHT) {
              this.args.mode = MODE_FLOOR;
              this.lastAngles = [];
            }

            break;
          } else if (nextPosition[2] === true) {
            var gSpeed = this["public"].gSpeed;
            var gAngle = this["public"].groundAngle;
            this.args.standingLayer = null;

            switch (this["public"].mode) {
              case MODE_FLOOR:
                this.args.x += gSpeed;
                this.args.xSpeed = gSpeed * Math.cos(gAngle);
                this.args.ySpeed = -gSpeed * Math.sin(gAngle);
                this.args["float"] = this.args["float"] < 0 ? this.args["float"] : 1;
                var falling = !!this["public"].gSpeed;
                this.args.falling = falling;
                break;

              case MODE_CEILING:
                this.args.y++;
                this.args["float"] = this.args["float"] < 0 ? this.args["float"] : 1;
                this.args.falling = true;
                this.args.mode = MODE_FLOOR;
                this.args.groundAngle = Math.PI;
                this.args.xSpeed = -gSpeed * Math.cos(gAngle);
                this.args.ySpeed = gSpeed * Math.sin(gAngle);
                this.args.displayAngle = Math.PI;
                this.lastAngles.splice(0); // this.args.direction *= -1;
                // this.args.facing = this.args.facing === 'left' ? 'right' : 'left';

                this.args.ignore = 3; // this.onNextFrame(() => {
                // 	this.args.groundAngle = Math.PI;
                // 	this.args.mode = MODE_FLOOR;
                // });

                break;

              case MODE_LEFT:
                if (!this.args.climbing) {
                  if (Math.abs(this["public"].gSpeed) < 8 && !this.args.rolling) {
                    if (this["public"].gSpeed < 0) {
                      this.args.x -= this["public"].direction;
                      this.args.y -= this["public"].gSpeed + 2;
                      this.args.groundAngle = 0;
                    } else {
                      this.args.x += radius;
                      this.args.y++;
                    }
                  } else {
                    this.args.ignore = -3;
                    this.args.x += radius;
                    this.xAxis = 0;
                  }

                  this.args.xSpeed = gSpeed * Math.sin(gAngle);
                  this.args.ySpeed = gSpeed * Math.cos(gAngle);
                  this.onNextFrame(function () {
                    _this4.args.groundAngle = -Math.PI * 0.5;
                    _this4.args.mode = MODE_FLOOR;
                  });
                }

                this.args.falling = true;
                break;

              case MODE_RIGHT:
                if (!this.args.climbing) {
                  if (Math.abs(this.args.gSpeed) < 8 && !this.args.rolling) {
                    if (this["public"].gSpeed > 0) {
                      this.args.x -= this["public"].direction;
                      this.args.y -= this["public"].gSpeed + 2;
                      this.args.groundAngle = 0;
                    } else {
                      this.args.x -= radius;
                      this.args.y++;
                    }
                  } else {
                    this.args.ignore = -3;
                    this.args.x -= radius;
                    this.xAxis = 0;
                  }

                  this.args.xSpeed = -gSpeed * Math.sin(gAngle);
                  this.args.ySpeed = -gSpeed * Math.cos(gAngle);
                  this.onNextFrame(function () {
                    _this4.args.groundAngle = Math.PI * 0.5;
                    _this4.args.mode = MODE_FLOOR;
                  });
                }

                this.args.falling = true;
                break;
            }

            break;
          } else if (!nextPosition[0] && !nextPosition[1]) {
            this.args.moving = false;

            switch (this["public"].mode) {
              case MODE_FLOOR:
              case MODE_CEILING:
                this.args.gSpeed = 0;
                break;

              case MODE_LEFT:
              case MODE_RIGHT:
                break;
            }
          } else if ((nextPosition[0] || nextPosition[1]) && !this.rotateLock) {
            this.args.moving = true;
            this.args.angle = nextPosition[0] ? Math.atan(nextPosition[1] / nextPosition[0]) : Math.sign(nextPosition[1]) * Math.PI / 2;
            this.lastAngles.unshift(this["public"].angle);
            this.lastAngles.splice(this.angleAvg);
          }

          if (!this.rotateLock) {
            switch (this["public"].mode) {
              case MODE_FLOOR:
                this.args.x += nextPosition[0];
                this.args.y -= nextPosition[1];
                break;

              case MODE_CEILING:
                this.args.x -= nextPosition[0];
                this.args.y += nextPosition[1];
                break;

              case MODE_LEFT:
                this.args.x += nextPosition[1];
                this.args.y += nextPosition[0];
                break;

              case MODE_RIGHT:
                this.args.x -= nextPosition[1];
                this.args.y -= nextPosition[0];
                break;
            }

            if (this["public"].angle > Math.PI / 4 && this["public"].angle < Math.PI / 2) {
              this.lastAngles = this.lastAngles.map(function (n) {
                return n - Math.PI / 2;
              });

              switch (this.args.mode) {
                case MODE_FLOOR:
                  this.args.mode = MODE_RIGHT;
                  break;

                case MODE_RIGHT:
                  this.args.mode = MODE_CEILING;
                  break;

                case MODE_CEILING:
                  this.args.mode = MODE_LEFT;
                  break;

                case MODE_LEFT:
                  this.args.mode = MODE_FLOOR;
                  break;
              }

              this.args.groundAngle -= Math.PI / 2;
            } else if (this["public"].angle < -Math.PI / 4 && this["public"].angle > -Math.PI / 2) {
              var orig = this.args.mode;
              this.lastAngles = this.lastAngles.map(function (n) {
                return Number(n) + Math.PI / 2;
              });

              switch (this.args.mode) {
                case MODE_FLOOR:
                  this.args.mode = MODE_LEFT;
                  break;

                case MODE_RIGHT:
                  this.args.mode = MODE_FLOOR;
                  break;

                case MODE_CEILING:
                  this.args.mode = MODE_RIGHT;
                  break;

                case MODE_LEFT:
                  this.args.mode = MODE_CEILING;
                  break;
              }

              this.args.groundAngle = Number(this.args.groundAngle) + Math.PI / 2;
            }
          }
        }

        wasPaused || this.pause(false);

        if (!(this.args.direction === Math.sign(this.args.gSpeed) && (this.args.gSpeed > 0 && this.args.mode === MODE_LEFT || this.args.gSpeed < 0 && this.args.mode === MODE_RIGHT))) {
          if ((!this.xAxis || this.args.ignore) && this.args.gSpeed) {
            if (!this.args.grinding && this.args.rolling && !this.args.groundAngle) {
              this.args.gSpeed -= this.args.decel * 1 / drag * 0.06125 * Math.sign(this.args.gSpeed);
            } else if (!this.args.grinding && !this.args.rolling) {
              this.args.gSpeed -= this.args.decel * 1 / drag * Math.sign(this.args.gSpeed);
            }
          }
        }

        if ((!this.xAxis || this.args.ignore) && Math.abs(this.args.gSpeed) < this.args.decel * 1 / drag) {
          this.args.gSpeed = 0;
        }

        var slopeFactor = 0;

        if (!this.args.climbing) {
          switch (this.args.mode) {
            case MODE_FLOOR:
              slopeFactor = this.args.groundAngle / (Math.PI / 2);

              if (direction > 0) {
                slopeFactor *= -1;
              }

              break;

            case MODE_CEILING:
              slopeFactor = 0;
              break;

            case MODE_RIGHT:
              if (direction > 0) {
                slopeFactor = -1;
                slopeFactor -= this["public"].groundAngle / (Math.PI / 4);
              } else {
                slopeFactor = 1;
                slopeFactor += this["public"].groundAngle / (Math.PI / 4);
              }

              break;

            case MODE_LEFT:
              if (direction > 0) {
                slopeFactor = 1;
                slopeFactor -= this["public"].groundAngle / (Math.PI / 4);
              } else {
                slopeFactor = -1;
                slopeFactor += this["public"].groundAngle / (Math.PI / 4);
              }

              break;
          }

          if (this.args.rolling) {
            if (slopeFactor < 0) {
              this.args.gSpeed *= 1.0000 - (0 - slopeFactor / 2 * 0.005);
            } else if (slopeFactor > 0) {
              if (Math.abs(this["public"].gSpeed) < this["public"].rollSpeedMax) {
                this.args.gSpeed *= 1.0075 * (1 + slopeFactor / 2 * 0.055);
              }
            }
          }

          if (this["public"].grinding) {
            var speed = Math.abs(this["public"].gSpeed);

            var _direction = this.args.direction || this.xSpeedLast || 1;

            this.args.direction = _direction;

            if (Math.sign(this.args.gSpeed) !== Math.sign(this.args.direction)) {
              this.args.gSpeed = 0;
            }

            if (speed < 6) {
              this.args.gSpeed = 6 * _direction;
            } else if (speed > 40) {
              this.args.gSpeed = 40 * _direction;
            } else if (slopeFactor < 0) {
              this.args.gSpeed *= 1.0000 - (0 - slopeFactor / 2 * 0.015);
            } else if (slopeFactor > 0) {
              this.args.gSpeed *= 1.0015 * (1 + slopeFactor / 2 * 0.045);
            } else {
              this.args.gSpeed += 0.1 * _direction;
            }
          } else if (!this.stayStuck) {
            var speedFactor = 1;

            if (slopeFactor < 0 && Math.abs(this["public"].gSpeed) < 10) {
              speedFactor = 0.99990 * (1 - Math.pow(slopeFactor, 2) / 4 / 2);
            } else if (slopeFactor > 1 && Math.abs(this["public"].gSpeed) < this["public"].gSpeedMax / 2) {
              speedFactor = 1.05000 * (1 + Math.pow(slopeFactor, 2) / 4 / 2);
            }

            this.args.gSpeed *= speedFactor;

            if (Math.abs(this["public"].gSpeed) < 1) {
              if (slopeFactor <= -1) {
                this.args.gSpeed *= -0.5;
                this.args.ignore = this.args.ignore || 8;
                this.xAxis = 0;
              }
            }
          }
        }
      }

      if (nextPosition && (nextPosition[0] !== false || nextPosition[1] !== false)) {} else {
        this.args.ignore = this["public"].ignore || 1;

        if (this.args.falling) {
          this.args.gSpeed = 0;
        }
      }
    }
  }, {
    key: "findAirPointA",
    value: function findAirPointA(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args;
      }).filter(function (x) {
        return x.callCollideHandler(actor);
      }).filter(function (x) {
        return x.solid;
      });

      if (actors.length > 0) {
        return actor.lastPointA;
      }

      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (solid) {
        return actor.lastPointA;
      }

      actor.lastPointA = point.map(Math.floor);
    }
  }, {
    key: "findAirPointB",
    value: function findAirPointB(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args;
      }).filter(function (x) {
        return x.callCollideHandler(actor);
      }).filter(function (x) {
        return x.solid;
      });

      if (actors.length > 0) {
        return actor.lastPointB;
      }

      if (tileMap.getSolid(point[0], point[1], actor.args.layer)) {
        return actor.lastPointB;
      }

      actor.lastPointB = point.map(Math.floor);
    }
  }, {
    key: "updateAirPosition",
    value: function updateAirPosition() {
      var _this5 = this;

      var xSpeedOriginal = this.args.xSpeed;
      var ySpeedOriginal = this.args.ySpeed;
      this.args.standingLayer = null;
      var viewport = this.viewport;
      var radius = Math.ceil(this.args.width / 2);
      var direction = Math.sign(this.args.xSpeed);
      var lastPoint = [this.x, this.y];
      var lastPointB = [this.x, this.y];
      var tileMap = this.viewport.tileMap;
      var cSquared = Math.pow(this.args.xSpeed, 2) + Math.pow(this.args.ySpeed, 2);
      var airSpeed = cSquared ? Math.sqrt(cSquared) : 0;
      this.args.airSpeed = airSpeed;

      if (!airSpeed) {
        return;
      }

      if (this.lastAngles.length) {
        this.lastAngles.splice(0);
      }

      if (this.controllable || this.isVehicle) {
        var quickSpin = this.springing; //this.xAxis && !this.slowSpin;

        this.args.groundAngle += -Math.sign(this.args.groundAngle) * 0.001 * (quickSpin ? 125 : 50);
      }

      if (Math.abs(this.args.groundAngle) < 0.01) {
        this.args.groundAngle = 0;
      }

      if (this.noClip) {
        this.args.x += this.args.xSpeed;
        this.args.y += this.args.ySpeed;
        return;
      }

      var upMargin = (this["public"].flying ? this["public"].height + this["public"].yMargin : this["public"].height) || 1;
      this.upScan = true;
      var upDistanceB = this.castRay(Math.abs(this["public"].ySpeed) + upMargin + 1, -Math.PI / 2, [1, 0], this.findSolid);
      var upDistance = this.castRay(Math.abs(this["public"].ySpeed) + upMargin + 1, -Math.PI / 2, this.findSolid);
      this.upScan = false; // const downDistance = this.castRay(
      // 	Math.abs(this.public.ySpeed) + 1
      // 	, Math.PI / 2
      // 	, this.findSolid
      // );
      // const downDistanceB = this.castRay(
      // 	Math.abs(this.args.ySpeed) + 1
      // 	, Math.PI / 2
      // 	, [Math.sign(this.args.xSpeed), 0]
      // 	, this.findSolid
      // );

      var hits = [];

      if (!this.args.hLock) {
        var hScanDist = Math.sign(this.xSpeedLast, this.args.xSpeed) * Math.max(Math.abs(this.xSpeedLast), Math.abs(this.args.xSpeed));
        var foreDistanceHead = hScanDist ? this.scanForward(hScanDist, 0.9) : false;
        var foreDistanceWaist = hScanDist ? this.scanForward(hScanDist, 0.5) : false;
        var foreDistanceFoot = hScanDist ? this.scanForward(hScanDist, 0.1) : false;
        var distances = [foreDistanceHead, foreDistanceWaist];

        if (this.controllable && !this.args.flying && !this.args.rolling) {
          distances.push(foreDistanceFoot);
        }

        hits = distances.filter(function (x) {
          return x !== false;
        });
      }

      if (this.args.ySpeed && upDistance && this.lastLayer && this.lastLayer.offsetYChanged) {
        this.args.y += this.lastLayer.offsetYChanged + 1;
        this.args.ySpeed = this.lastLayer.offsetYChanged + 1;
        this.lastLayer = null;
        return;
      } // let upcollisionAngle = false;
      // if(![upDistance, upDistanceB].some(x => x === false))
      // {
      // 	upcollisionAngle = Math.atan2(3, upDistance - upDistanceB)
      // }


      var willStick = this.willStick || this.args.deepJump;

      if (this.args.ySpeed < 0 && upDistance > 0 && (!this.args.flying || this.canStick) && (this.args.jumping || this.args.xSpeed)) {
        this.args.ignore = 1;
        this.args.y += upMargin - upDistance;
        this.args.ySpeed = ySpeedOriginal = 0;
        return;
      }

      if (willStick && this.args.ySpeed < 0 && upDistance > 0 && (!this.args.flying || this.canStick)) {
        var upBlockers = this.getMapSolidAt(this.x, this.y);

        if (Array.isArray(upBlockers)) {
          var stickers = upBlockers.filter(function (a) {
            return a.canStick;
          });

          if (willStick && this.willStick !== 2 && stickers.length) {
            this.args.gSpeed = Math.floor(-xSpeedOriginal) || Math.sign(upDistance - upDistanceB) * 6;
            this.args.mode = MODE_CEILING;
            this.args.falling = false;
          }

          return;
        } // else if(willStick && this.willStick !== 2)
        // {
        // 	const blockers = this.getMapSolidAt(this.x, this.y-1);
        // 	const stickers = Array.isArray(blockers) && blockers.filter(a=>a.canStick);
        // 	if(!blockers.length || (blockers.length && stickers.length))
        // 	{
        // 		this.args.gSpeed = Math.floor(-xSpeedOriginal) || (Math.sign(upDistance - upDistanceB) * 6);
        // 		this.args.mode = MODE_CEILING;
        // 		this.args.falling = false;
        // 	}
        // }

      } else if (!this.willStick && hits.length && this.args.jumping && !this.args.deepJump && upDistance < this.args.height) {
        var _direction2 = Math.sign(xSpeedOriginal);

        var minHit = Math.min.apply(Math, _toConsumableArray(hits));
        var shiftBy = radius + -minHit;
        var shift = shiftBy * -_direction2;

        if (!isNaN(shift)) {
          this.args.x += shift;
          this.args.flySpeed = 0;
          this.args.xSpeed = 0;
          this.args.gSpeed = 0;
        }

        if (this.args.jumping && !this.args.deepJump) {
          xSpeedOriginal = 0;
        }
      }

      var scanDist = airSpeed + 1;
      var airPoint = this.castRay(scanDist, this["public"].airAngle, this.findAirPointA);
      var airPointB = this.castRay(scanDist, this["public"].airAngle, [0, -3], this.findAirPointB);
      this.willJump = false;
      var blockers = false;
      var collisionAngle = false;

      if (![airPoint, airPointB].some(function (x) {
        return x === false;
      })) {
        collisionAngle = Math.atan2(airPoint[1] - airPointB[1], airPoint[0] - airPointB[0]);
      }

      if (airPoint !== false && airPointB !== false) {
        var angleIsWall = false;

        if (xSpeedOriginal < 0) {
          angleIsWall = collisionAngle <= Math.PI / 2;
        }

        if (xSpeedOriginal > 0) {
          angleIsWall = collisionAngle >= Math.PI / 2;
        }

        var isLeft = angleIsWall && xSpeedOriginal < 0;
        var isRight = angleIsWall && xSpeedOriginal > 0;

        if (!this.willStick) {
          this.args.gSpeed = -xSpeedOriginal || this.args.gSpeed;
        }

        var stickX = airPoint[0];
        var stickY = airPoint[1];
        var away = false;

        if (!this.args.ySpeed || Math.sign(stickY - this.y) === Math.sign(this.args.ySpeed)) {
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;

          if (this.args.flying && !angleIsWall && collisionAngle) {
            this.args.mode = MODE_CEILING;
            this.args.xSpeed *= -1;
          }
        } else {
          this.args.y++;
          away = true;
        }

        if (!this.args.jumping || this.args.deepJump) {
          this.args.x = stickX;
          this.args.y = stickY;
        }

        var solid = this.checkBelow(this.x, this.y);
        blockers = this.getMapSolidAt(this.x + direction, this.y);

        if (Array.isArray(blockers)) {
          blockers = blockers.filter(function (a) {
            return a.callCollideHandler(_this5);
          });

          if (!blockers.length) {
            blockers = false;
          }
        }

        var canStick = this.stayStuck || this.args.deepJump || collisionAngle <= Math.PI / 2;

        if ((canStick || this.willStick) && !this.getMapSolidAt(this.x - direction, this.y) && !this.getMapSolidAt(this.x - direction, this.y + 1) // && !this.getMapSolidAt(this.x - direction, this.y - this.public.height)
        ) {
            if (Array.isArray(blockers)) {
              canStick = blockers.filter(function (a) {
                return a.canStick;
              }).length;
            }

            if (canStick && isLeft) {
              this.args.gSpeed = 0;
              this.args.mode = MODE_LEFT;
              this.args.direction = 1;
              this.args.facing = 'right';
            } else if (canStick && isRight) {
              this.args.gSpeed = 0;
              this.args.mode = MODE_RIGHT;
              this.args.direction = -1;
              this.args.facing = 'left';
            } else if (canStick && !away && this.ySpeedLast < 0 && !this.args.jumping) {
              this.args.mode = MODE_CEILING;
            }
          }

        var halfWidth = Math.floor(this["public"].width / 2);
        var backPosition = this.findNextStep(-2);
        var forePosition = this.findNextStep(2);
        var sensorSpread = 4;

        if (forePosition && backPosition) {
          var newAngle = Number(Math.atan2(forePosition[1] - backPosition[1], sensorSpread));

          if (isNaN(newAngle)) {
            console.log(newAngle);
            throw new Error('angle is NAN!');
          }

          if (!forePosition[2] && !backPosition[2] || forePosition[2] && !backPosition[3] || !forePosition[3] && backPosition[2]) {
            this.args.groundAngle = newAngle;

            if (forePosition[2] || forePosition[3] || backPosition[2] || backPosition[3]) {
              this.args.angle = this.args.groundAngle = newAngle;
            } // const invert = (this.public.mode === MODE_FLOOR || ySpeedOriginal <= 0) ? -1 : -1;


            var slopeDir = -Math.sign(this.args.groundAngle);
            var gSpeed = 0;

            if (Math.abs(slopeDir) > 0) {
              gSpeed += ySpeedOriginal * slopeDir;
            } else if (Math.abs(slopeDir) < 0) {
              gSpeed += ySpeedOriginal / -slopeDir;
            }

            if (xSpeedOriginal) {
              gSpeed += xSpeedOriginal;
            }

            if (blockers && blockers.length) {
              gSpeed = 0;
            } // if(this.args.mode && this.args.ySpeed > 0)


            if (this.args.mode) {
              gSpeed *= -1;
            }

            if (gSpeed) {
              this.args.gSpeed = gSpeed;
            }

            if (_typeof(solid) === 'object') {
              this.args.standingLayer = solid;
            }

            this.args.falling = false;
          }

          if (Math.abs(this.args.gSpeed) < 1) {
            this.args.gSpeed = 0; //Math.sign(this.args.gSpeed);
          }
        }
      } else if (this.args.ySpeed > 0) {
        if (this.args.mode === MODE_LEFT || this.args.mode === MODE_RIGHT) {
          var _direction3 = this.args.mode === MODE_LEFT ? -1 : 1;

          this.args.direction = _direction3;
          this.args.groundAngle = Math.PI / 2 * _direction3;
        }

        this.args.mode = MODE_FLOOR;

        if (xSpeedOriginal) {
          this.args.gSpeed = Math.floor(xSpeedOriginal);
        }

        if (airPoint && collisionAngle !== false) {
          this.args.x = Number(airPoint[0]);
          this.args.y = Number(airPoint[1]);
          this.args.falling = false;
        }
      }

      if (!tileMap.getSolid(this.x + this["public"].width / 2 * Math.sign(this.args.xSpeed), this.y, this["public"].layer)) {
        if (Math.abs(this["public"].xSpeed) > this["public"].xSpeedMax) {
          this.args.xSpeed = this["public"].xSpeedMax * Math.sign(this["public"].xSpeed);
        }

        if (Math.abs(this["public"].ySpeed) > this["public"].ySpeedMax) {
          this.args.ySpeed = this["public"].ySpeedMax * Math.sign(this["public"].ySpeed);
        }
      }

      if (airPoint === false) {
        if (this.args.xSpeed) {
          this.args.x = Number(Number(this.args.x) + Number(this.args.xSpeed));
        }

        if (this.args.ySpeed) {
          this.args.y = Number(Number(this.args.y) + Number(this.args.ySpeed));

          if (this["public"].flying && this["public"].ySpeed < 0 && upDistance > 0) {
            this.args.y += upMargin - upDistance + 4;
            this.args.ySpeed = 0;
          }
        }
      }

      if (this.args.standingOn instanceof PointActor) {
        var groundTop = this.args.standingOn.y - this.args.standingOn.args.height;

        if (this.y < groundTop || this.args.ySpeed < 0) {
          this.args.standingOn = null;
        }
      }
    }
  }, {
    key: "checkDropDash",
    value: function checkDropDash() {
      var _this6 = this;

      if (this.dropDashCharge && this.args.mode === MODE_FLOOR) {
        var dropBoost = this.dropDashCharge * Math.sign(this.args.direction);
        this.dropDashCharge = 0;
        this.onNextFrame(function () {
          _this6.args.gSpeed += dropBoost;

          if (_this6.yAxis >= 0 && !_this6.args.ignore) {
            _this6.args.rolling = true;
          }
        });
        var viewport = this.viewport;
        var dustParticle = new _Tag.Tag('<div class = "particle-dust">');
        var dustPoint = this.rotatePoint(this.args.gSpeed, 0);
        dustParticle.style({
          '--x': dustPoint[0] + this.x,
          '--y': dustPoint[1] + this.y,
          'z-index': 0,
          opacity: Math.random() * 2
        });
        viewport.particles.add(dustParticle);
        setTimeout(function () {
          viewport.particles.remove(dustParticle);
        }, 350);
      }
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      var _this7 = this;

      if (!this.viewport) {
        return;
      }

      if (this.args.bossMode) {
        this.args.cameraMode = 'boss';
        return;
      }

      if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.args.cameraMode = this.args.standingOn["public"].cameraMode;
      } else if (this.args.localCameraMode) {
        this.args.cameraMode = this.args.localCameraMode;
      } else if (this.controllable) {
        if (!this["public"].falling || this.getMapSolidAt(this.x, this.y + 24)) {
          var forwardSolid = this.getMapSolidAt(this.x + 32 * this["public"].direction, this.y + 24);
          var forwardDeepSolid = this.getMapSolidAt(this.x + 32 * this["public"].direction, this.y + 96);
          var underSolid = this.getMapSolidAt(this.x + 0 * this["public"].direction, this.y + 48);

          if (this["public"].mode === MODE_FLOOR && this["public"].groundAngle === 0) {
            if (!underSolid && forwardSolid && !this.args.grinding && !this.args.skimming) {
              this.args.cameraMode = 'bridge';
            } else if (!forwardDeepSolid && !this.args.grinding && !this.args.skimming) {
              this.args.cameraMode = 'cliff';
            } else {
              this.args.cameraMode = 'normal';
            }
          } else {
            this.args.cameraMode = 'normal';
          }
        } else {
          if (this.getMapSolidAt(this.x + 0 * this["public"].direction, this.y + 64)) {
            this.args.cameraMode = 'normal';
          } else {
            this.args.cameraMode = 'aerial';
          }

          this.viewport.onFrameOut(45, function () {
            if (_this7.args.cameraMode === 'airplane') {
              return;
            }

            if (_this7["public"].falling && Math.abs(_this7["public"].xSpeed > 25) && !_this7.getMapSolidAt(_this7.x, _this7.y + 480)) {
              _this7.args.cameraMode = 'airplane';
            }
          });
        }
      }
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler(other) {
      if (this.ignores.has(other)) {
        return false;
      }

      if (other.ignores.has(this)) {
        return false;
      }

      if (this.args.dead || other.args.dead) {
        return;
      }

      if (other === this.args.hangingFrom) {
        return false;
      }

      if (this.isGhost || other.isGhost) {
        return;
      }

      var type;

      if (other.y <= this.y - this.args.height) {
        this.args.collType = 'collision-top';
        type = 0;
      } else if (other.x < this.x - Math.floor(this.args.width / 2)) {
        this.args.collType = 'collision-left';
        type = 1;
      } else if (other.x >= this.x + Math.floor(this.args.width / 2)) {
        this.args.collType = 'collision-right';
        type = 3;
      } else if (other.y >= this.y) {
        this.args.collType = 'collision-bottom';
        type = 2;
      } else {
        this.args.collType = 'collision-intersect';
        type = -1; // this.solid && !this.isVehicle && this.popOut(other);
      }

      if (!this.viewport) {
        return;
      }

      if (!this.viewport.collisions.has(this)) {
        this.viewport.collisions.set(this, new Map());
      }

      if (!this.viewport.collisions.has(other)) {
        this.viewport.collisions.set(other, new Map());
      } // if(this.viewport.collisions.get(this).has(other))
      // {
      // 	return;
      // }


      var invertType = type > -1 ? (type + 2) % 4 : type;
      var collisionListA = this.viewport.collisions.get(this, type);
      var collisionListB = this.viewport.collisions.get(other, invertType); // other.pause(true);

      collisionListA.set(other, type);
      collisionListB.set(this, invertType);
      this.viewport.collisions.set(other, collisionListB);
      this.collideB(other, type);
      other.collideB(this, invertType);
      var ab = this.collideA(other, type);
      var ba = other.collideA(this, invertType);
      var result = ab || ba;
      this.args.colliding = this.colliding = this.colliding || result || false;
      return result;
    }
  }, {
    key: "checkBelow",
    value: function checkBelow() {
      var _testX,
          _testY,
          _this8 = this;

      var testX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var testY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      testX = (_testX = testX) !== null && _testX !== void 0 ? _testX : this.x;
      testY = (_testY = testY) !== null && _testY !== void 0 ? _testY : this.y;
      var lPoint = [];
      var rPoint = [];
      var spread = 0;

      switch (this["public"].mode) {
        case MODE_FLOOR:
          lPoint[0] = testX + spread;
          lPoint[1] = testY + 1;
          rPoint[0] = testX - spread;
          rPoint[1] = testY + 1;
          break;

        case MODE_LEFT:
          lPoint[0] = testX - 1;
          lPoint[1] = testY + spread;
          rPoint[0] = testX - 1;
          rPoint[1] = testY - spread;
          break;

        case MODE_CEILING:
          lPoint[0] = testX - spread;
          lPoint[1] = testY - 1;
          rPoint[0] = testX + spread;
          rPoint[1] = testY - 1;
          break;

        case MODE_RIGHT:
          lPoint[0] = testX + 1;
          lPoint[1] = testY + spread;
          rPoint[0] = testX + 1;
          rPoint[1] = testY - spread;
          break;
      }

      var below = this.getMapSolidAt.apply(this, lPoint); // if(!below)
      // {
      // 	below = this.getMapSolidAt(...rPoint);
      // }

      if (Array.isArray(below)) {
        below = below.filter(function (x) {
          return x.solid && x.callCollideHandler(_this8);
        }).length;
      }

      return below;
    }
  }, {
    key: "processInput",
    value: function processInput() {
      if (this.controllable && this.args.standingOn && this.args.standingOn.isVehicle && this === _Bindable.Bindable.make(this.args.standingOn.occupant)) {
        this.viewport.auras.add(this.args.standingOn);
        var vehicle = this.args.standingOn;
        vehicle.xAxis = this.xAxis;
        vehicle.yAxis = this.yAxis;
        vehicle.stayStuck = this.stayStuck;
        vehicle.willStick = this.willStick;
        this.processInputVehicle();
        this.args.direction = vehicle["public"].direction;
        this.args.facing = vehicle["public"].facing;
        this.args.layer = vehicle["public"].layer;
        this.args.mode = vehicle["public"].mode;
        this.args.angle = vehicle["public"].angle; // const seatX = (vehicle.args.seatX || 0) * this.args.direction;
        // const seatY = (vehicle.args.seatY || 0);
        // this.args.x = vehicle.args.x + seatX;
        // this.args.y = vehicle.args.y + vehicle.args.height + seatY;
      } else if (this.controllable) {
        this.processInputDirect();
      }
    }
  }, {
    key: "processInputDirect",
    value: function processInputDirect() {
      var _this9 = this;

      var xAxis = this.xAxis;
      var yAxis = this.yAxis;
      var gSpeedMax = this["public"].gSpeedMax;

      if (this.running) {
        gSpeedMax = RUNNING_SPEED;
      } else if (this.crawling) {
        gSpeedMax = CRAWLING_SPEED;
      }

      if (!this["public"].falling) {
        if (Math.abs(this["public"].gSpeed) < 0.01) {
          this.viewport.onFrameOut(5, function () {
            if (Math.abs(_this9["public"].gSpeed) < 0.01) {
              _this9.args.rolling = false;
            }
          });
          this.args.gSpeed = 0;
        } else if (this.canRoll && this.yAxis > 0.55 && !this.args.ignore) {
          this.args.rolling = true;
        }
      }

      var drag = this.getLocalDrag();

      if (this.noClip) {
        if (!this.args.ignore) {
          this.args.xSpeed += xAxis * this["public"].airAccel * drag;
          this.args.ySpeed += yAxis * this["public"].airAccel * drag;

          if (!xAxis) {
            this.args.xSpeed = 0;
          }

          if (!yAxis) {
            this.args.ySpeed = 0;
          }
        }
      } else if (!this["public"].falling) {
        if (xAxis && !this["public"].rolling) {
          var gSpeed = this["public"].gSpeed;
          var axisSign = Math.sign(xAxis);
          var sign = Math.sign(this["public"].gSpeed);

          if (!this["public"].rolling && !this.args.climbing && !this.args.ignore) {
            if (axisSign === sign || !sign) {
              gSpeed += xAxis * this["public"].accel * drag;
            } else {
              gSpeed += xAxis * this["public"].accel * drag * this["public"].skidTraction;
            }
          }

          if (Math.abs(gSpeed) > gSpeedMax) {
            gSpeed = gSpeedMax * Math.sign(gSpeed);
          }

          if (!Math.sign(this["public"].gSpeed) || Math.sign(this["public"].gSpeed) === Math.sign(gSpeed)) {
            if (Math.abs(gSpeed) < gSpeedMax || Math.sign(gSpeed) !== xAxis) {
              this.args.gSpeed = gSpeed;
            }
          } else {
            this.args.gSpeed = 0;
            return;
          }
        }
      } else if (this["public"].falling && xAxis && Math.abs(this["public"].xSpeed) < this.args.xSpeedMax) {
        if (Math.abs(this["public"].xSpeed) < this.args.flySpeedMax && !this.args.ignore) {
          this.args.xSpeed += xAxis * this["public"].airAccel * drag;
        } // const tileMap = this.viewport.tileMap;
        // if(!this.noClip && this.getMapSolidAt(this.x + (this.public.width / 2) * Math.sign(this.args.xSpeed), this.y))
        // {
        // 	this.args.xSpeed = 0;
        // }

      }

      if (xAxis < 0 && (this.args.gSpeed || !this.args.ignore)) {
        if (!this["public"].climbing) {
          this.args.facing = 'left';
        }

        if (!this.args.grinding || Math.abs(this.args.gSpeed) < 3) {
          this.args.direction = -1;
        }
      }

      if (xAxis > 0 && (this.args.gSpeed || !this.args.ignore)) {
        if (!this["public"].climbing) {
          this.args.facing = 'right';
        }

        if (!this.args.grinding || Math.abs(this.args.gSpeed) < 3) {
          this.args.direction = 1;
        }
      }

      if (this.aAxis < -0.75) {
        if (this.inventory.has(_ElectricSheild.ElectricSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_ElectricSheild.ElectricSheild))[0];
        }
      }

      if (this.aAxis > +0.75) {
        if (this.inventory.has(_FireSheild.FireSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_FireSheild.FireSheild))[0];
        }
      }

      if (this.bAxis < -0.75) {
        if (this.inventory.has(_BubbleSheild.BubbleSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_BubbleSheild.BubbleSheild))[0];
        }
      }

      if (this.bAxis > +0.75) {
        this.args.currentSheild = '';
      }
    }
  }, {
    key: "processInputVehicle",
    value: function processInputVehicle() {
      this.args.standingOn.processInputDirect();
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      return this.solid;
    }
  }, {
    key: "collideB",
    value: function collideB(other) {}
  }, {
    key: "findDownSolid",
    value: function findDownSolid(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;

      if (actor.args.groundAngle === 0) {
        var regions = actor.viewport.regionsAtPoint(point[0], point[1]);

        var _iterator18 = _createForOfIteratorHelper(regions),
            _step18;

        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var region = _step18.value;

            if (actor.args.mode === MODE_FLOOR && -1 + point[1] === region.y + -region["public"].height && Math.abs(actor.args.gSpeed) >= region.skimSpeed) {
              return -1 + i;
            }
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }

      if (tileMap.getSolid(point[0], point[1], actor.args.layer)) {
        return i;
      }

      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (a) {
        return a.args !== actor.args;
      }).filter(function (a) {
        return a.callCollideHandler(actor);
      }).filter(function (a) {
        return a.solid;
      });

      if (actors.length > 0) {
        return i;
      }
    }
  }, {
    key: "findUpSpace",
    value: function findUpSpace(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;

      if (actor.args.groundAngle <= 0) {
        var regions = actor.viewport.regionsAtPoint(point[0], point[1]);

        var _iterator19 = _createForOfIteratorHelper(regions),
            _step19;

        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var region = _step19.value;

            if (actor.args.mode !== MODE_FLOOR || point[1] !== 1 + region.y + -region.args.height || Math.abs(actor.args.gSpeed) < region.skimSpeed) {
              var _actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
                return x.args !== actor.args;
              }).filter(function (a) {
                return a.callCollideHandler(actor);
              }).filter(function (x) {
                return x.solid;
              });

              if (_actors.length === 0) {
                if (!tileMap.getSolid(point[0], point[1], actor.args.layer)) {
                  return i;
                }
              }
            }
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
      }

      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args;
      }).filter(function (a) {
        return a.callCollideHandler(actor);
      }).filter(function (x) {
        return x.solid;
      });

      if (actors.length === 0) {
        if (!tileMap.getSolid(point[0], point[1], actor.args.layer)) {
          return i;
        }
      }
    }
  }, {
    key: "findNextStep",
    value: function findNextStep(offset) {
      if (!this.viewport) {
        return;
      }

      if (this.stepCache[offset] !== undefined) {
        return this.stepCache[offset];
      }

      var viewport = this.viewport;
      var tileMap = viewport.tileMap;
      var maxStep = this.maxStep;
      var radius = Math.max(this.args.width / 2, 1);
      var sign = Math.sign(offset);
      var downFirstSolid = false;
      var upFirstSpace = false;
      var prevUp = 0,
          prevDown = 0,
          prev = 0;
      var col = 0;

      for (; col < Math.abs(offset); col += 1) {
        downFirstSolid = false;
        upFirstSpace = false;
        var offsetPoint = void 0;
        var columnNumber = (1 + col) * sign;

        switch (this["public"].mode) {
          case MODE_FLOOR:
            offsetPoint = [columnNumber, 1];
            break;

          case MODE_RIGHT:
            offsetPoint = [1, -columnNumber];
            break;

          case MODE_CEILING:
            offsetPoint = [-columnNumber, -1];
            break;

          case MODE_LEFT:
            offsetPoint = [-1, columnNumber];
            break;
        }

        downFirstSolid = this.castRay(maxStep // * (1+col)
        , this.downAngle, offsetPoint, this.findDownSolid);

        if (downFirstSolid === false) {
          return [false, false, true];
        }

        var downDiff = prevDown - downFirstSolid;

        if (Math.abs(downDiff) >= maxStep) {
          return [false, false, downDiff < 0, downDiff > 0];
        }

        if (downFirstSolid === 0) {
          var _offsetPoint = void 0;

          switch (this["public"].mode) {
            case MODE_FLOOR:
              _offsetPoint = [columnNumber, 0];
              break;

            case MODE_RIGHT:
              _offsetPoint = [0, -columnNumber];
              break;

            case MODE_CEILING:
              _offsetPoint = [-columnNumber, 0];
              break;

            case MODE_LEFT:
              _offsetPoint = [0, columnNumber];
              break;
          }

          var upLength = +1 + maxStep;
          upFirstSpace = this.castRay(upLength, this.upAngle, _offsetPoint, this.findUpSpace);
          var upDiff = Math.abs(prevUp - upFirstSpace);

          if (upFirstSpace === false) {
            return [false, false, false, true];
          }

          if (upDiff >= maxStep) {
            return [false, false, false, true];
          }

          prev = prevUp = upFirstSpace;
        } else {
          prev = prevDown = downFirstSolid;
        }

        if (upFirstSpace !== false) {
          this.stepCache[col * sign] = [col * sign, upFirstSpace, false];
        } else {
          this.stepCache[col * sign] = [col * sign, -downFirstSolid, false];
        }
      }

      if (upFirstSpace !== false) {
        return [col * sign, upFirstSpace, false];
      }

      return [col * sign, -downFirstSolid, false];
    }
  }, {
    key: "castRay",
    value: function castRay() {
      var length = 1;

      var callback = function callback() {};

      var angle = Math.PI / 2;
      var offset = [0, 0];

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      switch (args.length) {
        case 2:
          length = args[0];
          callback = args[1];
          break;

        case 3:
          length = args[0];
          angle = args[1];
          callback = args[2];
          break;

        case 4:
          length = args[0];
          angle = args[1];
          offset = args[2];
          callback = args[3];
          break;
      }

      var hit = false;

      for (var i = 0; i < Math.floor(length); i++) {
        var bottom = [this["public"].x + offset[0] + i * Math.cos(angle), this["public"].y + offset[1] + i * Math.sin(angle)];
        var retVal = callback(i, bottom, this);

        if (retVal !== undefined) {
          return retVal;
        }
      }

      return false;
    }
  }, {
    key: "doJump",
    value: function doJump(force) {
      if (this["public"].ignore || this["public"].falling || !this["public"].landed || this["public"]["float"]) {
        return;
      }

      if (this.args.standingOn && this.args.standingOn.args.yForce) {
        force += this.args.standingOn.args.yForce / 7;
      }

      var radius = this.args.width / 2;
      var scanRadius = Math.min(radius, 4);
      var backPosition = this.findNextStep(-scanRadius);
      var forePosition = this.findNextStep(+scanRadius);
      var sensorSpread = scanRadius * 2;
      var groundAngle = Math.atan2(backPosition[1] - forePosition[1], Math.ceil(sensorSpread));
      this.args.ignore = 6;
      this.args.landed = false;
      this.args.falling = true;
      var originalMode = this["public"].mode;

      switch (this.args.mode) {
        case MODE_FLOOR:
          this.args.y -= 16;
          break;

        case MODE_RIGHT:
          groundAngle += -Math.PI / 2;
          this.args.x += -this.args.width / 2;
          break;

        case MODE_CEILING:
          groundAngle += Math.PI;
          this.args.y += this.args.normalHeight || this.args.height;
          break;

        case MODE_LEFT:
          groundAngle += Math.PI / 2;
          this.args.x += this.args.width / 2;
          break;
      }

      this.args.xSpeed = this.args.gSpeed * Math.cos(groundAngle);
      this.args.ySpeed = this.args.gSpeed * Math.sin(groundAngle);
      var jumpAngle = groundAngle - Math.PI / 2;
      var xJump = force * Math.cos(jumpAngle);
      var yJump = force * Math.sin(jumpAngle);

      if (Math.abs(xJump) < 0.01) {
        xJump = 0;
      }

      if (Math.abs(yJump) < 0.01) {
        yJump = 0;
      }

      this.args.airAngle = jumpAngle;
      this.args.xSpeed += xJump;
      this.args.ySpeed += yJump;
      this.args.jumpedAt = this.y;
      this.args.jumping = true;
      var tileMap = this.viewport.tileMap;

      if (tileMap.getSolid(this.x + this["public"].width / 2 * Math.sign(this.args.xSpeed), this.y, this["public"].layer)) {
        // if(tileMap.getSolid(this.x + (1 + this.public.width / 2) * Math.sign(this.args.xSpeed), this.y, this.public.layer))
        // {
        // 	this.args.x -= 2 * Math.sign(this.args.xSpeed);
        // }
        this.args.xSpeed = 0;
      }

      this.args.rolling = false;
      this.args.mode = MODE_FLOOR;
      this.args.groundAngle = 0;
      this.args.gSpeed = 0;
    }
  }, {
    key: "impulse",
    value: function impulse(magnitude, direction) {
      var willFall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      this.impulseMag = magnitude;
      this.impulseDir = direction;
      this.impulseFal = willFall;
    }
  }, {
    key: "rad2deg",
    value: function rad2deg(rad) {
      var deg = 180 / Math.PI * rad;

      if (deg > 0) {
        return Math.floor(deg * 10) / 10;
      }

      return Math.ceil(deg * 10) / 10;
    }
  }, {
    key: "roundAngle",
    value: function roundAngle(angle, segments) {
      segments /= 2;
      var rAngle = Math.round(angle / (Math.PI / segments)) * Math.PI / segments;
      return rAngle;
    }
  }, {
    key: "findNearestActor",
    value: function findNearestActor(selector, maxDistance) {
      var _this10 = this;

      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var cells = viewport.getNearbyColCells(this);
      var actors = new Map();
      cells.map(function (s) {
        return s.forEach(function (a) {
          if (a === _this10) {
            return;
          }

          if (a["public"].gone) {
            return;
          }

          if (!selector(a)) {
            return;
          }

          var distance = _this10.distanceFrom(a);

          var angle = Math.atan2(a.y - _this10.y, a.x - _this10.x);

          if (Math.abs(distance) > maxDistance) {
            return;
          }

          actors.set(distance, a);
        });
      });

      var distances = _toConsumableArray(actors.keys());

      var shortest = Math.min.apply(Math, _toConsumableArray(distances));
      var closest = actors.get(shortest);
      return closest;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var _this11 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';
      var shield = this.args.currentSheild;
      var damageEvent = new CustomEvent('damage', {
        cancelable: true,
        detail: {
          other: other,
          type: type
        }
      });

      if (!this.dispatchEvent(damageEvent)) {
        return;
      }

      if (this.args.mercy) {
        return;
      }

      if (this.args.rings) {
        this.args.mercy = true;
        this.viewport.onFrameOut(180, function () {
          return _this11.args.mercy = false;
        });
        this.startle();
        this.onNextFrame(function () {
          if (!shield || !shield.protect) {
            _this11.loseRings();

            _this11.args.rings = 0;
          }
        });
      } else if (this.controllable) {
        this.die();
      }
    }
  }, {
    key: "startle",
    value: function startle() {
      var _this12 = this;

      if (this.noClip) {
        return;
      }

      this.args.jumping = false;
      this.args.startled = 180;
      this.args.ignore = 30;
      this.args.gSpeed = 0;
      this.args.xSpeed = -4 * Math.sign(this["public"].xSpeed || this["public"].gSpeed || this.args.direction);
      this.args.ySpeed = -7;
      this.args.falling = true;
      this.onNextFrame(function () {
        _this12.args.xSpeed = -4 * Math.sign(_this12["public"].xSpeed || _this12["public"].gSpeed || _this12.args.direction);
        _this12.args.ySpeed = -7;
        _this12.args.standingOn = false;

        if (_this12.args.mode === MODE_CEILING) {
          _this12.args.xSpeed *= -1;
          _this12.args.ySpeed *= -1;
        }

        _this12.args.gSpeed = 0;
        _this12.args.falling = true;
      });
    }
  }, {
    key: "findSolid",
    value: function findSolid(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args;
      }).filter(function (x) {
        return i <= actor.args.width / 2 && x.callCollideHandler(actor);
      }).filter(function (x) {
        return x.solid;
      });

      if (actors.length > 0) {
        return i;
      }

      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (actor.upScan) {
        actor.lastLayer = solid;
      }

      if (solid) {
        return i;
      }
    }
  }, {
    key: "findSolidTile",
    value: function findSolidTile(i, point, actor) {
      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (this.upScan) {
        actor.lastLayer = solid;
      }

      if (solid) {
        return i;
      }
    }
  }, {
    key: "scanForward",
    value: function scanForward(speed) {
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
      var scanActors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var dir = Math.sign(speed);
      var radius = Math.round(this.args.width / 2);
      var hRadius = Math.round(this.args.height / 2);
      var scanDist = Math.ceil(Math.abs(speed));
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var tileMap = viewport.tileMap;
      var startPoint = this.rotatePoint(radius * -dir, this.args.height * height);
      return this.castRay(scanDist + this.args.width, this.args.falling ? [Math.PI, 0, 0][dir + 1] : this.roundAngle(this.realAngle + [0, 0, Math.PI][dir + 1], 16), startPoint, scanActors ? this.findSolid : this.findSolidTile);
    }
  }, {
    key: "scanBottomEdge",
    value: function scanBottomEdge() {
      var _this13 = this;

      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var tileMap = this.viewport.tileMap;
      var radius = this.args.width / 2;
      var leftCorner = tileMap.getSolid(this.x - radius, this.y + 1, this.args.layer);
      var rightCorner = tileMap.getSolid(this.x + radius, this.y + 1, this.args.layer);

      if (leftCorner && rightCorner) {
        return;
      }

      return this.castRay(this["public"].width, direction < 0 ? Math.PI : 0, [-direction * radius, 0], function (i, point) {
        var actors = _this13.viewport.actorsAtPoint(point[0], point[1] + 1).filter(function (a) {
          return a.args !== _this13.args;
        });

        if (!actors.length && !tileMap.getSolid(point[0], point[1] + 1, _this13["public"].layer)) {
          return i;
        }
      });
    }
  }, {
    key: "scanVerticalEdge",
    value: function scanVerticalEdge() {
      var _this14 = this;

      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var tileMap = this.viewport.tileMap;
      return this.castRay(this["public"].height + 1, Math.PI / 2, [direction * this["public"].width / 2, -this["public"].height], function (i, point) {
        var actors = _this14.viewport.actorsAtPoint(point[0], point[1]).filter(function (a) {
          return a.args !== _this14.args;
        });

        if (actors.length || tileMap.getSolid(point[0], point[1], _this14["public"].layer)) {
          return i;
        }
      });
    }
  }, {
    key: "realAngle",
    get: function get() {
      if (!this.args.falling && this.args.standingOn) {
        return this["public"].standingOn.realAngle;
      }

      var groundAngle = Number(this.args.groundAngle);

      if (this.args.falling) {
        return -groundAngle - Math.PI;
      }

      var trajectory;

      switch (this.args.mode) {
        case 0:
          trajectory = -groundAngle - Math.PI;
          break;

        case 1:
          trajectory = -groundAngle - Math.PI / 2;
          break;

        case 2:
          trajectory = -groundAngle;
          break;

        case 3:
          trajectory = -groundAngle + Math.PI / 2;
          break;
      }

      return trajectory;
    }
  }, {
    key: "downAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return Math.PI / 2;
          break;

        case MODE_RIGHT:
          return 0;
          break;

        case MODE_CEILING:
          return -Math.PI / 2;
          break;

        case MODE_LEFT:
          return Math.PI;
          break;
      }
    }
  }, {
    key: "upAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return -Math.PI / 2;
          break;

        case MODE_RIGHT:
          return Math.PI;
          break;

        case MODE_CEILING:
          return Math.PI / 2;
          break;

        case MODE_LEFT:
          return 0;
          break;
      }
    }
  }, {
    key: "leftAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return Math.PI;
          break;

        case MODE_RIGHT:
          return -Math.PI / 2;
          break;

        case MODE_CEILING:
          return 0;
          break;

        case MODE_LEFT:
          return Math.PI / 2;
          break;
      }
    }
  }, {
    key: "rightAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return 0;
          break;

        case MODE_RIGHT:
          return Math.PI / 2;
          break;

        case MODE_CEILING:
          return Math.PI;
          break;

        case MODE_LEFT:
          return -Math.PI / 2;
          break;
      }
    }
  }, {
    key: "groundPoint",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return [this.x + 0, this.y + 1];
          break;

        case MODE_RIGHT:
          return [this.x + 1, this.y + 0];
          break;

        case MODE_CEILING:
          return [this.x + 0, this.y - 1];
          break;

        case MODE_LEFT:
          return [this.x - 1, this.y + 0];
          break;
      }
    }
  }, {
    key: "rotatePoint",
    value: function rotatePoint(x, y) {
      var xRot = x * Math.cos(this.realAngle) - y * Math.sin(this.realAngle);
      var yRot = y * Math.cos(this.realAngle) + x * Math.sin(this.realAngle);
      return [xRot, yRot];
    }
  }, {
    key: "standBelow",
    value: function standBelow(other) {}
  }, {
    key: "getMapSolidAt",
    value: function getMapSolidAt(x, y) {
      var _this15 = this;

      var actors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!this.viewport) {
        return;
      }

      if (actors) {
        var _actors2 = this.viewport.actorsAtPoint(x, y).filter(function (x) {
          return x.args !== _this15.args;
        }).filter(function (x) {
          return x.solid;
        }).filter(function (x) {
          if (x.args.platform || x.isVehicle) {
            if (_this15.y <= x.y + -x.args.height && _this15.args.ySpeed >= 0) {
              return true;
            }

            return false;
          }

          return true;
        });

        if (_actors2.length > 0) {
          return _actors2;
        }
      }

      var tileMap = this.viewport.tileMap;
      return tileMap.getSolid(x, y, this["public"].layer);
    }
  }, {
    key: "canRoll",
    get: function get() {
      return false;
    }
  }, {
    key: "canFly",
    get: function get() {
      return false;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "canSpindash",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return false;
    }
  }, {
    key: "isPushable",
    get: function get() {
      return false;
    }
  }, {
    key: "isVehicle",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "x",
    get: function get() {
      return this["public"].x;
    }
  }, {
    key: "y",
    get: function get() {
      return this["public"].y;
    }
  }, {
    key: "point",
    get: function get() {
      return [this["public"].x, this["public"].y];
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return false;
    }
  }, {
    key: "skidding",
    get: function get() {
      return Math.abs(this["public"].gSpeed) && Math.sign(this["public"].gSpeed) !== this["public"].direction;
    }
  }, {
    key: "readInput",
    value: function readInput() {
      if (!this.controller) {
        return;
      }

      var controller = this.controller;
      this.xAxis = 0;
      this.yAxis = 0;

      if (controller.axes[0]) {
        this.xAxis = controller.axes[0].magnitude;
      }

      if (controller.axes[1]) {
        this.yAxis = controller.axes[1].magnitude;
      }

      if (controller.axes[2]) {
        this.aAxis = controller.axes[2].magnitude;
      }

      if (controller.axes[3]) {
        this.bAxis = controller.axes[3].magnitude;
      }

      var buttons = controller.buttons;

      for (var i in buttons) {
        var button = buttons[i];
        var release = "release_".concat(i); // const change  = `change_${i}`;

        var press = "command_".concat(i);
        var hold = "hold_".concat(i);

        if (!this.args.standingOn || !this.args.standingOn.isVehicle || i == 0) {
          if (button.delta === 1) {
            if (this.args.currentSheild && press in this.args.currentSheild) {
              this.args.currentSheild[press](this, button);
            }

            this[press] && this[press](button);
          } else if (button.delta === -1) {
            if (this.args.currentSheild && release in this.args.currentSheild) {
              this.args.currentSheild[release](this, button);
            }

            this[release] && this[release](button);
          } else if (button.active) {
            if (this.args.currentSheild && hold in this.args.currentSheild) {
              this.args.currentSheild[hold](this, button);
            }

            this[hold] && this[hold](button);
          }
        } else if (this.args.standingOn && this.args.standingOn.isVehicle) {
          this.args.jumping = false;
          this.args.flying = false;
          var vehicle = this.args.standingOn;

          if (button.delta === 1) {
            vehicle[press] && vehicle[press](button);
          } else if (button.delta === -1) {
            vehicle[release] && vehicle[release](button);
          } else if (button.active) {
            vehicle[hold] && vehicle[hold](button);
          }
        }
      }
    }
  }, {
    key: "command_0",
    value: function command_0() // jump
    {
      if (this.args.hangingFrom && this.args.hangingFrom.unhook) {
        var drag = this.getLocalDrag();
        this.args.ySpeed = -this.args.jumpForce * drag * 0.75;
        this.args.hangingFrom.unhook();
        return;
      }

      if (this["public"].falling || this.willJump || this["public"].dontJump) {
        if (this.args.standingOn && this.args.standingOn.isVehicle) {
          if (this.args.ignore && this.args.ignore !== -4) {
            return;
          }

          this.viewport.auras["delete"](this.args.standingOn);
          this.willJump = true;
        }

        return;
      }

      if (!this.willJump) {
        if (this.yAxis < 0) {
          this.args.standingOn = false;
        }

        this.willJump = true;
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      if (this.canRoll && this["public"].gSpeed) {
        this.args.rolling = true;
      }
    }
  }, {
    key: "release_0",
    value: function release_0() {
      if (this.args.jumping && this.args.ySpeed < -5) {
        this.args.ySpeed *= 0.5;
      }
    }
  }, {
    key: "distanceFrom",
    value: function distanceFrom(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var aSquared = Math.pow(this.x - x, 2);
      var bSquared = Math.pow(this.y - y, 2);
      var cSquared = aSquared + bSquared;

      if (cSquared) {
        return Math.sqrt(cSquared);
      }

      return 0;
    }
  }, {
    key: "twist",
    value: function twist(warp) {
      var _this16 = this;

      if (!this.twister) {
        var filterContainer = this.viewport.tags.bgFilters;
        var html = "<div class = \"point-actor-filter twist-filter\">";
        this.twistFilter = new _Tag.Tag(html);
        filterContainer.appendChild(this.twistFilter.node);
        this.twister = new _Twist.Twist({
          id: 'twist-' + this.args.id,
          scale: 60
        });
        this.twister.args.bindTo(['x', 'y', 'width', 'height', 'xOff', 'yOff'], function (v, k) {
          var _this16$twistFilter$s;

          _this16.twistFilter.style((_this16$twistFilter$s = {}, _defineProperty(_this16$twistFilter$s, "--".concat(k), v), _defineProperty(_this16$twistFilter$s, "filter", "url(#twist-".concat(_this16.args.id, ")")), _this16$twistFilter$s));
        });
        this.twister.render(this.twistFilter.node);
        this.onRemove(function () {
          return _this16.twistFilter.remove();
        });
      }

      this.twister.args.scale = warp;
    }
  }, {
    key: "pinch",
    value: function pinch() {
      var _this17 = this;

      var warpBg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var warpFg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (!this.pincherBg) {
        var filterContainer = this.viewport.tags.bgFilters;
        var type = this.args.type.split(' ').shift();
        var html = "<div class = \"point-actor-filter pinch-filter\">";
        this.pinchFilterBg = new _Tag.Tag(html);
        filterContainer.appendChild(this.pinchFilterBg.node);
        this.pincherBg = new _Pinch.Pinch({
          id: 'pinch-' + this.args.id,
          scale: 60
        });
        this.pincherBg.args.bindTo(['x', 'y', 'width', 'height', 'xOff', 'yOff'], function (v, k) {
          var _this17$pinchFilterBg;

          _this17.pinchFilterBg.style((_this17$pinchFilterBg = {}, _defineProperty(_this17$pinchFilterBg, "--".concat(k), v), _defineProperty(_this17$pinchFilterBg, "filter", "url(#pinch-".concat(_this17.args.id, ")")), _this17$pinchFilterBg));
        });
        this.args.yOff = 16;
        this.pincherBg.render(this.pinchFilterBg);
        this.onRemove(function () {
          return _this17.pinchFilterBg.remove();
        });
      }

      this.pincherBg.args.scale = warpBg;
    }
  }, {
    key: "droop",
    value: function droop() {
      var _this18 = this;

      var warpFactor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var xPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var half = this["public"].width / 2;

      if (!this.drooperFg) {
        this.drooperFg = new _Droop.Droop({
          id: 'droop-' + this.args.id,
          width: this["public"].width * 3,
          height: this["public"].height * 3,
          scale: 64
        });
        this.args.bindTo(['x', 'y'], function (v, k) {
          _this18.drooperFg.args[k] = Number(v);
        });
        this.onNextFrame(function () {
          _this18.drooperFg.args.scale = Number(warpFactor * 2);

          _this18.sprite.style({
            transform: "translate(-50%, calc(".concat(warpFactor, "px + calc(-100% + 1px)))"),
            filter: "url(#droop-".concat(_this18.args.id, ")")
          });

          _this18.drooperFg.args.dx = -xPosition;
        });
        this.drooperFg.render(this.sprite);
        return;
      }

      this.drooperFg.args.scale = Number(warpFactor * 2);
      this.sprite.style({
        transform: "translate(-50%, calc(".concat(warpFactor, "px + calc(-100% + 1px)))"),
        filter: "url(#droop-".concat(this.args.id, ")")
      });
      var widthFactor = 1 - xPosition / half;
      var posFactor = xPosition / this.args.width;
      this.drooperFg.args.droopWidthLeft = "".concat(51 * widthFactor + 1, "%");
      this.drooperFg.args.droopRightStart = "".concat(51 * widthFactor, "%");
      this.drooperFg.args.droopWidthRight = "".concat(102 + -51 * widthFactor, "%");
    }
  }, {
    key: "crossRegionBoundary",
    value: function crossRegionBoundary(region) {
      if (!region || this.args["static"]) {
        return;
      }

      var drag = region.args.drag;
      this.args.xSpeed *= drag;
      this.args.ySpeed *= drag;
      this.args.gSpeed *= drag;

      if (this.viewport) {
        var viewport = this.viewport;

        if (!this.args.gone && region.entryParticle) {
          var splash = new _Tag.Tag(region.entryParticle);

          if (splash.node) {
            splash.style({
              '--x': this.x + this.args.xSpeed,
              '--y': region.y + -region.args.height + -8,
              'z-index': 5,
              opacity: Math.random,
              '--particleScale': this.args.particleScale,
              '--time': 320
            });
            viewport.particles.add(splash);
            setTimeout(function () {
              return splash.node && viewport.particles.remove(splash);
            }, 320);
          }
        }
      }
    }
  }, {
    key: "die",
    value: function die() {
      var _this19 = this;

      if (this.args.dead) {
        return;
      }

      this.args.groundAngle = 0;
      this.args.ySpeed = 0;
      this.args.xSpeed = 0;
      this.args.jumping = false;
      this.args.falling = true;
      this.args.ignore = -1;
      this.args["float"] = 0;
      this.args.rings = 0;
      this.args.standingLayer = null;
      this.args.standingOn = null;
      this.lastLayer = null;
      this.args.dead = true;
      this.noClip = true;
      this.onNextFrame(function () {
        _this19.args.ySpeed = -6;
        _this19.args.xSpeed = 0;
      });
      this.viewport.onFrameOut(120, function () {
        _this19.respawn();
      });
    }
  }, {
    key: "respawn",
    value: function respawn() {
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args.gSpeed = 0;
      this.args.respawning = true;
      this.args.display = 'none';
      this.args.standingLayer = null;
      this.args.standingOn = null;
      this.lastLayer = null;
    }
  }, {
    key: "sleep",
    value: function sleep() {}
  }, {
    key: "wakeUp",
    value: function wakeUp() {}
  }, {
    key: "urlWrap",
    value: function urlWrap(url) {
      return "url(".concat(url, ")");
    }
  }, {
    key: "facePoint",
    get: function get() {
      return this.rotatePoint(-5 * this["public"].direction, -14 + this["public"].height);
    }
  }, {
    key: "registerDebug",
    value: function registerDebug(name) {
      window[name] = this;
    }
  }, {
    key: "loseRings",
    value: function loseRings() {
      var _this20 = this;

      var Ring = this.viewport.objectPalette['ring'];
      this.spawnRings = this.spawnRings || 0;
      var maxSpawn = Math.min(this.args.rings, 12);

      var _loop = function _loop() {
        var ring = new Ring();
        var angle = _this20.spawnRings * (Math.PI * 2) / maxSpawn;
        var circle = 1;
        var radius = 8 * circle;
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        ring.args.x = _this20.x - cos * 8;
        ring.args.y = _this20.y - sin * 8;
        ring.args["static"] = false;
        ring.args["float"] = 4;
        ring.args.ignore = 30;
        ring.args.width = 16;
        ring.args.height = 16;
        ring.dropped = true;

        _this20.viewport.onFrameOut(3 + _this20.spawnRings % 3, function () {
          _this20.viewport.spawn.add({
            object: ring
          });
        });

        _this20.viewport.onFrameOut(5, function () {
          ring.args.xSpeed = _this20.args.xSpeed || _this20.args.gSpeed;
          ring.args.ySpeed = _this20.args.ySpeed;
        });

        _this20.spawnRings++;

        _this20.viewport.onFrameOut(7, function () {
          _this20.onNextFrame(function () {
            ring.args.xSpeed += -cos * 2;
            ring.args.gSpeed += -cos * 2;
            ring.args.ySpeed += -sin * 2;
          });
        });

        ring.noClip = true;
        ring.args.decoration = true;

        if (_this20.spawnRings > 16) {
          _this20.viewport.onFrameOut(45, function () {
            _this20.viewport.actors.remove(ring);

            if (ring.dropped && _this20.spawnRings > 0) {
              _this20.spawnRings--;
            }
          });
        } else {
          _this20.viewport.onFrameOut(10, function () {
            ring.noClip = false;
            ring.args.decoration = false;
          });

          _this20.viewport.onFrameOut(240, function () {
            _this20.viewport.actors.remove(ring);

            if (ring.dropped && _this20.spawnRings > 0) {
              _this20.spawnRings--;
            }
          });
        }
      };

      while (this.spawnRings < maxSpawn) {
        _loop();
      }
    }
  }, {
    key: "collect",
    value: function collect(pickup) {
      if (pickup.dropped) {
        if (this.spawnRings) {
          this.spawnRings--;
        }

        pickup.dropped = false;
      }
    }
  }, {
    key: "angleTo",
    value: function angleTo(actor) {
      return Math.atan2(this.y - actor.y, this.x - actor.x);
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(actor) {
      return Math.sqrt(Math.pow(this.y - actor.y, 2) + Math.pow(this.x - actor.x, 2));
    }
  }], [{
    key: "fromDef",
    value: // ringDoc = new DocumentFragment;
    function fromDef(objDef) {
      var _instance$float;

      var objArgs = {
        x: objDef.x + Math.floor(objDef.width / 2),
        y: objDef.y - 1 // , z:       objDef.id
        ,
        visible: objDef.visible,
        name: objDef.name,
        id: objDef.id
      };
      var def = new Map();

      for (var i in objArgs) {
        if (_typeof(objArgs[i]) === 'object') {
          continue;
        }

        def.set(i, objArgs[i]);
      }

      for (var _i4 in objDef.properties) {
        var property = objDef.properties[_i4];
        objArgs[property.name] = property.value;
        def.set(property.name, property.value);
      }

      var instance = new this(Object.assign({}, objArgs));
      instance.def = def;
      instance.args["float"] = (_instance$float = instance["float"]) !== null && _instance$float !== void 0 ? _instance$float : instance.args["float"];
      return instance;
    }
  }]);

  return PointActor;
}(_View2.View);

exports.PointActor = PointActor;

_defineProperty(PointActor, "lastClick", 0);
});

;require.register("actor/PowerupGlow.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PowerupGlow = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PowerupGlow = /*#__PURE__*/function (_PointActor) {
  _inherits(PowerupGlow, _PointActor);

  var _super = _createSuper(PowerupGlow);

  function PowerupGlow() {
    var _this;

    _classCallCheck(this, PowerupGlow);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-powerup-glow';
    _this.args.width = 64;
    _this.args.height = 64;
    return _this;
  }

  _createClass(PowerupGlow, [{
    key: "onAttached",
    value: function onAttached() {
      this.autoAttr.get(this.box)['data-closed'] = 'closed';
      this.icon = new _Tag.Tag('<div class = "powerup-icon">');
      this.halo = new _Tag.Tag('<div class = "powerup-halo">');
      this.tags.sprite.appendChild(this.icon.node);
      this.box.appendChild(this.halo.node);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      _get(_getPrototypeOf(PowerupGlow.prototype), "collideA", this).call(this, other);

      if (!other.controllable) {
        return;
      }

      this.onTimeout(125, function () {
        return _this2.args.closed = 'closed';
      });
      this.onTimeout(4500, function () {
        return _this2.args.closed = '';
      });
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return PowerupGlow;
}(_PointActor2.PointActor);

exports.PowerupGlow = PowerupGlow;
});

;require.register("actor/Projectile.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Projectile = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Tag = require("curvature/base/Tag");

var _Region = require("../region/Region");

var _Spring = require("./Spring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// import { StarPost } from './StarPost';
var Projectile = /*#__PURE__*/function (_PointActor) {
  _inherits(Projectile, _PointActor);

  var _super = _createSuper(Projectile);

  function Projectile() {
    var _this;

    _classCallCheck(this, Projectile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-projectile';
    _this.args.width = 8;
    _this.args.height = 8;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(Projectile, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this.removed) {
        return;
      }

      _get(_getPrototypeOf(Projectile.prototype), "update", this).call(this);

      if (!this.args.xSpeed && !this.args.ySpeed) {
        this.explode();
      }

      if (!this.removeTimer) {
        this.removeTimer = this.onTimeout(2500, function () {
          return _this2.explode();
        });
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (other === this.args.owner || other instanceof _Region.Region || other instanceof _Spring.Spring) {
        return false;
      }

      if (!other.solid && !other.controllable) {
        return false;
      }

      if (this.args.owner && !this.args.owner.args.gone) {
        other.controllable && other.damage();
      }

      this.args.x += Math.cos(this["public"].angle) * (other.args.width / 2) * Math.sign(this["public"].xSpeed);
      this.args.y += Math.sin(this["public"].angle) * (other.args.width / 2) * Math.sign(this["public"].xSpeed);
      this.explode();
      return false;
    }
  }, {
    key: "explode",
    value: function explode() {
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-explosion">');
      particle.style({
        '--x': this.x,
        '--y': this.y
      });
      viewport.particles.add(particle);
      setTimeout(function () {
        return viewport.particles.remove(particle);
      }, 350);
      this.viewport.actors.remove(this);
      this.remove();
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Projectile;
}(_PointActor2.PointActor);

exports.Projectile = Projectile;
});

;require.register("actor/QuestionBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuestionBlock = void 0;

var _PointActor2 = require("./PointActor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var QuestionBlock = /*#__PURE__*/function (_PointActor) {
  _inherits(QuestionBlock, _PointActor);

  var _super = _createSuper(QuestionBlock);

  function QuestionBlock() {
    var _this;

    _classCallCheck(this, QuestionBlock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "maxBounce", 4);

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _defineProperty(_assertThisInitialized(_this), "template", "<div\n\t\tclass = \"point-actor [[type]] [[collType]]\"\n\t\tstyle = \"\n\t\t\tdisplay:[[display]];\n\t\t\t--angle:[[angle]];\n\t\t\t--airAngle:[[airAngle]];\n\t\t\t--display-angle:[[_angle]];\n\t\t\t--height:[[height]];\n\t\t\t--width:[[width]];\n\t\t\t--x:[[x]];\n\t\t\t--y:[[y]];\n\t\t\"\n\t\tdata-colliding = \"[[colliding]]\"\n\t\tdata-falling   = \"[[falling]]\"\n\t\tdata-facing    = \"[[facing]]\"\n\t\tdata-angle     = \"[[angle|rad2deg]]\"\n\t\tdata-mode      = \"[[mode]]\"\n\t\tdata-empty     = \"[[empty]]\"\n\t\tcv-ref = \"box\"\n\t><div cv-ref = \"sprite\" class = \"sprite\"></div></div>");

    _this.args.type = 'actor-question-block actor-item';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.initY = null;
    _this.empty = false;
    return _this;
  }

  _createClass(QuestionBlock, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      _get(_getPrototypeOf(QuestionBlock.prototype), "collideA", this).call(this, other);

      if (this.initY === null) {
        this.initY = this.y;
      }

      if (type === 2) {
        var impulse = Math.abs(other.args.ySpeed);
        other.args.falling = true;

        if (other.args.ySpeed > 0) {
          other.args.ySpeed += this.args.ySpeed;
        } else {
          this.args.y -= impulse;
          other.args.y += impulse;
        }

        if (this.args.ySpeed > 0 && this.args.ySpeed > other.args.ySpeed) {
          other.args.ySpeed = Math.abs(other.args.ySpeed);
          other.args.y += this.args.ySpeed;
        }

        if (this.args.ySpeed < 0) {
          this.args.ySpeed = -Math.abs(this.args.ySpeed);
        }

        if (this.args.ySpeed) {
          return true;
        }

        var ySpeedMax = this.maxBounce;
        var speed = type === 2 ? -Math.abs(other.args.ySpeed) : other.args.ySpeed;

        if (Math.abs(speed) > ySpeedMax) {
          speed = ySpeedMax * Math.sign(speed);
        }

        this.args.ySpeed = speed;
        other.args.ySpeed = -other.args.ySpeed;
      }

      if (type === 2 && !this.args.empty) {
        if (!this.args.empty) {
          var monitor = new _SheildWaterMonitor.SheildWaterMonitor({
            x: this.x,
            y: this.y - 96
          });
          this.viewport.spawn.add({
            object: monitor
          });
          monitor.onRemove(function () {
            return _this2.args.empty = false;
          });
          this.args.empty = true;
        }
      }

      return true;
    }
  }, {
    key: "update",
    value: function update() {
      if (this.initY !== null) {
        if (this.initY > this.y) {
          this.args.ySpeed += 0.75;
        } else if (this.initY < this.y) {
          this.args.ySpeed -= 0.75;
        }

        if (Math.abs(this.args.y - this.initY) < 1 && Math.abs(this.args.ySpeed) < 1) {
          this.args.ySpeed = 0;
          this.args.y = this.initY;
        }
      }

      this.args.ySpeed *= 0.9;
      this.args.ySpeed = Math.floor(this.args.ySpeed * 100) / 100;
      this.args.y = Math.round(this.args.y);
      var ySpeedMax = this.maxBounce;

      if (Math.abs(this.args.ySpeed) > ySpeedMax) {
        this.args.ySpeed = ySpeedMax * Math.sign(this.args.ySpeed);
      }

      _get(_getPrototypeOf(QuestionBlock.prototype), "update", this).call(this);
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(QuestionBlock), "fromDef", this).call(this, objDef);

      obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);
      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return QuestionBlock;
}(_PointActor2.PointActor);

exports.QuestionBlock = QuestionBlock;
});

;require.register("actor/RailCar.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RailCar = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RailCar = /*#__PURE__*/function (_Vehicle) {
  _inherits(RailCar, _Vehicle);

  var _super = _createSuper(RailCar);

  function RailCar() {
    var _this;

    _classCallCheck(this, RailCar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-rail-car';
    _this.args.width = 32;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.cartSpeed = _this.args.cartSpeed || 15;
    _this.args.gSpeedMax = 20;
    _this.args.decel = 0.00;
    _this.args.accel = 0.75;
    _this.args.gravity = 1; // this.args.ignore    = -1;

    _this.args.seatHeight = 44;
    _this.args.skidTraction = 0.05;
    _this.args.jumpForce = 8;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    return _this;
  }

  _createClass(RailCar, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.frontWheel = new _Tag.Tag('<div class = "rail-car-wheel rail-car-wheel-front">');
      this.backWheel = new _Tag.Tag('<div class = "rail-car-wheel rail-car-wheel-back">');
      this.frontFrag = new _Tag.Tag('<div class = "rail-car-frag rail-car-frag-front">');
      this.backFrag = new _Tag.Tag('<div class = "rail-car-frag rail-car-frag-back">');
      this.sprite.appendChild(this.frontWheel.node);
      this.sprite.appendChild(this.backWheel.node);
      this.sprite.appendChild(this.frontFrag.node);
      this.sprite.appendChild(this.backFrag.node);
    }
  }, {
    key: "update",
    value: function update() {
      this.originalSpeed = this.args.gSpeed || this.args.xSpeed;
      var lastX = this.x;

      _get(_getPrototypeOf(RailCar.prototype), "update", this).call(this);

      var nowX = this.x;

      if (this.args.gSpeed !== 0 || this.args.xSpeed !== 0) {
        this.sprite.classList.add('moving');
        this.args.started = true;
      }

      if (nowX === lastX) {
        this.sprite.classList.remove('moving');

        if (this.args.started) {
          var viewport = this.viewport;

          if (this.args.falling && !this.args.xSpeed && !this.args.ySpeed) {
            this.breakApart();
          } else if (!this.args.falling && !this.args.gSpeed) {
            this.breakApart();
          }
        }
      }

      if (this.occupant && !this.args.falling) {
        if (Math.abs(this.args.gSpeed) < Math.abs(this.args.cartSpeed) || Math.sign(this["public"].gSpeed) !== Math.sign(this["public"].cartSpeed)) {
          this.args.gSpeed += Math.sign(this.args.cartSpeed) * 0.125;
        }

        this.args.direction = Math.sign(this.args.gSpeed);
      } else {
        this.args.gSpeed = this.args.xSpeed;
      }
    }
  }, {
    key: "breakApart",
    value: function breakApart() {
      var _this2 = this;

      if (!this.args.broken) {
        var viewport = this.viewport;
        viewport.onFrameOut(500, function () {
          return viewport && viewport.actors.remove(_this2);
        });
        viewport.onFrameOut(200, function () {
          return _this2.sprite.classList.add('broken');
        });

        if (this.occupant) {
          var occupant = this.occupant;
          occupant.args.standingOn = false;
          occupant.startle();
          this.args.falling = true;
          this.onNextFrame(function () {
            occupant.args.xSpeed = -4 * Math.sign(_this2.gSpeedLast || _this2.xSpeedLast);
          });
        }

        this.sprite.classList.add('breaking');
        this.args.broken = true;
        this.args.groundAngle = 0;
        this.args.mode = 0;
      }
    }
  }, {
    key: "processInputDirect",
    value: function processInputDirect() {// Don't process input at all.
    }
  }, {
    key: "jump",
    value: function jump() {// Don't process input at all.
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.args.broken && !this.occupant;
    }
  }]);

  return RailCar;
}(_Vehicle2.Vehicle);

exports.RailCar = RailCar;
});

;require.register("actor/RedEyeJet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedEyeJet = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor2 = require("./PointActor");

var _MiniMace = require("./MiniMace");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RedEyeJet = /*#__PURE__*/function (_PointActor) {
  _inherits(RedEyeJet, _PointActor);

  var _super = _createSuper(RedEyeJet);

  function RedEyeJet(args, parent) {
    var _this;

    _classCallCheck(this, RedEyeJet);

    _this = _super.call(this, args, parent);
    _this.args.gravity = 0.4;
    _this.args.width = 96;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-red-eye-jet';
    _this.args["float"] = -1;
    _this.args.phase = 'idle';
    _this.args.hitPoints = _this.args.hitPoints || 8;
    _this.args.maxSpeed = 9;
    _this.dieSound = new Audio('/Sonic/object-destroyed.wav');
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    _this.dudSound = new Audio('/Sonic/S2_59.wav');

    _this.args.bindTo('phase', function (v) {
      return _this.args.phaseFrameId = 0;
    });

    return _this;
  }

  _createClass(RedEyeJet, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (!other.controllable) {
        return;
      }

      if (this.args.hitPoints > 0) {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          other.args.xSpeed = -other.args.xSpeed * 1.5;
          other.damage();
          return true;
        }
      }

      if (!this.args.falling && this.args.phase !== 'exploding') {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          return true;
        }

        this.box.setAttribute('data-phase', 'exploding');
        this.args.phase = 'exploding';
        this.viewport.clearCheckpoints(other.args.id);
        var viewport = this.viewport;
        viewport.onFrameOut(80, function () {
          _this2.box.setAttribute('data-phase', 'exploded');

          _this2.args.falling = true;
          _this2.args.ySpeed = -12;
          _this2.noClip = true;

          if (_this2.viewport.args.audio) {
            _this2.dieSound.volume = 0.5;

            _this2.dieSound.play();
          }
        });
        viewport.onFrameOut(100, function () {
          viewport.clearAct("".concat(other.args.name, " BEAT THE MINI-MACE"));
        });
        viewport.onFrameOut(200, function () {
          _this2.viewport.args.cutScene = true;
        });
        viewport.onFrameOut(205, function () {
          _this2.viewport.controlActor.controller.replay({
            axes: [1, 0, 0, 1]
          });

          _this2.viewport.controlActor.readInput();
        });
        viewport.onFrameOut(210, function () {
          _this2.viewport.controlActor.controller.replay({
            buttons: [1]
          });

          _this2.viewport.controlActor.readInput();
        });
        viewport.onFrameOut(211, function () {
          _this2.viewport.controlActor.dropDashCharge = 30;
        });
        viewport.onFrameOut(285, function () {
          _this2.viewport.controlActor.controller.replay({
            buttons: [0, 0, 0, 0, 0, 0]
          });

          _this2.viewport.controlActor.readInput();

          _this2.args.phase = 'done';
        });
        viewport.onFrameOut(500, function () {
          _this2.args.xSpeed = 0;
          _this2.args.ySpeed = 0;
          _this2.args.y = -1024;
        });
      }

      this.ignores.set(other, 15);

      if (type === 2) {
        if (this.viewport.args.audio) {
          this.dudSound.volume = 0.35 + Math.random() * -0.15;
          this.dudSound.play();
        }

        other.args.ySpeed = Math.max(7, Math.abs(other.args.ySpeed));
      }

      var xBounce = Math.max(Math.abs(other.args.xSpeed), Math.abs(this.args.xSpeed));

      if (this.args.hitPoints > 1 && this.args.falling) {
        this.args.xSpeed = other.args.xSpeed;
      } else {
        this.args.xSpeed = 0;
      }

      if (type === 1) {
        if (this.viewport.args.audio) {
          this.hitSound.volume = 0.35 + Math.random() * -0.15;
          this.hitSound.play();
        }

        other.args.x = this.x - this.args.width / 2;

        if (this.args.hitPoints > 0) {
          other.args.xSpeed = -xBounce * 1.25;
          other.args.xSpeed = Math.min(-7, -this.args.xSpeed);
          this.args.hitPoints--;
        } else {
          other.args.xSpeed = -2;
          other.args.ignore = -2;
        }
      }

      if (type === 3) {
        if (this.viewport.args.audio) {
          this.hitSound.volume = 0.35 + Math.random() * -0.15;
          this.hitSound.play();
        }

        other.args.x = this.x + this.args.width / 2;

        if (this.args.hitPoints > 0) {
          other.args.xSpeed = xBounce * 1.25;
          other.args.xSpeed = Math.max(7, -this.args.xSpeed);
          this.args.hitPoints--;
        } else {
          other.args.xSpeed = 2;
          other.args.ignore = -2;
        }
      }

      if (type === 1 || type === 3 || type === 0) {
        if (!['dead', 'exploding', 'damaged', 'done'].includes(this.args.phase)) {
          this.args.phase = 'damaged';
          this.args.animation = '';
          this.args.animation = 'damaged';

          if (this.args.hitPoints === 0 && this.args.phase !== 'exploding') {
            this.box.setAttribute('data-phase', 'dead');
            this.args.animation = '';
            this.args.phase = 'dead';

            if (typeof ga === 'function') {
              ga('send', 'event', {
                eventCategory: 'boss',
                eventAction: 'defeated',
                eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
              });
            }
          }

          this.viewport.onFrameOut(20, function () {
            if (_this2.args.hitPoints > 0) {
              _this2.args.animation = 'attacking';
              _this2.args.phase = 'attacking';
            } else if (!['dead', 'exploding', 'done'].includes(_this2.args.phase)) {
              _this2.box.setAttribute('data-phase', 'dead');

              _this2.args.animation = 'dead';
              _this2.args.phase = 'dead';
              _this2.args.xSpeed = 0;
              other.args.score += 20000;
            }
          });
        }

        if (type === 0) {
          other.args.y = this.y - this.args.height;
          var animation = other.args.animation;
          var ySpeed = other.args.ySpeed;
          this.onNextFrame(function () {
            other.args.animation = animation;
            other.args.falling = true;
            other.args.xSpeed = -4 * Math.sign(_this2.x - other.x);
            other.args.ySpeed = -Math.floor(Math.abs(ySpeed)) || -4;
          });

          if (this.viewport.args.audio) {
            this.hitSound.volume = 0.35 + Math.random() * -0.15;
            this.hitSound.play();
          }
        }

        var gSpeed = other.args.gSpeed;
        other.args.gSpeed = -gSpeed;

        if (other.args.rolling) {
          this.onNextFrame(function () {
            other.args.gSpeed = -gSpeed;
            other.args.rolling = true;
            other.args.direction - Math.sign(gSpeed);
          });
        }
      }

      other.args.ignore = 1;

      if (!this.args.hitPoints) {
        other.args.ignore = -2;
      }

      return true;
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      this.args.phaseFrameId++;
      this.args.frameId++;

      if (this.args.phase === 'intro') {
        this.args.ropeLength = 8;
        this.args.maxSpeed = 12;

        if (this.args.phaseFrameId > 100) {
          console.log(this.args.phaseFrameId);
          this.args.phase = 'attacking';
        }
      } else {
        this.args.ropeLength = 144;
      }

      if (this.args.phase === 'attacking') {
        this.args.maxSpeed = 9;

        if (this.hanging.has(_MiniMace.MiniMace)) {
          var _iterator = _createForOfIteratorHelper(this.hanging.get(_MiniMace.MiniMace)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mace = _step.value;
              mace.args["float"] = 0;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        if (Math.abs(this.viewport.controlActor.x - this.x) > 255) {
          this.args.phase = 'chasing';
        }
      }

      if (this.args.phase === 'chasing') {
        if (Math.abs(this.viewport.controlActor.x - this.x) < 8 && this.y < this.viewport.controlActor.y) {
          this.args.phase = 'attacking';
        }
      }

      if (this.args.phase === 'exploding') {
        var viewport = this.viewport;

        if (viewport && viewport.args.frameId % 3 === 0) {
          var explosion = new _Tag.Tag('<div class = "particle-explosion">');

          if (viewport.args.audio) {
            this.hitSound.currentTime = 0;
            this.hitSound.volume = 0.35 + Math.random() * -0.15;
            this.hitSound.play();
          }

          var xOff = this.args.width * Math.random() - this.args.width / 2;
          var yOff = this.args.height * Math.random() - this.args.height / 2;
          explosion.style({
            '--x': this.x + xOff,
            '--y': this.y + yOff + -16
          });
          viewport.particles.add(explosion);
          setTimeout(function () {
            return viewport.particles.remove(explosion);
          }, 512);
        }

        _get(_getPrototypeOf(RedEyeJet.prototype), "update", this).call(this);

        return;
      }

      if (this.args.phase === 'damaged') {
        this.args.xSpeed *= 0.999;
      }

      if (this.box) {
        if (this.x - this.viewport.controlActor.x > 0) {
          if (Math.abs(this.x - this.viewport.controlActor.x) > 128) {
            this.box.setAttribute('data-looking', 'far-left');
          } else if (this.viewport.controlActor.args.direction === -1) {
            this.box.setAttribute('data-looking', 'far-left');
          } else {
            this.box.setAttribute('data-looking', 'left');
          }
        } else if (this.x - this.viewport.controlActor.x < 0) {
          this.box.setAttribute('data-looking', 'far-right');

          if (Math.abs(this.x - this.viewport.controlActor.x) > 128) {
            this.box.setAttribute('data-looking', 'far-right');
          } else if (this.viewport.controlActor.args.direction === 1) {
            this.box.setAttribute('data-looking', 'far-right');
          } else {
            this.box.setAttribute('data-looking', 'right');
          }
        }

        if (32 > this.y - this.viewport.controlActor.y) {
          this.box.setAttribute('data-ducking', 'true');
        } else {
          this.box.setAttribute('data-ducking', 'false');
        }
      }

      if (this.args.hitPoints) {
        if (['attacking', 'intro', 'chasing'].includes(this.args.phase)) {
          if (Math.abs(this.x - this.viewport.controlActor.x) > 384) {
            this.args.x = this.viewport.controlActor.x + Math.sign(this.x - this.viewport.controlActor.x) * 384;
          }

          this.args.xSpeed += -Math.sign(this.x - this.viewport.controlActor.x) * 0.35;
        }
      }

      if (this.args.hitPoints) {
        this.args.falling = true;
        this.args["float"] = -1;
      } else {
        this.args["float"] = 0;
      }

      if (this.args.phase === 'intro' || this.args.phase === 'attacking') {
        this.args.maxSpeed = 11;
      }

      if (this.args.phase === 'chasing') {
        if (Math.abs(this.x - this.viewport.controlActor.x) < 128) {
          this.args.maxSpeed = Math.max(this.args.maxSpeed, this.viewport.controlActor.args.xSpeed);
        }
      } else if (Math.abs(this.args.xSpeed) > this.args.maxSpeed) {
        this.args.xSpeed = Math.sign(this.args.xSpeed) * this.args.maxSpeed;
      }

      _get(_getPrototypeOf(RedEyeJet.prototype), "update", this).call(this);
    }
  }, {
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.body = new _Tag.Tag("<div class = \"body-center\">");
      this.bodyL = new _Tag.Tag("<div class = \"body-left\">");
      this.bodyR = new _Tag.Tag("<div class = \"body-right\">");
      this.fireA = new _Tag.Tag("<div class = \"boost-fire boost-fire-left\">");
      this.fireB = new _Tag.Tag("<div class = \"boost-fire boost-fire-right\">");
      this.eye = new _Tag.Tag("<div class = \"orange-eye\">");
      this.box.appendChild(this.body.node);
      this.box.appendChild(this.bodyL.node);
      this.box.appendChild(this.bodyR.node);
      this.box.appendChild(this.fireA.node);
      this.box.appendChild(this.fireB.node);
      this.box.appendChild(this.eye.node);
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return RedEyeJet;
}(_PointActor2.PointActor);

exports.RedEyeJet = RedEyeJet;
});

;require.register("actor/Ring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ring = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Ring = /*#__PURE__*/function (_PointActor) {
  _inherits(Ring, _PointActor);

  var _super = _createSuper(Ring);

  function Ring() {
    var _this;

    _classCallCheck(this, Ring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class  = \"point-actor [[type]]\">\n\t\t<div class = \"sprite\" cv-ref = \"sprite\"></div>\n\t</div>");

    _this.args.type = 'actor-item actor-ring';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args["static"] = true;
    _this.args.gone = false;
    _this.args["float"] = -1;
    _this.args.gravity = 0.24 * 2;
    return _this;
  }

  _createClass(Ring, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.frameId % 4) {
        this.noClip = true;
      } else if (!this.args.decoration && !this.attract) {
        this.noClip = false;
      }

      if (this.args.decoration) {
        this.args.type = 'actor-item actor-ring decoration';
      }

      if (!this.args.falling) {
        // this.args.y += -6;
        this.args.ySpeed = -this.ySpeedLast * 0.5;
        this.args.xSpeed = this.xSpeedLast * 0.65;
        this.args.falling = true;
      }

      _get(_getPrototypeOf(Ring.prototype), "update", this).call(this);
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler(other) {
      if (other instanceof Ring) {
        return;
      }

      return _get(_getPrototypeOf(Ring.prototype), "callCollideHandler", this).call(this, other);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (this["public"].gone || this.args.ignore) {
        return false;
      }

      _get(_getPrototypeOf(Ring.prototype), "collideA", this).call(this, other);

      if (other["public"].owner) {
        other = other.args.owner;
      }

      if (other.occupant) {
        other = other.occupant;
      }

      if (!other.controllable && !other.occupant && !other["public"].owner) {
        return false;
      }

      if (other.controllable) {
        other.args.rings += 1; // const losable = new this.constructor;
        // losable.viewport = this.viewport;
        // losable.render(other.ringDoc);
      }

      this.args.gone = true;
      this.viewport.auras["delete"](this);
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args["static"] = true;
      this.args["float"] = -1;
      this.args.type = 'actor-item actor-ring collected';

      if (this.viewport.args.audio) {
        if (!this.sample) {
          this.sample = new Audio('/Sonic/ring-collect.wav');
          this.sample.volume = 0.15 + Math.random() * -0.05;
        }

        this.sample.play();
      }

      this.viewport.onFrameOut(5, function () {
        _this2.args.type = 'actor-item actor-ring collected gone';
      });
      var x = this.x;
      var y = this.y;
      var viewport = this.viewport;
      this.viewport.onFrameOut(1200, function () {
        _this2.restore = true;
      });

      if (other.collect) {
        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'ring',
            eventAction: 'collected',
            eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
          });
        }

        this.onNextFrame(function () {
          other.collect(_this2);
        });
      }

      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {
      if (this.restore) {
        this.args.x = this.def.get('x');
        this.args.y = this.def.get('y'); // this.args.float = -1;

        this.args.gone = this.restore = false;
        this.args.type = 'actor-item actor-ring';
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Ring;
}(_PointActor2.PointActor);

exports.Ring = Ring;
});

;require.register("actor/RoadBarrier.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoadBarrier = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RoadBarrier = /*#__PURE__*/function (_PointActor) {
  _inherits(RoadBarrier, _PointActor);

  var _super = _createSuper(RoadBarrier);

  function RoadBarrier() {
    var _this;

    _classCallCheck(this, RoadBarrier);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = _this["public"].width || 64;
    _this.args.height = _this["public"].height || 32;
    _this.args.type = 'actor-item actor-road-barrier';
    return _this;
  }

  _createClass(RoadBarrier, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return RoadBarrier;
}(_PointActor2.PointActor);

exports.RoadBarrier = RoadBarrier;
});

;require.register("actor/Rocket.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rocket = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Rocket = /*#__PURE__*/function (_PointActor) {
  _inherits(Rocket, _PointActor);

  var _super = _createSuper(Rocket);

  function Rocket() {
    var _this$args$xMax, _this$args$yMax;

    var _this;

    _classCallCheck(this, Rocket);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args)); // this.args.width  = this.public.width  || 32;
    // this.args.height = this.public.height || 32;

    _this.args.width = 32;
    _this.args.height = 16;
    _this.args.xMax = (_this$args$xMax = _this.args.xMax) !== null && _this$args$xMax !== void 0 ? _this$args$xMax : 24;
    _this.args.yMax = (_this$args$yMax = _this.args.yMax) !== null && _this$args$yMax !== void 0 ? _this$args$yMax : 24;
    _this.args.type = 'actor-item actor-rocket';
    _this.args.launched = false;
    return _this;
  }

  _createClass(Rocket, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/object-destroyed.wav');
        this.sample.volume = 0.6 + Math.random() * -0.3;
      }

      _get(_getPrototypeOf(Rocket.prototype), "update", this).call(this);

      if (this.args.launched && Math.abs(this.args.xSpeed) < Math.abs(this.args.xMax)) {
        this.args.xSpeed += 0.5 * Math.sign(this.args.xMax);
      }

      if (this.args.launched && Math.abs(this.args.ySpeed) < Math.abs(this.args.yMax)) {
        this.args.ySpeed -= 0.5 * Math.sign(this.args.yMax);
      }

      if (this.args.launched && this.args.xSpeed === 0 && this.args.ySpeed === 0) {
        this.explode();
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      this.viewport.auras.add(this);
      this.args.launched = true;

      if (this.args.xMax) {
        this.args.xSpeed += 0.5;
      }

      if (this.args.yMax) {
        this.args.ySpeed -= 0.5;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (this.args.launched) {
        this.explode();
      }
    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {// this.args.xSpeed = 0;
      // this.args.ySpeed = 0;
      // this.args.x = this.def.get('x');
      // this.args.y = this.def.get('y');
    }
  }, {
    key: "explode",
    value: function explode() {
      var _this2 = this;

      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var explosion = new _Tag.Tag('<div class = "particle-explosion">');
      explosion.style({
        '--x': this.x,
        '--y': this.y - 8
      });
      viewport.particles.add(explosion);
      setTimeout(function () {
        return viewport.particles.remove(explosion);
      }, 512);

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      this.args.launched = false;
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.viewport.setColCell(this);
      this.onNextFrame(function () {
        _this2.args.launched = false;
        _this2.args.xSpeed = 0;
        _this2.args.ySpeed = 0;
        _this2.args.x = _this2.def.get('x');
        _this2.args.y = _this2.def.get('y');

        _this2.viewport.setColCell(_this2);

        _this2.viewport.auras["delete"](_this2);
      });
    }
  }]);

  return Rocket;
}(_PointActor2.PointActor);

exports.Rocket = Rocket;
});

;require.register("actor/Rocks.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rocks = void 0;

var _PointActor2 = require("./PointActor");

var _Projectile = require("../actor/Projectile");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Rocks = /*#__PURE__*/function (_PointActor) {
  _inherits(Rocks, _PointActor);

  var _super = _createSuper(Rocks);

  function Rocks(args, parent) {
    var _this;

    _classCallCheck(this, Rocks);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-rocks-tall';
    _this.args.width = 48;
    _this.args.height = 80;
    _this.gone = false;
    _this.particleA = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleB = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleC = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleD = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleE = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleF = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleG = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleH = new _Tag.Tag('<div class = "particle-rock">');
    return _this;
  }

  _createClass(Rocks, [{
    key: "onAttached",
    value: function onAttached() {
      // const direction = Math.sign(other.args.gSpeed || other.args.xSpeed);
      var direction = -1;
      var fuzzFactor = 20;
      var fallSpeed = 1550;
      var xForce = 60;
      var yForce = 40;
      var particleA = this.particleA;
      var particleB = this.particleB;
      var particleC = this.particleC;
      var particleD = this.particleD;
      var particleE = this.particleE;
      var particleF = this.particleF;
      var particleG = this.particleG;
      var particleH = this.particleH;
      particleA.style({
        '--x': this.x - 8,
        '--y': this.y - 8,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce,
        'z-index': 0
      });
      direction *= -1;
      particleB.style({
        '--x': this.x + 8,
        '--y': this.y - 0,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce,
        'z-index': 0
      });
      direction *= -1;
      particleC.style({
        '--x': this.x,
        '--y': this.y - 18,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.1,
        'z-index': 0
      });
      direction *= -1;
      particleD.style({
        '--x': this.x + 8,
        '--y': this.y - 10,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.1,
        'z-index': 0
      });
      direction *= -1;
      particleE.style({
        '--x': this.x - 8,
        '--y': this.y - 28,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleF.style({
        '--x': this.x + 8,
        '--y': this.y - 20,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleG.style({
        '--x': this.x - 8,
        '--y': this.y - 30,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleH.style({
        '--x': this.x + 8,
        '--y': this.y - 30,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': 50 * 1.3,
        'z-index': 0
      });
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Rocks.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/rock-smash.wav');
        this.sample.volume = 0.3 + Math.random() * -0.2;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (this.args.gone) {
        return false;
      }

      _get(_getPrototypeOf(Rocks.prototype), "collideA", this).call(this, other, type);

      if (other.occupant || other.args.rolling || other.punching) {
        this.pop(other);
        return false;
      }

      if (type !== 2 && (!this.args.falling || this.args["float"] === -1) && other.args.ySpeed > 0 && other.y < this.y && this.viewport && !this["public"].gone) {
        if (this.args.falling && Math.abs(other.args.ySpeed) > 0) {
          other.args.xSpeed *= -1;
        }

        this.pop(other);
        return false;
      }

      if ((type === 1 || type === 3) && other instanceof _Projectile.Projectile && this.viewport && !this["public"].gone) {
        this.pop(other);
        return false;
      }

      return true;
    } // collideB(other)
    // {
    // 	if(other.args.falling && this.public.gone)
    // 	{
    // 		other.args.ySpeed *= -1;
    // 		other.args.falling = true;
    // 	}
    // 	return false;
    // }

  }, {
    key: "pop",
    value: function pop(other) {
      var _this2 = this;

      this.args.gone = true;
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      var particleA = this.particleA;
      var particleB = this.particleB;
      var particleC = this.particleC;
      var particleD = this.particleD;
      var particleE = this.particleE;
      var particleF = this.particleF;
      var particleG = this.particleG;
      var particleH = this.particleH;
      viewport.particles.add(particleA);
      viewport.particles.add(particleB);
      viewport.particles.add(particleC);
      viewport.particles.add(particleD);
      viewport.particles.add(particleE);
      viewport.particles.add(particleF);
      viewport.particles.add(particleG);
      viewport.particles.add(particleH);
      setTimeout(function () {
        viewport.particles.remove(particleA);
        viewport.particles.remove(particleB);
        viewport.particles.remove(particleC);
        viewport.particles.remove(particleD);
        viewport.particles.remove(particleE);
        viewport.particles.remove(particleF);
        viewport.particles.remove(particleG);
        viewport.particles.remove(particleH);
      }, 2500);
      this.onNextFrame(function () {
        return viewport.actors.remove(_this2);
      });
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.args.gone;
    }
  }]);

  return Rocks;
}(_PointActor2.PointActor);

exports.Rocks = Rocks;
});

;require.register("actor/Sean.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sean = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Sean = /*#__PURE__*/function (_PointActor) {
  _inherits(Sean, _PointActor);

  var _super = _createSuper(Sean);

  function Sean() {
    var _this;

    _classCallCheck(this, Sean);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-sean';
    _this.args.normalHeight = 35;
    _this.args.rollingHeight = 28;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 10;
    _this.args.height = 35;
    return _this;
  }

  _createClass(Sean, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Sean.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this["public"].rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
            this.box.setAttribute('data-animation', 'standing');
          }
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Sean.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Sean;
}(_PointActor2.PointActor);

exports.Sean = Sean;
});

;require.register("actor/Seymour.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Seymour = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Seymour = /*#__PURE__*/function (_PointActor) {
  _inherits(Seymour, _PointActor);

  var _super = _createSuper(Seymour);

  function Seymour() {
    var _this;

    _classCallCheck(this, Seymour);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-seymour';
    _this.args.normalHeight = 44;
    _this.args.rollingHeight = 23;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 44;
    return _this;
  }

  _createClass(Seymour, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Seymour.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this["public"].rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
            this.box.setAttribute('data-animation', 'standing');
          }
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Seymour.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Seymour;
}(_PointActor2.PointActor);

exports.Seymour = Seymour;
});

;require.register("actor/Signpost.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Signpost = void 0;

var _CharacterString = require("../ui/CharacterString");

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Signpost = /*#__PURE__*/function (_PointActor) {
  _inherits(Signpost, _PointActor);

  var _super = _createSuper(Signpost);

  function Signpost() {
    var _this;

    _classCallCheck(this, Signpost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-signpost';
    _this.args.width = 48;
    _this.args.height = 256;
    _this.args.active = false;
    _this.args.follow = false;
    return _this;
  }

  _createClass(Signpost, [{
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (!other.controllable || this.args.active) {
        return;
      }

      this.viewport.onFrameOut(120, function () {
        return _this2.box.setAttribute('data-cleared-by', other.args.name);
      });
      this.viewport.onFrameOut(30, function () {
        return other.args.rolling = false;
      });
      this.viewport.onFrameOut(180, function () {
        return _this2.viewport.clearAct("".concat(other.args.name, " GOT THROUGH ").concat(_this2.viewport.args.actName));
      });
      this.viewport.onFrameOut(540, function () {
        _this2.args.charStrings = [];
        other.args.ignore = 0;
        _this2.args.follow = false;

        if (!_this2.args.boss) {
          return;
        }
      });
      this.viewport.onFrameOut(600, function () {
        var boss = _this2.viewport.actorsById[_this2.args.boss];

        _this2.viewport.auras.add(boss);

        boss.args.x = _this2.x + (_this2.x < 125000 ? 768 : -768);
        boss.args.y = _this2.y - 160;
        boss.args.phase = 'intro';
        other.args.clearSpeed = 0;
      });
      var time = (this.viewport.args.frameId - this.viewport.args.startFrameId) / 60;
      var minutes = String(Math.floor(Math.abs(time) / 60)).padStart(2, '0');
      var seconds = String(Math.trunc(Math.abs(time) % 60)).padStart(2, '0');
      var neg = time < 0 ? '-' : '';

      if (neg) {
        minutes = Number(minutes);
      }

      var yardsPerFrame = (other["public"].gSpeed || other["public"].xSpeed) / 32;
      var feetPerSecond = yardsPerFrame * 60 * 3;
      other.args.clearSpeed = feetPerSecond;
      this.args.charStrings = [new _CharacterString.CharacterString({
        value: "Speed: ".concat(feetPerSecond.toFixed(2), " ft/sec")
      })];
      this.args.falling = true;
      this.args.active = true;
      this.args.follow = true;
      this.args.xSpeed = (other.args.gSpeed || other.args.xSpeed) * 1.1;
      this.args.ySpeed = -7;
      this.args.y--;
      other.args.ignore = -1;
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (this.args.follow) {
        var toX = Math.max(this.x, this.viewport.controlActor.x + -160);

        if (toX !== this.x) {
          if (!this.args.falling) {
            var dustParticle = new _Tag.Tag("<div class = \"particle-dust\">");
            var dustPoint = this.rotatePoint(this.args.gSpeed, 0);
            dustParticle.style({
              '--x': dustPoint[0] + this.x + -4,
              '--y': dustPoint[1] + this.y,
              'z-index': 0,
              opacity: Math.random() * 2
            });
            this.viewport.particles.add(dustParticle);
            this.viewport.onFrameOut(30, function () {
              return _this3.viewport.particles.remove(dustParticle);
            });
          }

          this.args.x = toX;
        }
      }

      _get(_getPrototypeOf(Signpost.prototype), "update", this).call(this);
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return Signpost;
}(_PointActor2.PointActor);

exports.Signpost = Signpost;
});

;require.register("actor/SnowBoard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnowBoard = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SnowBoard = /*#__PURE__*/function (_Vehicle) {
  _inherits(SnowBoard, _Vehicle);

  var _super = _createSuper(SnowBoard);

  function SnowBoard() {
    var _this;

    _classCallCheck(this, SnowBoard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust('particle-dust behind'));

    _this.args.type = 'actor-item actor-snow-board';
    _this.args.width = 32;
    _this.args.height = 24;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 15;
    _this.args.decel = 0.25;
    _this.args.accel = 0.75;
    _this.args.gravity = 0.75; // this.args.ignore    = -1;

    _this.args.seatHeight = 1;
    _this.args.skidTraction = 0.5;
    _this.args.jumpForce = 9.5;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    _this.ridingAnimation = 'grinding'; // this.alwaysSkidding  = true;

    _this.dustDist = -16;
    _this.dustFreq = 1;
    _this.broad = true;
    _this.slowSpin = true;
    return _this;
  }

  _createClass(SnowBoard, [{
    key: "update",
    value: function update() {
      this.originalSpeed = this["public"].gSpeed || this["public"].xSpeed;

      _get(_getPrototypeOf(SnowBoard.prototype), "update", this).call(this);

      if (this.occupant) {
        this.args.z = this.occupant.args.z - 1;
      }

      if (this["public"].gSpeed !== 0 || this["public"].xSpeed !== 0) {
        this.sprite.classList.add('moving');
        this.args.started = true;
      }
    }
  }, {
    key: "doJump",
    value: function doJump(force) {
      _get(_getPrototypeOf(SnowBoard.prototype), "doJump", this).call(this, force);

      this.args.groundAngle += Math.PI * 0.125 * Math.sign(this.args.gSpeed || this.args.direction);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return SnowBoard;
}(_Vehicle2.Vehicle);

exports.SnowBoard = SnowBoard;
});

;require.register("actor/Sonic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sonic = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

var _Twist = require("../effects/Twist");

var _Pinch = require("../effects/Pinch");

var _Png = require("../sprite/Png");

var _Ring = require("./Ring");

var _Spring = require("./Spring");

var _FireSheild = require("../powerups/FireSheild");

var _BubbleSheild = require("../powerups/BubbleSheild");

var _ElectricSheild = require("../powerups/ElectricSheild");

var _GrindingRegion = require("../region/GrindingRegion");

var _SkidDust = require("../behavior/SkidDust");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MODE_FLOOR = 0;
var MODE_LEFT = 1;
var MODE_CEILING = 2;
var MODE_RIGHT = 3;

var Sonic = /*#__PURE__*/function (_PointActor) {
  _inherits(Sonic, _PointActor);

  var _super = _createSuper(Sonic);

  function Sonic() {
    var _this;

    _classCallCheck(this, Sonic);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "png", new _Png.Png('/Sonic/sonic.png'));

    window.sonic = _assertThisInitialized(_this);

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-sonic actor-item';
    _this.accelNormal = 0.20;
    _this.accelSuper = 0.40;
    _this.springing = false;
    _this.args.boltCount = 0;
    _this.args.accel = 0.20;
    _this.args.decel = 0.45;
    _this.gSpeedMaxNormal = 18;
    _this.gSpeedMaxSuper = 23;
    _this.jumpForceNormal = 11.5;
    _this.jumpForceSuper = 16;
    _this.args.gSpeedMax = _this.gSpeedMaxNormal;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.gravity = 0.5;
    _this.args.width = 16;
    _this.args.height = 40;
    _this.args.lookTime = 0;
    _this.args.normalHeight = 40;
    _this.args.rollingHeight = 28;
    _this.sparks = new Set();
    _this.spindashCharge = 0;
    _this.dropDashCharge = 0;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.dashed = false;
    _this.airControlCard = _View.View.from(require('../cards/sonic-air-controls.html'));
    _this.controlCard = _View.View.from(require('../cards/sonic-controls.html'));
    _this.moveCard = _View.View.from(require('../cards/basic-moves.html'));
    _this.args.spriteSheet = _this.spriteSheet = '/Sonic/sonic.png';
    _this.sampleRingLoss = new Audio('/Sonic/ring-loss.wav');
    _this.sampleBoltDash = new Audio('/Sonic/S3K_4E.wav');

    _this.args.bindTo('falling', function (v) {
      if (v) {
        return;
      }

      if (_this.willStick && (_this.args.mode === 1 || _this.args.mode === 3)) {
        _this.args.wallSticking = true;

        _this.onNextFrame(function () {
          _this.dashed = false;
        });
      } else {
        _this.onNextFrame(function () {
          _this.args.wallSticking = false;
        });
      }
    });

    return _this;
  }

  _createClass(Sonic, [{
    key: "onAttached",
    value: function onAttached(event) {
      var _this2 = this;

      if (!this.superSpriteSheet) {
        this.png.ready.then(function () {
          var newPng = _this2.png.recolor({
            '8080e0': 'e0e080',
            '6060c0': 'e0e000',
            '4040a0': 'e0e001',
            '202080': 'a0a000'
          });

          _this2.superSpriteSheet = newPng.toUrl();
        });
      }
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      if (this.args.grinding && this.args.falling && this.args.ySpeed > 0) {
        this.args.animation = 'airdash';
        this.args.grinding = false;
      }

      _get(_getPrototypeOf(Sonic.prototype), "updateStart", this).call(this);

      if (this.args.dead) {
        this.args.animation = 'dead';
        return;
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (this.args.dead) {
        this.args.animation = 'dead';

        _get(_getPrototypeOf(Sonic.prototype), "update", this).call(this);

        return;
      }

      if (this.isSuper) {
        if (this.viewport.args.frameId % 60 === 0) {
          if (this.args.rings > 0) {
            this.args.rings--;
          } else {
            this.isSuper = false;
            this.setProfile();
          }
        }
      }

      if (this.args.falling) {
        if (this.args.wallSticking && !this.dashed) {
          if (this.args.mode === 1) {
            this.args.direction = -1;
            this.args.facing = 'left';
          } else if (this.args.mode === 3) {
            this.args.direction = 1;
            this.args.facing = 'right';
          }

          this.args.animation = 'wall-dropping';
          this.args.wallDropping = true;
          this.args.groundAngle = 0;
          this.args.ignore = 30;
        }

        this.args.wallSticking = false;

        if (this.springing && this.args.ySpeed >= 0) {
          this.args.groundAngle = 0;
          this.args.animation = 'dropping';
        }
      } else {
        if (this.springing) {
          this.args.groundAngle = 0;
        }

        this.springing = false;
        this.doubleSpin = this.dashed = false;

        if (this.args.mode % 2 === 0) {
          this.args.wallSticking = false;
        }

        if (!this.args.wallSticking) {
          this.willStick = false;
        }

        this.pincherBg.args.scale = 0;
      }

      if (this.lightDashingCoolDown > 0) {
        this.lightDashingCoolDown--;
      }

      if (this.dashTimer > 0) {
        this.dashTimer--;
      }

      var falling = this.args.falling;

      if (this.args.wallSticking) {
        this.args.animation = 'wall-stick';
        var slip = 2;

        if (this.yAxis > 0) {
          slip = 6;
        } else if (this.yAxis < 0) {
          this.stayStuck = true;
          slip = 0;
        }

        if (this.args.mode === 1) {
          this.args.facing = 'left';
          this.args.direction = 1;

          if (Math.abs(this.args.gSpeed) < slip) {
            this.args.gSpeed += 1;
          } else {
            this.args.gSpeed = slip;
          }
        } else if (this.args.mode === 3) {
          this.args.facing = 'right';
          this.args.direction = -1;

          if (Math.abs(this.args.gSpeed) < slip) {
            this.args.gSpeed -= 1;
          } else {
            this.args.gSpeed = -slip;
          }
        }
      } else if (this.lightDashing) {
        var direction = Math.sign(this.args.xSpeed) || Math.sign(this.args.gSpeed);

        if (direction < 0) {
          this.args.animation = 'lightdash-back';
        } else if (direction > 0) {
          this.args.animation = 'lightdash';
        }

        if (falling) {
          this.args.direction = Math.sign(this.args.xSpeed) || this.args.direction;
          this.args.mode = MODE_FLOOR;
        }
      } else if (!falling) {
        var _direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;
        this.args.height = this.args.normalHeight;

        if (this.spindashCharge) {
          this.args.animation = 'spindash';
        } else if (!this.args.rolling) {
          if (Math.sign(_direction) && Math.sign(gSpeed) && Math.sign(gSpeed) !== Math.sign(_direction)) {
            this.args.animation = 'skidding';
          } else if (this.args.moving && speed > maxSpeed * 0.45) {
            if (this.isSuper && this.args.moving && speed > maxSpeed * 0.95) {
              this.args.animation = 'dash';
            } else {
              this.args.animation = 'running';
            }
          } else if (this.args.moving && this.args.gSpeed) {
            this.args.animation = 'walking';
          } else {
            if (this.yAxis > 0.5 && !this.args.ignore) {
              this.args.animation = 'crouching';
              this.args.lookTime--;

              if (this.args.lookTime < -45) {
                this.args.cameraBias = -0.5;
              }
            } else if (this.yAxis < -0.5 && !this.args.ignore) {
              this.args.animation = 'looking-up';
              this.args.lookTime++;

              if (this.args.lookTime > 45) {
                this.args.cameraBias = 0.25;
              }
            } else {
              this.args.animation = 'standing';
              this.args.cameraBias = 0;
              this.args.lookTime = 0;
            }
          }
        }

        if (!this.spindashCharge && this.dashDust) {
          this.dashDust.remove();
          this.dashDust = null;
        }

        if (this.dropDashCharge) {
          this.args.animation = 'spindash';
        }
      } else if (!this.dashed) {
        this.args.height = this.args.rollingHeight;

        if (this.args.jumping) {
          this.args.animation = 'jumping';
        } else if (!this.args.xSpeed && !this.args.ySpeed) {// this.box.setAttribute('data-animation', 'airdash');
        }
      } else if (falling && !this.args.jumping && this.isSuper && this.args.ySpeed > 0) {
        this.args.animation = 'dropping';
      }

      if (this.args.hangingFrom) {
        this.args.animation = 'hanging';
      }

      if (this.args.rolling) {
        if (this.args.animation !== 'spindash') {
          this.args.animation = 'rolling';
        } else {
          this.viewport.onFrameOut(8, function () {
            return _this3.args.animation = 'rolling';
          });
          this.args.animation = 'spindash';
        }
      }

      if (this.skidding && !this.args.rolling && !this.args.falling && !this.spindashCharge) {
        this.args.xOff = 8 * -this.args.direction;
        this.args.yOff = 32;
        var warp = -this.args.gSpeed * 15;

        if (Math.abs(warp) > 120) {
          warp = 120 * Math.sign(warp);
        }

        this.twist(warp);
      } else if (!this.spindashCharge) {
        this.twister && (this.twister.args.scale = 0);
      }

      if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.args.animation = this.args.standingOn.ridingAnimation || 'standing';
      }

      if (this.args.grinding && !this.args.falling) {
        var sparkParticle = new _Tag.Tag("<div class = \"particle-sparks\">");
        var sparkEnvelope = new _Tag.Tag("<div class = \"envelope-sparks\">");
        sparkEnvelope.appendChild(sparkParticle.node);
        var sparkPoint = this.rotatePoint(-this.args.gSpeed * 1.75 * this.args.direction, 8);
        var flip = Math.sign(this.args.gSpeed);
        sparkEnvelope.style({
          '--x': sparkPoint[0] + this.x,
          '--y': sparkPoint[1] + this.y + Math.random * -3,
          'z-index': 0,
          'animation-delay': -Math.random() * 0.25 + 's',
          '--xMomentum': Math.max(Math.abs(this.args.gSpeed), 4) * flip,
          '--flip': flip,
          '--angle': this.realAngle,
          opacity: Math.random() * 2
        });
        sparkEnvelope.particle = sparkParticle;
        this.viewport.particles.add(sparkEnvelope);
        this.sparks.add(sparkEnvelope);
        this.viewport.onFrameOut(30, function () {
          _this3.viewport.particles.remove(sparkEnvelope);

          _this3.sparks["delete"](sparkEnvelope);
        });
      }

      if (this.pincherBg) {
        this.pincherBg.args.scale *= 0.875; // this.pincherFg.args.scale *= 0.875;

        if (Math.abs(this.pincherBg.args.scale) < 0.001) {
          this.pincherBg.args.scale = 0; // this.pincherFg.args.scale = 0;
        }
      } else {
        this.pinch(0, 0);
      }

      if (!this.twister) {
        this.twist(0);
      }

      if (this.args.grinding) {
        this.args.rolling = false;
        this.args.animation = 'grinding';
      }

      _get(_getPrototypeOf(Sonic.prototype), "update", this).call(this);

      if (this.args.boltDash) {
        this.dimmer = this.dimmer || new _Tag.Tag('<div class = "particle particle-dimmer">');
        var boltParticle = new _Tag.Tag('<div class = "particle particle-bolt">');

        var _speed = this.args.falling ? this.args.airSpeed : this.args.gSpeed;

        var boltPoint = this.rotatePoint(_speed < 0 ? 8 : -8, this.args.falling ? this.dashed ? _speed < 0 ? 28 : 32 : 14 : 28);
        this.dimmer.style({
          '--x': this.x + boltPoint[0],
          '--y': this.y + boltPoint[1]
        });
        this.args.boltCount++;

        var _direction2 = Math.sign(this.args.gSpeed || this.args.xSpeed);

        boltParticle.attr({
          'data-direction': _direction2
        });
        boltParticle.style({
          '--x': this.x + boltPoint[0],
          '--y': this.y + boltPoint[1],
          '--index': this.args.boltCount,
          '--direction': _direction2,
          '--mod': this.viewport.args.frameId % 4,
          '--wipe': Math.abs(_speed),
          '--angle': this.args.falling ? this.args.airAngle : this.realAngle,
          '--dashCharge': 0
        });
        this.viewport.particles.add(boltParticle);

        if (Math.abs(_speed) < 20 && this.args.falling) {
          this.args.boltDash = false;
        }

        this.viewport.particles.add(this.dimmer);
        this.viewport.onFrameOut(30, function () {
          _this3.viewport.particles.remove(boltParticle);
        });
      }

      if (_toConsumableArray(this.regions).filter(function (r) {
        return r.isWater;
      }).length && !this.checkBelow(this.x, this.y + 16) && this.args.falling && this.dashed) {
        if (this.yAxis < 0) {
          this.args.xSpeed = this.args.xSpeed * 0.95;
          this.args.ySpeed -= Math.abs(this.args.xSpeed) * 0.05;
        }

        if (this.yAxis > 0) {
          this.args.xSpeed += Math.abs(this.args.ySpeed) * 0.05 * Math.sign(this.args.xSpeed);
          this.args.ySpeed = this.args.ySpeed * 0.95;
        }
      }

      if (this.args.grinding && !this.args.falling && this.args.gSpeed) {
        var _iterator = _createForOfIteratorHelper(this.sparks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var spark = _step.value;

            var _sparkPoint = this.rotatePoint(1.75 * this.args.direction, 8);

            spark.style({
              opacity: Math.random() * 2,
              '--x': _sparkPoint[0] + this.x,
              '--y': _sparkPoint[1] + this.y
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }, {
    key: "readInput",
    value: function readInput() {
      if (!this.lightDashing) {
        _get(_getPrototypeOf(Sonic.prototype), "readInput", this).call(this);
      }
    }
  }, {
    key: "airDash",
    value: function airDash(direction) {
      var _this4 = this;

      if (this.dashed || this.args.ignore && this.args.ignore !== -2) {
        return;
      }

      var dashSpeed = direction * 13;

      if (this.args.wallSticking) {
        this.args.x += dashSpeed;
        dashSpeed = direction * 21;
      }

      this.args.mode = 0;
      this.args["float"] = 2;
      this.args.rolling = false;
      this.args.height = this.args.normalHeight;

      if (this.args.xSpeed && Math.sign(this.args.xSpeed) !== Math.sign(direction)) {
        dashSpeed = direction * 18;
        this.args["float"] = 6;
        this.args.xSpeed = 0;
      }

      this.args.falling = true;
      var finalSpeed = this.args.xSpeed + dashSpeed;
      var space = this.scanForward(dashSpeed * direction, 0.5);

      if (space && Math.abs(finalSpeed) > Math.abs(space)) {
        dashSpeed = space * Math.sign(finalSpeed);
      }

      this.args.animation = 'rolling';
      this.viewport.onFrameOut(3, function () {
        return _this4.args.animation = 'airdash';
      });
      this.args.xSpeed = finalSpeed;
      this.args.ySpeed = 0;
      this.args.gSpeed = 0;
      this.dashTimer = 0;
      this.dashed = true;
      this.args.mode = 0;
      this.args.groundAngle = 0;
    }
  }, {
    key: "command_0",
    value: function command_0() {
      this.dropDashCharge = 0;

      if (this.args.jumping && !this.dashed && !this.doubleSpin) {
        this.doubleSpin = true;
        this.args.xOff = 0;
        this.args.yOff = 32;
        this.pinch(-400, 50);
      }

      _get(_getPrototypeOf(Sonic.prototype), "command_0", this).call(this);
    }
  }, {
    key: "command_4",
    value: function command_4() {
      if (this.args.ignore) {
        return;
      }

      if (this.args.falling) {
        this.airDash(-1);
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "hold_4",
    value: function hold_4(button) {
      if (this.args.ignore) {
        return;
      }

      if (this.args.jumping || this.dashed) {
        this.dropDashCharge = 0;
        this.willStick = 2;
        this.stayStuck = true;
      }

      if (this.args.mode === 2) {
        this.stayStuck = false;
        this.args.falling = true;
      }
    }
  }, {
    key: "release_4",
    value: function release_4() {
      var _this5 = this;

      this.onNextFrame(function () {
        _this5.willStick = false;
        _this5.stayStuck = false;
      });

      if (this.args.wallSticking && !this.dashed) {
        this.args.falling = true;
        this.args.ySpeed = 0;
        var mode = this.args.mode;
        this.airDash(mode === 1 ? 1 : -1);
        this.args.facing = mode === 1 ? 'left' : 'right';
        this.args.mode = 0;
        this.dashed = true;
      }
    }
  }, {
    key: "command_5",
    value: function command_5() {
      if (this.args.ignore) {
        return;
      }

      if (this.args.falling) {
        this.airDash(1);
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "hold_5",
    value: function hold_5(button) {
      if (this.args.ignore) {
        return;
      }

      if (this.args.jumping || this.dashed && this.args.mode !== 2) {
        this.dropDashCharge = 0;
        this.willStick = 2;
        this.stayStuck = true;
      }

      if (this.args.mode === 2) {
        this.stayStuck = false;
        this.args.falling = true;
      }
    }
  }, {
    key: "release_5",
    value: function release_5() {
      var _this6 = this;

      this.onNextFrame(function () {
        _this6.willStick = false;
        _this6.stayStuck = false;
      });

      if (this.args.wallSticking && !this.dashed) {
        this.args.falling = true;
        this.args.ySpeed = 0;
        var mode = this.args.mode;
        this.airDash(mode === 1 ? 1 : -1);
        this.args.facing = mode === 1 ? 'left' : 'right';
        this.args.mode = 0;
        this.dashed = true;
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      var _this7 = this;

      if (this.args.ignore) {
        return;
      }

      if (this.args.wallSticking) {
        this.doJump(0);
      }

      if (this.args.gSpeed && !this.args.falling && !this.args.rolling) {
        this.args.rolling = true;

        var standOrRecheck = function standOrRecheck() {
          var backOfHead = [_this7.args.width / 2, _this7.args.height + 4]; // const actualBackOfHead = this.rotatePoint(...backOfHead);

          var solid = _this7.getMapSolidAt(_this7.x - backOfHead[0], _this7.y - backOfHead[1]);

          if (solid) {
            _this7.viewport.onFrameOut(40, standOrRecheck);

            _this7.args.gSpeed = _this7.args.direction * 4;
            _this7.args.rolling = true;
            return;
          }

          _this7.args.rolling = false;
        };

        this.viewport.onFrameOut(20, standOrRecheck);
      }
    }
  }, {
    key: "release_1",
    value: function release_1() // spindash
    {
      this.dropDashCharge = 0;

      if (!this.spindashCharge) {
        return;
      }

      var direction = this.args.direction;
      var dashPower = this.spindashCharge / 40;

      if (dashPower > 1) {
        dashPower = 1;
      }

      this.args.rolling = true;
      var dashBoost = dashPower * 32;

      if (Math.sign(direction) !== Math.sign(dashBoost)) {
        this.args.gSpeed = dashBoost * Math.sign(direction);
      } else {
        this.args.gSpeed += dashBoost * Math.sign(direction);
      }

      this.spindashCharge = 0;

      if (this.dashDust) {
        this.dashDust.remove();
      }
    }
  }, {
    key: "hold_1",
    value: function hold_1(button) // spindash
    {
      if (this.args.ignore) {
        return;
      }

      if (this.args.jumping) {
        if (this.dropDashCharge < 20) {
          this.dropDashCharge++;
          return;
        }
      }

      if (this.dropDashCharge) {
        return;
      }

      if (this.args.falling || this.willJump || this.args.gSpeed) {
        this.spindashCharge = 0;
        return;
      }

      this.args.ignore = 1;
      var dashCharge = this.spindashCharge / 20;

      if (dashCharge > 1) {
        dashCharge = 1;
      }

      if (this.spindashCharge === 0) {
        this.spindashCharge = 1;
        var viewport = this.viewport;
        var dustParticle = new _Tag.Tag('<div class = "particle-spindash-dust">');
        var dustPoint = this.rotatePoint(0, 0);
        dustParticle.style({
          '--x': dustPoint[0] + this.x,
          '--y': dustPoint[1] + this.y,
          '--direction': this.args.direction,
          '--dashCharge': 0
        });

        if (this.args.direction < 0) {
          dustParticle.setAttribute('data-facing', 'left');
        } else if (this.args.direction > 0) {
          dustParticle.setAttribute('data-facing', 'right');
        }

        viewport.particles.add(dustParticle.node);
        this.dashDust = dustParticle;
      } else if (this.dashDust) {
        this.dashDust.style({
          '--dashCharge': dashCharge
        });
      }

      if (this.viewport.args.frameId % 3 === 0) {
        this.spindashCharge++;
      }

      this.args.xOff = 5 * -this.args.direction;
      this.args.yOff = 32;
      this.twist(120 * dashCharge * this.args.direction);
      this.args.animation = 'spindash';

      if (this.args.direction < 0) {
        this.args.facing = 'left';
      } else if (this.args.direction > 0) {
        this.args.facing = 'right';
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      if (!this.args.falling) {
        return;
      }

      if (this.lightDashing) {
        return;
      }

      if (this.lightDashingCoolDown > 0) {
        return;
      }

      var ring = this.findDashableRing(48);

      if (ring) {
        this.lightDash(ring);
        this.lightDashingCoolDown = 9;
        return;
      }
    }
  }, {
    key: "command_2",
    value: function command_2() {
      var _this8 = this;

      this.onNextFrame(function () {
        var speed = _this8.args.falling ? _this8.args.airSpeed : _this8.args.gSpeed;

        if (_this8.isSuper && !_this8.lightDashing && !_this8.args.boltDash && Math.abs(speed) > 6) {
          var xSpeed = _this8.args.xSpeed;
          var ySpeed = _this8.args.ySpeed;
          var gSpeed = _this8.args.gSpeed;

          if (!_this8.args.falling) {
            _this8.args.gSpeed *= 3;
            _this8.args.gSpeed = Math.max(-128, Math.min(_this8.args.gSpeed, 128));
          } else {
            _this8.args.xSpeed = Math.max(-64, Math.min(_this8.args.xSpeed, 64));
            _this8.args.ySpeed = Math.max(-64, Math.min(_this8.args.ySpeed, 64));
            _this8.args["float"] = 5;
            _this8.args.xSpeed *= 5;
            _this8.args.ySpeed *= 5;
          }

          _this8.args.boltCount = 0;
          _this8.args.boltDash = true;

          if (_this8.viewport.args.audio) {
            _this8.sampleBoltDash.currentTime = 0;

            _this8.sampleBoltDash.play();
          }

          _this8.args.opacity = 0;

          _this8.viewport.onFrameOut(35, function () {
            _this8.args.opacity = 1;
            _this8.args.boltDash = false;
            _this8.args.xSpeed = _this8.args.xSpeed ? xSpeed : 0;
            _this8.args.ySpeed = _this8.args.ySpeed ? ySpeed : 0;
            _this8.args.gSpeed = _this8.args.gSpeed ? gSpeed : 0;
            _this8.dimmer && _this8.viewport.particles.remove(_this8.dimmer);
            _this8.dimmer = false;
          });
        }
      });
    }
  }, {
    key: "release_2",
    value: function release_2() {
      if (!this.args.boltDash) {
        return;
      }

      this.args.opacity = 1;
      this.args.boltDash = false;
      this.args.xSpeed /= 2;
      this.args.ySpeed /= 2;
      this.args.gSpeed /= 3;
      this.dimmer && this.viewport.particles.remove(this.dimmer);
      this.dimmer = false;
    }
  }, {
    key: "command_3",
    value: function command_3() {
      var _this9 = this;

      if (this.args.ignore && !this.isSuper) {
        return;
      }

      this.isSuper = !this.isSuper;
      this.onTimeout(150, function () {
        if (_this9.args.rings === 0) {
          _this9.isSuper = false;

          _this9.setProfile();
        }

        ;
      });
      this.setProfile();
    }
  }, {
    key: "setProfile",
    value: function setProfile() {
      if (this.isSuper) {
        this.args.spriteSheet = this.superSpriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxSuper;
        this.args.jumpForce = this.jumpForceSuper;
        this.args.accel = this.accelSuper;
      } else {
        this.args.spriteSheet = this.spriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxNormal;
        this.args.jumpForce = this.jumpForceNormal;
        this.args.accel = this.accelNormal;
      }
    }
  }, {
    key: "findNearestRing",
    value: function findNearestRing() {
      return this.findDashableRing(64);
    }
  }, {
    key: "findDashableRing",
    value: function findDashableRing() {
      var _this10 = this;

      var maxDist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;

      var findRing = function findRing(actor) {
        if (!(actor instanceof _Ring.Ring)) {
          return false;
        }

        var direction = Math.sign(_this10.args.xSpeed);

        if (direction > 0 && actor.x < _this10.x) {
          return false;
        }

        if (direction < 0 && actor.x > _this10.x) {
          return false;
        }

        return true;
      };

      var ring = this.findNearestActor(findRing, maxDist);

      if (!ring) {
        return;
      }

      var nextRing = ring.findNearestActor(findRing, maxDist);

      if (!nextRing) {
        return;
      }

      var firstAngle = Math.atan2(this.y - ring.y, this.x - ring.x);
      var secondAngle = Math.atan2(ring.y - nextRing.y, ring.x - nextRing.x);

      if (Math.abs(firstAngle - secondAngle) > Math.PI / 2) {
        return;
      }

      return ring;
    }
  }, {
    key: "lightDash",
    value: function lightDash(ring) {
      if (!this.args.falling) {
        this.lightDashing = false;
        return false;
      }

      var currentAngle;
      this.spindashCharge = 0;
      var angle = Math.atan2(ring.y - this.y, ring.x - this.x);
      currentAngle = this.args.groundAngle;
      var angleDiff = Math.abs(currentAngle - angle);
      var dashSpeed = this.distanceFrom(ring) * 4 * (Math.PI / 2 / angleDiff);
      var maxDash = 55;

      if (dashSpeed > maxDash) {
        dashSpeed = maxDash;
      }

      var space = this.scanForward(dashSpeed, 0.5);

      if (space && dashSpeed > space) {
        dashSpeed = space;
      }

      var direction = Math.sign(this.args.xSpeed) || Math.sign(this.args.gSpeed);

      if (this.args.direction < 0) {
        this.args.animation = 'lightdash-back';
      } else if (this.args.direction > 0) {
        this.args.animation = 'lightdash';
      }

      var breakGroundAngle = Math.PI / 4;
      this.args.airAngle = angle;
      this.lightDashing = true;
      this.args.xSpeed = dashSpeed * Math.cos(angle) * 0.5;
      this.args.ySpeed = dashSpeed * Math.sin(angle) * 0.5;
      this.lightDashTimeout();
    }
  }, {
    key: "collect",
    value: function collect(pickup) {
      _get(_getPrototypeOf(Sonic.prototype), "collect", this).call(this, pickup);

      if (pickup instanceof _Ring.Ring) {
        if (this.lightDashing) {
          var ring = this.findNearestActor(function (actor) {
            return actor instanceof _Ring.Ring;
          }, 128);

          if (ring) {
            // this.args.x = pickup.x;
            // this.args.y = pickup.y;
            this.lightDash(ring);
          } else {
            this.lightDashing = false;
            this.args["float"] = 0;
          }
        }
      }
    }
  }, {
    key: "lightDashTimeout",
    value: function lightDashTimeout() {
      var _this11 = this;

      if (this.clearLightDash) {
        this.clearTimeout(this.clearLightDash);
        this.clearLightDash = false;
      }

      this.clearLightDash = this.onTimeout(150, function () {
        _this11.clearLightDash = false;
        _this11.lightDashing = false;
        _this11.args["float"] = 0;
      });
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      if (this.args.boltDash) {
        this.args.cameraMode = 'draggable';
      } else if (this.args.wallSticking) {
        this.args.cameraMode = 'aerial';
      } else {
        _get(_getPrototypeOf(Sonic.prototype), "setCameraMode", this).call(this);
      }
    }
  }, {
    key: "startle",
    value: function startle() {
      var _this12 = this;

      _get(_getPrototypeOf(Sonic.prototype), "startle", this).call(this);

      this.onNextFrame(function () {
        return _this12.args.animation = 'skidding';
      });
    }
  }, {
    key: "die",
    value: function die() {
      var _this13 = this;

      _get(_getPrototypeOf(Sonic.prototype), "die", this).call(this);

      this.onNextFrame(function () {
        return _this13.args.animation = 'dead';
      });
    }
  }, {
    key: "loseRings",
    value: function loseRings() {
      _get(_getPrototypeOf(Sonic.prototype), "loseRings", this).call(this);

      if (this.viewport.args.audio && this.sampleRingLoss) {
        this.sampleRingLoss.volume = 0.15 + Math.random() * -0.05;
        this.sampleRingLoss.play();
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this14 = this;

      if (other instanceof _Spring.Spring) {
        this.onNextFrame(function () {
          _this14.springing = true;
          _this14.args.animation = 'springdash';
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return !this.args.wallSticking;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }, {
    key: "facePoint",
    get: function get() {
      if (this.args.wallSticking) {
        return this.rotatePoint(0, -5);
      }

      return _get(_getPrototypeOf(Sonic.prototype), "facePoint", this);
    }
  }, {
    key: "crossRegionBoundary",
    value: function crossRegionBoundary(region, entered) {
      if (region instanceof _GrindingRegion.GrindingRegion) {
        if (!entered) {
          if (this.args.falling) {
            this.args.animation = 'springdash';
          } else {
            this.args.grinding = false;
          }
        }
      }

      _get(_getPrototypeOf(Sonic.prototype), "crossRegionBoundary", this).call(this, region, entered);
    }
  }]);

  return Sonic;
}(_PointActor2.PointActor);

exports.Sonic = Sonic;
});

;require.register("actor/Spikes.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spikes = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Spikes = /*#__PURE__*/function (_PointActor) {
  _inherits(Spikes, _PointActor);

  var _super = _createSuper(Spikes);

  function Spikes(args, parent) {
    var _this;

    _classCallCheck(this, Spikes);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-spikes';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.args.pointing = _this.args.pointing || 0;
    _this.hazard = true;
    return _this;
  }

  _createClass(Spikes, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(Spikes.prototype), "onRendered", this).call(this, event);

      this.autoAttr.get(this.box)['data-pointing'] = 'pointing';
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (type === this.args.pointing) {
        if (this.args.pointing === 3) {
          var speed = other.args.xSpeed || other.args.gSpeed * (other.args.mode === 2 ? -1 : 1);

          if (speed < 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 1) {
          var _speed = other.args.xSpeed || other.args.gSpeed * (other.args.mode === 2 ? -1 : 1);

          if (_speed > 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 2) {
          var _speed2 = other.args.ySpeed || other.args.gSpeed * (other.args.mode === 1 ? -1 : 1);

          if (_speed2 < 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 0) {
          var _speed3 = other.args.ySpeed || other.args.gSpeed * (other.args.mode === 3 ? -1 : 1);

          if (_speed3 >= 0) {
            other.damage(this);
          }
        }
      }

      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Spikes), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);
      return obj;
    }
  }]);

  return Spikes;
}(_PointActor2.PointActor);

exports.Spikes = Spikes;
});

;require.register("actor/Spinner.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Spinner = /*#__PURE__*/function (_PointActor) {
  _inherits(Spinner, _PointActor);

  var _super = _createSuper(Spinner);

  function Spinner() {
    var _this;

    _classCallCheck(this, Spinner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-spinner';
    _this.args.width = 64;
    _this.args.height = 24;
    return _this;
  }

  _createClass(Spinner, [{
    key: "update",
    value: function update() {
      if (!this.sample) {
        this.sample = new Audio('/Sonic/S2_2B.wav');
      }
    }
  }, {
    key: "collideB",
    value: function collideB(other) {
      var toSpeed = 38;
      other.args.ignore = 4;
      other.args.direction = 1;
      other.args.facing = 'right';
      other.args.gSpeed = other.args.gSpeed > toSpeed ? other.args.gSpeed : toSpeed;

      if (this.viewport.args.audio && this.sample) {
        this.sample.currentTime = 0;
        this.sample.volume = 0.5 + Math.random() / 2.5;
        this.sample.play();
      }
    }
  }]);

  return Spinner;
}(_PointActor2.PointActor);

exports.Spinner = Spinner;
});

;require.register("actor/Spring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spring = void 0;

var _PointActor2 = require("./PointActor");

var _Region = require("../region/Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WillSpring = Symbol('WillSpring');

var Spring = /*#__PURE__*/function (_PointActor) {
  _inherits(Spring, _PointActor);

  var _super = _createSuper(Spring);

  function Spring() {
    var _this;

    _classCallCheck(this, Spring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _defineProperty(_assertThisInitialized(_this), "template", "<div\n\t\tclass = \"point-actor actor-item [[type]] [[collType]] [[active]]\"\n\t\tstyle = \"\n\t\t\tdisplay:[[display]];\n\t\t\t--angle:[[angle]];\n\t\t\t--airAngle:[[airAngle]];\n\t\t\t--ground-angle:[[groundAngle]];\n\t\t\t--height:[[height]];\n\t\t\t--width:[[width]];\n\t\t\t--x:[[x]];\n\t\t\t--y:[[y]];\n\t\t\"\n\t\tdata-colliding = \"[[colliding]]\"\n\t\tdata-falling   = \"[[falling]]\"\n\t\tdata-facing    = \"[[facing]]\"\n\t\tdata-angle     = \"[[angle|rad2deg]]\"\n\t\tdata-mode      = \"[[mode]]\"\n\t>\n\t\t<div\n\t\t\tdata-color = \"[[color]]\"\n\t\t\tdata-type  = \"[[base]]\"\n\t\t\tclass      = \"spring-pad\"\n\t\t\tstyle = \"--color:[[color]]deg\"\n\t\t></div>\n\t\t<div class = \"sprite\"></div>\n\t</div>");

    _this.args.type = 'actor-item actor-spring';
    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 32;
    _this.args.color = _this.args.color || 0;
    _this.args["static"] = true;
    return _this;
  }

  _createClass(Spring, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Spring.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/spring-activated.wav');
        this.sample.volume = 0.05 + Math.random() * 0.1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (other instanceof this.constructor) {
        return false;
      }

      _get(_getPrototypeOf(Spring.prototype), "collideA", this).call(this, other);

      if (this["public"].active) {
        return;
      }

      if (other.args.platform) {
        return;
      }

      if (other instanceof _Region.Region) {
        return;
      }

      this.args.active = 'active';

      if (this.viewport.args.audio && this.sample) {
        this.sample.currentTime = 0;
        this.sample.volume = 0.05 + Math.random() * 0.1;
        this.sample.play();
      }

      if (other[WillSpring]) {
        return;
      }

      this.viewport.onFrameOut(5, function () {
        delete other[WillSpring];
        _this2.args.active = null;
      });

      if (other.noClip) {
        return;
      }

      other[WillSpring] = true;
      other.args.gSpeed = 0;
      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      var rounded = this.roundAngle(this.args.angle, 8, true);

      if (other.controller) {
        other.controller.rumble({
          duration: 120,
          strongMagnitude: 1.0,
          weakMagnitude: 1.0
        });
        this.onTimeout(100, function () {
          other.controller.rumble({
            duration: 500,
            strongMagnitude: 0.0,
            weakMagnitude: 0.25
          });
        });
      } // other.args.direction = Math.sign(this.public.gSpeed);


      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      other.args.gSpeed = 0;
      other.args["float"] = 2;
      other.args.x = this.x + Math.cos(rounded) * 16;
      other.args.y = this.y + Math.sin(rounded) * 16;
      other.args.jumping = false;
      other.impulse(this.args.power, rounded, ![0, Math.PI].includes(this.args.angle));

      if (![0, Math.PI].includes(this.args.angle) || other.args.falling || other.args.mode !== 0) {
        other.args.falling = true;
        other.args.gSpeed = 0;
        other.args.mode = 0;
      }

      other.args.xSpeed = Number(Number(Math.cos(rounded) * 1).toFixed(3));
      other.args.ySpeed = Number(Number(Math.sin(rounded) * 1).toFixed(3));
      other.args.ignore = -3;
      this.onNextFrame(function () {
        other.args.groundAngle = 0;

        if (!other.args.falling) {}
      });
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.args.active = null;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Spring), "fromDef", this).call(this, objDef);

      obj.args.angle = Number(obj.args.angle);
      obj.args.width = objDef.width || 32;
      obj.args.height = objDef.height || 32;
      return obj;
    }
  }]);

  return Spring;
}(_PointActor2.PointActor);

exports.Spring = Spring;
});

;require.register("actor/Springboard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Springboard = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Springboard = /*#__PURE__*/function (_PointActor) {
  _inherits(Springboard, _PointActor);

  var _super = _createSuper(Springboard);

  function Springboard() {
    var _this;

    _classCallCheck(this, Springboard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-springboard';
    _this.args.width = 56;
    _this.args.height = 16;
    _this.args.animation = 'idle';
    return _this;
  }

  _createClass(Springboard, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Springboard.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/spring-activated.wav');
        this.sample.currentTime = 0;
        this.sample.volume = 0.05 + Math.random() * 0.1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (!other.controllable || this.args.ignore) {
        return;
      }

      var power = Math.min(1, Math.max(0, 1 + (-this.x + -26 + other.x) / 56));

      if (power < 0.5) {
        power *= 0.5;
      }

      this.args.animation = 'depressed';

      if (other.args.jumping && this.args.animation !== 'idle' && other.args.ySpeed < 0) {
        this.args.ignore = 6;
        this.args.animation = 'idle';
        var xSpeed = Math.max(other.args.gSpeed / 2, other.args.xSpeed);
        this.onNextFrame(function () {
          other.args.xSpeed = xSpeed;
          other.args.ySpeed += -12 * power;
        });

        if (this.viewport && this.viewport.args.audio && this.sample) {
          this.sample.volume = 0.05 + power * 0.3;
          this.sample.currentTime = 0;
          this.sample.play();
          console.log('A', power);
        }
      }

      if (-this.x + other.x <= -26) {
        this.args.animation = 'idle';
      }

      if ((-this.x + other.x >= 26 || Math.abs(other.args.gSpeed) > 13) && other.args.mode === 0) {
        this.args.ignore = 6;

        var _xSpeed = Math.max(other.args.gSpeed / 2, other.args.xSpeed);

        this.onNextFrame(function () {
          other.args.falling = true;
          other.args.xSpeed = _xSpeed;
          other.args.ySpeed = -8;
        });
        this.viewport.onFrameOut(5, function () {
          return _this2.args.animation = 'idle';
        });

        if (this.viewport && this.viewport.args.audio && this.sample) {
          this.sample.volume = 0.05 + power * 0.1;
          this.sample.play();
          console.log('B', power);
        }
      }

      if (other.args.ySpeed < 0) {
        this.args.animation = 'idle';
      }
    }
  }]);

  return Springboard;
}(_PointActor2.PointActor);

exports.Springboard = Springboard;
});

;require.register("actor/StarBalloon.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarBalloon = void 0;

var _Balloon2 = require("./Balloon");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarBalloon = /*#__PURE__*/function (_Balloon) {
  _inherits(StarBalloon, _Balloon);

  var _super = _createSuper(StarBalloon);

  function StarBalloon() {
    var _this;

    _classCallCheck(this, StarBalloon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-balloon actor-star-balloon';
    _this.args.target = _this.args.target || 0;
    return _this;
  }

  _createClass(StarBalloon, [{
    key: "update",
    value: function update() {
      if (!this.popped) {
        if (!this.launched) {
          this.args.ySpeed = Math.sin(this.viewport.args.frameId / 10) / 5;
        } else {
          var maxSpeed = this.args.target - this.y;
          this.args.ySpeed = Math.min(16, Math.abs(maxSpeed)) * Math.sign(maxSpeed);
        }
      }

      _get(_getPrototypeOf(StarBalloon.prototype), "update", this).call(this);
    }
  }, {
    key: "activate",
    value: function activate() {
      this.launched = true;
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (!other.controllable || other.args.hangingFrom) {
        return false;
      }

      if (this.popped) {
        return false;
      }

      if (other.args.ySpeed >= 0) {
        other.args.ySpeed = -14;
        this.pop();
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.tags.sprite.classList.remove('popped');
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args["float"] = -1;
      this.popped = this.launched = false;
      this.args.falling = true;
      this.viewport.setColCell(this);
    }
  }, {
    key: "pop",
    value: function pop() {
      this.tags.sprite.classList.add('popped');
      this.popped = true;
      this.args["float"] = 1;
    }
  }]);

  return StarBalloon;
}(_Balloon2.Balloon);

exports.StarBalloon = StarBalloon;
});

;require.register("actor/StarPost.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarPost = void 0;

var _CharacterString = require("../ui/CharacterString");

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Monitor = require("./Monitor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildElectricMonitor = require("./monitor/SheildElectricMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

var _SheildFireMonitor = require("./monitor/SheildFireMonitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarPost = /*#__PURE__*/function (_PointActor) {
  _inherits(StarPost, _PointActor);

  var _super = _createSuper(StarPost);

  function StarPost() {
    var _this;

    _classCallCheck(this, StarPost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-star-post';
    _this.args.width = 16;
    _this.args.height = 48;
    _this.args.active = false;
    _this.args["static"] = true;
    _this.spinning = false;
    return _this;
  }

  _createClass(StarPost, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(StarPost.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/starpost-active.wav');
        this.sample.volume = 0.5 + Math.random() * 0.025;
      }
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(StarPost.prototype), "onRendered", this).call(this);

      this.sprite = this.findTag('div.sprite');
      this.box = this.findTag('div');
      this.headBox = new _Tag.Tag('<div class = "star-post-head-box">');
      this.head = new _Tag.Tag('<div class = "star-post-head">');
      this.headBox.appendChild(this.head.node);
      this.box.appendChild(this.headBox.node);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      _get(_getPrototypeOf(StarPost.prototype), "collideA", this).call(this, other);

      if (other.args.owner) {
        other = other.args.owner;
      }

      if (!other.controllable && !other.occupant) {
        return;
      }

      if (!this.box) {
        return;
      }

      if (!this.args.active) {
        this.args.active = true;
        this.box.setAttribute('data-direction', other.args.direction);
        this.box.setAttribute('data-active', 'true');
        this.box.setAttribute('data-spin', 'true');
        this.viewport.args.audio && this.sample && this.sample.play();
        var throwSpeed = (other.args.gSpeed || other.args.xSpeed) / 2;

        if (Math.abs(throwSpeed) > 5) {
          throwSpeed = 5 * Math.sign(throwSpeed);
        }

        var monitorClasses = other.args.rings > 50 ? [_RingMonitor.RingMonitor, _SheildFireMonitor.SheildFireMonitor, _SheildWaterMonitor.SheildWaterMonitor, _SheildElectricMonitor.SheildElectricMonitor] : [_RingMonitor.RingMonitor];
        var monitorClass = monitorClasses[Math.floor(Math.random() * monitorClasses.length)];
        var monitor = new monitorClass({
          direction: other.args.direction,
          xSpeed: throwSpeed,
          ySpeed: -5,
          x: this.x - 10,
          y: this.y - 48
        });
        this.viewport.storeCheckpoint(other.args.id, this.args.id);
        this.viewport.spawn.add({
          object: monitor
        }); // this.viewport.onFrameOut(360, () => {
        // 	this.box.setAttribute('data-active', 'false');
        // 	this.box.setAttribute('data-spin', 'false');
        // 	this.args.active = false;
        // });

        this.spinning = true;
        this.viewport.onFrameOut(36, function () {
          _this2.spinning = false;
        });

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'starpost',
            eventAction: 'activated',
            eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
          });
        } // const time  = (this.viewport.args.frameId - this.viewport.args.startFrameId) / 60;
        // let minutes = String(Math.floor(Math.abs(time) / 60)).padStart(2,'0')
        // let seconds = String((Math.abs(time) % 60).toFixed(0)).padStart(2,'0');
        // const neg = time < 0 ? '-' : '';
        // if(neg)
        // {
        // 	minutes = Number(minutes);
        // }
        // const yardsPerFrame = other.public.gSpeed / 32;
        // const feetPerSecond = yardsPerFrame * 60 * 3;
        // this.args.charStrings = [
        // 	new CharacterString({value: `Speed: ${feetPerSecond.toFixed(3)} ft/s`})
        // 	, new CharacterString({value: `Time: ${neg}${minutes}:${seconds}`})
        // 	, new CharacterString({value: `Score: ${other.args.score}`})
        // 	, new CharacterString({value: `Rings: ${other.args.rings}`})
        // ];

      } // else if(other instanceof Projectile && !this.spinning)
      // {
      // 	this.box.setAttribute('data-direction', other.args.direction);
      // 	this.box.setAttribute('data-spin', 'false');
      // 	if(this.viewport.args.audio && this.sample)
      // 	{
      // 		this.sample.currentTime = 0;
      // 		this.sample.play();
      // 	}
      // 	this.onTimeout(0, () => this.box.setAttribute('data-spin', 'true'));
      // 	this.spinning = true;
      // 	this.onTimeout(600, () => this.spinning = false);
      // }

    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return StarPost;
}(_PointActor2.PointActor);

exports.StarPost = StarPost;
});

;require.register("actor/SteelCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SteelCrate = void 0;

var _PointActor = require("./PointActor");

var _Block = require("./Block");

var _BreakableBlock2 = require("./BreakableBlock");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SteelCrate = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(SteelCrate, _BreakableBlock);

  var _super = _createSuper(SteelCrate);

  function SteelCrate() {
    var _this;

    _classCallCheck(this, SteelCrate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-breakable-block actor-steel-crate';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(SteelCrate, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (other instanceof _Block.Block) {
        return true;
      }

      if (other.args.bouncing && !this.broken) {
        this["break"]();
        return true;
      }

      if (other.args.rolling && !this.broken) {
        return true;
      }

      if (type === 0 && other.controllable) {
        return true;
      }

      if (type !== 1 && type !== 3 || other.y <= this.y - this.args.height) {
        return true;
      }

      if (!this.viewport) {
        return false;
      }

      if (type === -1 || other.args.rolling) {
        return _get(_getPrototypeOf(SteelCrate.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return SteelCrate;
}(_BreakableBlock2.BreakableBlock);

exports.SteelCrate = SteelCrate;
});

;require.register("actor/Stopper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stopper = void 0;

var _BreakableBlock2 = require("./BreakableBlock");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Stopper = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(Stopper, _BreakableBlock);

  var _super = _createSuper(Stopper);

  function Stopper() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Stopper);

    _this = _super.call(this, args, parent);
    _this.args.height = 16;
    return _this;
  }

  _createClass(Stopper, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (other.args.jumping && type === 0) {
        if (!this.broken) {
          other.args.x = this.args.x + 6;
          this.viewport.onFrameOut(3, function () {
            other.args.ySpeed = 3;
            other.args.x = _this2.args.x + 6;
            other.args.xSpeed = 0;
            other.args.ySpeed = 0;
            other.args.groundAngle = 0;
            other.args.falling = true;
            other.args.animation = 'rolling';
            other.args.ignore = 30;
            other.args["float"] = 30;

            _this2.viewport.onFrameOut(30, function () {
              other.args.ySpeed = 10;
            });
          });
        }

        return _get(_getPrototypeOf(Stopper.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return Stopper;
}(_BreakableBlock2.BreakableBlock);

exports.Stopper = Stopper;
});

;require.register("actor/SuperRing.js", function(exports, require, module) {
// import { PointActor } from './PointActor';
// const THREE         = require('three')
// const ColladaLoader = require('three-collada-loader');
// export class SuperRing extends PointActor
// {
// 	constructor(...args)
// 	{
// 		super(...args);
// 		this.args.type = 'actor-super-ring actor-item';
// 		this.args.width  = 64;
// 		this.args.height = 64;
// 		this.args.float  = -1;
// 		this.args.gone   = false;
// 		this.args.xRot = 0;
// 		this.args.yRot = 0;
// 		this.args.zRot = 0;
// 		this.args.speed = 4;
// 		this.leaving = new WeakSet;
// 		this.args.xOff = 0;
// 		this.args.yOff = 0;
// 	}
// 	onAttached()
// 	{
// 		this.initRenderer();
// 		this.pinch(0);
// 	}
// 	initRenderer()
// 	{
// 		this.cameraRear = new THREE.PerspectiveCamera(12.5, undefined, 10, 100);
// 		this.cameraFore = new THREE.PerspectiveCamera(12.5, undefined, 1, 10.1);
// 		const modelUrl   = '/models/ring.dae';
// 		const specular   = 0xBBBBBB;
// 		const color      = 0xBBBB00;
// 		const outline    = 0x000000;
// 		// const finalX     = qTurn / 8 * 7;
// 		const emissive   = 0x999900;
// 		const lineColor  = 0x0000AA;
// 		const colladaLoader = new ColladaLoader;
// 		colladaLoader.load(modelUrl, response => {
// 			const geometry = response.dae.geometries['root-mesh'].mesh.geometry3js;
// 			this.cameraRear.position.z = 10;
// 			this.cameraRear.position.x = 0;
// 			this.cameraRear.position.y = 0;
// 			this.cameraFore.position.z = 10;
// 			this.cameraFore.position.x = 0;
// 			this.cameraFore.position.y = 0;
// 			this.scene = new THREE.Scene();
// 			const edgeGeometry = new THREE.EdgesGeometry(geometry);
// 			const goldMaterial = new THREE.MeshPhongMaterial({
// 				side:          THREE.FrontSide
// 				, transparent: true
// 				, skinning:    true
// 				, emissive
// 				, specular
// 				, color
// 			});
// 			const blackMaterial = new THREE.MeshBasicMaterial({
// 				color: outline
// 				, side: THREE.BackSide
// 			});
// 			this.mainMesh = new THREE.Mesh(geometry, goldMaterial);
// 			this.outlineMesh = new THREE.Mesh(geometry, blackMaterial);
// 			this.inlineMesh = new THREE.Mesh(geometry, blackMaterial);
// 			this.outlineMesh.scale.multiplyScalar(1.075);
// 			this.inlineMesh.scale.multiplyScalar(0.925);
// 			this.wireMaterial = new THREE.LineBasicMaterial({
// 				depthTest:   true
// 				, linewidth:   1.25
// 				, color:       lineColor
// 				, transparent: true
// 				, opacity:     0.125
// 			} );
// 			this.wireframe = new THREE.LineSegments(edgeGeometry, this.wireMaterial);
// 			const light = new THREE.DirectionalLight(0xFFFFFF, 0.333);
// 			light.position.set(1, 1.75, 0).normalize();
// 			light.target = this.wireframe;
// 			const light2 = new THREE.DirectionalLight(0xFFFFFF);
// 			light2.position.set(0.75, -1, 0).normalize();
// 			light.target = this.wireframe;
// 			this.scene.add(this.mainMesh);
// 			this.scene.add(this.outlineMesh);
// 			this.scene.add(this.inlineMesh);
// 		 	this.scene.add(this.wireframe);
// 			this.scene.add(light);
// 			this.rendererRear = new THREE.WebGLRenderer({
// 				antialias: true
// 				, alpha:   true
// 			});
// 			this.rendererFore = new THREE.WebGLRenderer({
// 				antialias: true
// 				, alpha:   true
// 			});
// 			this.resizeRenderer();
// 			const parent = this.tags.sprite.node.parentNode;
// 			parent.appendChild(this.rendererRear.domElement);
// 			parent.appendChild(this.rendererFore.domElement);
// 			this.rendererRear.render(this.scene, this.cameraRear);
// 			this.rendererFore.render(this.scene, this.cameraFore);
// 		});
// 	}
// 	resizeRenderer()
// 	{
// 		const parent    = this.tags.sprite.node;
// 		const width     = this.args.width;  //parent.clientWidth  || parent.offsetWidth || width || 0;
// 		const height    = this.args.height; //parent.clientHeight || parent.offsetHeight || height || 0;
// 		const longAxis  = width > height ? width : height;
// 		const shortAxis = width < height ? width : height;
// 		this.cameraRear.aspect = 1;
// 		this.cameraFore.aspect = 1;
// 		this.rendererRear.setSize(shortAxis,  shortAxis);
// 		this.rendererFore.setSize(shortAxis,  shortAxis);
// 		// parent.style.setProperty('--long-axis', longAxis + 'px');
// 		// parent.style.setProperty('--short-axis', shortAxis + 'px');
// 		this.wireMaterial.linewidth = shortAxis / 750;
// 	}
// 	update()
// 	{
// 		super.update();
// 		if(!this.wireframe)
// 		{
// 			return;
// 		}
// 		if(this.caught)
// 		{
// 			this.wireframe.material.opacity = 0.125;
// 			const caught = this.caught;
// 			caught.args.xSpeed = 0;
// 			caught.args.ySpeed = 0;
// 			if(this.caught.yAxis > 0)
// 			{
// 				this.drop();
// 			}
// 			else if(this.caught.yAxis < 0)
// 			{
// 				this.wireframe.material.opacity = 0.25;
// 				this.args.speed++;
// 				caught.args.x = this.public.x;
// 				caught.args.y = this.public.y - 16;
// 			}
// 			else
// 			{
// 				const toX = this.public.x;
// 				const toY = this.public.y - 16;
// 				const speed = 12;
// 				if(caught.public.x !== toX)
// 				{
// 					caught.args.x += Math.sign(toX - caught.public.x) * this.args.speed;
// 				}
// 				if(caught.public.y !== toY)
// 				{
// 					caught.args.y += Math.sign(toY - caught.public.y) * this.args.speed;
// 				}
// 				if(Math.abs(caught.public.x - toX) < speed)
// 				{
// 					caught.args.x = toX;
// 				}
// 				if(Math.abs(caught.public.y - toY) < speed)
// 				{
// 					caught.args.y = toY;
// 				}
// 			}
// 			if(this.args.speed < 5)
// 			{
// 				this.args.speed += 0.25;
// 			}
// 			if(this.args.speed > 5)
// 			{
// 				this.args.speed -= 0.5;
// 			}
// 		}
// 		else
// 		{
// 			this.wireframe.material.opacity = 0.1;
// 			if(this.args.speed > 4)
// 			{
// 				this.args.speed -= 0.125;
// 			}
// 		}
// 		const yRot = (this.args.yRot / 60) % (Math.PI * 2);
// 		if(yRot > (Math.PI / 2 - 0.125) && yRot < (Math.PI / 2 + 0.125))
// 		{
// 			if(this.args.speed > 20)
// 			{
// 				this.onTimeout(500, ()=>this.drop());
// 			}
// 		}
// 		// this.wireframe.rotation.x
// 		//	= this.mainMesh.rotation.x
// 		//	= this.outlineMesh.rotation.x
// 		//	= this.inlineMesh.rotation.x
// 		//	= this.args.xRot / 200;
// 		this.wireframe.rotation.y
// 			= this.mainMesh.rotation.y
// 			= this.outlineMesh.rotation.y
// 			= this.inlineMesh.rotation.y
// 			= yRot;
// 		this.wireframe.rotation.z
// 			= this.mainMesh.rotation.z
// 			= this.outlineMesh.rotation.z
// 			= this.inlineMesh.rotation.z
// 			= this.args.zRot / 60;
// 		this.args.yRot += this.args.speed;
// 		// this.args.xRot++;
// 		this.args.zRot++;
// 		this.onTimeout(0, () => {
// 			this.rendererRear.render(this.scene, this.cameraRear);
// 			this.rendererFore.render(this.scene, this.cameraFore);
// 		});
// 	}
// 	collideA(other)
// 	{
// 		super.collideA(other);
// 		if(!other.controllable || other.public.flying)
// 		{
// 			if(this.leaving.delete(other))
// 			{
// 				return;
// 			}
// 			return;
// 		}
// 		if(this.leaving.has(other))
// 		{
// 			return;
// 		}
// 		if(this.caught)
// 		{
// 			this.caught.args.xSpeed = (Math.sign(other.public.xSpeed) * 3) || 3;
// 			this.leaving.add(this.caught);
// 		}
// 		if(this.caught !== other)
// 		{
// 			this.drop();
// 			if(this.leaving.has(other))
// 			{
// 				return;
// 			}
// 			this.onTimeout(500, () => {
// 				if(this.leaving.has(other))
// 				{
// 					return;
// 				}
// 				this.caught = other
// 			});
// 			this.grab();
// 		}
// 		other.args.xSpeed = 0;
// 		other.args.ySpeed = 0;
// 		other.args.float  = -1;
// 	}
// 	drop()
// 	{
// 		if(this.caught)
// 		{
// 			const caught = this.caught;
// 			this.pinchFilterBg.classList.add('grabbing-start');
// 			this.pinch(-50, 15);
// 			this.leaving.add(caught);
// 			if(this.startGrab)
// 			{
// 				clearTimeout(this.startDrop);
// 				this.startDrop = false;
// 			}
// 			this.startDrop = this.onTimeout(150, () => {
// 				this.pinchFilterBg.classList.add('grabbing');
// 				caught.args.float = 0;
// 				caught.args.ySpeed = 10;
// 				if(this.dropDone)
// 				{
// 					clearTimeout(this.dropDone);
// 					this.dropDone = false;
// 				}
// 				this.dropDone = this.onTimeout(650, () => {
// 					this.pinchFilterBg.classList.remove('grabbing-start');
// 					this.pinchFilterBg.classList.remove('grabbing');
// 					this.pinch(0, 0);
// 				});
// 				this.caught = null;
// 			});
// 			this.onTimeout(1500, () => {
// 				this.leaving.delete(caught);
// 			});
// 		}
// 	}
// 	grab()
// 	{
// 		if(this.pinchFilterFg)
// 		{
// 			this.pinchFilterFg.classList.add('grabbing-start');
// 			this.onTimeout(150, () => {
// 				this.pinchFilterFg.classList.add('grabbing');
// 				this.pinch(0, 100);
// 				this.onTimeout(650, () => {
// 					this.pinch(0, 0);
// 					this.pinchFilterFg.classList.remove('grabbing-start');
// 					this.pinchFilterFg.classList.remove('grabbing');
// 				});
// 			});
// 		}
// 	}
// }
"use strict";
});

;require.register("actor/Switch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Switch = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Switch = /*#__PURE__*/function (_PointActor) {
  _inherits(Switch, _PointActor);

  var _super = _createSuper(Switch);

  function Switch() {
    var _this;

    _classCallCheck(this, Switch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-switch';
    _this.args.width = 32;
    _this.args.height = 10; // this.args.float  = -1;

    _this.removeTimer = null;
    _this.args.active = false;
    _this.activator = null;

    _this.args.bindTo('active', function (v) {
      _this.box && _this.box.setAttribute('data-active', v ? 'true' : 'false');
    });

    _this.ignore = 0;
    return _this;
  }

  _createClass(Switch, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Switch.prototype), "update", this).call(this);

      if (this.ignore > 0) {
        this.ignore--;
        return;
      }

      if (!this.activator || this.activator.args.standingOn !== this) {
        this.args.active = false;
        this.activator = null;
      }
    }
  }, {
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sample = new Audio('/Sonic/switch-activated.wav');
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.activator == other) {
        this.ignore = 8;
        return true;
      }

      if (other["public"].ySpeed < 0) {
        if (other["public"].ySpeed === 0 && other.y > this.y) {
          return true;
        }

        return false;
      }

      if (this["public"].active && other.y < this.y) {
        return true;
      }

      if (other.isEffect || other.isRegion) {
        return;
      }

      other.onRemove(function () {
        return _this2.activator = null;
      });

      if (other.y <= this.y - this.args.height) {
        if (!this["public"].active) {
          this.activate(other);
        }

        this.ignore = 8;
        this.args.active = true;
        this.activator = other; // if(type === 1 || type === 3)
        // {
        // 	return false;
        // }

        return true;
      }

      return false;
    }
  }, {
    key: "activate",
    value: function activate(other) {
      this.beep();

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        target.activate(other, this);
      }

      if (this.args.destroyLayer) {
        var layerId = this.args.destroyLayer;
        var layer = this.viewport.args.layers[layerId];
        layer.args.destroyed = true;
      }

      if (this.args.water) {
        var _this$args$fillSpeed, _this$args$drainSpeed;

        var water = this.viewport.actorsById[this.args.water];
        var level = this.viewport.objDefs.get(this.args.setPoint);
        water.target = Number(water.y || 0) - Number(level.y || 0);
        water.args.fillSpeed = (_this$args$fillSpeed = this.args.fillSpeed) !== null && _this$args$fillSpeed !== void 0 ? _this$args$fillSpeed : water.args.fillSpeed;
        water.args.drainSpeed = (_this$args$drainSpeed = this.args.drainSpeed) !== null && _this$args$drainSpeed !== void 0 ? _this$args$drainSpeed : water.args.drainSpeed;
      }

      var spawnPoint = this.viewport.objDefs.get(this.args.point);
      var spawnType = this.viewport.objectPalette[this.args.spawn];

      if (spawnType && spawnPoint) {
        this.viewport.spawn.add({
          object: new spawnType({
            x: spawnPoint.x,
            y: spawnPoint.y
          })
        });
      }

      this.args.active = true;
    }
  }, {
    key: "beep",
    value: function beep() {
      if (this.viewport.args.audio && this.sample) {
        this.sample.play();
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return Switch;
}(_PointActor2.PointActor);

exports.Switch = Switch;
});

;require.register("actor/Tails.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tails = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Tails = /*#__PURE__*/function (_PointActor) {
  _inherits(Tails, _PointActor);

  var _super = _createSuper(Tails);

  function Tails() {
    var _this;

    _classCallCheck(this, Tails);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-tails';
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.flySpeedMax = 25;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 15;
    _this.args.height = 32;
    _this.args.normalHeight = 32;
    _this.args.rollingHeight = 23;
    _this.willStick = false;
    _this.stayStuck = false;
    return _this;
  }

  _createClass(Tails, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.tails = new _Tag.Tag('<div class = "tails-tails">');
      this.sprite.appendChild(this.tails.node);
      this.flyingSound = new Audio('/Sonic/tails-flying.wav');
      this.flyingSound.volume = 0.35 + Math.random() * -0.3;
      this.flyingSound.loop = true;
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && this.flyingSound) {
        if (!this.flyingSound.paused) {
          this.flyingSound.volume = 0.35 + Math.random() * -0.3;
        }

        if (this.flyingSound.currentTime > 0.2) {
          this.flyingSound.currentTime = 0.0;
        }
      }

      if (!this.box) {
        _get(_getPrototypeOf(Tails.prototype), "update", this).call(this);

        return;
      }

      if (this["public"].tailFlyCoolDown > 0) {
        this.args.tailFlyCoolDown--;
      }

      if (this["public"].tailFlyCoolDown < 0) {
        this.args.tailFlyCoolDown++;
      }

      if (this.args.tailFlyCoolDown === 0) {
        this.flyingSound.pause();
        this.args.flying = false;
      }

      if (!falling) {
        this.args.tailFlyCoolDown = 0;
        this.flyingSound.pause();
        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (!this["public"].rolling) {
          if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
            this.box.setAttribute('data-animation', 'skidding');
          } else if (speed > maxSpeed / 2) {
            this.box.setAttribute('data-animation', 'running');
          } else if (this.args.moving && this.args.gSpeed) {
            this.box.setAttribute('data-animation', 'walking');
          } else {
            this.box.setAttribute('data-animation', 'standing');
          }
        } else {
          this.box.setAttribute('data-animation', 'rolling');
        }
      } else if (this.args.flying) {
        if (this.yAxis > 0) {
          this.box.setAttribute('data-animation', 'jumping');
          this.args.ySpeed = this.args.ySpeed > this.args.jumpForce ? this.args.ySpeed : this.args.jumpForce;
        } else {
          this.box.setAttribute('data-animation', 'flying');
        }
      } else if (this["public"].jumping) {
        this.flyingSound.pause();
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Tails.prototype), "update", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0(button) {
      _get(_getPrototypeOf(Tails.prototype), "command_0", this).call(this, button);

      if (!this["public"].falling) {
        this.args.tailFlyCoolDown = -80;
        return;
      }

      if (this.args.tailFlyCoolDown === 0) {
        this.args.tailFlyCoolDown = 80;
        return;
      }

      if (this["public"].ySpeed > 0) {
        this.args.ySpeed = 0;
      }

      this.args.tailFlyCoolDown = 80;
      this.args.flying = true;
      this.flyingSound.volume = 0.35 + Math.random() * -0.3;

      if (this.viewport.args.audio && this.flyingSound.paused) {
        this.flyingSound.play();
      }
    }
  }, {
    key: "hold_0",
    value: function hold_0(button) {
      if (this["public"].flying) {
        if (this.args.ySpeed > 0) {
          this.args.ySpeed = 0;
        }

        if (Math.random() > 0.8) {
          this.flyingSound.volume = 0.35 + Math.random() * -0.3;
        }

        this.args.tailFlyCoolDown = 80;
        this.args.ySpeed -= Math.min(3, button.time / 9);
        this.args.ySpeed = Math.max(-5, this.args.ySpeed);
      } else {
        this.args.flying = true;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.flyingSound && this.flyingSound.pause();
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }]);

  return Tails;
}(_PointActor2.PointActor);

exports.Tails = Tails;
});

;require.register("actor/TextActor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextActor = void 0;

var _PointActor2 = require("./PointActor");

var _CharacterString = require("../ui/CharacterString");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextActor = /*#__PURE__*/function (_PointActor) {
  _inherits(TextActor, _PointActor);

  var _super = _createSuper(TextActor);

  function TextActor(args, parent) {
    var _this;

    _classCallCheck(this, TextActor);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-text-actor';
    _this.args["float"] = -1;
    _this.text = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.x = args.x - 48;

    _this.args.bindTo('content', function (v) {
      _this.text.args.value = v;
      _this.text.args.color = args.color;
      _this.args.width = v.length * 18;
      _this.args.height = 18;
    });

    return _this;
  }

  _createClass(TextActor, [{
    key: "onAttached",
    value: function onAttached() {
      this.sprite = this.findTag('div.sprite');
      this.text.render(this.sprite);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return TextActor;
}(_PointActor2.PointActor);

exports.TextActor = TextActor;
});

;require.register("actor/TilesetSwapper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TilesetSwapper = void 0;

var _PointActor2 = require("./PointActor");

var _ScreenFire = require("../effects/ScreenFire");

var _BackdropPalette = require("../BackdropPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TilesetSwapper = /*#__PURE__*/function (_PointActor) {
  _inherits(TilesetSwapper, _PointActor);

  var _super = _createSuper(TilesetSwapper);

  function TilesetSwapper(args, parent) {
    var _this;

    _classCallCheck(this, TilesetSwapper);

    _this = _super.call(this, args, parent);
    _this.args.hidden = true;
    var img = new Image('../Sonic/tiles/azure-lake/azure-lake-burnt.png');
    var backdropClass = _BackdropPalette.BackdropPalette[_this.args.backdrop];
    _this.args.backdrop = new backdropClass();
    return _this;
  }

  _createClass(TilesetSwapper, [{
    key: "activate",
    value: function activate(other, button) {
      var _this2 = this;

      // this.viewport.tilemap.replacements.set(
      // 	this.args.original//'../Sonic/tiles/azure-lake/azure-lake.png'
      // 	, this.args.replacement//'../Sonic/tiles/azure-lake/azure-lake-burnt.png'
      // );
      if (this.activated) {
        return;
      }

      this.activated = true;
      this.viewport.onFrameOut(15, function () {
        _this2.viewport.args.screenEffects.push(new _ScreenFire.ScreenFire());

        _this2.viewport.onFrameOut(45, function () {
          _this2.viewport.tileMap.replacements.set('../Sonic/tiles/azure-lake/azure-lake.png', '../Sonic/tiles/azure-lake/azure-lake-burnt.png');

          _this2.viewport.args.backdrop = _this2.args.backdrop;

          _this2.viewport.tileMap.replacements.set('../Sonic/tiles/azure-lake/azure-lake-shapes.png', '../Sonic/tiles/azure-lake/azure-lake-burnt-shapes.png');

          _this2.viewport.tileMap.replacements.set('../Sonic/tiles/azure-lake/rolling.png', '../Sonic/tiles/azure-lake/rolling-burnt.png');

          _this2.viewport.tileMap.replacements.set('../Sonic/tiles/azure-lake/giant-loop.png', '../Sonic/tiles/azure-lake/giant-loop-burnt.png');
        });
      });
    }
  }]);

  return TilesetSwapper;
}(_PointActor2.PointActor);

exports.TilesetSwapper = TilesetSwapper;
});

;require.register("actor/Tornado.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tornado = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Tornado = /*#__PURE__*/function (_Vehicle) {
  _inherits(Tornado, _Vehicle);

  var _super = _createSuper(Tornado);

  function Tornado() {
    var _this;

    _classCallCheck(this, Tornado);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-tornado';
    _this.args.width = 96;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.xSpeedMaxThrusting = 64;
    _this.args.xSpeedMaxOriginal = 32;
    _this.args.xSpeedMax = _this.args.xSpeedMaxOriginal;
    _this.args.gSpeedMax = 5;
    _this.args.decel = 0.15;
    _this.args.accel = 0.5;
    _this.args.seatHeight = 14;
    _this.args.seatForward = -32;
    _this.args.skidTraction = 0.95;
    _this.dustCount = 0;
    _this.args.flyAngle = -0.25;
    _this.args.particleScale = 2;
    _this.args["float"] = -1;
    _this.args.thrusting = false;
    _this.args.landingGear = true;
    _this.args.jumpForce = 8;
    _this.args.fuelLevel = 100;
    _this.args.thrusterFill = 0;
    _this.args.noThrust = 0;
    return _this;
  }

  _createClass(Tornado, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.plane = new _Tag.Tag('<div class = "plane">');
      this.fuselage = new _Tag.Tag('<div class = "fuselage">');
      this.propeller = new _Tag.Tag('<div class = "propeller">');
      this.thruster = new _Tag.Tag('<div class = "thruster">');
      this.fuelMeter = new _Tag.Tag('<div class = "fuel-meter">');
      this.frontGear = new _Tag.Tag('<div class = "front-landing-gear">');
      this.rearGear = new _Tag.Tag('<div class = "rear-landing-gear">');
      this.sprite.appendChild(this.plane.node);
      this.thruster.appendChild(this.fuelMeter.node);
      this.plane.appendChild(this.thruster.node);
      this.plane.appendChild(this.propeller.node);
      this.plane.appendChild(this.frontGear.node);
      this.plane.appendChild(this.rearGear.node);
      this.plane.appendChild(this.fuselage.node);
      this.args.bindTo('landingGear', function (v) {
        if (_this2.plane) {
          _this2.plane.setAttribute('data-landing-gear', v);
        }
      });
      this.args.bindTo('thrusting', function (v) {
        if (_this2.plane) {
          _this2.plane.setAttribute('data-thrusting', v);
        }
      });
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.occupant || !this.args.falling) {
        this.args.flyAngle = this.args.falling ? 0.26 : -0.26;
        this.args.flying = false;
        this.args["float"] = 0;
      }

      if (!this.args.thrusting && Math.abs(this.args.xSpeed) < 8) {
        this.args["float"] = 0;
        this.args.flying = false;
      } else if (this.args.falling) {
        this.args["float"] = -1;
        this.args.flying = true;
      }

      if (!this.args.jumping && this.args.xSpeed === 0 && this.args.falling) {
        this.args.flying = false;
        this.args["float"] = 0;

        if (this.args.thrusting) {
          this.args.crashed = true;
          this.args.thrusting = false;
          this.args.noThrust = Date.now() + 500;
        }

        _get(_getPrototypeOf(Tornado.prototype), "update", this).call(this);

        return;
      }

      var maxAirSpeed = this.args.xSpeedMaxThrusting;

      if (this.args.thrusting && this.args.fuelLevel <= 0) {
        this.args.thrusting = false;
        this.args.noThrust = Date.now() + 500;
        this.args.thrusterFill = Date.now() + 500;
      }

      if (this.args.thrusting) {
        this.args.xSpeedMax = this.args.xSpeedMaxThrusting;

        if (this.args.fuelLevel > 0) {
          this.args.fuelLevel -= 0.1;
        }
      } else {
        this.args.xSpeedMax = this.args.xSpeedMaxOriginal;

        if (this.args.thrusterFill < Date.now() && this.args.fuelLevel < 100) {
          this.args.fuelLevel += 0.25;
        }
      }

      this.fuelMeter.style({
        '--fuelLevel': this.args.fuelLevel / 100
      });

      if (!this.args.thrusting && Math.abs(this.args.xSpeed) > maxAirSpeed) {
        this.args.xSpeed -= Math.sign(this.args.xSpeed) * 0.2;
      }

      if (this.args.thrusting && (Math.sign(this.args.xSpeed) !== this.args.direction || Math.abs(this.args.xSpeed) < maxAirSpeed)) {
        if (!this.args.falling && this.args.xSpeed === 0) {
          this.args.flyAngle = -0.26;
          this.args.falling = true;
          this.args.flying = true;
          this.args.ySpeed = -5;
        }

        this.args.xSpeed += Math.sign(this.args.direction) * 4;
      }

      if (Math.abs(this.args.xSpeed) > this.args.xSpeedMax / 2 && !this.args.thrusting && !this.xAxis) {
        this.args.xSpeed *= 0.95;
      }

      if (Math.abs(this.args.xSpeed) > maxAirSpeed) {
        this.args.xSpeed = maxAirSpeed * Math.sign(this.args.direction);
      }

      if (this.args.flying) {
        if (this.args.ySpeed === 0) {
          this.args.flyAngle = 0;
        }

        if (this.args.landingGear) {
          if (!this.args.thrusting && this.args.flyAngle < Math.PI / 4) {
            this.args.flyAngle += 0.005;
          } else if (this.args.thrusting && this.args.flyAngle > -Math.PI / 4) {
            this.args.flyAngle -= 0.005;
          }
        } else {
          if (Math.abs(this.args.flyAngle) > 0.00125) {
            this.args.flyAngle -= 0.00125 * Math.sign(this.args.flyAngle);
          } else {
            this.args.flyAngle = 0;
          }
        }

        if (!this.args.xSpeed) {
          this.args.flying = false;
          return;
        }

        var newAngle = this.args.flyAngle + Math.sign(this.yAxis) * 0.035;

        if (this.args.flyAngle > 0) {
          this.args.xSpeed *= 1.025;
        } else if (this.args.flyAngle > 0) {
          this.args.xSpeed /= 1.025;
        }

        if (this.yAxis && Math.abs(newAngle) < Math.PI / 2) {
          this.args.flyAngle = newAngle;
        }

        if (Math.sign(this.args.xSpeed) === this.args.direction) {
          var speed = this.args.xSpeed || this.args.gSpeed;
          this.args.ySpeed = Math.sin(this.args.flyAngle) * speed * (this.args.direction || Math.sign(speed)) * 2;
        }
      } else {
        if (!this.args.thrusting && this.args.flyAngle < Math.PI / 2 && this.args.ySpeed > 0) {
          this.args.flyAngle += 0.025;
        }
      }

      if (this.args.flying) {
        this.args.airAngle = this.args.flyAngle;
        this.args.jumping = false;
      }

      if (!this.args.falling) {
        this.args.landingGear = true;
        this.args.flyAngle = -0.26;
      }

      _get(_getPrototypeOf(Tornado.prototype), "update", this).call(this);

      if (this.args.flying) {
        this.args.cameraMode = 'airplane';
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      if (this.args.falling) {
        this.args.landingGear = !this.args.landingGear;
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      if (!this.args.thrusting && this.args.fuelLevel <= 1) {
        return;
      }

      if (this.args.fuelLevel <= 0) {
        return;
      }

      if (this.args.crashed || this.args.noThrust > Date.now()) {
        this.args["false"] = true;
        return;
      }

      this.args.thrusting = true;
    }
  }, {
    key: "release_2",
    value: function release_2() {
      this.args.thrusting = false;
      this.args.crashed = false;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return Tornado;
}(_Vehicle2.Vehicle);

exports.Tornado = Tornado;
});

;require.register("actor/UnbreakableCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnbreakableCrate = void 0;

var _PointActor = require("./PointActor");

var _Block2 = require("./Block");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var UnbreakableCrate = /*#__PURE__*/function (_Block) {
  _inherits(UnbreakableCrate, _Block);

  var _super = _createSuper(UnbreakableCrate);

  function UnbreakableCrate(args, parent) {
    var _this;

    _classCallCheck(this, UnbreakableCrate);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-unbreakable-crate';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(UnbreakableCrate, [{
    key: "update",
    value: function update() {
      if (this.viewport && this.args.gate) {
        var gatekeeper = this.viewport.actorsById[this.args.gate];

        if (!gatekeeper.args.hitPoints) {
          this.viewport.actors.remove(this);
        }
      }

      _get(_getPrototypeOf(UnbreakableCrate.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      return true;
    }
  }]);

  return UnbreakableCrate;
}(_Block2.Block);

exports.UnbreakableCrate = UnbreakableCrate;
});

;require.register("actor/Vehicle.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vehicle = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Vehicle = /*#__PURE__*/function (_PointActor) {
  _inherits(Vehicle, _PointActor);

  var _super = _createSuper(Vehicle);

  function Vehicle() {
    _classCallCheck(this, Vehicle);

    return _super.apply(this, arguments);
  }

  _createClass(Vehicle, [{
    key: "update",
    value: function update() {
      if (this.occupant) {
        this.running = this.occupant.running;
        this.crawling = this.occupant.crawling;
      }

      _get(_getPrototypeOf(Vehicle.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other.controllable) {
        if (other.args.ySpeed > 0) {
          return true;
        } else {
          return false;
        }
      }

      if (other.y >= this.y) {
        return false;
      }

      if (!other.args["float"]) {
        other.args.ySpeed = -other.args.ySpeed;
        other.args.xSpeed = other.args.xSpeed || other.args.direction * 5;

        if (other.args.ySpeed > -5) {
          other.args.ySpeed = -5;
        }
      }

      return false;
    }
  }, {
    key: "standBelow",
    value: function standBelow(other) {
      if (!other.controllable) {
        other.args.ySpeed = -other.args.ySpeed;
        other.args.xSpeed = other.args.xSpeed || other.args.direction * 5;

        if (other.args.ySpeed > -5) {
          other.args.ySpeed = -5;
        }
      }
    }
  }, {
    key: "isVehicle",
    get: function get() {
      return true;
    }
  }]);

  return Vehicle;
}(_PointActor2.PointActor);

exports.Vehicle = Vehicle;
});

;require.register("actor/WaterController.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterController = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WaterController = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterController, _PointActor);

  var _super = _createSuper(WaterController);

  function WaterController(args, parent) {
    var _this;

    _classCallCheck(this, WaterController);

    _this = _super.call(this, args, parent);
    _this.args.activated = false;
    _this.args.levelLimit = _this.args.levelLimit || 0;
    _this.args.levelSpeed = _this.args.levelSpeed || 1;
    _this.args.level = _this.args.level || 0;
    _this.args["static"] = true;
    _this.args.hidden = true;
    return _this;
  }

  _createClass(WaterController, [{
    key: "update",
    value: function update() {
      // if(this.args.activated && this.args.levelSpeed < 18)
      // {
      // 	this.args.levelSpeed += 1;
      // }
      if (this.args.level < this.args._levelLimit) {
        this.args.level += this.args.levelSpeed || 0;
      }

      if (this.args.level > this.args._levelLimit) {
        this.args.levelSpeed = 0;
        this.args.level = this.args._levelLimit;
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras["delete"](target);
        this.viewport.auras["delete"](this);
      }
    }
  }, {
    key: "activate",
    value: function activate(other, button) {
      if (this.args.activated) {
        return;
      }

      this.args._levelLimit = this.args.levelLimit || 4096;
      this.viewport.auras.add(this);
      this.args.activated = true;

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }
  }]);

  return WaterController;
}(_PointActor2.PointActor);

exports.WaterController = WaterController;
});

;require.register("actor/WaterFall.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterFall = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterFall = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterFall, _PointActor);

  var _super = _createSuper(WaterFall);

  function WaterFall() {
    var _this;

    _classCallCheck(this, WaterFall);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 64;
    _this.args.type = 'actor-item actor-water-fall';
    _this.args.active = false;
    _this.args["static"] = true;
    return _this;
  }

  _createClass(WaterFall, [{
    key: "onAttach",
    value: function onAttach() {
      var _this2 = this;

      this.autoAttr.get(this.box)['data-upward'] = 'upward';

      if (!this.viewport || !this.args["switch"]) {
        return;
      }

      this["switch"] = this.viewport.actorsById[this.args["switch"]];

      if (!this["switch"]) {
        return;
      }

      this["switch"].args.bindTo('active', function (v) {
        if (v && v > 0 && !_this2.args.active) {
          _this2.args.active = true;

          _this2.onNextFrame(function () {
            _this2.args.toHeight = _this2.args.openHeight;
            _this2.args.y -= _this2.args.openOffset;
          });
        }
      });
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(WaterFall.prototype), "update", this).call(this);

      if (this.args.toHeight !== this.args.height) {
        var diff = this.args.toHeight - this.args.height;
        var increment = Math.sign(diff) * 32;

        if (diff <= increment) {
          this.args.height = this.args.toHeight;
          this.args.y = this.args.yOriginal + this.args.toHeight;
        } else {
          this.args.height += increment;
          this.args.y += increment;
        }
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(WaterFall), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.toHeight = objDef.toHeight || 0;
      obj.args.x = objDef.x + 32;
      obj.args.yOriginal = objDef.y;
      return obj;
    }
  }]);

  return WaterFall;
}(_PointActor2.PointActor);

exports.WaterFall = WaterFall;
});

;require.register("actor/WaterJet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterJet = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterJet = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterJet, _PointActor);

  var _super = _createSuper(WaterJet);

  function WaterJet() {
    var _this;

    _classCallCheck(this, WaterJet);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.width = _this["public"].width || 32;
    _this.args.height = _this["public"].height || 64;
    _this.args.type = 'actor-item actor-water-jet';
    return _this;
  }

  _createClass(WaterJet, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(WaterJet), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = objDef.x + objDef.width / 2;
      return obj;
    }
  }]);

  return WaterJet;
}(_PointActor2.PointActor);

exports.WaterJet = WaterJet;
});

;require.register("actor/Window.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Window = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Window = /*#__PURE__*/function (_PointActor) {
  _inherits(Window, _PointActor);

  var _super = _createSuper(Window);

  function Window() {
    var _this;

    _classCallCheck(this, Window);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-window';
    _this.args.width = 64;
    _this.args.height = 160;
    return _this;
  }

  _createClass(Window, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return Window;
}(_PointActor2.PointActor);

exports.Window = Window;
});

;require.register("actor/WoodenCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WoodenCrate = void 0;

var _PointActor = require("./PointActor");

var _BreakableBlock2 = require("./BreakableBlock");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WoodenCrate = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(WoodenCrate, _BreakableBlock);

  var _super = _createSuper(WoodenCrate);

  function WoodenCrate() {
    var _this;

    _classCallCheck(this, WoodenCrate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-breakable-block actor-wooden-crate';
    _this.args.width = 60;
    _this.args.height = 60;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(WoodenCrate, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (type === 0 && other.controllable) {
        return true; // return super.collideA(other, type);
      }

      if (other.spindashCharge) {
        this["break"]();
        return true;
      }

      if (type === -1 && !other.args.gSpeed && !other.args.falling && other.controllable) {
        this["break"]();
        return false;
      }

      if (type !== 1 && type !== 3 || other.y <= this.y - this.args.height) {
        return true;
      }

      if (other.args.rolling || other.args.bouncing) {
        this["break"]();
        return false;
      }

      if (!this.viewport) {
        return false;
      }

      if (type === -1 || other.args.rolling) {
        return _get(_getPrototypeOf(WoodenCrate.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return WoodenCrate;
}(_BreakableBlock2.BreakableBlock);

exports.WoodenCrate = WoodenCrate;
});

;require.register("actor/monitor/RingMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RingMonitor = void 0;

var _Monitor2 = require("../Monitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RingMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(RingMonitor, _Monitor);

  var _super = _createSuper(RingMonitor);

  function RingMonitor() {
    _classCallCheck(this, RingMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(RingMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(RingMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'ring'
      });
      this.ringSample = new Audio('/Sonic/ring-collect.wav');
      this.ringSample.volume = 0.10 + Math.random() * -0.05;
    }
  }, {
    key: "effect",
    value: function effect(other) {
      other.args.rings += 10;
      this.ringSample && this.ringSample.play();
    }
  }]);

  return RingMonitor;
}(_Monitor2.Monitor);

exports.RingMonitor = RingMonitor;
});

;require.register("actor/monitor/SheildElectricMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildElectricMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _ElectricSheild = require("../../powerups/ElectricSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildElectricMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildElectricMonitor, _Monitor);

  var _super = _createSuper(SheildElectricMonitor);

  function SheildElectricMonitor() {
    _classCallCheck(this, SheildElectricMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildElectricMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildElectricMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-electric'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _ElectricSheild.ElectricSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildElectricMonitor;
}(_Monitor2.Monitor);

exports.SheildElectricMonitor = SheildElectricMonitor;
});

;require.register("actor/monitor/SheildFireMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildFireMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _FireSheild = require("../../powerups/FireSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildFireMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildFireMonitor, _Monitor);

  var _super = _createSuper(SheildFireMonitor);

  function SheildFireMonitor() {
    _classCallCheck(this, SheildFireMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildFireMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildFireMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-fire'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _FireSheild.FireSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildFireMonitor;
}(_Monitor2.Monitor);

exports.SheildFireMonitor = SheildFireMonitor;
});

;require.register("actor/monitor/SheildStarMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildStarMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _StarSheild = require("../../powerups/StarSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildStarMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildStarMonitor, _Monitor);

  var _super = _createSuper(SheildStarMonitor);

  function SheildStarMonitor() {
    _classCallCheck(this, SheildStarMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildStarMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildStarMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-star'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _StarSheild.StarSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildStarMonitor;
}(_Monitor2.Monitor);

exports.SheildStarMonitor = SheildStarMonitor;
});

;require.register("actor/monitor/SheildWaterMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildWaterMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _BubbleSheild = require("../../powerups/BubbleSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildWaterMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildWaterMonitor, _Monitor);

  var _super = _createSuper(SheildWaterMonitor);

  function SheildWaterMonitor() {
    _classCallCheck(this, SheildWaterMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildWaterMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildWaterMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-water'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _BubbleSheild.BubbleSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildWaterMonitor;
}(_Monitor2.Monitor);

exports.SheildWaterMonitor = SheildWaterMonitor;
});

;require.register("backdrop/Backdrop.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Backdrop = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var layers = [];

var Backdrop = /*#__PURE__*/function (_View) {
  _inherits(Backdrop, _View);

  var _super = _createSuper(Backdrop);

  function Backdrop() {
    var _this;

    _classCallCheck(this, Backdrop);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"backdrop [[name]]\">\n\t\t<div cv-ref = \"backdrop\" class = \"parallax\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "layers", []);

    _defineProperty(_assertThisInitialized(_this), "urls", []);

    _defineProperty(_assertThisInitialized(_this), "stacked", 0);

    return _this;
  }

  _createClass(Backdrop, [{
    key: "onAttached",
    value: function onAttached(event) {
      var _this2 = this;

      if (this.alreadyAttached) {
        return;
      }

      this.alreadyAttached = true;
      var backdrop = this.tags.backdrop;
      var strips = this.args.strips.reverse();
      var yPositions = [];
      var xPositions = [];
      var urls = [];
      var stacked = 0;

      for (var i in strips) {
        var strip = strips[i];
        yPositions.push("calc(100% - calc(1px * ".concat(stacked, "))"));
        var xFormula = "0px";

        if (strip.parallax) {
          xFormula = "calc(".concat(xFormula, " + calc(1px * calc(").concat(strip.parallax, " * var(--x))))");
        }

        if (strip.autoscroll) {
          xFormula = "calc(".concat(xFormula, " + calc(1px * calc(").concat(strip.autoscroll, " * var(--frame) )) )");
        }

        xPositions.push(xFormula);
        urls.push(strips[i].url);
        stacked += strips[i].height - 1;
      }

      this.urls = urls;
      this.stacked = stacked;
      var xPos = xPositions.join(', ');
      var yPos = yPositions.join(', ');
      var url = this.urls.map(function (u) {
        return "url(".concat(u, ")");
      }).join(', ');
      backdrop.style({
        'background-position-y': yPos,
        'background-position-x': xPos,
        'background-repeat': 'repeat-x',
        'background-image': url,
        '--x': this.args.x,
        '--y': this.args.y
      });
      this.args.bindTo(['x', 'y', 'xMax', 'yMax', 'frame', 'stacked', 'top', 'bottom'], function (v, k) {
        return backdrop.style(_defineProperty({}, "--".concat(k), v));
      });
      this.args.bindTo('frame', function (v, k) {
        for (var _i in _this2.args.strips) {
          var _strip = _this2.args.strips[_i];

          if (_strip.frames) {
            if (_strip.timeout-- === 0) {
              _strip.timeout = _strip.interval;
              _strip.frame++;

              if (_strip.frame >= _strip.frames.length) {
                _strip.frame = 0;
              }

              _this2.urls[_i] = _strip.frames[_strip.frame];

              _this2.refreshLayers();
            }
          }
        }
      });
    }
  }, {
    key: "refreshLayers",
    value: function refreshLayers() {
      this.tags.backdrop.style({
        'background-image': this.urls.map(function (u) {
          return "url(".concat(u, ")");
        }).join(', ')
      });
    }
  }]);

  return Backdrop;
}(_View2.View);

exports.Backdrop = Backdrop;
});

;require.register("backdrop/Industrial.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Industrial = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Industrial = /*#__PURE__*/function (_Backdrop) {
  _inherits(Industrial, _Backdrop);

  var _super = _createSuper(Industrial);

  function Industrial(args, parent) {
    var _this;

    _classCallCheck(this, Industrial);

    _this = _super.call(this, args, parent);
    _this.args.name = 'industrial';
    _this.args.strips = [{
      autoscroll: 0.4,
      parallax: 0.035,
      url: '/Sonic/backdrop/labrynth-industrial/0.png',
      height: 24
    }, {
      autoscroll: 0.35,
      parallax: 0.025,
      url: '/Sonic/backdrop/labrynth-industrial/1.png',
      height: 24
    }, {
      autoscroll: 0.25,
      parallax: 0.015,
      url: '/Sonic/backdrop/labrynth-industrial/0.png',
      height: 24
    }, {
      autoscroll: 0.125,
      parallax: 0.0125,
      url: '/Sonic/backdrop/labrynth-industrial/1.png',
      height: 24
    }, {
      autoscroll: 0.025,
      parallax: 0.01,
      url: '/Sonic/backdrop/labrynth-industrial/2.png',
      height: 24
    }, {
      autoscroll: 0.015,
      parallax: 0.0075,
      url: '/Sonic/backdrop/labrynth-industrial/3.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.04,
      url: '/Sonic/backdrop/labrynth-industrial/4-dist.png',
      height: 70
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/labrynth-industrial/4.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/labrynth-industrial/flame-0.png',
      height: 1,
      interval: 1,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/flame-0a.png', '/Sonic/backdrop/labrynth-industrial/flame-1.png', '/Sonic/backdrop/labrynth-industrial/flame-1.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-4.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-4.png', '/Sonic/backdrop/labrynth-industrial/flame-5.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png']
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/labrynth-industrial/5-bw-small.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/labrynth-industrial/5-bw-small.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-dim.png',
      height: 50
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-pink-lights.png',
      height: 1,
      interval: 20,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-lights-0.png', '/Sonic/backdrop/labrynth-industrial/5-lights-0.png', '/Sonic/backdrop/labrynth-industrial/5-lights-1.png', '/Sonic/backdrop/labrynth-industrial/5-lights-1.png', '/Sonic/backdrop/labrynth-industrial/5-lights-2.png', '/Sonic/backdrop/labrynth-industrial/5-lights-2.png']
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-signals-0.png',
      height: 1,
      interval: 10,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png']
    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5.png',
      height: 40
    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5-pink-lights.png',
      height: 1 // , interval: 100
      // , timeout:  0
      // , frame:    0
      // , frames:   [
      // 	'/Sonic/backdrop/labrynth-industrial/5-lights-0.png',
      // 	'/Sonic/backdrop/labrynth-industrial/5-lights-1.png'
      // ]

    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5-signals-0.png',
      height: 1,
      interval: 20,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png']
    }, {
      autoscroll: 0,
      parallax: 0.4,
      url: '/Sonic/backdrop/labrynth-industrial/6-half.png',
      height: 88
    }];
    return _this;
  }

  return Industrial;
}(_Backdrop2.Backdrop);

exports.Industrial = Industrial;
});

;require.register("backdrop/MarbleGarden.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarbleGarden = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MarbleGarden = /*#__PURE__*/function (_Backdrop) {
  _inherits(MarbleGarden, _Backdrop);

  var _super = _createSuper(MarbleGarden);

  function MarbleGarden(args, parent) {
    var _this;

    _classCallCheck(this, MarbleGarden);

    _this = _super.call(this, args, parent);
    _this.args.name = 'marble-garden';
    _this.args.strips = [{
      autoscroll: -1.25,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/0.png',
      height: 32
    }, {
      autoscroll: -1,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/1.png',
      height: 24
    }, {
      autoscroll: -0.9,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/2.png',
      height: 8
    }, {
      autoscroll: -0.8,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/3.png',
      height: 24
    }, {
      autoscroll: -0.7,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/4.png',
      height: 8
    }, {
      autoscroll: -0.6,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/5.png',
      height: 24
    }, {
      autoscroll: -0.5,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/6.png',
      height: 16
    }, {
      autoscroll: -0.45,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/7.png',
      height: 8
    }, {
      autoscroll: -0.45,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/8.png',
      height: 16
    }, {
      autoscroll: -0.4,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/9.png',
      height: 8
    }, {
      autoscroll: -0.35,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/10.png',
      height: 16
    }, {
      autoscroll: -0.3,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/11.png',
      height: 8
    }, {
      autoscroll: -0.25,
      parallax: 0.0075,
      url: '/Sonic/backdrop/marble-garden/12.png',
      height: 8
    }, {
      autoscroll: -0.2,
      parallax: 0.0075,
      url: '/Sonic/backdrop/marble-garden/13.png',
      height: 8
    }, {
      autoscroll: -0.15,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/14.png',
      height: 8
    }, {
      autoscroll: -0.1,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/15.png',
      height: 5
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/marble-garden/16.png',
      height: 30
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/marble-garden/17.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/marble-garden/18.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/marble-garden/19.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/marble-garden/20.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.2,
      url: '/Sonic/backdrop/marble-garden/21.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.225,
      url: '/Sonic/backdrop/marble-garden/22.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.25,
      url: '/Sonic/backdrop/marble-garden/23.png',
      height: 344
    }];
    return _this;
  }

  return MarbleGarden;
}(_Backdrop2.Backdrop);

exports.MarbleGarden = MarbleGarden;
});

;require.register("backdrop/MysticCave.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MysticCave = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MysticCave = /*#__PURE__*/function (_Backdrop) {
  _inherits(MysticCave, _Backdrop);

  var _super = _createSuper(MysticCave);

  function MysticCave(args, parent) {
    var _this;

    _classCallCheck(this, MysticCave);

    _this = _super.call(this, args, parent);
    _this.args.name = 'mystic-cave';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.11,
      url: '/Sonic/backdrop/mystic-cave/1.png',
      height: 37
    }, {
      autoscroll: 0,
      parallax: 0.12,
      url: '/Sonic/backdrop/mystic-cave/2.png',
      height: 23
    }, {
      autoscroll: 0,
      parallax: 0.13,
      url: '/Sonic/backdrop/mystic-cave/3.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.14,
      url: '/Sonic/backdrop/mystic-cave/4.png',
      height: 7
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/5.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.16,
      url: '/Sonic/backdrop/mystic-cave/6.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.18,
      url: '/Sonic/backdrop/mystic-cave/7.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.20,
      url: '/Sonic/backdrop/mystic-cave/8.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.22,
      url: '/Sonic/backdrop/mystic-cave/9.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.21,
      url: '/Sonic/backdrop/mystic-cave/10.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.20,
      url: '/Sonic/backdrop/mystic-cave/11.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.19,
      url: '/Sonic/backdrop/mystic-cave/12.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.18,
      url: '/Sonic/backdrop/mystic-cave/13.png',
      height: 19
    }, {
      autoscroll: 0,
      parallax: 0.17,
      url: '/Sonic/backdrop/mystic-cave/14.png',
      height: 34
    }, {
      autoscroll: 0,
      parallax: 0.16,
      url: '/Sonic/backdrop/mystic-cave/15.png',
      height: 62
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/16.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.14,
      url: '/Sonic/backdrop/mystic-cave/16.5.png',
      height: 19
    }, {
      autoscroll: 0,
      parallax: 0.13,
      url: '/Sonic/backdrop/mystic-cave/17.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.12,
      url: '/Sonic/backdrop/mystic-cave/18.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/19.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/mystic-cave/20.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.2,
      url: '/Sonic/backdrop/mystic-cave/21.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.25,
      url: '/Sonic/backdrop/mystic-cave/22.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/mystic-cave/23.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.325,
      url: '/Sonic/backdrop/mystic-cave/24.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.375,
      url: '/Sonic/backdrop/mystic-cave/25.png',
      height: 7
    }, {
      autoscroll: 0,
      parallax: 0.4,
      url: '/Sonic/backdrop/mystic-cave/26.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.425,
      url: '/Sonic/backdrop/mystic-cave/27.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.45,
      url: '/Sonic/backdrop/mystic-cave/28.png',
      height: 23
    }, {
      autoscroll: 0,
      parallax: 0.5,
      url: '/Sonic/backdrop/mystic-cave/29.png',
      height: 37
    }];
    return _this;
  }

  return MysticCave;
}(_Backdrop2.Backdrop);

exports.MysticCave = MysticCave;
});

;require.register("backdrop/ProtoLabrynth.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProtoLabrynth = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProtoLabrynth = /*#__PURE__*/function (_Backdrop) {
  _inherits(ProtoLabrynth, _Backdrop);

  var _super = _createSuper(ProtoLabrynth);

  function ProtoLabrynth(args, parent) {
    var _this;

    _classCallCheck(this, ProtoLabrynth);

    _this = _super.call(this, args, parent);
    _this.args.name = 'proto-labrynth';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/protolabrynth/0.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/protolabrynth/1.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/protolabrynth/2.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.075,
      url: '/Sonic/backdrop/protolabrynth/3.png',
      height: 68
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/protolabrynth/4.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/protolabrynth/5.png',
      height: 27
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/protolabrynth/5.png',
      height: 27
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/protolabrynth/6.png',
      height: 76
    }];
    return _this;
  }

  return ProtoLabrynth;
}(_Backdrop2.Backdrop);

exports.ProtoLabrynth = ProtoLabrynth;
});

;require.register("backdrop/WestSide.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSide = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSide = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSide, _Backdrop);

  var _super = _createSuper(WestSide);

  function WestSide(args, parent) {
    var _this;

    _classCallCheck(this, WestSide);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side';
    _this.args.strips = [{
      autoscroll: 0.001,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-0.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-1.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0004,
      url: '/Sonic/backdrop/west-side/water-shine-2.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water.png',
      height: 142
    }, {
      autoscroll: 0.001,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-reflected.png',
      height: 0
    }];
    return _this;
  }

  return WestSide;
}(_Backdrop2.Backdrop);

exports.WestSide = WestSide;
});

;require.register("backdrop/WestSideCloudy.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSideCloudy = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSideCloudy = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSideCloudy, _Backdrop);

  var _super = _createSuper(WestSideCloudy);

  function WestSideCloudy(args, parent) {
    var _this;

    _classCallCheck(this, WestSideCloudy);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side-cloudy';
    _this.args.strips = [{
      autoscroll: 0.14,
      parallax: 0.02,
      url: '/Sonic/backdrop/west-side/clouds-0.png',
      height: 33
    }, {
      autoscroll: 0.13,
      parallax: 0.014,
      url: '/Sonic/backdrop/west-side/clouds-1.png',
      height: 32
    }, {
      autoscroll: 0.12,
      parallax: 0.013,
      url: '/Sonic/backdrop/west-side/clouds-2.png',
      height: 24
    }, {
      autoscroll: 0.11,
      parallax: 0.012,
      url: '/Sonic/backdrop/west-side/clouds-3.png',
      height: 16
    }, {
      autoscroll: 0.10,
      parallax: 0.011,
      url: '/Sonic/backdrop/west-side/clouds-4.png',
      height: 5
    }, {
      autoscroll: 0.09,
      parallax: 0.010,
      url: '/Sonic/backdrop/west-side/clouds-5.png',
      height: 3
    }, {
      autoscroll: 0.08,
      parallax: 0.009,
      url: '/Sonic/backdrop/west-side/clouds-6.png',
      height: 8
    }, {
      autoscroll: 0.07,
      parallax: 0.008,
      url: '/Sonic/backdrop/west-side/clouds-7.png',
      height: 5
    }, {
      autoscroll: 0.06,
      parallax: 0.007,
      url: '/Sonic/backdrop/west-side/clouds-8.png',
      height: 3
    }, {
      autoscroll: 0.05,
      parallax: 0.006,
      url: '/Sonic/backdrop/west-side/clouds-9.png',
      height: 8
    }, {
      autoscroll: 0.04,
      parallax: 0.005,
      url: '/Sonic/backdrop/west-side/clouds-10.png',
      height: 8
    }, {
      autoscroll: 0.03,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/clouds-11.png',
      height: 32
    }, {
      autoscroll: 0.02,
      parallax: 0.003,
      url: '/Sonic/backdrop/west-side/clouds-12.png',
      height: 8
    }, {
      autoscroll: 0.015,
      parallax: 0.002,
      url: '/Sonic/backdrop/west-side/clouds-13.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-cloudy.png',
      height: 2
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-cloudy.png',
      height: 0
    }, {
      autoscroll: 0.015,
      parallax: 0.002,
      url: '/Sonic/backdrop/west-side/reflected-clouds-0.png',
      height: 32
    }, {
      autoscroll: 0.02,
      parallax: 0.003,
      url: '/Sonic/backdrop/west-side/reflected-clouds-1.png',
      height: 8
    }, {
      autoscroll: 0.03,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/reflected-clouds-2.png',
      height: 32
    }, {
      autoscroll: 0.04,
      parallax: 0.005,
      url: '/Sonic/backdrop/west-side/reflected-clouds-3.png',
      height: 8
    }, {
      autoscroll: 0.05,
      parallax: 0.006,
      url: '/Sonic/backdrop/west-side/reflected-clouds-4.png',
      height: 8
    }, {
      autoscroll: 0.06,
      parallax: 0.007,
      url: '/Sonic/backdrop/west-side/reflected-clouds-5.png',
      height: 3
    }, {
      autoscroll: 0.07,
      parallax: 0.008,
      url: '/Sonic/backdrop/west-side/reflected-clouds-6.png',
      height: 5
    }, {
      autoscroll: 0.08,
      parallax: 0.009,
      url: '/Sonic/backdrop/west-side/reflected-clouds-7.png',
      height: 16
    }, {
      autoscroll: 0.09,
      parallax: 0.010,
      url: '/Sonic/backdrop/west-side/reflected-clouds-8.png',
      height: 24
    }, {
      autoscroll: 0.1,
      parallax: 0.011,
      url: '/Sonic/backdrop/west-side/reflected-clouds-9.png',
      height: 20
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-cloudy-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water-cloudy.png',
      height: 0
    }];

    _this.args.bindTo('frame', function (v) {
      if (_this.args.ligtening) {
        return;
      }

      if (Math.random() > 0.995) {
        _this.args.name = 'west-side-cloudy lightning';
        _this.args.lightning = true;

        _this.onTimeout(1000, function () {
          _this.args.name = 'west-side-cloudy';
          _this.args.lightning = false;
        });
      }
    });

    return _this;
  }

  return WestSideCloudy;
}(_Backdrop2.Backdrop);

exports.WestSideCloudy = WestSideCloudy;
});

;require.register("backdrop/WestSideNight.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSideNight = void 0;

var _Backdrop2 = require("./Backdrop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSideNight = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSideNight, _Backdrop);

  var _super = _createSuper(WestSideNight);

  function WestSideNight(args, parent) {
    var _this;

    _classCallCheck(this, WestSideNight);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-0.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-1.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0004,
      url: '/Sonic/backdrop/west-side/water-shine-2.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water.png',
      height: 142
    }, {
      autoscroll: 0,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-reflected.png',
      height: 0
    }];
    return _this;
  }

  return WestSideNight;
}(_Backdrop2.Backdrop);

exports.WestSideNight = WestSideNight;
});

;require.register("behavior/Behavior.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Behavior = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Behavior = /*#__PURE__*/function () {
  function Behavior() {
    _classCallCheck(this, Behavior);
  }

  _createClass(Behavior, [{
    key: "update",
    value: function update(host) {}
  }]);

  return Behavior;
}();

exports.Behavior = Behavior;
});

;require.register("behavior/SkidDust.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkidDust = void 0;

var _Tag = require("curvature/base/Tag");

var _Behavior2 = require("./Behavior");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SkidDust = /*#__PURE__*/function (_Behavior) {
  _inherits(SkidDust, _Behavior);

  var _super = _createSuper(SkidDust);

  function SkidDust(dustType) {
    var _this;

    _classCallCheck(this, SkidDust);

    _this = _super.call(this);
    _this.dustType = dustType || 'particle-dust';
    return _this;
  }

  _createClass(SkidDust, [{
    key: "update",
    value: function update(host) {
      if (host["public"].falling || host["public"].rolling) {
        return;
      }

      if (host["public"].wallSticking || host["public"].climbing) {
        return;
      }

      var direction = host["public"].direction;

      if (!Math.sign(host["public"].gSpeed) || !Math.sign(direction)) {
        return;
      }

      if (Math.abs(host["public"].gSpeed - direction) < 5) {
        return;
      }

      if (!host.alwaysSkidding) {
        if (Math.sign(host["public"].gSpeed) === Math.sign(direction)) {
          return;
        }

        if (!host.skidding) {
          return;
        }
      }

      var viewport = host.viewport;
      var dustFreq = host.distFreq || 2;

      if (viewport.args.frameId % dustFreq !== 0) {
        return;
      }

      var dustParticle = new _Tag.Tag("<div class = \"".concat(this.dustType, "\">"));
      var dustDist = Math.sign(host.args.gSpeed) * host.dustDist || 0;
      var dustPoint = host.rotatePoint(host.args.gSpeed, 0);
      dustParticle.style({
        '--x': dustPoint[0] + dustDist + host.x,
        '--y': dustPoint[1] + host.y,
        'z-index': 0,
        opacity: Math.random() * 2
      });
      viewport.particles.add(dustParticle);
      viewport.onFrameOut(20, function () {
        viewport.particles.remove(dustParticle);
      });
    }
  }]);

  return SkidDust;
}(_Behavior2.Behavior);

exports.SkidDust = SkidDust;
});

;require.register("cards/basic-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t</span>\n</div>\n"
});

;require.register("cards/basic-moves.html", function(exports, require, module) {
module.exports = "<p><b>jump</b> + <b>jump</b> - fly / double jump action</p>\n\n<p><span class = \"arrow-button arrow-north\"></span> + <b>jump</b> - disengage vehicle</p>\n\n<!-- <p><span class = \"arrow-button arrow-south\"></span> + <b>jump</b> - spindash</p> -->\n"
});

;require.register("cards/plane-air-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- double barrier\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t\t- <span>light dash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>air dash left</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>air dash right</span>\n\t</span>\n\n</div>\n"
});

;require.register("cards/sonic-air-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- double barrier\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t\t- <span>light dash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>air dash left</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>air dash right</span>\n\t</span>\n\n</div>\n"
});

;require.register("cards/sonic-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- jump\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>spindash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>x</b>\n\t\t- <span>super</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>no action</span>\n\t</span>\n\n</div>\n"
});

;require.register("console/task/Impulse.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Impulse = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Impulse = /*#__PURE__*/function (_Task) {
  _inherits(Impulse, _Task);

  var _super = _createSuper(Impulse);

  function Impulse() {
    var _this;

    _classCallCheck(this, Impulse);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'Impulse task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Impulse, [{
    key: "init",
    value: function init(magnitude, angle) {
      // this.print(`Pressing button ${buttonId} for ${ms} milliseconds...`);
      var actor = Impulse.viewport.controlActor;
      actor.impulse(magnitude, angle, true);
    }
  }, {
    key: "write",
    value: function write(line) {
      this.print(line);
    }
  }]);

  return Impulse;
}(_Task2.Task);

exports.Impulse = Impulse;

_defineProperty(Impulse, "viewport", null);

_defineProperty(Impulse, "helpText", 'Apply an impulse to the player object.');

_defineProperty(Impulse, "useText", 'input magnitude angle');
});

;require.register("console/task/Input.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Input = /*#__PURE__*/function (_Task) {
  _inherits(Input, _Task);

  var _super = _createSuper(Input);

  function Input() {
    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'Input task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Input, [{
    key: "init",
    value: function init(inputId) {
      var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      var magnitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      var frame,
          intervalId,
          onDone = function onDone() {};

      if (inputId[0] === 'a') {
        var axisId = inputId.substring(1);
        this.print("Setting axis ".concat(axisId, " to ").concat(magnitude, " for ").concat(ms, " milliseconds..."));
        frame = {
          axes: _defineProperty({}, axisId, magnitude)
        };
        intervalId = setInterval(function () {
          controller.tilt(axisId, magnitude);
          actor.readInput();
        }, 16);

        onDone = function onDone() {
          controller.tilt(axisId, 0);
          actor.readInput();
          clearInterval(intervalId);
        };
      }

      if (inputId[0] === 'b') {
        var buttonId = inputId.substring(1);
        this.print("Pressing button ".concat(buttonId, " for ").concat(ms, " milliseconds..."));
        frame = {
          buttons: _defineProperty({}, buttonId, 1)
        };
        intervalId = setInterval(function () {
          frame.buttons[buttonId] = 1;
          controller.replay(frame);
          actor.readInput();
        }, 16);

        onDone = function onDone() {
          frame.buttons[buttonId] = 0;
          controller.replay(frame);
          actor.readInput();
          clearInterval(intervalId);
        };
      }

      if (!frame) {
        return;
      }

      var actor = Input.viewport.controlActor;
      var controller = actor.controller;
      controller.replay(frame);
      actor.readInput();
      return new Promise(function (accept) {
        setTimeout(function () {
          onDone();
          accept();
        }, ms);
      });
    }
  }, {
    key: "write",
    value: function write(line) {
      this.print(line);
    }
  }]);

  return Input;
}(_Task2.Task);

exports.Input = Input;

_defineProperty(Input, "viewport", null);

_defineProperty(Input, "helpText", 'Press a button x for y milliseconds.');

_defineProperty(Input, "useText", 'input x y');
});

;require.register("console/task/Move.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Move = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Move = /*#__PURE__*/function (_Task) {
  _inherits(Move, _Task);

  var _super = _createSuper(Move);

  function Move() {
    var _this;

    _classCallCheck(this, Move);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Move, [{
    key: "init",
    value: function init(x, y) {
      this.print("Moving character to x, y...");
      var actor = Move.viewport.controlActor;
      actor.args.x = Number(x);
      actor.args.y = Number(y);

      if (actor.viewport) {
        actor.viewport.setColCell(actor);
      }
    }
  }]);

  return Move;
}(_Task2.Task);

exports.Move = Move;

_defineProperty(Move, "viewport", null);

_defineProperty(Move, "helpText", 'Move the current actor to a position in space.');

_defineProperty(Move, "useText", 'move x y');
});

;require.register("console/task/Pos.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pos = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pos = /*#__PURE__*/function (_Task) {
  _inherits(Pos, _Task);

  var _super = _createSuper(Pos);

  function Pos() {
    _classCallCheck(this, Pos);

    return _super.apply(this, arguments);
  }

  _createClass(Pos, [{
    key: "init",
    value: function init(x, y) {
      var actor = Pos.viewport.controlActor;
      this.print("Character is at ".concat(actor.x, ", ").concat(actor.y, "."));
    }
  }]);

  return Pos;
}(_Task2.Task);

exports.Pos = Pos;

_defineProperty(Pos, "viewport", null);

_defineProperty(Pos, "helpText", 'Check the current actor\'s position in space.');
});

;require.register("console/task/Settings.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Settings = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Settings = /*#__PURE__*/function (_Task) {
  _inherits(Settings, _Task);

  var _super = _createSuper(Settings);

  function Settings() {
    var _this;

    _classCallCheck(this, Settings);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Settings, [{
    key: "init",
    value: function init(key, val) {
      var viewport = Settings.viewport;

      if (val !== undefined) {
        viewport.settings[key] = JSON.parse(val);
      }

      this.print(JSON.stringify(viewport.settings[key]));
    }
  }]);

  return Settings;
}(_Task2.Task);

exports.Settings = Settings;

_defineProperty(Settings, "viewport", null);

_defineProperty(Settings, "helpText", 'Get/set the values of settings variables.');

_defineProperty(Settings, "useText", 'set key val');
});

;require.register("controller/Axis.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Axis = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Axis = /*#__PURE__*/function () {
  function Axis(_ref) {
    var _ref$deadZone = _ref.deadZone,
        deadZone = _ref$deadZone === void 0 ? 0 : _ref$deadZone,
        _ref$proportional = _ref.proportional,
        proportional = _ref$proportional === void 0 ? true : _ref$proportional;

    _classCallCheck(this, Axis);

    _defineProperty(this, "magnitude", 0);

    _defineProperty(this, "delta", 0);

    if (deadZone) {
      this.proportional = proportional;
      this.deadZone = deadZone;
    }
  }

  _createClass(Axis, [{
    key: "tilt",
    value: function tilt(magnitude) {
      if (this.deadZone && Math.abs(magnitude) >= this.deadZone) {
        magnitude = (Math.abs(magnitude) - this.deadZone) / (1 - this.deadZone) * Math.sign(magnitude);
      } else {
        magnitude = 0;
      }

      this.delta = Number(magnitude - this.magnitude).toFixed(3) - 0;
      this.magnitude = Number(magnitude).toFixed(3) - 0;
    }
  }, {
    key: "zero",
    value: function zero() {
      this.magnitude = this.delta = 0;
    }
  }]);

  return Axis;
}();

exports.Axis = Axis;
});

;require.register("controller/Button.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Button = /*#__PURE__*/function () {
  function Button() {
    _classCallCheck(this, Button);

    _defineProperty(this, "active", false);

    _defineProperty(this, "pressure", 0);

    _defineProperty(this, "delta", 0);

    _defineProperty(this, "time", 0);
  }

  _createClass(Button, [{
    key: "update",
    value: function update() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.pressure) {
        this.time++;
      } else if (!this.pressure && this.time > 0) {
        this.time = -1;
      } else if (!this.pressure && this.time < 0) {
        this.time--;
      }

      if (this.time < -1 && this.delta === -1) {
        this.delta = 0;
      }
    }
  }, {
    key: "press",
    value: function press(pressure) {
      this.delta = Number(pressure - this.pressure).toFixed(3) - 0;
      this.pressure = Number(pressure).toFixed(3) - 0;
      this.active = true;
      this.time = this.time > 0 ? this.time : 0;
    }
  }, {
    key: "release",
    value: function release() {
      if (!this.active) {
        return;
      }

      this.delta = Number(-this.pressure).toFixed(3) - 0;
      this.pressure = 0;
      this.active = false;
    }
  }, {
    key: "zero",
    value: function zero() {
      this.pressure = this.delta = 0;
      this.active = false;
    }
  }]);

  return Button;
}();

exports.Button = Button;
});

;require.register("controller/Controller.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Controller = void 0;

var _Axis = require("./Axis");

var _Button = require("./Button");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var keys = {
  'Space': 0,
  'Enter': 0,
  'NumpadEnter': 0,
  'ControlLeft': 1,
  'ControlRight': 1,
  'ShiftLeft': 2,
  'ShiftRight': 2,
  'KeyZ': 3,
  'KeyQ': 4,
  'KeyE': 5,
  'Digit1': 6,
  'Digit3': 7,
  'KeyW': 12,
  'KeyA': 14,
  'KeyS': 13,
  'KeyD': 15,
  'KeyH': 112,
  'KeyJ': 113,
  'KeyK': 114,
  'KeyL': 115,
  'KeyP': 9,
  'Pause': 9,
  'Tab': 11,
  'ArrowUp': 12,
  'ArrowDown': 13,
  'ArrowLeft': 14,
  'ArrowRight': 15,
  'Numpad4': 112,
  'Numpad2': 113,
  'Numpad8': 114,
  'Numpad6': 115,
  'Backquote': 1010,
  'NumpadAdd': 1011,
  'NumpadSubtract': 1012,
  'NumpadMultiply': 1013,
  'NumpadDivide': 1014,
  'Escape': 1020
};

_toConsumableArray(Array(12)).map(function (x, fn) {
  return keys["F".concat(fn)] = 2000 + fn;
});

var axisMap = {
  12: -1,
  13: +1,
  14: -0,
  15: +0,
  112: -2,
  113: +3,
  114: -3,
  115: +2
};

var Controller = /*#__PURE__*/function () {
  function Controller(_ref) {
    var _ref$keys = _ref.keys,
        keys = _ref$keys === void 0 ? {} : _ref$keys,
        _ref$deadZone = _ref.deadZone,
        deadZone = _ref$deadZone === void 0 ? 0 : _ref$deadZone,
        _ref$gamepad = _ref.gamepad,
        gamepad = _ref$gamepad === void 0 ? null : _ref$gamepad,
        _ref$keyboard = _ref.keyboard,
        keyboard = _ref$keyboard === void 0 ? null : _ref$keyboard;

    _classCallCheck(this, Controller);

    this.deadZone = deadZone;
    Object.defineProperties(this, {
      buttons: {
        value: {}
      },
      pressure: {
        value: {}
      },
      axes: {
        value: {}
      },
      keys: {
        value: {}
      }
    });
  }

  _createClass(Controller, [{
    key: "update",
    value: function update(_ref2) {
      var gamepad = _ref2.gamepad;

      for (var i in this.buttons) {
        var button = this.buttons[i];
        button.update();
      }

      if (gamepad && this.willRumble) {
        if (_typeof(this.willRumble) !== 'object') {
          this.willRumble = {
            duration: 1000,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          };
        }

        if (gamepad.vibrationActuator) {
          gamepad.vibrationActuator.playEffect("dual-rumble", this.willRumble);
        }

        this.willRumble = false;
      }
    }
  }, {
    key: "rumble",
    value: function rumble() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.willRumble = options;
    }
  }, {
    key: "readInput",
    value: function readInput(_ref3) {
      var keyboard = _ref3.keyboard,
          gamepad = _ref3.gamepad;
      var pressed = {};
      var released = {};

      if (gamepad) {
        for (var i in gamepad.buttons) {
          var button = gamepad.buttons[i];

          if (button.pressed) {
            this.press(i, button.value);
            pressed[i] = true;
          }
        }
      }

      if (keyboard) {
        for (var _i in _toConsumableArray(Array(10))) {
          if (pressed[_i]) {
            continue;
          }

          if (keyboard.getKeyCode(_i) > 0) {
            this.press(_i, 1);
            pressed[_i] = true;
          }
        }

        for (var keycode in keys) {
          if (pressed[keycode]) {
            continue;
          }

          var buttonId = keys[keycode];

          if (keyboard.getKeyCode(keycode) > 0) {
            this.press(buttonId, 1);
            pressed[buttonId] = true;
          }
        }
      }

      if (gamepad) {
        for (var _i2 in gamepad.buttons) {
          if (pressed[_i2]) {
            continue;
          }

          var _button = gamepad.buttons[_i2];

          if (!_button.pressed) {
            this.release(_i2);
            released[_i2] = true;
          }
        }
      }

      if (keyboard) {
        for (var _i3 in _toConsumableArray(Array(10))) {
          if (released[_i3]) {
            continue;
          }

          if (pressed[_i3]) {
            continue;
          }

          if (keyboard.getKeyCode(_i3) < 0) {
            this.release(_i3);
            released[_i3] = true;
          }
        }

        for (var _keycode in keys) {
          var _buttonId = keys[_keycode];

          if (released[_buttonId]) {
            continue;
          }

          if (pressed[_buttonId]) {
            continue;
          }

          if (keyboard.getKeyCode(_keycode) < 0) {
            this.release(_buttonId);
            released[_keycode] = true;
          }
        }
      }

      var tilted = {};

      if (gamepad) {
        for (var _i4 in gamepad.axes) {
          var axis = gamepad.axes[_i4];
          tilted[_i4] = true;
          this.tilt(_i4, axis);
        }
      }

      for (var inputId in axisMap) {
        if (!this.buttons[inputId]) {
          this.buttons[inputId] = new _Button.Button();
        }

        var _axis = axisMap[inputId];
        var value = Math.sign(1 / _axis);
        var axisId = Math.abs(_axis);

        if (this.buttons[inputId].active) {
          tilted[axisId] = true;
          this.tilt(axisId, value);
        } else if (!tilted[axisId]) {
          this.tilt(axisId, 0);
        }
      }
    }
  }, {
    key: "tilt",
    value: function tilt(axisId, magnitude) {
      if (!this.axes[axisId]) {
        this.axes[axisId] = new _Axis.Axis({
          deadZone: this.deadZone
        });
      }

      this.axes[axisId].tilt(magnitude);
    }
  }, {
    key: "press",
    value: function press(buttonId) {
      var pressure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      if (!this.buttons[buttonId]) {
        this.buttons[buttonId] = new _Button.Button();
      }

      this.buttons[buttonId].press(pressure);
    }
  }, {
    key: "release",
    value: function release(buttonId) {
      if (!this.buttons[buttonId]) {
        this.buttons[buttonId] = new _Button.Button();
      }

      this.buttons[buttonId].release();
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var buttons = {};

      for (var i in this.buttons) {
        buttons[i] = this.buttons[i].pressure;
      }

      var axes = {};

      for (var _i5 in this.axes) {
        axes[_i5] = this.axes[_i5].magnitude;
      }

      return {
        axes: axes,
        buttons: buttons
      };
    }
  }, {
    key: "replay",
    value: function replay(input) {
      if (input.buttons) {
        for (var i in input.buttons) {
          if (input.buttons[i] > 0) {
            this.press(i, input.buttons[i]);
          } else {
            this.release(i);
          }
        }
      }

      if (input.axes) {
        for (var _i6 in input.axes) {
          if (input.axes[_i6].magnitude !== input.axes[_i6]) {
            this.tilt(_i6, input.axes[_i6]);
          }
        }
      }
    }
  }, {
    key: "zero",
    value: function zero() {
      for (var i in this.axes) {
        this.axes[i].zero();
      }

      for (var _i7 in this.buttons) {
        this.buttons[_i7].zero();
      }
    }
  }]);

  return Controller;
}();

exports.Controller = Controller;
});

;require.register("debug/LineDump.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineDump = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LineDump = /*#__PURE__*/function (_View) {
  _inherits(LineDump, _View);

  var _super = _createSuper(LineDump);

  function LineDump() {
    var _this;

    _classCallCheck(this, LineDump);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"line-dump\" style = \"--x:[[x]];--y:[[y]];--length:[[len]];--angle:[[angle]]\">\n\t\t<div class = \"line\" style = \"border-color:[[color]]\"></div>\n\t</div>");

    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    return _this;
  }

  return LineDump;
}(_View2.View);

exports.LineDump = LineDump;
});

;require.register("debug/PointDump.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointDump = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PointDump = /*#__PURE__*/function (_View) {
  _inherits(PointDump, _View);

  var _super = _createSuper(PointDump);

  function PointDump() {
    var _this;

    _classCallCheck(this, PointDump);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"point-dump\">\n\t\t<div class = \"point\" style = \"--color:[[color]]\">[[x]], [[y]]</div>\n\t</div>");

    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    return _this;
  }

  return PointDump;
}(_View2.View);

exports.PointDump = PointDump;
});

;require.register("debug/arrow-east.svg", function(exports, require, module) {
module.exports = "<svg width=\"497.81px\" height=\"497.81px\" enable-background=\"new 0 0 497.812 497.812\" version=\"1.1\" viewBox=\"0 0 497.81 497.81\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<g transform=\"matrix(-1 0 0 1 497.81 0)\">\n\t\t<path d=\"m203.66 312.91 117.03 117.03-67.906 67.875-248.91-248.91 248.91-248.91 67.906 67.875-117.06 117.06 290.28-0.031 0.031 127.97z\"/>\n\t</g>\n</svg>\n"
});

;require.register("effects/Cylinder.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cylinder = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Cylinder = /*#__PURE__*/function (_View) {
  _inherits(Cylinder, _View);

  var _super = _createSuper(Cylinder);

  function Cylinder(args, parent) {
    var _this;

    _classCallCheck(this, Cylinder);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'cylinder';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    return _this;
  }

  _createClass(Cylinder, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag("<canvas width = \"".concat(this.args.width, "\" height = \"").concat(this.args.height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, this.args.width, this.args.height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / this.args.width);
        var x = w % this.args.width;
        var ox = x - this.args.width / 2;
        var oy = y - this.args.height / 2;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));
        var s = Math.min(this.args.width, this.args.height) / 2;
        c = Math.abs(ox / this.args.width) / 2; // d = p / s;

        r = 128 + ox * 4 * c;
        g = 128; // + (oy * 4) * d;

        b = 0;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Cylinder;
}(_View2.View);

exports.Cylinder = Cylinder;
});

;require.register("effects/Droop.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Droop = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Droop = /*#__PURE__*/function (_View) {
  _inherits(Droop, _View);

  var _super = _createSuper(Droop);

  function Droop(args, parent) {
    var _this;

    _classCallCheck(this, Droop);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./droop.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'droop';
    _this.args.width = (args.width || 64) * 2;
    _this.args.height = args.height || 64;
    _this.args.intensity = 1.0;
    _this.args.droopWidth = '102%';
    return _this;
  }

  _createClass(Droop, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      this.constructor.generateMap(this.args.width, this.args.height).then(function (image) {
        _this2.args.blob = image;
      });
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }], [{
    key: "generateMap",
    value: function generateMap(width, height) {
      var memoKey = "".concat(width, "::").concat(height);
      var memoMap = this.memoMaps;

      if (memoMap.has(memoKey)) {
        return Promise.resolve(memoMap.get(memoKey));
      }

      var displacer = new _Tag.Tag("<canvas width = \"".concat(width, "\" height = \"").concat(height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, width, height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b, _a;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / width);
        var x = w % width;
        var ux = x / width;
        var uy = y / height;
        var input = -Math.PI + ux * Math.PI;
        r = 128;
        g = 128 + Math.round(128 * (Math.cos(input) * 0.5 + 0.5));
        b = 0;
        a = 255;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = (_a = a) !== null && _a !== void 0 ? _a : 255;
      }

      context.putImageData(image, 0, 0);
      return new Promise(function (accept) {
        displacer.toBlob(function (png) {
          var blob = URL.createObjectURL(png, 'image/png');
          memoMap.set(memoKey, blob);
          accept(blob);
        });
      });
    }
  }]);

  return Droop;
}(_View2.View);

exports.Droop = Droop;

_defineProperty(Droop, "memoMaps", new Map());
});

;require.register("effects/Pinch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pinch = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pinch = /*#__PURE__*/function (_View) {
  _inherits(Pinch, _View);

  var _super = _createSuper(Pinch);

  function Pinch(args, parent) {
    var _this;

    _classCallCheck(this, Pinch);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'pinch';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    return _this;
  }

  _createClass(Pinch, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag("<canvas width = \"".concat(this.args.width, "\" height = \"").concat(this.args.height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, this.args.width, this.args.height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / this.args.width);
        var x = w % this.args.width;
        var ox = x - this.args.width / 2;
        var oy = y - this.args.height / 2;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));
        var ss = Math.min(this.args.width, this.args.height);
        var s = ss / 2;

        if (p < s) {
          c = Math.pow(1 - p / s, 2);
          d = Math.pow(1 - p / s, 2);
        } else {
          c = 0;
          d = 0;
        }

        r = 128 + ox * 4 * c;
        g = 128 + oy * 4 * d;
        b = 0;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Pinch;
}(_View2.View);

exports.Pinch = Pinch;
});

;require.register("effects/ScreenFire.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenFire = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ScreenFire = /*#__PURE__*/function (_View) {
  _inherits(ScreenFire, _View);

  var _super = _createSuper(ScreenFire);

  function ScreenFire() {
    var _this;

    _classCallCheck(this, ScreenFire);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./screen-fire'));

    return _this;
  }

  _createClass(ScreenFire, [{
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      this.args.animation = 'playing';
      this.onTimeout(5000, function () {
        return _this2.remove();
      });
    }
  }]);

  return ScreenFire;
}(_View2.View);

exports.ScreenFire = ScreenFire;
});

;require.register("effects/ScreenWarp.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenWarp = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ScreenWarp = /*#__PURE__*/function (_View) {
  _inherits(ScreenWarp, _View);

  var _super = _createSuper(ScreenWarp);

  function ScreenWarp() {
    var _this;

    _classCallCheck(this, ScreenWarp);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./screen-fire'));

    return _this;
  }

  _createClass(ScreenWarp, [{
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      this.args.animation = 'playing';
      this.onTimeout(5000, function () {
        return _this2.remove();
      });
    }
  }]);

  return ScreenWarp;
}(_View2.View);

exports.ScreenWarp = ScreenWarp;
});

;require.register("effects/Twist.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Twist = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Twist = /*#__PURE__*/function (_View) {
  _inherits(Twist, _View);

  var _super = _createSuper(Twist);

  function Twist(args, parent) {
    var _this;

    _classCallCheck(this, Twist);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'twist';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    _this.args.dx = 0;
    _this.args.dy = 0;
    return _this;
  }

  _createClass(Twist, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag('<canvas width = "64" height = "64">');
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, 64, 64);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = 1;
        var w = i / 4;
        var y = Math.floor(w / 64);
        var x = w % 64;
        var ox = x - 31.5;
        var oy = y - 31.5 - 15.5;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));

        if (p > 32) {
          c = 0;
        } else {
          c = Math.pow(1 - p / 32, 3);
        }

        r = 128 + oy * 4 * c;
        g = 128 - ox * 4 * c;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 0;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 0;
        pixels[i + 2] = b !== null && b !== void 0 ? b : 0;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Twist;
}(_View2.View);

exports.Twist = Twist;
});

;require.register("effects/droop.svg", function(exports, require, module) {
module.exports = "<svg\n\twidth  =\"100%\"\n\theight =\"100%\"\n>\n\t<defs>\n\n\t\t<filter\n\t\t\tcv-ref = \"filter\"\n\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\tid = \"[[id]]\"\n\t\t\twidth  =\"102%\"\n\t\t\theight =\"500%\"\n\t\t\tx  = \"-1%\"\n\t\t\ty  = \"-1%\"\n\n\t\t>\n\t\t\t<feImage\n\t\t\t\tpreserveAspectRatio = \"none\"\n\t\t\t\tresult  = \"DisplacementSourceLeft\"\n\t\t\t\tcv-attr = \"width:droopWidthLeft,href:blob\"\n\t\t\t/>\n\n\t\t\t<feImage\n\t\t\t\tpreserveAspectRatio = \"none\"\n\t\t\t\tresult  = \"DisplacementSourceRightInvert\"\n\t\t\t\tcv-attr = \"x:droopRightStart,width:droopWidthRight,href:blob\"\n\t\t\t/>\n\n\t\t\t<feColorMatrix\n\t\t\t\tin     = \"DisplacementSourceRightInvert\"\n\t\t\t\tresult = \"DisplacementSourceRight\"\n\t\t\t\ttype   = \"matrix\"\n\t\t\t\tvalues=\"\n\t\t\t\t\t1 0 0 0 0\n\t\t\t\t\t0 -1 0 0 1.5\n\t\t\t\t\t0 0 1 0 0\n\t\t\t\t\t0 0 0 1 0\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSourceLeft\"\n\t\t\t\tin2    = \"DisplacementSourceRight\"\n\t\t\t\tresult = \"DisplacementSource\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feFlood flood-color=\"#808000\" result = \"OffsetNeutral\" />\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSource\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSource\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feDisplacementMap\n\t\t\t\txChannelSelector = \"R\"\n\t\t\t\tyChannelSelector = \"G\"\n\t\t\t\tin      = \"SourceGraphic\"\n\t\t\t\tin2     = \"DisplacementResult\"\n\t\t\t\tcv-ref  = \"displace\"\n\t\t\t\tcv-attr = \"scale:scale\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t</filter>\n\n\t</defs>\n</svg>\n"
});

;require.register("effects/screen-fire.html", function(exports, require, module) {
module.exports = "<div class = \"screen-fire [[animation]]\">\n\t<div class = \"fire-strip\" style = \"--index:0\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:1\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:2\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:3\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:4\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:5\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:6\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:7\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:8\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:9\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:10\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:11\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:12\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:13\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:14\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:15\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:16\"><div></div></div>\n</div>\n"
});

;require.register("effects/twist.svg", function(exports, require, module) {
module.exports = "<svg\n\theight =\"100%\"\n\twidth  =\"100%\"\n>\n\t<defs>\n\n\t\t<filter\n\t\t\tcv-ref = \"filter\"\n\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\theight = \"100%\"\n\t\t\twidth  = \"100%\"\n\t\t\tid     = \"[[id]]\"\n\t\t\tx      = \"0%\"\n\t\t\ty      = \"0%\"\n\n\t\t>\n\t\t\t<feFlood\n\t\t\t\tflood-color=\"#808000\"\n\t\t\t\theight = \"100%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t\tresult = \"OffsetNeutral\"\n\t\t\t\tx=\"0\"\n\t\t\t\ty=\"0\"\n\t\t\t/>\n\n\t\t\t<feImage\n\t\t\t\txlink:href=\"[[blob]]\"\n\t\t\t\tresult = \"DisplacementSource\"\n\t\t\t\theight = \"100%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t/>\n\n\t\t\t<feOffset\n\t\t\t\tin      = \"DisplacementSource\"\n\t\t\t\tresult  = \"OffsetSource\"\n\t\t\t\tcv-attr =  \"dx:dx,dy:dy\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tin     = \"OffsetSource\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t/>\n\n\t\t\t<feDisplacementMap\n\t\t\t\txChannelSelector = \"R\"\n\t\t\t\tyChannelSelector = \"G\"\n\t\t\t\tin      = \"SourceGraphic\"\n\t\t\t\tin2     = \"DisplacementResult\"\n\t\t\t\tcv-ref  = \"displace\"\n\t\t\t\tcv-attr = \"scale:scale\"\n\t\t\t/>\n\n\t\t</filter>\n\n\t</defs>\n</svg>\n"
});

;require.register("initialize.js", function(exports, require, module) {
"use strict";

var _Viewport = require("./viewport/Viewport");

var _Tag = require("curvature/base/Tag");

var _TileMap = require("./tileMap/TileMap");

var viewportA = new _Viewport.Viewport();
document.addEventListener('DOMContentLoaded', function () {
  console.log('Starting...'); // setTimeout(()=>console.log(window.myfunc(512, 512)), 1500);

  if (navigator.serviceWorker) {
    navigator.serviceWorker.register('/worker-cache.js');
  }

  var lastTime = 0;
  viewportA.render(document.body);
  viewportA.args.fps = '...';
  var body = new _Tag.Tag(document.body);
  var skyShift = 100;
  var frameTimes = [];

  var update = function update() {
    var now = performance.now();
    var frameTime = now - lastTime;
    var frameAgeMin = 1000 / (viewportA.args.maxFps || 60);
    requestAnimationFrame(update);

    if (viewportA.args.maxFps < 60 && frameAgeMin > frameTime) {
      return;
    }

    viewportA.update();
    lastTime = now;
    frameTimes.push(frameTime);

    if (frameTimes.length > 1) {
      var frameTimeSum = frameTimes.reduce(function (a, b) {
        return a + b;
      });
      var frameTimeAvg = frameTimeSum / frameTimes.length;
      viewportA.args.fps = 1000 / frameTimeAvg;
      frameTimes.splice(0);
    }
  };

  update();
});
});

require.register("intro/BootCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BootCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BootCard = /*#__PURE__*/function (_Card) {
  _inherits(BootCard, _Card);

  var _super = _createSuper(BootCard);

  function BootCard(args, parent) {
    var _this;

    _classCallCheck(this, BootCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'boot-card';
    _this.args.text = "PRODUCED BY\nSEAN MORRIS UNDER\nTHE APACHE 2.0 LICENSE";
    return _this;
  }

  return BootCard;
}(_Card2.Card);

exports.BootCard = BootCard;
});

;require.register("intro/Card.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Card = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Card = /*#__PURE__*/function (_View) {
  _inherits(Card, _View);

  var _super = _createSuper(Card);

  function Card() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Card);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./card.html'));

    args.text = args.text || 'this is an intro card.';
    _this.args.timeout = _this.args.timeout || 1000;
    _this.args.animation = 'opening';
    _this.done = new Promise(function (accept) {
      return _this.accept = accept;
    });
    return _this;
  }

  _createClass(Card, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      this.onTimeout(50, function () {
        return _this2.args.animation = 'opened';
      });
      return new Promise(function (accept) {
        var timeAcc = _this2.args.timeout;

        if (timeAcc < 0) {
          return;
        }

        _this2.onTimeout(timeAcc - 500, function () {
          return _this2.args.animation = 'closing';
        });

        _this2.onTimeout(timeAcc, function () {
          _this2.args.animation = 'closed';
          var done = new Promise(function (acceptDone) {
            return _this2.onTimeout(timeAcc, acceptDone);
          });

          _this2.accept([done]);

          accept([done]);
        });
      });
    }
  }]);

  return Card;
}(_View2.View);

exports.Card = Card;
});

;require.register("intro/DebianCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DebianCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DebianCard = /*#__PURE__*/function (_Card) {
  _inherits(DebianCard, _Card);

  var _super = _createSuper(DebianCard);

  function DebianCard(args, parent) {
    var _this;

    _classCallCheck(this, DebianCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./debian-card.html'));

    _this.args.cardName = 'debian-card';
    _this.args.text = "";
    return _this;
  }

  return DebianCard;
}(_Card2.Card);

exports.DebianCard = DebianCard;
});

;require.register("intro/GamepadCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GamepadCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GamepadCard = /*#__PURE__*/function (_Card) {
  _inherits(GamepadCard, _Card);

  var _super = _createSuper(GamepadCard);

  function GamepadCard(args, parent) {
    var _this;

    _classCallCheck(this, GamepadCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./gamepad-card.html'));

    _this.args.cardName = 'gamepad-card';
    _this.args.text = "";
    return _this;
  }

  return GamepadCard;
}(_Card2.Card);

exports.GamepadCard = GamepadCard;
});

;require.register("intro/LoadingCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LoadingCard = /*#__PURE__*/function (_Card) {
  _inherits(LoadingCard, _Card);

  var _super = _createSuper(LoadingCard);

  function LoadingCard(args, parent) {
    var _this;

    _classCallCheck(this, LoadingCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'loading-card';
    return _this;
  }

  return LoadingCard;
}(_Card2.Card);

exports.LoadingCard = LoadingCard;
});

;require.register("intro/LogoSplash.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogoSplash = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LogoSplash = /*#__PURE__*/function (_View) {
  _inherits(LogoSplash, _View);

  var _super = _createSuper(LogoSplash);

  function LogoSplash() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, LogoSplash);

    _this = _super.call(this, args, parent);
    _this.ringSample = new Audio('/Sonic/ring-collect.wav');
    _this.ringSample.volume = 0.50;
    _this.template = "\n\t\t<div class = \"player-waving\"></div>\n\t\t<div class = \"splash [[animation]]\" style = \"\n\t\t\tpointer-events: [[pointerEvents]]\n\t\t\">\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t</div>";
    return _this;
  }

  _createClass(LogoSplash, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      if (this.alreadyAttached) {
        return;
      }

      this.alreadyAttached = true;
      this.args.left = 0;
      this.args.right = 0;
      this.args.fade = 1;
      this.args.frame = 0;
      this.args.fullFade = 1;
      this.args.pointerEvents = 'all';
      this.args.animation = 'hide';
      this.onTimeout(500, function () {
        return _this2.args.animation = 'slide';
      });
      this.onTimeout(1250, function () {
        return _this2.args.animation = 'show';
      });
      this.onTimeout(5000, function () {
        return _this2.args.animation = 'done';
      });
      this.onTimeout(1250, function () {
        return _this2.parent.args.audio && _this2.ringSample.play();
      });
    }
  }]);

  return LogoSplash;
}(_View2.View);

exports.LogoSplash = LogoSplash;
});

;require.register("intro/SeanCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SeanCard = void 0;

var _Card2 = require("./Card");

var _LogoSplash = require("./LogoSplash");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SeanCard = /*#__PURE__*/function (_Card) {
  _inherits(SeanCard, _Card);

  var _super = _createSuper(SeanCard);

  function SeanCard(args, parent) {
    var _this;

    _classCallCheck(this, SeanCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'sean-card';
    _this.args.text = new _LogoSplash.LogoSplash({}, parent);
    return _this;
  }

  return SeanCard;
}(_Card2.Card);

exports.SeanCard = SeanCard;
});

;require.register("intro/Series.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Series = void 0;

var _View2 = require("curvature/base/View");

var _Card = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Series = /*#__PURE__*/function (_View) {
  _inherits(Series, _View);

  var _super = _createSuper(Series);

  function Series() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Series);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"intro-cards\" cv-each = \"cards:card:c\">[[card]]</div>");

    _this.cards = args.cards;
    _this.args.cards = [];
    _this.args.card = null;
    _this.startTime = false;
    return _this;
  }

  _createClass(Series, [{
    key: "play",
    value: function play() {
      var _this2 = this;

      var card = this.cards.shift();
      var early = new Promise(function (accept) {
        return card.onRemove(accept);
      });
      var play = card.play();
      this.args.cards.push(card);
      this.startTime = Date.now();
      return Promise.race([play, early, card.done]).then(function (done) {
        _this2.parent.onFrameOut(10, function () {
          if (done) {
            _this2.parent.onFrameOut(10, function () {
              Promise.all(done).then(function () {
                return card.remove();
              });
            });
          }

          if (_this2.cards.length) {
            return _this2.play();
          } else {
            return play;
          }
        });
      });
    }
  }, {
    key: "input",
    value: function input(controller) {
      var card = this.args.cards[this.args.cards.length - 1];

      if (card && card.input) {
        card.input(controller);
      }
    }
  }]);

  return Series;
}(_View2.View);

exports.Series = Series;
});

;require.register("intro/ThankYouCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThankYouCard = void 0;

var _Card2 = require("./Card");

var _CharacterString = require("../ui/CharacterString");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ThankYouCard = /*#__PURE__*/function (_Card) {
  _inherits(ThankYouCard, _Card);

  var _super = _createSuper(ThankYouCard);

  function ThankYouCard(args, parent) {
    var _this;

    _classCallCheck(this, ThankYouCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./thank-you.html'));

    _this.args.cardName = 'thank-you-card';
    _this.args.text = new _CharacterString.CharacterString({
      value: 'Thank you for playing!'
    });
    _this.args.backdrop = '...';
    return _this;
  }

  return ThankYouCard;
}(_Card2.Card);

exports.ThankYouCard = ThankYouCard;
});

;require.register("intro/TitleScreenCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleScreenCard = void 0;

var _Card2 = require("./Card");

var _CharacterString = require("../ui/CharacterString");

var _MarbleGarden = require("../backdrop/MarbleGarden");

var _Keyboard = require("curvature/input/Keyboard");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TitleScreenCard = /*#__PURE__*/function (_Card) {
  _inherits(TitleScreenCard, _Card);

  var _super = _createSuper(TitleScreenCard);

  function TitleScreenCard(args, parent) {
    var _this;

    _classCallCheck(this, TitleScreenCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./titlescreen.html'));

    _this.args.cardName = 'title-screen-card';
    _this.args.text = '';
    _this.args.backdrop = '...';
    _this.startPressed = false;
    var backdrop = new _MarbleGarden.MarbleGarden();
    backdrop.args.frame = 0;
    backdrop.args.x = 0;
    backdrop.args.y = 140;
    backdrop.args.xMax = 10000;
    backdrop.args.yMax = 800;
    _this.started = 0;
    _this.bgm = new Audio('/Sonic/carnival-night-zone-act-2-beta.mp3');
    _this.bgm.volume = 0.5;

    _this.onRemove(function () {
      return _this.bgm.pause();
    });

    var keyBinding = _Keyboard.Keyboard.get().codes.bindTo('Enter', function (v) {
      if (!_this.started || Date.now() - _this.started < 2000) {
        return;
      }

      _this.onTimeout(200, function () {
        return _this.startPressed = true;
      });

      _this.args.animation = 'closing';

      _this.audioDebind();
    });

    _this.onRemove(keyBinding);

    _this.start = new Promise(function (accept) {
      _this.onFrame(function () {
        if (!_this.started || Date.now() - _this.started < 0) {
          return;
        }

        backdrop.args.x -= 24;
        backdrop.args.frame++;

        if (_this.startPressed) {
          var done = new Promise(function (acceptDone) {
            return _this.onTimeout(200, acceptDone);
          });
          accept([done]);
        }
      });
    });
    _this.args.backdrop = backdrop;
    _this.args.pressStart = new _CharacterString.CharacterString({
      value: 'press start/enter'
    });
    return _this;
  }

  _createClass(TitleScreenCard, [{
    key: "input",
    value: function input(controller) {
      var _this2 = this;

      if (!this.started || Date.now() - this.started < 2000) {
        return;
      }

      if (controller.buttons[9] && controller.buttons[9].time === 1) {
        this.onTimeout(200, function () {
          return _this2.startPressed = true;
        });
        this.args.animation = 'closing';
        this.audioDebind();
      }
    }
  }, {
    key: "play",
    value: function play() {
      var _this3 = this;

      this.onTimeout(1000, function () {
        _this3.audioDebind = _this3.parent.args.bindTo('audio', function (v) {
          v ? _this3.bgm.play() : _this3.bgm.pause();
        });

        _this3.onRemove(_this3.audioDebind);
      });
      this.onTimeout(2000, function () {
        return _this3.args.aurora = 'aurora';
      });
      this.started = Date.now();

      var play = _get(_getPrototypeOf(TitleScreenCard.prototype), "play", this).call(this);

      play.then(function () {
        _this3.bgm.pause();

        _this3.audioDebind();

        _this3.remove();
      });
      return Promise.race([this.start, play]);
    }
  }]);

  return TitleScreenCard;
}(_Card2.Card);

exports.TitleScreenCard = TitleScreenCard;
});

;require.register("intro/WebkitCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebkitCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WebkitCard = /*#__PURE__*/function (_Card) {
  _inherits(WebkitCard, _Card);

  var _super = _createSuper(WebkitCard);

  function WebkitCard(args, parent) {
    var _this;

    _classCallCheck(this, WebkitCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./webkit-card.html'));

    _this.args.cardName = 'webkit-card';
    _this.args.text = "";
    return _this;
  }

  _createClass(WebkitCard, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      this.onTimeout(1500, function () {
        return _this2.args.animation = 'spindash-charge';
      });
      this.onTimeout(3000, function () {
        return _this2.args.animation = 'spindash';
      });
      return _get(_getPrototypeOf(WebkitCard.prototype), "play", this).call(this, event);
    }
  }]);

  return WebkitCard;
}(_Card2.Card);

exports.WebkitCard = WebkitCard;
});

;require.register("intro/card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\t<span>[[text]]</span>\n</div>\n"
});

;require.register("intro/debian-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"debian-logo\"></div>\n\t\t<div class = \"caption\">Built on Debian</div>\n\t</div>\n</div>\n"
});

;require.register("intro/gamepad-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"gamepad-svg\"></div>\n\t\t<div class = \"caption\">Supports HTML5 Gamepad API.</div>\n\t</div>\n</div>\n\n"
});

;require.register("intro/thank-you.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"player-waving\"></div>\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"title-emblem\"></div>\n\t\t[[text]]\n\t</div>\n</div>\n"
});

;require.register("intro/titlescreen.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t[[backdrop]]\n\n\t<div class = \"main-elements-container\">\n\n\t\t<div class = \"title-emblem\"></div>\n\t\t<div class = \"press-start\">[[pressStart]]</div>\n\n\t</div>\n\n</div>\n"
});

;require.register("intro/webkit-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"chromium-logo\"></div>\n\t\t<div class = \"caption\">WebKit recommended for best experience.</div>\n\t</div>\n</div>\n"
});

;require.register("legacy/Actor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Actor = void 0;

var _View2 = require("curvature/base/View");

var _PointDump = require("../debug/PointDump");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Actor = /*#__PURE__*/function (_View) {
  _inherits(Actor, _View);

  var _super = _createSuper(Actor);

  function Actor() {
    var _this;

    _classCallCheck(this, Actor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "speed", 15);

    _defineProperty(_assertThisInitialized(_this), "template", require('./actor.html'));

    _this.world = null;
    _this.x = 92;
    _this.y = 1024;
    _this.width = 64;
    _this.height = 64;
    _this.boxWidth = 64;
    _this.boxHeight = 64;
    _this.directions = 16;
    _this.state = 'standing';
    _this.gSpeed = 0; // this.gSpeedMax = 48;

    _this.gSpeedMax = 40;
    _this.xSpeed = 0;
    _this.ySpeed = 0;
    _this.angle = 0;
    _this.maxGravity = 48;
    _this.gravity = 0;
    _this.slopeFactor = 0.01;
    _this.falling = true;
    _this.sensors = {
      top: false,
      bottom: false,
      left: false,
      right: false
    };
    _this.mode = _this.args.mode = 0;
    _this.modes = {
      floor: 0,
      leftWall: 1,
      ceiling: 2,
      rightWall: 3
    };
    _this.animationClasses = {};
    _this.currentClasses = null;
    _this.pdL = new _PointDump.PointDump({
      color: 'red'
    });
    _this.pdR = new _PointDump.PointDump({
      color: 'green'
    });
    _this.args.debugs = [_this.pdL, _this.pdR];
    return _this;
  }

  _createClass(Actor, [{
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "update",
    value: function update() {
      if (!this.tags.actor) {
        return;
      }

      var g = this.gSpeed;
      this.args.animspeed = Math.floor((this.gSpeedMax - Math.abs(g)) / 12);

      if (this.args.animspeed < 1) {
        this.args.animspeed = 1;
      }

      var angle = Math.round(this.angle * 1000) / 1000;

      if (!this.falling) {
        if (angle > Math.PI / 4 && angle < 2 * Math.PI / 4) {
          if (this.mode === this.modes.floor) {
            this.args.mode = this.mode = this.modes.leftWall;
          } else if (this.mode === this.modes.leftWall) {
            this.args.mode = this.mode = this.modes.ceiling;
          } else if (this.mode === this.modes.ceiling) {
            this.args.mode = this.mode = this.modes.rightWall;
          } else if (this.mode === this.modes.rightWall) {
            this.args.mode = this.mode = this.modes.floor;
          }
        }

        if (angle < -Math.PI / 4 && angle > -2 * Math.PI / 4) {
          if (this.mode === this.modes.floor) {
            this.args.mode = this.mode = this.modes.rightWall;
          } else if (this.mode === this.modes.rightWall) {
            this.args.mode = this.mode = this.modes.ceiling;
          } else if (this.mode === this.modes.ceiling) {
            this.args.mode = this.mode = this.modes.leftWall;
          } else if (this.mode === this.modes.leftWall) {
            this.args.mode = this.mode = this.modes.floor;
          }
        }

        if (Math.abs(g) > this.gSpeedMax / 2) {
          this.args.state = 'running';
        } else if (Math.abs(g) > 0) {
          this.args.state = 'walking';
        } else {
          this.args.state = 'standing';
        }

        if (g > 0) {
          this.args.facing = 'facing-right';
        } else {
          this.args.facing = 'facing-left';
        }
      } else if (this.falling || this.jumped) {
        this.args.state = 'jumping';
      }

      if (this.falling) {
        if (this.mode == this.modes.floor) {
          this.ySpeed++;
        } else if (this.mode == this.modes.ceiling) {
          this.ySpeed--;
        } else if (this.mode == this.modes.leftWall) {
          this.xSpeed--;
        } else if (this.mode == this.modes.rightWall) {
          this.xSpeed++;
        }
      } else if (!this.jumped) {
        this.xSpeed = 0;
        this.ySpeed = 0;
      }

      this.x += this.xSpeed;
      this.ySpeed && (this.y += this.ySpeed > 0 ? 1 : -1);

      if (g) {
        var max = 8;
        var abG = Math.abs(g);
        var div = abG > max ? max : abG;

        for (var i = 0; i < div; i++) {
          this.iteratePosition(Math.floor(g / div));
        }
      } else {
        this.iteratePosition(0);
      }

      if (this.ySpeed > 32) {
        this.ySpeed = 32;
      }

      if (this.ySpeed < -32) {
        this.ySpeed = -32;
      }

      if (this.xSpeed > 32) {
        this.xSpeed = 32;
      }

      if (this.xSpeed < -32) {
        this.xSpeed = -32;
      }

      this.tags.actor.style({
        '--x': Math.floor(this.x),
        '--y': Math.floor(this.y)
      });

      if (this.mode === this.modes.floor) {
        this.tags.actor.style({
          '--angle': this.angle
        });
      } else if (this.mode === this.modes.leftWall) {
        this.tags.actor.style({
          '--angle': this.angle + 1 * (Math.PI / 2)
        });
      } else if (this.mode === this.modes.ceiling) {
        this.tags.actor.style({
          '--angle': this.angle + 2 * (Math.PI / 2)
        });
      } else if (this.mode === this.modes.rightWall) {
        this.tags.actor.style({
          '--angle': this.angle + 3 * (Math.PI / 2)
        });
      }

      if (this.jumped) {
        this.jumped = false;
      }
    }
  }, {
    key: "iteratePosition",
    value: function iteratePosition(speed) {
      var sin = Math.sin(this.angle);
      var cos = Math.cos(this.angle);
      var center = this.center;
      var top = this.top;
      var bottom = this.bottom;
      var left = this.left;
      var right = this.right;
      var arm, leg, sensorLeft, sensorRight, sensorSpread;

      if (this.mode == this.modes.floor || this.mode == this.modes.ceiling) {
        arm = right - center[0];
        leg = bottom - center[1];
      } else if (this.mode == this.modes.leftWall || this.mode == this.modes.rightWall) {
        arm = right - center[1];
        leg = bottom - center[0];
      }

      sensorLeft = this.left - arm * sin + arm * 0.5;
      sensorRight = this.right - arm * sin - arm * 0.5;
      sensorSpread = Math.abs(sensorRight - sensorLeft);
      var map = this.viewport.tileMap;
      var leftScan = 0;
      var rightScan = 0;
      var scanLX, scanLY, scanRX, scanRY;
      var leftSolid = false,
          rightSolid = false;
      var height = this.falling ? this.height : this.height;
      var scans = [[-height, 0], [-height, height]];

      regress: for (var i in scans) {
        leftScan = scans[i][0];

        while (leftScan < scans[i][1]) {
          if (this.mode == this.modes.floor) {
            scanLX = sensorLeft;
            scanLY = bottom + leftScan;
          } else if (this.mode == this.modes.ceiling) {
            scanLX = sensorLeft;
            scanLY = bottom - leftScan;
          } else if (this.mode == this.modes.leftWall) {
            scanLX = bottom - leftScan;
            scanLY = sensorLeft;
          } else if (this.mode == this.modes.rightWall) {
            scanLX = bottom + leftScan;
            scanLY = sensorLeft;
          }

          leftSolid = map.getSolid(scanLX, scanLY);

          if (leftSolid) {
            if (leftScan !== 0) {
              break regress;
            }

            break;
          }

          leftScan++;
        }
      }

      regress: for (var _i in scans) {
        rightScan = scans[_i][0];

        while (rightScan < scans[_i][1]) {
          if (this.mode == this.modes.floor) {
            scanRX = sensorRight;
            scanRY = bottom + rightScan;
          } else if (this.mode == this.modes.ceiling) {
            scanRX = sensorRight;
            scanRY = bottom - rightScan;
          } else if (this.mode == this.modes.leftWall) {
            scanRX = bottom - rightScan;
            scanRY = sensorRight;
          } else if (this.mode == this.modes.rightWall) {
            scanRX = bottom + rightScan;
            scanRY = sensorRight;
          }

          rightSolid = map.getSolid(scanRX, scanRY);

          if (rightSolid) {
            break;
          }

          rightScan++;
        }
      }

      this.pdL.args.x = scanLX;
      this.pdL.args.y = scanLY;
      this.pdR.args.x = scanRX;
      this.pdR.args.y = scanRY;
      this.angle = Math.atan((rightScan - leftScan) / sensorSpread);

      if (!this.falling) {
        var offset = (leftScan + rightScan) / 2;

        if (this.mode === this.modes.floor) {
          this.x += speed * cos;
          this.y += speed * sin;
        } else if (this.mode === this.modes.rightWall) {
          this.x += speed * sin;
          this.y -= speed * cos;
        } else if (this.mode === this.modes.ceiling) {
          this.x -= speed * cos;
          this.y -= speed * sin;
        } else if (this.mode === this.modes.leftWall) {
          this.x -= speed * sin;
          this.y += speed * cos;
        }

        if (leftSolid && rightSolid && leftScan <= 0 && rightScan <= 0) {
          if (this.mode == this.modes.floor) {
            this.y += Math.ceil(offset);
          } else if (this.mode == this.modes.ceiling) {
            this.y -= Math.ceil(offset);
          } else if (this.mode == this.modes.leftWall) {
            this.x -= offset;
          } else if (this.mode == this.modes.rightWall) {
            this.x += offset;
          }
        }
      }

      if (leftScan > 0 && rightScan > 0) {
        this.falling = true;
      } else {
        this.falling = false;
      }
    }
  }, {
    key: "isColliding",
    value: function isColliding(actor) {}
  }, {
    key: "animate",
    value: function animate() {
      if (!this.animationClasses[animation]) {
        return;
      }

      if (this.currentClasses == this.animationClasses[animation]) {
        return;
      }

      this.currentClasses.map(function (remClass) {
        this.tags.sprite.removeClass(remClass);
      });
      this.animationClasses[animation].map(function (newClass) {
        this.tags.sprite.addClass(newClass);
      });
      this.currentClasses = this.animationClasses[animation];
    }
  }, {
    key: "roundAngle",
    value: function roundAngle(angle, segments) {
      angle = Math.round(angle * (180 / Math.PI));
      var rAngle = "Math.round"(angle / (360 / segments)) * 360 / segments;
      return rAngle * (Math.PI / 180);
    }
  }, {
    key: "goLeft",
    value: function goLeft() {
      if (this.gSpeed > 0) {
        this.gSpeed = 0;
      }

      if (this.gSpeed > -this.gSpeedMax) {
        this.gSpeed--;
      }
    }
  }, {
    key: "goRight",
    value: function goRight() {
      if (this.gSpeed < 0) {
        this.gSpeed = 0;
      }

      if (this.gSpeed < this.gSpeedMax) {
        this.gSpeed++;
      }
    }
  }, {
    key: "slowDown",
    value: function slowDown() {
      if (Math.abs(this.gSpeed) > 32) {
        this.gSpeed = this.gSpeed * 0.95;
      } else {
        this.gSpeed = this.gSpeed * 0.75;
      }

      if (Math.abs(this.gSpeed) <= 0.1) {
        this.gSpeed = 0;
      }
    }
  }, {
    key: "jump",
    value: function jump() {
      if (this.falling) {
        return;
      }

      this.falling = true;
      this.jumped = true;
      this.mode = this.args.mode = this.modes.floor;
      var angle;

      if (this.mode === this.modes.floor) {
        angle = this.angle;
      } else if (this.mode === this.modes.leftWall) {
        angle = this.angle + 1 * (Math.PI / 2);
      } else if (this.mode === this.modes.ceiling) {
        angle = this.angle + 2 * (Math.PI / 2);
      } else if (this.mode === this.modes.rightWall) {
        angle = this.angle + 3 * (Math.PI / 2);
      }

      this.angle = 0;
      this.ySpeed = -Math.cos(angle) * 20;
      this.xSpeed = Math.sin(angle) * 20;

      if (this.mode === this.modes.leftWall || this.mode === this.modes.rightWall) {
        this.gSpeed = 0;
      }
    }
  }, {
    key: "center",
    get: function get() {
      return [this.x + this.boxWidth / 2, this.y + this.boxHeight / 2];
    }
  }, {
    key: "left",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[0] - this.width / 2;
      } else if (this.mode == this.modes.ceiling) {
        return this.center[0] + this.width / 2;
      } else if (this.mode == this.modes.leftWall) {
        return this.center[1] - this.width / 2;
      } else if (this.mode == this.modes.rightWall) {
        return this.center[1] + this.width / 2;
      }
    }
  }, {
    key: "right",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[0] + this.width / 2;
      } else if (this.mode == this.modes.ceiling) {
        return this.center[0] - this.width / 2;
      } else if (this.mode == this.modes.leftWall) {
        return this.center[1] + this.width / 2;
      } else if (this.mode == this.modes.rightWall) {
        return this.center[1] - this.width / 2;
      }
    }
  }, {
    key: "top",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[1] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.ceiling) {
        return this.center[1] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.leftWall) {
        return this.center[0] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.rightWall) {
        return this.center[0] - Math.floor(this.height / 2);
      }
    }
  }, {
    key: "bottom",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[1] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.ceiling) {
        return this.center[1] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.leftWall) {
        return this.center[0] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.rightWall) {
        return this.center[0] + Math.floor(this.height / 2);
      }
    }
  }]);

  return Actor;
}(_View2.View);

exports.Actor = Actor;
});

;require.register("legacy/Walker.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Walker = void 0;

var _Actor2 = require("./Actor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Walker = /*#__PURE__*/function (_Actor) {
  _inherits(Walker, _Actor);

  var _super = _createSuper(Walker);

  function Walker() {
    _classCallCheck(this, Walker);

    return _super.apply(this, arguments);
  }

  return Walker;
}(_Actor2.Actor);

exports.Walker = Walker;
});

;require.register("legacy/actor.html", function(exports, require, module) {
module.exports = "<div class = \"actor knuckles [[state]] [[facing]]\" cv-ref = \"actor\" data-mode = \"[[mode]]\" style = \"--animspeed:[[animspeed]]\">\n\t<div class = \"sprite\" cv-ref = \"sprite\" ></div>\n</div>\n<div cv-each = \"debugs:debug\">[[debug]]</div>\n"
});

;require.register("mixin/CanPop.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanPop = void 0;

var _Tag = require("curvature/base/Tag");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var CanPop = {
  collideA: function collideA(other, type) {
    if (!this.args.currentSheild && !this.args.gone && this.viewport && (other.dashed || other.args.jumping || other.args.rolling || other instanceof _Projectile.Projectile)) {
      this.pop(other);
      return;
    }

    if (other && other.controllable) {
      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'badnik',
          eventAction: 'damaged-player',
          eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id, "::").concat(other.args.id)
        });
      }

      other.damage(this);
    }

    return false;
  },
  damage: function damage(other, type) {
    this.pop(other);
  },
  pop: function pop(other) {
    var _this = this;

    var viewport = this.viewport;

    if (!viewport || this.args.gone || other && other.args.owner === this) {
      return;
    }

    var explosion = new _Tag.Tag('<div class = "particle-explosion">');
    explosion.style({
      '--x': this.x,
      '--y': this.y - 16
    });
    viewport.particles.add(explosion);
    setTimeout(function () {
      return viewport.particles.remove(explosion);
    }, 512);
    setTimeout(function () {
      return _this.screen && _this.screen.remove();
    }, 1024);
    this.box && this.box.setAttribute('data-animation', 'broken');

    if (other && other.dashed) {
      other.args.gSpeed = 0;
      other.args.xSpeed = 0;
      other.args.ySpeed = -9;
      other.args.x = this.x;
      other.dashed = false;
    }

    if (other) {
      if (other.occupant) {
        other = other.occupant;
      }

      if (other.args.owner) {
        other = other.args.owner;
      }

      if (other.controllable && typeof this.effect === 'function') {
        if (this.args.gold) {
          other.args.score += 10000;
        } else {
          other.args.score += 100;
        }

        this.effect(other);
      }

      if (other.dashed) {
        other.args.xSpeed /= 4;
      }

      var ySpeed = other.args.ySpeed;

      if (other.args.falling) {
        this.onNextFrame(function () {
          other.args.ySpeed = Math.min(-ySpeed, -7);
          other.args.falling = true;
        });
      }

      other.dashed = false;
    }

    if (viewport.args.audio && this.sample) {
      this.sample.play();
    }

    if (this.args.target && this.viewport.actorsById[this.args.target]) {
      var target = this.viewport.actorsById[this.args.target];

      if (target) {
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }

    if (typeof ga === 'function') {
      ga('send', 'event', {
        eventCategory: 'badnik',
        eventAction: 'defeated',
        eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
      });
    }

    this.viewport.actors.remove(this);
    this.args.gone = true;
  }
};
exports.CanPop = CanPop;
});

;require.register("mixin/Constrainable.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Constrainable = void 0;

var _Tag = require("curvature/base/Tag");

var Constrainable = {
  onAttached: function onAttached() {
    var _this = this;

    this.box = this.findTag('div');
    this.sprite = this.findTag('div.sprite');
    this.chain = new _Tag.Tag('<div class = "chain">');
    this.sprite.appendChild(this.chain.node);

    if (!this.args._tiedTo) {
      var tiedTo = this.viewport.actorsById[this.args.tiedTo];
      this.args._tiedTo = tiedTo;

      if (tiedTo && !tiedTo.hanging.has(this.constructor)) {
        tiedTo.hanging.set(this.constructor, new Set());
        var hangList = tiedTo.hanging.get(this.constructor);
        hangList.add(this);
        this.onRemove(function () {
          return hangList["delete"](_this);
        });
      }
    }
  },
  findNextStep: function findNextStep() {
    return false;
  },
  setPos: function setPos() {
    var tiedTo = this.args._tiedTo;

    if (!tiedTo) {
      return false;
    }

    if (!tiedTo.args.falling) {
      this.args.groundAngle = -1.57;
      return false;
    }

    this.args.ropeLength = this.args.ropeLength || tiedTo.args.ropeLength;
    this.args.falling = true;
    var xDist = tiedTo.x - this.x;
    var yDist = tiedTo.y - this.y;
    var angle = Math.atan2(yDist, xDist);
    var dist = Math.sqrt(Math.pow(yDist, 2) + Math.pow(xDist, 2));
    var maxDist = this.args.ropeLength || 64;

    if (this.chain) {
      this.chain.style({
        '--distance': Math.min(dist, maxDist)
      });
    }

    this.args.groundAngle = -(angle + Math.PI / 2);
    var gravityAngle = angle + Math.PI;

    if (dist >= maxDist) {
      var xNext = tiedTo.x - Math.cos(angle) * maxDist; // - tiedTo.args.xSpeed;

      var yNext = tiedTo.y - Math.sin(angle) * maxDist; // - tiedTo.args.ySpeed;

      this.args.xSpeed -= Math.cos(gravityAngle);
      this.args.ySpeed -= Math.sin(gravityAngle);
      this.args.x = xNext - tiedTo.args.xSpeed / 5;
      this.args.y = yNext;

      if (this.viewport) {
        this.viewport.setColCell(this);
      }

      if (this.x === tiedTo.x && !tiedTo.args.xSpeed) {
        this.args.ySpeed = 0;
      }
    }
  }
};
exports.Constrainable = Constrainable;
});

require.register("mixin/Pushable.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pushable = void 0;
var Pushable = {
  collideA: function collideA(other, type) {
    if (type === -1 || other.isEffect) {
      return false;
    }

    var otherMag = Math.ceil(Math.abs(other.args.gSpeed || other.args.xSpeed));
    var otherDir = Math.sign(other.args.gSpeed || other.args.xSpeed);
    var otherSpeed = otherMag * otherDir;

    if (Math.abs(other["public"].ySpeed) > Math.abs(other["public"].xSpeed)) {
      return true;
    }

    if (!this.args.falling && type === 1 && otherSpeed <= 0) {
      return false;
    }

    if (!this.args.falling && type === 3 && otherSpeed >= 0) {
      return false;
    }

    var blockTop = this.y - this.args.height;

    if ((type === 1 || type === 3) && (other.y >= this.y || other.y > blockTop)) {
      if (!otherSpeed) {
        return true;
      }

      this.args.gSpeed = otherSpeed;
      this.args.pushed = Math.sign(otherSpeed) || this.args.pushed;
      var tileMap = this.viewport.tileMap;
      var moveBy = type === 1 && 1 || type === 3 && -1;
      var scan = this.scanBottomEdge(moveBy);
      var blockers = tileMap.getSolid(this.x + Math.ceil(this.args.width / 2) * moveBy, this.y);

      if (blockers) {
        return true;
      }

      var radius = this.args.width / 2;

      if (moveBy > 0 && scan === 0) {
        this.args.falling = true;
      } else if (moveBy < 0 && scan === 0) {
        this.args.falling = true;
      } else if (!this.args.falling || scan > 0) {
        var nextCenter = this.findNextStep(moveBy);
        var nextWall = this.findNextStep(moveBy + radius * Math.sign(moveBy));

        if ((!nextCenter[1] || nextCenter[2]) && !nextWall[3]) {
          // this.args.x += nextPosition[0] || moveBy;
          var otherRadius = other.args.width;
          var myRadius = this.args.width / 2;
          this.args.x = other.args.x + moveBy * (myRadius + otherRadius);
          return scan === 0;
        }

        return true;
      }
    }

    return true;
  }
};
exports.Pushable = Pushable;
});

;require.register("network/ChatBox.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatBox = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ChatBox = /*#__PURE__*/function (_View) {
  _inherits(ChatBox, _View);

  var _super = _createSuper(ChatBox);

  function ChatBox(args, parent) {
    var _this;

    _classCallCheck(this, ChatBox);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./chat-box.html'));

    _this.args.outputLines = [];

    var onOpen = function onOpen(event) {
      return _this.args.outputLines = ['You joined the chat.'];
    };

    var onMessage = function onMessage(event) {
      var packet = JSON.parse(event.detail);

      if (packet.message) {
        _this.args.outputLines.push("> ".concat(packet.message));

        _this.onNextFrame(function () {
          var chatOutput = _this.tags.chatOutput;
          chatOutput && chatOutput.scrollTo(0, chatOutput.scrollHeight);
        });
      }
    };

    _this.listen(args.pipe, 'open', onOpen);

    _this.listen(args.pipe, 'message', onMessage);

    return _this;
  }

  _createClass(ChatBox, [{
    key: "send",
    value: function send(event) {
      var _this2 = this;

      if (event && event.key !== 'Enter') {
        return;
      }

      var message = this.args.chatInput;

      if (!message) {
        return;
      }

      this.args.outputLines.push("< ".concat(message));
      this.args.chatInput = '';
      this.onNextFrame(function () {
        var tag = _this2.tags.chatOutput;
        tag.scrollTo(0, tag.scrollHeight);
        tag.focus();
      });
      this.args.pipe.send(JSON.stringify({
        message: message
      }));
    }
  }]);

  return ChatBox;
}(_View2.View);

exports.ChatBox = ChatBox;
});

;require.register("network/Rtc.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rtc = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Rtc = function Rtc() {
  _classCallCheck(this, Rtc);
};

exports.Rtc = Rtc;
});

;require.register("network/RtcClient.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcClient = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RtcClient = /*#__PURE__*/function (_Mixin$with) {
  _inherits(RtcClient, _Mixin$with);

  var _super = _createSuper(RtcClient);

  function RtcClient(rtcConfig) {
    var _this;

    _classCallCheck(this, RtcClient);

    _this = _super.call(this);
    _this.peerClient = new RTCPeerConnection(rtcConfig);
    _this.peerClientChannel = _this.peerClient.createDataChannel("chat");

    _this.peerClientChannel.addEventListener('open', function (event) {
      var openEvent = new CustomEvent('open', {
        detail: event.data
      });
      openEvent.originalEvent = event;

      _this.dispatchEvent(openEvent);

      _this.connected = true;
    });

    _this.peerClientChannel.addEventListener('close', function (event) {
      var closeEvent = new CustomEvent('close', {
        detail: event.data
      });
      closeEvent.originalEvent = event;

      _this.dispatchEvent(closeEvent);

      _this.connected = false;
    });

    _this.peerClientChannel.addEventListener('message', function (event) {
      var messageEvent = new CustomEvent('message', {
        detail: event.data
      });
      messageEvent.originalEvent = event;

      _this.dispatchEvent(messageEvent);
    });

    return _this;
  }

  _createClass(RtcClient, [{
    key: "send",
    value: function send(input) {
      this.peerClientChannel && this.peerClientChannel.send(input);
    }
  }, {
    key: "close",
    value: function close() {
      this.peerClientChannel && this.peerClientChannel.close();
    }
  }, {
    key: "offer",
    value: function offer() {
      var _this2 = this;

      this.peerClient.createOffer().then(function (offer) {
        _this2.peerClient.setLocalDescription(offer);
      });
      var candidates = new Set();
      return new Promise(function (accept) {
        _this2.peerClient.addEventListener('icecandidate', function (event) {
          if (!event.candidate) {
            return;
          } else {
            console.log(event.candidate);
            candidates.add(event.candidate);
          }

          accept(_this2.peerClient.localDescription);
        });
      });
    }
  }, {
    key: "accept",
    value: function accept(answer) {
      var session = new RTCSessionDescription(answer);
      this.peerClient.setRemoteDescription(session);
    }
  }]);

  return RtcClient;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.RtcClient = RtcClient;
});

;require.register("network/RtcClientTask.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcClientTask = void 0;

var _Task2 = require("subspace-console/Task");

var _Tag = require("curvature/base/Tag");

var _RtcClient = require("./RtcClient");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('accept');

var RtcClientTask = /*#__PURE__*/function (_Task) {
  _inherits(RtcClientTask, _Task);

  var _super = _createSuper(RtcClientTask);

  function RtcClientTask() {
    var _this;

    _classCallCheck(this, RtcClientTask);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'RTC Client Task');

    _defineProperty(_assertThisInitialized(_this), "connected", false);

    return _this;
  }

  _createClass(RtcClientTask, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      this.client = new _RtcClient.RtcClient({
        iceServers: [{
          urls: 'stun:stun1.l.google.com:19302'
        }, {
          urls: 'stun:stun2.l.google.com:19302'
        }]
      });
      this["finally"](function () {
        console.log('Terminating connection...');

        _this2.client.close();
      });
      this.client.addEventListener('open', function () {
        _this2.print('Remote peer client accepted!');
      });
      this.client.addEventListener('close', function () {
        _this2.print('Peer reset connection.');
      });
      this.client.addEventListener('message', function (event) {
        _this2.print("> ".concat(event.detail));
      });
      this.client.offerToken.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://request/".concat(btoa(tokenString));

        _this2.print("Client request code: ".concat(encodedToken));

        var offerTag = new _Tag.Tag('<textarea style = "display:none">');
        offerTag.innerText = encodedToken;
        document.body.append(offerTag.node);
        offerTag.select();
        document.execCommand("copy");
        offerTag.node.remove();
      });
      return new Promise(function (accept) {
        _this2[Accept] = accept;
      });
    }
  }, {
    key: "main",
    value: function main(input) {
      if (!input) {
        return;
      }

      if (!this.client.connected) {
        this.accept(input);
        return;
      }

      this.print("< ".concat(input));
      this.client.send(input);
    }
  }, {
    key: "accept",
    value: function accept(answerString) {
      if (!answerString) {
        this.print("Please supply server's accept string.");
        return;
      }

      var isEncoded = /^s3ktp:\/\/accept\/(.+)/.exec(answerString);
      console.log(isEncoded);

      if (isEncoded) {
        answerString = atob(isEncoded[1]);
      }

      var answer = JSON.parse(answerString);
      this.client.accept(answer);
    }
  }]);

  return RtcClientTask;
}(_Task2.Task);

exports.RtcClientTask = RtcClientTask;

_defineProperty(RtcClientTask, "helpText", 'RTC Client.');

_defineProperty(RtcClientTask, "useText", '');
});

;require.register("network/RtcServer.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcServer = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RtcServer = /*#__PURE__*/function (_Mixin$with) {
  _inherits(RtcServer, _Mixin$with);

  var _super = _createSuper(RtcServer);

  function RtcServer(rtcConfig) {
    var _this;

    _classCallCheck(this, RtcServer);

    _this = _super.call(this);
    _this.peerServer = new RTCPeerConnection(rtcConfig);

    _this.peerServer.addEventListener('datachannel', function (event) {
      _this.peerServerChannel = event.channel;

      _this.peerServerChannel.addEventListener('open', function (event) {
        var openEvent = new CustomEvent('open', {
          detail: event.data
        });
        openEvent.originalEvent = event;

        _this.dispatchEvent(openEvent);

        _this.connected = true;
      });

      _this.peerServerChannel.addEventListener('close', function (event) {
        var closeEvent = new CustomEvent('close', {
          detail: event.data
        });
        closeEvent.originalEvent = event;

        _this.dispatchEvent(closeEvent);

        _this.connected = false;
      });

      _this.peerServerChannel.addEventListener('message', function (event) {
        var messageEvent = new CustomEvent('message', {
          detail: event.data
        });
        messageEvent.originalEvent = event;

        _this.dispatchEvent(messageEvent);
      });
    });

    return _this;
  }

  _createClass(RtcServer, [{
    key: "send",
    value: function send(input) {
      this.peerServerChannel && this.peerServerChannel.send(input);
    }
  }, {
    key: "close",
    value: function close() {
      this.peerServerChannel && this.peerServerChannel.close();
    }
  }, {
    key: "answer",
    value: function answer(offer) {
      var _this2 = this;

      return new Promise(function (accept) {
        _this2.peerServer.setRemoteDescription(offer);

        _this2.peerServer.createAnswer(function (answer) {
          return _this2.peerServer.setLocalDescription(answer);
        }, function (error) {
          return console.error(error);
        });

        var candidates = new Set();

        _this2.peerServer.addEventListener('icecandidate', function (event) {
          if (!event.candidate) {
            return;
          } else {
            console.log(event.candidate);
            candidates.add(event.candidate);
          }

          accept(_this2.peerServer.localDescription);
        });
      });
    }
  }]);

  return RtcServer;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.RtcServer = RtcServer;
});

;require.register("network/RtcServerTask.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcServerTask = void 0;

var _Task2 = require("subspace-console/Task");

var _Tag = require("curvature/base/Tag");

var _RtcServer = require("./RtcServer");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('accept');

var RtcServerTask = /*#__PURE__*/function (_Task) {
  _inherits(RtcServerTask, _Task);

  var _super = _createSuper(RtcServerTask);

  function RtcServerTask() {
    var _this;

    _classCallCheck(this, RtcServerTask);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'RTC Server Task');

    _defineProperty(_assertThisInitialized(_this), "connected", false);

    return _this;
  }

  _createClass(RtcServerTask, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      this.server = new _RtcServer.RtcServer({
        iceServers: [{
          urls: 'stun:stun1.l.google.com:19302'
        }, {
          urls: 'stun:stun2.l.google.com:19302'
        }]
      });
      this["finally"](function () {
        _this2.print('Terminating connection...');

        _this2.server.close();
      });
      this.server.addEventListener('open', function () {
        _this2.print('Remote peer client accepted!');
      });
      this.server.addEventListener('close', function () {
        _this2.print('Peer reset connection.');
      });
      this.server.addEventListener('message', function (event) {
        _this2.print("> ".concat(event.detail));
      });
      this.server.answerToken.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://accept/".concat(btoa(tokenString));

        _this2.print("Server accept code: ".concat(encodedToken));

        var answerTag = new _Tag.Tag('<textarea style = "display:none">');
        answerTag.innerText = encodedToken;
        document.body.append(answerTag.node);
        answerTag.select();
        document.execCommand("copy");
        answerTag.node.remove();
      });
      this.printErr("Please supply client's request code.");
      return new Promise(function (accept) {
        _this2[Accept] = accept;
      });
    }
  }, {
    key: "main",
    value: function main(input) {
      if (!input) {
        return;
      }

      if (!this.server.connected) {
        this.answer(input);
        return;
      }

      this.print("< ".concat(input));
      this.server.send(input);
    }
  }, {
    key: "answer",
    value: function answer(offerString) {
      var isEncoded = /^s3ktp:\/\/request\/(.+)/.exec(offerString);
      console.log(isEncoded);

      if (isEncoded) {
        offerString = atob(isEncoded[1]);
      }

      var offer = JSON.parse(offerString);
      this.server.answer(offer);
    }
  }, {
    key: "done",
    value: function done() {}
  }]);

  return RtcServerTask;
}(_Task2.Task);

exports.RtcServerTask = RtcServerTask;

_defineProperty(RtcServerTask, "helpText", 'RTC Server.');

_defineProperty(RtcServerTask, "useText", '');
});

;require.register("network/chat-box.html", function(exports, require, module) {
module.exports = "<div class = \"chatbox\">\n\n\t<div class = \"chat-output\" cv-each = \"outputLines:line\" cv-ref = \"chatOutput\">\n\t\t<p>[[line]]</p>\n\t</div>\n\n\t<div class = \"chat-input\">\n\t\t<input cv-bind = \"chatInput\" cv-ref = \"chatInput\" cv-on = \"keydown:send(event)\">\n\t\t<button cv-on = \"click:send\">send</button>\n\t</div>\n\n</div>\n"
});

;require.register("particle/Particle3d.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Particle3d = void 0;

var _Tag2 = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Particle3d = /*#__PURE__*/function (_Tag) {
  _inherits(Particle3d, _Tag);

  var _super = _createSuper(Particle3d);

  function Particle3d() {
    var _this;

    _classCallCheck(this, Particle3d);

    _this = _super.call(this, '<div class = "particle-3d">');
    var front = new _Tag2.Tag('<div class = "front-3d">');
    var back = new _Tag2.Tag('<div class = "back-3d">');
    var left = new _Tag2.Tag('<div class = "right-3d">');
    var right = new _Tag2.Tag('<div class = "left-3d">');
    var top = new _Tag2.Tag('<div class = "top-3d">');
    var bottom = new _Tag2.Tag('<div class = "bottom-3d">');

    _this.append(back.node);

    _this.append(left.node);

    _this.append(right.node);

    _this.append(front.node);

    _this.append(top.node);

    _this.append(bottom.node);

    return _this;
  }

  return Particle3d;
}(_Tag2.Tag);

exports.Particle3d = Particle3d;
});

;require.register("powerups/BubbleSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BubbleSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BubbleSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(BubbleSheild, _Sheild);

  var _super = _createSuper(BubbleSheild);

  function BubbleSheild() {
    var _this;

    _classCallCheck(this, BubbleSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild bubble-sheild [[bouncing]]\"><div class = \"bubble-sheild-shine\"></div></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'water');

    return _this;
  }

  _createClass(BubbleSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "command_0",
    value: function command_0(host, button) {
      if (host.canFly || host.dashed) {
        return;
      }

      if (host.args.standingOn && host.args.standingOn.isVehicle) {
        return;
      }

      this.args.force = 10;

      if (host.args.jumping) {
        host.impulse(14, Math.PI / 2);
        this.args.bouncing = 'bouncing';
        host.args.bouncing = true;
      }
    }
  }, {
    key: "hold_0",
    value: function hold_0() {
      if (this.args.bouncing && this.args.force < 25) {
        this.args.force++;
      }
    }
  }, {
    key: "update",
    value: function update(host) {
      var _this3 = this;

      if (host.args.ySpeed < -5) {
        this.onNextFrame(function () {
          host.args.bouncing = false;
          _this3.args.bouncing = false;
          _this3.args.force = 0;
        });
      }

      if (!this.sample) {
        this.initSample = new Audio('/Sonic/S3K_3F.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_44.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (host.canFly) {
        return;
      }

      if (!host["public"].falling) {
        if (this.args.bouncing && this.args.force) {
          host.args.gSpeed = 0;
          this.onNextFrame(function () {
            host.args.standingOn = null;
            host.args.bouncing = false;
            host.args.falling = true;
            host.args.jumping = true;
            host.args.ySpeed = -_this3.args.force;
          });
          this.args.bouncing = '';

          if (host.viewport.args.audio) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          host.controller.rumble({
            duration: 200,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          });
        }
      }
    }
  }]);

  return BubbleSheild;
}(_Sheild2.Sheild);

exports.BubbleSheild = BubbleSheild;
});

;require.register("powerups/ElectricSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElectricSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ElectricSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(ElectricSheild, _Sheild);

  var _super = _createSuper(ElectricSheild);

  function ElectricSheild() {
    var _this;

    _classCallCheck(this, ElectricSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild electric-sheild [[boosted]]\"></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'electric');

    _defineProperty(_assertThisInitialized(_this), "jumps", 3);

    _defineProperty(_assertThisInitialized(_this), "attract", new Set());

    _defineProperty(_assertThisInitialized(_this), "magnetism", 0);

    _defineProperty(_assertThisInitialized(_this), "magnetTimeout", false);

    return _this;
  }

  _createClass(ElectricSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "command_0",
    value: function command_0(host, button) {
      var _this3 = this;

      if (host.canFly) {
        return;
      }

      if (this.jumps > 0 && host.args.jumping) {
        host.args.ySpeed = 0;
        host.impulse(10, -Math.PI / 2);
        this.jumps--;
        this.args.boosted = 'boosted';
        this.onTimeout(250, function () {
          return _this3.args.boosted = '';
        });

        if (host.viewport.args.audio) {
          this.sample.currentTime = 0;
          this.sample.play();
        }

        if (host.xAxis && Math.sign(host.xAxis) !== Math.sign(host["public"].xSpeed)) {
          host.args.xSpeed = 1 * host.xAxis;
        }
      }
    }
  }, {
    key: "release_6",
    value: function release_6(host, button) {// this.magnetism = 0;
      // for(const ring of this.attract)
      // {
      // 	this.onTimeout(3000, () => {
      // 		ring.args.x = ring.def.get('x');
      // 		ring.args.y = ring.def.get('y');
      // 		host.viewport.auras.delete(ring);
      // 		host.viewport.setColCell(ring);
      // 		ring.restore = true;
      // 		ring.args.float = -1;
      // 		ring.noClip = false;
      // 		ring.args.xSpeed  = 0;
      // 		ring.args.ySpeed  = 0;
      // 	});
      // 	this.attract.delete(ring);
      // }
    }
  }, {
    key: "hold_6",
    value: function hold_6(host, button) {
      var _this4 = this;

      host.args.xOff = 0;
      host.args.yOff = 32;
      this.args.boosted = 'boosted';
      this.magnetism = Math.max(0, button.pressure - 0.25);
      host.pinch(260 * this.magnetism, 0);
      var Ring = host.viewport.objectPalette.ring;

      var findRing = function findRing(actor) {
        if (_this4.attract.has(actor)) {
          return false;
        }

        if (!(actor instanceof Ring)) {
          return false;
        }

        if (actor.args.gone) {
          return false;
        }

        if (actor.restore) {
          return false;
        }

        return true;
      };

      var ring = host.findNearestActor(findRing, this.magnetism * 386);

      if (ring) {
        host.viewport.auras.add(ring);
        this.attract.add(ring);
      }
    }
  }, {
    key: "update",
    value: function update(host) {
      var _this5 = this;

      if (!host["public"].falling && !this.magnetTimeout) {
        this.magnetTimeout = this.onTimeout(100, function () {
          _this5.magnetTimeout = false;
          _this5.args.boosted = '';
        });
      }

      if (!this.sample && host.controllable) {
        this.initSample = new Audio('/Sonic/S3K_41.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_45.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (host.canFly) {
        return;
      }

      if (!host["public"].falling) {
        this.jumps = 3;
      }

      var _iterator = _createForOfIteratorHelper(this.attract),
          _step;

      try {
        var _loop = function _loop() {
          var ring = _step.value;

          if (ring.args.gone) {
            _this5.attract["delete"](ring);

            ring.attract = null;

            _this5.onTimeout(500, function () {
              if (!ring.def) {
                return;
              }

              ring.args["static"] = false;
              ring.args.xSpeed = 0;
              ring.args.ySpeed = 0;
              ring.args.x = ring.def.get('x');
              ring.args.y = ring.def.get('y');
              host.viewport.setColCell(ring);

              _this5.onTimeout(3000, function () {
                host.viewport.auras["delete"](ring);
                ring.args["float"] = -1;
                ring.noClip = false;
                ring.restore = true;
              });
            });

            return "continue";
          }

          ring.args["static"] = false;
          ring.attract = host;
          ring.noClip = true;
          var xDiff = host.x - ring.x;
          var yDiff = host.y - host.args.height / 4 - ring.y;
          var angle = Math.atan2(yDiff, xDiff);
          var distance = Math.sqrt(Math.pow(yDiff, 2) + Math.pow(xDiff, 2));
          var maxDistance = 384;

          if (distance > maxDistance) {
            ring.args.x = host.x - Math.cos(angle) * maxDistance;
            ring.args.y = host.y - Math.sin(angle) * maxDistance;
          }

          var xDir = Math.sign(xDiff);
          var yDir = Math.sign(yDiff);
          var xSame = Math.sign(ring.args.xSpeed) === xDir;
          var ySame = Math.sign(ring.args.ySpeed) === yDir;
          host.viewport.setColCell(ring);
          var force = _this5.magnetism || 0.55;
          var xMag = Math.max(force, xSame ? 0.35 : 0.45);
          var yMag = Math.max(force, ySame ? 0.25 : 0.35); // const xMag = Math.max(this.magnetism, xDiff === xDir ? 0.35 : 0.35);
          // const yMag = Math.max(this.magnetism, yDiff === yDir ? 0.125 : 0.135);

          ring.args.groundAngle = 0;
          var fudge = _this5.magnetism ? Math.random() : 1;

          if (!xSame || Math.abs(ring.args.xSpeed) < 8) {
            ring.args.xSpeed += xMag * (xDir * fudge);
          }

          if (!ySame || Math.abs(ring.args.ySpeed) < 8) {
            ring.args.ySpeed += yMag * (yDir * fudge);
          }

          ring.args.falling = true;
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return ElectricSheild;
}(_Sheild2.Sheild);

exports.ElectricSheild = ElectricSheild;
});

;require.register("powerups/FireSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FireSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FireSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(FireSheild, _Sheild);

  var _super = _createSuper(FireSheild);

  function FireSheild() {
    var _this;

    _classCallCheck(this, FireSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild fire-sheild [[boosted]]\"></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'fire');

    return _this;
  }

  _createClass(FireSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "update",
    value: function update(host) {
      if (!this.initSample) {
        this.initSample = new Audio('/Sonic/S3K_3E.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_43.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (!host["public"].falling) {
        this.power = 15;
      }
    }
  }, {
    key: "hold_4",
    value: function hold_4(host, button) {
      var _this3 = this;

      if (this.power <= 0) {
        return;
      }

      this.power--;

      if (host.canFly) {
        return;
      }

      if (host.args.falling) {
        host.impulse(1, Math.PI);

        if (!this.args.boosted) {
          this.args.boosted = 'boosted';

          if (this.sample) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          host.viewport.onFrameOut(15, function () {
            return _this3.args.boosted = '';
          });
        }
      } else {
        this.args.boosted = '';
      }
    }
  }, {
    key: "hold_5",
    value: function hold_5(host, button) {
      var _this4 = this;

      if (this.power <= 0) {
        return;
      }

      this.power--;

      if (host.canFly) {
        return;
      }

      if (host.args.falling) {
        host.impulse(1, 0);

        if (!this.args.boosted) {
          this.args.boosted = 'boosted';

          if (this.sample) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          host.viewport.onFrameOut(15, function () {
            return _this4.args.boosted = '';
          });
        }
      } else {
        this.args.boosted = '';
      }
    }
  }]);

  return FireSheild;
}(_Sheild2.Sheild);

exports.FireSheild = FireSheild;
});

;require.register("powerups/Powerup.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Powerup = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Powerup = /*#__PURE__*/function (_View) {
  _inherits(Powerup, _View);

  var _super = _createSuper(Powerup);

  function Powerup() {
    _classCallCheck(this, Powerup);

    return _super.apply(this, arguments);
  }

  _createClass(Powerup, [{
    key: "equip",
    value: function equip() {}
  }, {
    key: "unequip",
    value: function unequip() {}
  }, {
    key: "acquire",
    value: function acquire() {}
  }, {
    key: "drop",
    value: function drop() {}
  }]);

  return Powerup;
}(_View2.View);

exports.Powerup = Powerup;
});

;require.register("powerups/Sheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sheild = void 0;

var _Powerup2 = require("./Powerup");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Sheild = /*#__PURE__*/function (_Powerup) {
  _inherits(Sheild, _Powerup);

  var _super = _createSuper(Sheild);

  function Sheild() {
    _classCallCheck(this, Sheild);

    return _super.apply(this, arguments);
  }

  return Sheild;
}(_Powerup2.Powerup);

exports.Sheild = Sheild;
});

;require.register("powerups/StarSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarSheild = void 0;

var _Sheild2 = require("./Sheild");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StarSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(StarSheild, _Sheild);

  var _super = _createSuper(StarSheild);

  function StarSheild() {
    var _this;

    _classCallCheck(this, StarSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "type", 'star');

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild star-sheild\">\n\t\t<div class = \"star-sheild-stars\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "frame", 0);

    return _this;
  }

  _createClass(StarSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);
      };

      host.addEventListener('damage', invertDamage);
      viewport.onFrameOut(600, function () {
        host.inventory.remove(_this2);
        host.removeEventListener('damage', invertDamage);
      });
    }
  }, {
    key: "drop",
    value: function drop(host) {
      console.log(this, host);
    }
  }, {
    key: "update",
    value: function update(host) {
      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-stars">');
      var point = host.rotatePoint(host.args.gSpeed, host.args.height / 2);
      var dashed = host.dashed || host.args.animation === 'springdash';
      particle.style({
        '--x': point[0] + host.x + -4 + host.args.xSpeed,
        '--y': point[1] + host.y + (dashed ? -18 : 0) + host.args.ySpeed,
        '--frame': this.frame++,
        'z-index': -1,
        opacity: Math.random() * 2
      });
      viewport.particles.add(particle);
      viewport.onFrameOut(15, function () {
        return viewport.particles.remove(particle);
      });
    }
  }]);

  return StarSheild;
}(_Sheild2.Sheild);

exports.StarSheild = StarSheild;
});

;require.register("powerups/SuperSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuperSheild = void 0;

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SuperSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(SuperSheild, _Sheild);

  var _super = _createSuper(SuperSheild);

  function SuperSheild() {
    var _this;

    _classCallCheck(this, SuperSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild super-sheild\">\n\t\t<div class = \"super-sheild-shine\"></div>\n\t\t<div class = \"super-sheild-spark\"></div>\n\t\t<div class = \"super-sheild-flare\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "type", 'super');

    return _this;
  }

  return SuperSheild;
}(_Sheild2.Sheild);

exports.SuperSheild = SuperSheild;
});

;require.register("region/BgShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BgShadeRegion = void 0;

var _ShadeRegion2 = require("./ShadeRegion");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BgShadeRegion = /*#__PURE__*/function (_ShadeRegion) {
  _inherits(BgShadeRegion, _ShadeRegion);

  var _super = _createSuper(BgShadeRegion);

  function BgShadeRegion() {
    var _this;

    _classCallCheck(this, BgShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['studio', 'western', 'heat', 'hydro', 'lava', 'frost', 'eight-bit', 'corruption', 'black-hole', 'normal']);

    _this.args.type = 'region region-shade bg-region-shade';
    return _this;
  }

  return BgShadeRegion;
}(_ShadeRegion2.ShadeRegion);

exports.BgShadeRegion = BgShadeRegion;
});

;require.register("region/BossRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BossRegion = void 0;

var _Region2 = require("./Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BossRegion = /*#__PURE__*/function (_Region) {
  _inherits(BossRegion, _Region);

  var _super = _createSuper(BossRegion);

  // static fromDef(objDef)
  // {
  // 	const width = objDef.width;
  // 	const height = objDef.height;
  // 	const x = objDef.x;
  // 	const y = objDef.y;
  // 	const obj = super.fromDef(objDef);
  // 	obj.args.width  = width;
  // 	obj.args.height = height;
  // 	// obj.args.x = x - width  / 2;
  // 	obj.args.y = y + height;
  // 	return obj;
  // }
  function BossRegion() {
    var _this;

    _classCallCheck(this, BossRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region boss';
    return _this;
  }

  _createClass(BossRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      // console.log(other);
      if (other.args.falling) {
        return;
      }

      if (!this.args._boss) {
        var boss = this.viewport.actorsById[this.args.boss];

        if (!boss.args.hitPoints) {
          other.args.bossMode = false;
        } else {
          other.args.bossMode = true;
        }
      }
    }
  }]);

  return BossRegion;
}(_Region2.Region);

exports.BossRegion = BossRegion;
});

;require.register("region/CorkscrewRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CorkscrewRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CorkscrewRegion = /*#__PURE__*/function (_Region) {
  _inherits(CorkscrewRegion, _Region);

  var _super = _createSuper(CorkscrewRegion);

  function CorkscrewRegion() {
    var _this;

    _classCallCheck(this, CorkscrewRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region corkscrew';
    return _this;
  }

  _createClass(CorkscrewRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      if (!other.canRoll || other.args.falling && other.args.ySpeed < 0) {
        return;
      }

      other.args.groundAngle = 0;
      var xDist = (other.x - this.x) / this.args.width;
      var yShift = (1 + Math.cos(-Math.PI + xDist * Math.PI * 2)) * this.args.height * 0.5;
      other.args.y = this.y - yShift + -1;
      other.args.ySpeed = 0;
      other.args.xSpeed = Math.max(Math.abs(other.args.xSpeed) || other.args.width) * Math.sign(other.args.xSpeed);
      other.args.gSpeed = other.args.xSpeed;
      other.args.mode = 0;
      other.args.ignore = -2;

      if (xDist > 1 || xDist < 0) {
        other.args.falling = false;
        other.args.y = this.y - 1;
      } else {
        other.args.animation = 'rolling';
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var width = objDef.width;
      var height = objDef.height;
      var x = objDef.x;
      var y = objDef.y;

      var obj = _get(_getPrototypeOf(CorkscrewRegion), "fromDef", this).call(this, objDef);

      obj.args.width = width;
      obj.args.height = height; // obj.args.x = x - width  / 2;

      obj.args.y = y + height;
      return obj;
    }
  }]);

  return CorkscrewRegion;
}(_Region2.Region);

exports.CorkscrewRegion = CorkscrewRegion;
});

;require.register("region/ExitRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExitRegion = void 0;

var _Region2 = require("./Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ExitRegion = /*#__PURE__*/function (_Region) {
  _inherits(ExitRegion, _Region);

  var _super = _createSuper(ExitRegion);

  function ExitRegion() {
    var _this;

    _classCallCheck(this, ExitRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region exit';
    return _this;
  }

  _createClass(ExitRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      var _this2 = this;

      if (other.occupant) {
        other = other.occupant;
      }

      if (!other.controllable) {
        return;
      }

      var viewport = this.viewport;
      viewport.args.fade = true;
      viewport.clearCheckpoints(other.args.id);
      viewport.onFrameOut(30, function () {
        viewport.actors.remove(_this2);
        viewport.quit();
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ExitRegion;
}(_Region2.Region);

exports.ExitRegion = ExitRegion;
});

;require.register("region/ExplodingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExplodingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ExplodingRegion = /*#__PURE__*/function (_Region) {
  _inherits(ExplodingRegion, _Region);

  var _super = _createSuper(ExplodingRegion);

  function ExplodingRegion() {
    var _this;

    _classCallCheck(this, ExplodingRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-exploding';
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    return _this;
  }

  _createClass(ExplodingRegion, [{
    key: "updateActor",
    value: function updateActor(actor) {
      if (!this.args.active) {
        return;
      }

      if (actor.controllable) {
        return;
      }

      if (actor["break"]) {
        actor["break"]();

        if (!this.viewport.actorIsOnScreen(actor)) {
          this.viewport.actors.remove(actor);
        }
      }

      if (actor.pop) {
        actor.pop();

        if (!this.viewport.actorIsOnScreen(actor)) {
          this.viewport.actors.remove(actor);
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      _get(_getPrototypeOf(ExplodingRegion.prototype), "update", this).call(this);

      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (!this.args.active) {
        if (this.args.target && viewport.actorsById[this.args.target]) {
          var target = viewport.actorsById[this.args.target];
          viewport.auras["delete"](target);
        }

        viewport.auras["delete"](this);
        return;
      }

      if (!viewport) {
        return;
      } // if(viewport.args.audio)
      // {
      // 	this.hitSound.currentTime = 0;
      // 	this.hitSound.volume = 0.35 + (Math.random() * -0.15);
      // 	this.hitSound.play();
      // }


      var _loop = function _loop(i) {
        var explosion = new _Tag.Tag('<div class = "particle-explosion">');
        var xOff = _this2.args.width * Math.random();
        var yOff = _this2.args.height * Math.random();
        var left = Math.max(_this2.x, -_this2.viewport.args.x);
        var bottom = Math.max(_this2.y, -_this2.viewport.args.y);
        var right = Math.min(_this2.x + _this2.args.width, -_this2.viewport.args.x + _this2.viewport.args.width);
        var top = Math.min(_this2.y - _this2.args.height, -_this2.viewport.args.y - _this2.viewport.args.height / 2);
        var xRange = right - left;
        var yRange = bottom - top;
        explosion.style({
          '--x': left + xRange * Math.random(),
          '--y': top + yRange * Math.random()
        });
        viewport.particles.add(explosion);
        setTimeout(function () {
          return viewport.particles.remove(explosion);
        }, 512);
      };

      for (var i = 0; i < 1; i++) {
        _loop(i);
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      var _this3 = this;

      this.args.active = true;
      this.viewport.onFrameOut(250, function () {
        return _this3.args.active = false;
      });

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        this.viewport.onFrameOut(60, function () {
          var target = _this3.viewport.actorsById[_this3.args.target];

          _this3.viewport.auras.add(target);

          target.activate(other, _this3);
        });
      }
    }
  }]);

  return ExplodingRegion;
}(_Region2.Region);

exports.ExplodingRegion = ExplodingRegion;
});

;require.register("region/FgShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FgShadeRegion = void 0;

var _ShadeRegion2 = require("./ShadeRegion");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FgShadeRegion = /*#__PURE__*/function (_ShadeRegion) {
  _inherits(FgShadeRegion, _ShadeRegion);

  var _super = _createSuper(FgShadeRegion);

  function FgShadeRegion() {
    var _this;

    _classCallCheck(this, FgShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['studio', 'western', 'heat', 'hydro', 'lava', 'frost', 'eight-bit', 'corruption', 'black-hole', 'normal']);

    _this.args.type = 'fg-region-shade region region-shade';
    return _this;
  }

  return FgShadeRegion;
}(_ShadeRegion2.ShadeRegion);

exports.FgShadeRegion = FgShadeRegion;
});

;require.register("region/ForceRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ForceRegion = /*#__PURE__*/function (_Region) {
  _inherits(ForceRegion, _Region);

  var _super = _createSuper(ForceRegion);

  function ForceRegion(args, parent) {
    var _this;

    _classCallCheck(this, ForceRegion);

    _this = _super.call(this, args, parent);
    _this.args.type = 'region region-force';
    _this.args.xForce = _this.args.xForce || 0;
    _this.args.yForce = _this.args.yForce || -5;
    _this.args.active = 1;
    return _this;
  }

  _createClass(ForceRegion, [{
    key: "update",
    value: function update() {
      if (!this.originalHeight) {
        this.originalHeight = this["public"].height;
      }

      _get(_getPrototypeOf(ForceRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "onAttach",
    value: function onAttach() {
      var _this2 = this;

      if (!this.viewport || !this.args["switch"]) {
        return;
      }

      this["switch"] = this.viewport.actorsById[this.args["switch"]];

      if (!this["switch"]) {
        return;
      }

      this["switch"].args.bindTo('active', function (v) {
        _this2.args.active = v > 0 ? v : _this2.args.active;
      });
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      var _this3 = this;

      if (other.args["static"]) {
        return;
      }

      if (this.args.active <= 0) {
        return;
      }

      if (other.args.falling) {
        this.onNextFrame(function () {
          other.args.xSpeed += Math.sign(_this3["public"].xForce);
          other.args.ySpeed += Math.sign(_this3["public"].yForce);
          other.args.animation = 'springdash';
          other.args.groundAngle = 0;
        });
        return;
      }

      switch (other.args.mode) {
        case 0:
          other.args.gSpeed += Math.sign(this["public"].xForce);
          break;

        case 1:
          other.args.gSpeed += Math.sign(this["public"].yForce);
          break;

        case 2:
          other.args.gSpeed -= Math.sign(this["public"].xForce);
          break;

        case 3:
          other.args.gSpeed -= Math.sign(this["public"].yForce);
          break;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ForceRegion;
}(_Region2.Region);

exports.ForceRegion = ForceRegion;
});

;require.register("region/GrindingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrindingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GrindingRegion = /*#__PURE__*/function (_Region) {
  _inherits(GrindingRegion, _Region);

  var _super = _createSuper(GrindingRegion);

  function GrindingRegion() {
    var _this;

    _classCallCheck(this, GrindingRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "grind", true);

    _this.args.type = 'region grinding';
    return _this;
  }

  _createClass(GrindingRegion, [{
    key: "update",
    value: function update() {
      if (!this.originalHeight) {
        this.originalHeight = this["public"].height;
      }

      _get(_getPrototypeOf(GrindingRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      if (other.args.falling) {
        return;
      }

      other.args.grinding = true;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(GrindingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      _get(_getPrototypeOf(GrindingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return GrindingRegion;
}(_Region2.Region);

exports.GrindingRegion = GrindingRegion;
});

;require.register("region/LavaRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LavaRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LavaRegion = /*#__PURE__*/function (_Region) {
  _inherits(LavaRegion, _Region);

  var _super = _createSuper(LavaRegion);

  function LavaRegion() {
    var _this;

    _classCallCheck(this, LavaRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isWater", true);

    _this.args.type = 'region region-lava'; // this.entryParticle = '<div class = "particle-splash">';

    _this.args.gravity = 0.5;
    _this.args.drag = 0.85;
    _this.args.density = 10;
    _this.skimSpeed = 10;
    return _this;
  }

  _createClass(LavaRegion, [{
    key: "update",
    value: function update() {
      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
      }

      if (!this.originalHeight) {
        this.originalHeight = this["public"].height;
      }

      _get(_getPrototypeOf(LavaRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(LavaRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      _get(_getPrototypeOf(LavaRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return LavaRegion;
}(_Region2.Region);

exports.LavaRegion = LavaRegion;
});

;require.register("region/RainRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RainRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RainRegion = /*#__PURE__*/function (_Region) {
  _inherits(RainRegion, _Region);

  var _super = _createSuper(RainRegion);

  function RainRegion() {
    var _this;

    _classCallCheck(this, RainRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-shade region-rain';
    return _this;
  }

  _createClass(RainRegion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(RainRegion.prototype), "update", this).call(this);

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return RainRegion;
}(_Region2.Region);

exports.RainRegion = RainRegion;
});

;require.register("region/Region.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Region = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor2 = require("../actor/PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Region = /*#__PURE__*/function (_PointActor) {
  _inherits(Region, _PointActor);

  var _super = _createSuper(Region);

  function Region() {
    var _this;

    _classCallCheck(this, Region);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region';
    _this.args.width = _this["public"].width || 32;
    _this.args.height = _this["public"].height || 32;
    _this.args.density = 1;
    _this.args.gravity = 1;
    _this.args.drag = 1;
    _this.skimSpeed = Infinity;
    _this.args["float"] = -1;
    _this.skimmers = new WeakSet();
    return _this;
  }

  _createClass(Region, [{
    key: "onAttach",
    value: function onAttach() {
      this.mainElem = new _Tag.Tag(this.tags.sprite.parentNode);
    }
  }, {
    key: "skim",
    value: function skim(actor) {
      this.skimmers.add(actor);
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      this.skimmers = new WeakSet();
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Region.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      var topBoundry = -this.viewport.args.y - (this.y - this.args.height);
      var leftBoundry = -16 + -this.viewport.args.x - this.x;
      this.mainElem && this.mainElem.style({
        '--viewportWidth': this.viewport.args.width + 'px',
        '--viewportHeight': this.viewport.args.height + 'px',
        '--leftBoundry': leftBoundry + 'px',
        '--topBoundry': topBoundry + 'px',
        '--vpX': this.viewport.args.x + 'px',
        '--vpY': this.viewport.args.y + 'px'
      });
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {}
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Region), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = obj.originalX = -0 + Math.floor(objDef.x / 32) * 32;
      obj.args.y = obj.originalY = -0 + Math.floor(objDef.y / 32) * 32;
      this["static"] = true;
      return obj;
    }
  }]);

  return Region;
}(_PointActor2.PointActor);

exports.Region = Region;
});

;require.register("region/RollingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RollingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RollingRegion = /*#__PURE__*/function (_Region) {
  _inherits(RollingRegion, _Region);

  var _super = _createSuper(RollingRegion);

  function RollingRegion(args, parent) {
    var _this;

    _classCallCheck(this, RollingRegion);

    _this = _super.call(this, args, parent);
    _this.args.type = 'region rolling';
    _this.args.minSpeed = args.minSpeed || 4;
    return _this;
  }

  _createClass(RollingRegion, [{
    key: "update",
    value: function update() {
      // if(!this.filterWrapper && this.tags.sprite)
      // {
      // 	this.filterWrapper = new Tag('<div class = "region-filter-wrapper">');
      // 	this.colorWrapper  = new Tag('<div class = "region-color-wrapper">');
      // 	this.filter = new Tag('<div class = "region-filter">');
      // 	this.color  = new Tag('<div class = "region-color">');
      // 	this.filterWrapper.appendChild(this.filter.node);
      // 	this.colorWrapper.appendChild(this.color.node);
      // 	this.tags.sprite.appendChild(this.filterWrapper.node);
      // 	this.tags.sprite.appendChild(this.colorWrapper.node);
      // }
      if (!this.originalHeight) {
        this.originalHeight = this["public"].height;
      }

      _get(_getPrototypeOf(RollingRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      if (!other.controllable) {
        return;
      }

      if (Math.abs(other.args.gSpeed) < this.args.minSpeed) {
        other.args.gSpeed = this.args.minSpeed * Math.sign(other.args.gSpeed || other.args.direction);
      }

      if (!other["public"].rolling) {
        other.args.rolling = true;
      }

      if (other.willJump) {
        other.willJump = false;
      }

      other.args.ignore = 4;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(RollingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      _get(_getPrototypeOf(RollingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return RollingRegion;
}(_Region2.Region);

exports.RollingRegion = RollingRegion;
});

;require.register("region/ShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShadeRegion = void 0;

var _CharacterString = require("../ui/CharacterString");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ShadeRegion = /*#__PURE__*/function (_Region) {
  _inherits(ShadeRegion, _Region);

  var _super = _createSuper(ShadeRegion);

  function ShadeRegion() {
    var _this;

    _classCallCheck(this, ShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['western', 'heat', 'hydro', 'lava', 'black-hole', 'normal']);

    _this.args.type = 'region region-shade';
    return _this;
  }

  _createClass(ShadeRegion, [{
    key: "onAttach",
    value: function onAttach() {
      _get(_getPrototypeOf(ShadeRegion.prototype), "onAttach", this).call(this);

      this.actorFilterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
      this.actorColorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
      this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
      this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
      this.actorFilter = new _Tag.Tag('<div class = "region-filter">');
      this.actorColor = new _Tag.Tag('<div class = "region-color">');
      this.filter = new _Tag.Tag('<div class = "region-filter">');
      this.color = new _Tag.Tag('<div class = "region-color">');
      this.filterWrapper.appendChild(this.filter.node);
      this.colorWrapper.appendChild(this.color.node); // this.actorFilterWrapper.appendChild(this.actorFilter.node);
      // this.actorColorWrapper.appendChild(this.actorColor.node);
      // this.actorLayer = new Tag('<div class = "actor-layer">');
      // this.actorLayer.appendChild(this.actorFilterWrapper.node);
      // this.actorLayer.appendChild(this.actorColorWrapper.node);
      // this.mainElem.appendChild(this.actorLayer.node);

      this.tags.sprite.appendChild(this.filterWrapper.node);
      this.tags.sprite.appendChild(this.colorWrapper.node);
      this.text = new _CharacterString.CharacterString({
        value: ''
      });
      this.text.render(this.tags.sprite);
      this.cylinder = new _Cylinder.Cylinder({
        id: 'shade-cylinder',
        width: this.args.width,
        height: this.args.height
      });
      this.cylinder.render(this.tags.sprite);
      this.pinch = new _Pinch.Pinch({
        id: 'shade-pinch',
        width: this.args.width,
        height: this.args.height,
        scale: 150
      });
      this.pinch.render(this.tags.sprite); // this.args.bindTo('scale', v => {
      // 	this.pinch.args.scale = v;
      // 	this.cylinder.args.scale = v;
      // });

      if (this.args.filter) {
        this.filters = [this.args.filter];
      }

      this.rotateFilter();
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      _get(_getPrototypeOf(ShadeRegion.prototype), "update", this).call(this);

      this.args.scale = 175 - Math.abs(Math.sin(Date.now() / 200) * 25);

      if (!this["switch"] && this["public"]["switch"]) {
        this["switch"] = this.viewport.actorsById[this["public"]["switch"]];

        if (this["switch"]) {
          this["switch"].args.bindTo('active', function (v) {
            if (v) {
              _this2.rotateFilter();
            }
          });
        }
      }
    }
  }, {
    key: "rotateFilter",
    value: function rotateFilter() {
      if (this.mainElem && this["public"].filter) {
        this.mainElem.classList.remove(this["public"].filter);
      }

      if (this.mainElem) {
        this.args.filter = this.filters[this.currentFilter++];

        if (this.currentFilter >= this.filters.length) {
          this.currentFilter = 0;
        }

        this["public"].filter && this.mainElem.classList.add(this["public"].filter);

        if (this["public"].filter) {
          this.text.remove();
          this.text = new _CharacterString.CharacterString({
            value: "".concat(this.currentFilter, ": ").concat(this["public"].filter)
          });
          this.text.render(this.tags.sprite);
        }
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ShadeRegion;
}(_Region2.Region);

exports.ShadeRegion = ShadeRegion;
});

;require.register("region/SwitchRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SwitchRegion = void 0;

var _Region2 = require("./Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SwitchRegion = /*#__PURE__*/function (_Region) {
  _inherits(SwitchRegion, _Region);

  var _super = _createSuper(SwitchRegion);

  function SwitchRegion() {
    var _this;

    _classCallCheck(this, SwitchRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-switch';
    return _this;
  }

  _createClass(SwitchRegion, [{
    key: "onAttach",
    value: function onAttach(event) {
      event && event.preventDefault();
      return false;
    }
  }, {
    key: "updateActor",
    value: function updateActor(actor) {
      var _this2 = this;

      if (!actor.controllable || !this.args.target) {
        return;
      }

      var target = this.viewport.actorsById[this.args.target];

      if (!target || !target.activate) {
        return;
      }

      this.viewport.onFrameOut(this.args.delay || 1, function () {
        return target.activate(actor, _this2);
      });
    }
  }]);

  return SwitchRegion;
}(_Region2.Region);

exports.SwitchRegion = SwitchRegion;
});

;require.register("region/WaterRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterRegion = /*#__PURE__*/function (_Region) {
  _inherits(WaterRegion, _Region);

  var _super = _createSuper(WaterRegion);

  function WaterRegion() {
    var _this;

    _classCallCheck(this, WaterRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isWater", true);

    _this.args.type = 'region region-water';
    _this.entryParticle = '<div class = "particle-splash">';
    _this.args.gravity = 0.40;
    _this.args.drag = 0.85;
    _this.args.density = 1;
    _this.skimSpeed = 15;
    _this.draining = 0;
    return _this;
  }

  _createClass(WaterRegion, [{
    key: "skim",
    value: function skim(actor) {
      var _this2 = this;

      _get(_getPrototypeOf(WaterRegion.prototype), "skim", this).call(this, actor);

      if (this.viewport.args.frameId % 4) {
        return;
      }

      var splashParticle = new _Tag.Tag("<div class = \"particle-skim\">");
      var splashPoint = actor.rotatePoint(actor["public"].gSpeed, 0);
      splashParticle.style({
        '--x': splashPoint[0] + actor.x,
        '--y': splashPoint[1] + actor.y,
        'z-index': 0,
        '--flip': "".concat(actor.args.direction)
      });
      this.viewport.particles.add(splashParticle);
      this.viewport.onFrameOut(16, function () {
        return _this2.viewport.particles.remove(splashParticle);
      });
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (!this.viewport) {
        return;
      }

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.mask = _View.View.from("<svg style = \"width: 100vw;height: 100vh\">\n\t\t\t\t<defs>\n\t\t\t\t\t<clipPath id = \"mask-".concat(this.args.id, "\" clipPathUnits=\"userSpaceOnUse\">\n\t    \t\t\t\t<path d=\"\n\t    \t\t\t\t\tM 0 0 L 0 ").concat(32 * 17, " L ").concat(32 * 17, " ").concat(32 * 17, " L ").concat(32 * 17, " 0 z\n\t    \t\t\t\t\tM ").concat(32 * 17, " 150 L ").concat(32 * 17, " 200 L ").concat(32 * 17 / 2, " 175 L ").concat(32 * 17 / 2, " 175 z\"\n\n\t    \t\t\t\t/>\n    \t\t\t\t</clipPath>\n    \t\t\t</defs>\n\t\t\t<svg>"));
        this.colorWrapper.appendChild(this.color.node);
        this.filterWrapper.appendChild(this.filter.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.mask.render(this.tags.sprite);
        this.tags.sprite.style({
          '--maskImage': "url(#mask-".concat(this.args.id, ")")
        });
      }

      if (this.args.controller) {
        var controller = this.viewport.actorsById[this.args.controller];

        if (controller) {
          this.args.height = controller.args.level; // console.log(controller.args.level);
        }
      }

      if (!this["switch"] && this["public"]["switch"]) {
        this["switch"] = this.viewport.actorsById[this["public"]["switch"]];

        if (this["switch"]) {
          this["switch"].args.bindTo('active', function (v) {
            if (!v && _this3.draining > 0) {// this.draining = -1;
            }

            if (v) {
              _this3.draining = 1;
            } else {
              _this3.draining = -1;
            }
          });
        }
      }

      if (!this.originalHeight) {
        this.originalHeight = this["public"].height;
      }

      if (this.draining) {
        if (this.draining > 0 && this["public"].height >= 32) {
          this.args.height -= 3.5;
        } else if (this.draining < 0 && this["public"].height < this.originalHeight) {
          this.args.height += 3.5;
        }

        if (this["public"].height <= 0) {
          this.args.display = 'none';

          if (this.draining > 0) {
            this.draining = 0;
          }
        } else {
          this.args.display = 'initial';
        }
      }

      if (this.target && this.args.height !== this.target) {
        var _this$args$drainSpeed, _this$args$fillSpeed;

        var space = this.args.height - this.target;
        var drainSpeed = (_this$args$drainSpeed = this.args.drainSpeed) !== null && _this$args$drainSpeed !== void 0 ? _this$args$drainSpeed : 1;
        var fillSpeed = (_this$args$fillSpeed = this.args.fillSpeed) !== null && _this$args$fillSpeed !== void 0 ? _this$args$fillSpeed : 1;
        var speed = space > 0 ? drainSpeed : fillSpeed;

        if (Math.abs(this.args.height - this.target) > speed) {
          this.args.height -= Math.abs(speed) * Math.sign(space);
        } else {
          this.args.height = this.target;
        }
      }

      _get(_getPrototypeOf(WaterRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      var _this4 = this;

      if (!other.controllable) {
        return;
      }

      if (other.y - other.args.height < this.y - this.args.height) {
        return;
      }

      if (this.viewport.args.frameId % 5 === 0 && Math.random() > 0.9) {
        var viewport = this.viewport;
        var bubble = new _Tag.Tag('<div class = "particle-bubble">');
        var attach = other.rotatePoint.apply(other, _toConsumableArray(other.facePoint));
        var x = other.x + attach[0];
        var y = other.y + attach[1];
        bubble.style({
          '--startY': y,
          '--size': Math.random()
        });
        var stopHoldingBubble = this.onFrame(function () {
          var point = other.facePoint;
          var x = other.x + point[0];
          var y = other.y + point[1];

          if (other.y < _this4.y - _this4["public"].height) {
            bubble.style({
              display: 'none'
            });
          }

          if (y < _this4.y - _this4["public"].height) {
            bubble.style({
              display: 'none'
            });
          }

          bubble.style({
            '--x': x,
            '--y': y
          });
        });
        var stopWatchingBubble = this.onFrame(function () {
          bubble.style({
            '--maxY': _this4.y - _this4.args.height
          });
        });
        viewport.particles.add(bubble);
        viewport.onTimeout(350, function () {
          bubble.classList.add('float');
          stopHoldingBubble();
        });
        viewport.onTimeout(1000, function () {
          bubble.classList.add('floating');
        });
        setTimeout(function () {
          viewport.particles.remove(bubble);
          stopWatchingBubble();
        }, 1500);
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return WaterRegion;
}(_Region2.Region);

exports.WaterRegion = WaterRegion;
});

;require.register("region/WaterfallRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterfallRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WaterfallRegion = /*#__PURE__*/function (_Region) {
  _inherits(WaterfallRegion, _Region);

  var _super = _createSuper(WaterfallRegion);

  function WaterfallRegion() {
    var _this;

    _classCallCheck(this, WaterfallRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-shade region-waterfall';
    return _this;
  }

  _createClass(WaterfallRegion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(WaterfallRegion.prototype), "update", this).call(this);

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
        this.tags.sprite.style({
          '--maskImage': "url(#mask-".concat(this.args.id, ")")
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return WaterfallRegion;
}(_Region2.Region);

exports.WaterfallRegion = WaterfallRegion;
});

;require.register("sprite/Png.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Png = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var header = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A];

var Pixel = /*#__PURE__*/function () {
  function Pixel() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    _classCallCheck(this, Pixel);

    _defineProperty(this, "r", 0);

    _defineProperty(this, "g", 0);

    _defineProperty(this, "b", 0);

    _defineProperty(this, "a", 1);

    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }

  _createClass(Pixel, [{
    key: "mean",
    value: function mean() {
      return (this.r + this.g + this.b) / 3;
    }
  }, {
    key: "hex",
    value: function hex() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

      if (length === 3) {
        return "".concat(this.r.toString(16).padStart(2, '0')).concat(this.g.toString(16).padStart(2, '0')).concat(this.b.toString(16).padStart(2, '0'));
      }

      if (length === 4) {
        return "".concat(this.r.toString(16).padStart(2, '0')).concat(this.g.toString(16).padStart(2, '0')).concat(this.b.toString(16).padStart(2, '0')).concat(this.a.toString(16).padStart(2, '0'));
      }
    }
  }, {
    key: "valueOf",
    value: function valueOf() {
      return "rgba(".concat(this.r, ", ").concat(this.g, ", ").concat(this.b, ", ").concat(this.a, ")");
    }
  }]);

  return Pixel;
}();

var Chunk = /*#__PURE__*/function () {
  function Chunk() {
    _classCallCheck(this, Chunk);

    _defineProperty(this, "previous", null);

    _defineProperty(this, "content", null);

    _defineProperty(this, "length", 0);

    _defineProperty(this, "start", 0);

    _defineProperty(this, "type", '');

    _defineProperty(this, "crc", 0);
  }

  _createClass(Chunk, [{
    key: "text",
    get: function get() {
      return this.bytes.map(function (b) {
        return String.fromCharCode(b);
      }).join('');
    }
  }, {
    key: "bytes",
    get: function get() {
      var bytes = [];

      for (var i = 0; i < this.length; i++) {
        bytes.push(this.content.getUint8(i));
      }

      return bytes;
    }
  }]);

  return Chunk;
}();

var Png = /*#__PURE__*/function () {
  function Png(source) {
    var _this = this;

    _classCallCheck(this, Png);

    _defineProperty(this, "buffer", null);

    _defineProperty(this, "width", 0);

    _defineProperty(this, "height", 0);

    _defineProperty(this, "depth", 0);

    _defineProperty(this, "colorType", 0);

    _defineProperty(this, "compression", 0);

    _defineProperty(this, "filter", 0);

    _defineProperty(this, "interlace", 0);

    if (typeof source === 'string') {
      this.ready = fetch(source).then(function (response) {
        return response.arrayBuffer();
      }).then(function (buffer) {
        _this.buffer = buffer;

        _this.checkHeader();

        _this.indexChunks();
      });
    } else if (_typeof(source) === 'object') {
      if (source instanceof Png) {
        this.ready = Promise.resolve();
        this.buffer = source.buffer.slice(0);
        this.checkHeader();
        this.indexChunks();
      }
    }
  }

  _createClass(Png, [{
    key: "checkHeader",
    value: function checkHeader() {
      var bytes = new Uint8Array(this.buffer);

      for (var i in header) {
        if (header[i] !== bytes[i]) {
          throw new Error('Png is not valid.');
        }
      }
    }
  }, {
    key: "readIhdr",
    value: function readIhdr() {
      var ihdr = this.chunks[0];
      this.width = ihdr.content.getUint32(0);
      this.height = ihdr.content.getUint32(4);
      this.depth = ihdr.content.getUint8(8);
      this.colorType = ihdr.content.getUint8(9);
      this.compression = ihdr.content.getUint8(10);
      this.filter = ihdr.content.getUint8(11);
      this.interlace = ihdr.content.getUint8(12);
    }
  }, {
    key: "palette",
    get: function get() {
      var palette = [];

      for (var i in this.chunks) {
        var chunk = this.chunks[i];

        if (chunk.type !== 'PLTE') {
          continue;
        }

        for (var ii = 0; ii < chunk.bytes.length; ii += 3) {
          var color = new Pixel(chunk.bytes[ii + 0], chunk.bytes[ii + 1], chunk.bytes[ii + 2]);
          palette.push(color);
        }

        return palette;
      }
    }
  }, {
    key: "recolor",
    value: function recolor() {
      var colorMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var palette = this.palette;
      var newPalette = [];

      for (var i in palette) {
        var color = palette[i];
        var rgba = color.valueOf();
        var mean = color.mean();
        var hex = color.hex();

        if (colorMap[hex]) {
          var newColor = colorMap[hex];
          var newR = newColor.substring(0, 2);
          var newG = newColor.substring(2, 4);
          var newB = newColor.substring(4, 6);
          var triplet = [newR, newG, newB].map(function (x) {
            return parseInt(x, 16);
          });
          newPalette.push.apply(newPalette, _toConsumableArray(triplet));
        } else {
          newPalette.push(color.r, color.g, color.b);
        }
      }

      var newPng = new Png(this);

      for (var _i in newPng.chunks) {
        var chunk = newPng.chunks[_i];

        if (chunk.type !== 'PLTE') {
          continue;
        }

        var newBytes = new Uint8Array(newPng.buffer);
        var crcPointer = new DataView(newPng.buffer, chunk.start + chunk.length, 4);
        newBytes.set(newPalette, chunk.start);
        crcPointer.setUint32(0, newPng.runCrc(chunk));
      }

      return newPng;
    }
  }, {
    key: "runCrc",
    value: function runCrc(chunk) {
      if (!Png.crcTable) {
        Png.crcTable = new Uint32Array(256);

        for (var n = 0; n < 256; n++) {
          var c = n;

          for (var k = 0; k < 8; k++) {
            if ((c & 1) == 1) {
              c = 0xEDB88320 ^ c >>> 1;
            } else {
              c = c >>> 1;
            }
          }

          Png.crcTable[n] = c;
        }
      }

      var crc = 0xFFFFFFFF;
      var bytes = new Uint8Array(this.buffer);
      var chunkBytes = bytes.slice(chunk.start - 4, chunk.start + chunk.length);

      for (var i in chunkBytes) {
        var _byte = chunkBytes[i];
        crc = Png.crcTable[(crc ^ _byte) & 0xFF] ^ crc >>> 8;
      }

      crc = (crc ^ 0xFFFFFFFF) >>> 0;
      return crc;
    }
  }, {
    key: "indexChunks",
    value: function indexChunks() {
      var chunks = [];
      var pos = 8;

      while (pos < this.buffer.byteLength) {
        var lengthView = new DataView(this.buffer, pos, 4);
        pos += 4;
        var typeView = new DataView(this.buffer, pos, 4);
        pos += 4;
        var chunk = new Chunk();
        chunk.start = pos;
        chunk.length = lengthView.getUint32();

        for (var i = 0; i < 4; i++) {
          var _byte2 = typeView.getUint8(i);

          var _char = String.fromCharCode(_byte2);

          chunk.type += _char;
        }

        chunk.content = new DataView(this.buffer, pos, chunk.length);
        pos += chunk.length;
        var crcView = new DataView(this.buffer, pos, 4);
        chunk.crc = crcView.getUint32();
        chunk.previous = chunks[chunks.length - 1];
        chunks.push(chunk);
        pos += 4;
      }

      this.chunks = chunks;
    }
  }, {
    key: "toBlob",
    value: function toBlob() {
      return new Blob([new Uint8Array(this.buffer)], {
        type: 'image/png'
      });
    }
  }, {
    key: "toUrl",
    value: function toUrl() {
      return URL.createObjectURL(this.toBlob());
    }
  }]);

  return Png;
}();

exports.Png = Png;
Png.Pixel = Pixel;
Png.Chunk = Chunk;
});

require.register("tileMap/TileMap.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileMap = void 0;

var _Tag = require("curvature/base/Tag");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TileMap = /*#__PURE__*/function () {
  function TileMap(args, parent) {
    var _this = this;

    _classCallCheck(this, TileMap);

    this.heightMask = null;
    this.tileImages = new Map();
    this.tileNumberCache = new Map();
    this.tileSetCache = new Map();
    this.tileCache = new Map();
    this.heightMasks = new Map();
    this.heightMaskCache = new Map();
    this.solidCache = new Map();
    this.meta = new Map();
    this.collisionLayers = [];
    this.destructibleLayers = [];
    this.tileLayers = [];
    this.objectLayers = [];
    var mapUrl = args.mapUrl;
    this.mapUrl = mapUrl;
    this.replacements = new Map();
    this.ready = new Promise(function (accept) {
      fetch(mapUrl).then(function (r) {
        return r.json();
      }).then(function (data) {
        Object.defineProperty(_this, 'mapData', {
          value: data
        });
        var layers = data.layers || [];
        _this.objectLayers = layers.filter(function (l) {
          return l.type === 'objectLayers';
        });
        _this.tileLayers = layers.filter(function (l) {
          return l.type === 'tilelayer';
        });
        _this.collisionLayers = _this.tileLayers.filter(function (l) {
          if (!l.name.match(/^Collision\s\d+/)) {
            return false;
          }

          return true;
        });
        _this.destructibleLayers = _this.tileLayers.filter(function (l) {
          if (!l.name.match(/^Destructible\s\d+/)) {
            return false;
          }

          return true;
        });
        var fetchImages = [];

        var _loop = function _loop(i) {
          var tileset = _this.mapData.tilesets[i];
          var image = new Image();

          _this.tileImages.set(tileset, image);

          var fetchImage = new Promise(function (accept) {
            image.addEventListener('load', function (event) {
              var heightMask = new _Tag.Tag('<canvas>');
              heightMask.width = image.width;
              heightMask.height = image.height;
              heightMask.getContext('2d').drawImage(image, 0, 0, image.width, image.height);

              _this.heightMasks.set(tileset, heightMask);

              accept(image.heightMask);
            });
          });
          image.src = '/map/' + tileset.image;
          fetchImages.push(fetchImage);
        };

        for (var i in _this.mapData.tilesets) {
          _loop(i);
        }

        if (_this.mapData && _this.mapData.properties) {
          var _iterator = _createForOfIteratorHelper(_this.mapData.properties),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var property = _step.value;
              var name = property.name.replace(/-/g, '_');

              _this.meta.set(name, property.value);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        Promise.all(fetchImages).then(accept);
      });
    });
  }

  _createClass(TileMap, [{
    key: "reset",
    value: function reset() {
      for (var i = 0; i < this.tileLayers.length; i++) {
        var layer = this.tileLayers[i];
        layer.destroyed = false;
        console.log(layer);
      }
    }
  }, {
    key: "coordsToTile",
    value: function coordsToTile(x, y, layerId) {
      var blockSize = this.mapData.tilewidth;
      var offsetX = 0;
      var offsetY = 0;

      if (this.tileLayers[layerId]) {
        var _this$tileLayers$laye, _this$tileLayers$laye2;

        offsetX = (_this$tileLayers$laye = this.tileLayers[layerId].offsetX) !== null && _this$tileLayers$laye !== void 0 ? _this$tileLayers$laye : 0;
        offsetY = (_this$tileLayers$laye2 = this.tileLayers[layerId].offsetY) !== null && _this$tileLayers$laye2 !== void 0 ? _this$tileLayers$laye2 : 0;
      }

      return [Math.floor((x - offsetX) / blockSize), Math.floor((y - offsetY) / blockSize)];
    }
  }, {
    key: "getTileNumber",
    value: function getTileNumber(x, y) {
      var layerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var tileKey = x + ',' + y + ',' + layerId;
      var cached = this.tileNumberCache.get(tileKey);

      if (cached !== undefined) {
        return cached;
      }

      var tileLayers = this.tileLayers;
      var mapData = this.mapData;

      if (!tileLayers[layerId]) {
        this.tileNumberCache.set(tileKey, false);
        return false;
      }

      if (x >= mapData.width || x < 0) {
        if (x < 0 || !this.meta.get('wrapX')) {
          if (layerId !== 0) {
            this.tileNumberCache.set(tileKey, false);
            return false;
          }

          this.tileNumberCache.set(tileKey, 1);
          return 1;
        } else {
          if (x < 0 && x % this.mapData.width !== 0) {
            y++;
          }

          x = x % this.mapData.width;
        }
      }

      if (y >= mapData.height || y < 0) {
        if (y < 0 || !this.meta.get('wrapY')) {
          if (layerId !== 0) {
            this.tileNumberCache.set(tileKey, false);
            return false;
          }

          this.tileNumberCache.set(tileKey, 1);
          return 1;
        } else {
          y = y % this.mapData.height;
        }
      }

      var tileIndex = y * mapData.width + x;

      if (tileIndex in tileLayers[layerId].data) {
        var layer = tileLayers[layerId];
        var tile = layer.data[tileIndex];
        var tileNumber = tile > 0 ? tile - 1 : 0;
        this.tileNumberCache.set(tileKey, tileNumber);
        return tileNumber;
      }

      this.tileNumberCache.set(tileKey, false);
      return false;
    }
  }, {
    key: "getObjectDefs",
    value: function getObjectDefs() {
      if (!this.mapData) {
        return;
      }

      return this.mapData.layers.filter(function (layer) {
        return layer.type === 'objectgroup';
      }).map(function (layer) {
        return layer.objects;
      }).flat();
    }
  }, {
    key: "getTile",
    value: function getTile(tileNumber) {
      var cached = this.tileCache.get(tileNumber);

      if (cached !== undefined) {
        if (this.replacements.has(cached[2])) {
          cached[2] = this.replacements.get(cached[2]);
        }

        return cached;
      }

      var blockSize = this.blockSize;
      var x = 0;
      var y = 0;
      var src = '';
      var tileset = this.getTileset(tileNumber);
      var image = this.tileImages.get(tileset);

      if (tileNumber) {
        var localTileNumber = tileNumber + -tileset.firstgid + 1;
        var blocksWide = Math.ceil(image.width / blockSize);
        x = localTileNumber % blocksWide;
        y = Math.floor(localTileNumber / blocksWide);
        src = tileset.image;
      }

      var result = [x, y, src];
      this.tileCache.set(tileNumber, result);
      return result;
    }
  }, {
    key: "getSolid",
    value: function getSolid(xInput, yInput) {
      var layerInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      xInput = Math.trunc(xInput);
      yInput = Math.trunc(yInput);
      var currentTile = this.coordsToTile(xInput, yInput, layerInput);
      var tileNumber = this.getTileNumber.apply(this, _toConsumableArray(currentTile).concat([layerInput]));

      if (layerInput === 1 || layerInput === 2) {
        if (this.getSolid(xInput, yInput, 0)) {
          return this.tileLayers[0];
        }

        for (var i = 3; i < this.tileLayers.length; i++) {
          var layer = this.tileLayers[i];

          if (layer.name.substring(0, 3) === 'Art') {
            continue;
          }

          if (layer.name.substring(0, 10) === 'Moving Art') {
            continue;
          }

          if (layer.name.substring(0, 10) === 'Foreground') {
            continue;
          }

          if (layer.name.substring(0, 12) === 'Destructible') {
            if (layer.destroyed) {
              continue;
            }
          }

          if (this.getSolid(xInput, yInput, i)) {
            return this.tileLayers[i];
          }
        }
      }

      if (layerInput <= 2) {
        if (tileNumber === 0) {
          return false;
        }

        if (tileNumber === 1) {
          return this.tileLayers[layerInput];
        }
      }

      var tileSet = this.getTileset(tileNumber);
      var mapData = this.mapData;
      var blockSize = mapData.tilewidth;
      var tilePos = this.getTile(tileNumber).map(function (coord) {
        return coord * blockSize;
      });
      var x = Number(xInput) % blockSize;
      var y = Number(yInput) % blockSize;
      var xPixel = tilePos[0] + x;
      var yPixel = tilePos[1] + y;
      var heightMaskKey = [xPixel, yPixel, tileNumber].join('::');
      var heightMaskCache = this.heightMaskCache;

      if (heightMaskCache.has(heightMaskKey)) {
        return heightMaskCache.get(heightMaskKey);
      }

      var heightMask = this.heightMasks.get(tileSet);
      var pixel = heightMask.getContext('2d').getImageData(xPixel, yPixel, 1, 1).data;
      var result = false; // if(pixel[0] === 255 && pixel[1] === 0 && pixel[2] === 0 && pixel[3] === 255)
      // {
      // 	// result = 0xFF0000;
      // 	result = true;
      // }
      // else

      if (pixel[3] === 255) {
        // result = 0xFFFFFF;
        result = this.tileLayers[layerInput];
      } else {
        result = false;
      }

      heightMaskCache.set(heightMaskKey, result);
      return result;
    }
  }, {
    key: "getTileset",
    value: function getTileset(tileNumber) {
      tileNumber = Number(tileNumber);
      var cached = this.tileSetCache.get(tileNumber);

      if (cached !== undefined) {
        if (this.replacements.has(cached.image)) {
          cached.image = this.replacements.get(cached.image);
        }

        return cached;
      }

      if (!this.mapData) {
        return;
      }

      for (var i in this.mapData.tilesets) {
        var tileset = this.mapData.tilesets[i]; // console.log(tileNumber, tileset.firstgid);

        if (tileNumber + 1 >= tileset.firstgid) {
          var nextTileset = this.mapData.tilesets[Number(i) + 1];

          if (nextTileset) {
            if (tileNumber + 1 < nextTileset.firstgid) {
              this.tileSetCache.set(tileNumber, tileset);

              if (this.replacements.has(tileset.image)) {
                tileset.image = this.replacements.get(tileset.image);
              }

              return tileset;
            }
          } else {
            this.tileSetCache.set(tileNumber, tileset);

            if (this.replacements.has(tileset.image)) {
              tileset.image = this.replacements.get(tileset.image);
            }

            return tileset;
          }
        }
      }
    }
  }, {
    key: "blockSize",
    get: function get() {
      return this.mapData.tilewidth;
    }
  }]);

  return TileMap;
}();

exports.TileMap = TileMap;
});

;require.register("titlecard/Titlecard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Titlecard = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('Accept');

var Titlecard = /*#__PURE__*/function (_View) {
  _inherits(Titlecard, _View);

  var _super = _createSuper(Titlecard);

  function Titlecard() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Titlecard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./titlecard.html'));

    _this.args.firstLine = args.firstLine || 'First Line';
    _this.args.secondLine = args.secondLine || 'Second Line';
    _this.args.creditLine = args.creditLine || 'Credit Line';
    _this.args.actNumber = args.actNumber || 1;
    _this.args.animation = 'start';
    _this.played = new Promise(function (accept) {
      return _this[Accept] = accept;
    });
    return _this;
  }

  _createClass(Titlecard, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      if (this.playing) {
        return this.playing;
      }

      var playing = new Promise(function (accept) {
        var waitFor = _this2.args.waitFor || Promise.resolve();
        var timeAcc = 750;

        _this2.onTimeout(timeAcc, function () {
          return _this2.onNextFrame(function () {
            return _this2.args.animation = '';
          });
        });

        timeAcc += 750;

        _this2.onTimeout(timeAcc, function () {
          return _this2.onNextFrame(function () {
            return _this2.args.animation = 'opening';
          });
        });

        timeAcc += 500;
        waitFor["finally"](function () {
          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'opening2';
            });
          });

          timeAcc += 750;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'closing';
            });
          });

          _this2.onTimeout(timeAcc, function () {
            accept([new Promise(function (acceptDone) {
              return _this2.onTimeout(timeAcc + 500, acceptDone);
            })]);

            _this2[Accept]();
          });

          timeAcc += 1000;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'closed';
            });
          });

          timeAcc += 2500;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              _this2.args.animation = 'done';
              _this2.playing = false;
            });
          });
        });
      });
      this.playing = playing;
      return playing;
    }
  }]);

  return Titlecard;
}(_View2.View);

exports.Titlecard = Titlecard;
});

;require.register("titlecard/titlecard.html", function(exports, require, module) {
module.exports = "<div class = \"titlecard [[animation]]\">\n\n\t<div class = \"titlecard-field\"></div>\n\n\t<div class = \"titlecard-bottom-border\">\n\t\t<div class = \"titlecard-border-text\">[[creditLine]]</div>\n\t</div>\n\n\t<div class = \"titlecard-left-border\">\n\t\t<div class = \"titlecard-border-shadow\"></div>\n\t\t<div class = \"titlecard-border-color\"></div>\n\t</div>\n\n\t<div class = \"titlecard-title\">\n\n\t\t<div class = \"titlecard-title-box\">\n\n\t\t\t<div class = \"titlecard-title-line-1\">[[firstLine]]</div>\n\n\t\t\t<div class = \"titlecard-title-line-2\">\n\t\t\t\t[[secondLine]]<div class = \"titlecard-title-number\">[[actNumber]]</div>\n\t\t\t</div>\n\n\t\t</div>\n\n\t</div>\n\n</div>\n"
});

;require.register("ui/CharacterString.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CharacterString = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CharacterString = /*#__PURE__*/function (_View) {
  _inherits(CharacterString, _View);

  var _super = _createSuper(CharacterString);

  function CharacterString(args, parent) {
    var _this;

    _classCallCheck(this, CharacterString);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", "<div cv-ref = \"main\" class = \"hud-character-string [[hide]] [[color]]\" cv-each = \"chars:char:c\" style = \"--scale:[[scale]];\"><span\n\t\t\t\tclass = \"hud-character\"\n\t\t\t\tdata-type  = \"[[char.type]]\"\n\t\t\t\tdata-value = \"[[char.pos]]\"\n\t\t\t\tdata-index = \"[[c]]\"\n\t\t\t\tstyle      = \"--value:[[char.pos]];--index:[[c]];--length:[[chars.length]];\"\n\t\t\t>[[char.original]]</span></div>");

    _this.args.chars = [];
    _this.args.scale = _this.args.scale || 1;
    var high = _this.args.high;
    var med = _this.args.med;
    var low = _this.args.low;

    var charToModel = _this.characterToModel.bind(_assertThisInitialized(_this));

    _this.args.bindTo('value', function (v) {
      // if(Math.abs(v) < low)
      // {
      // 	this.args.color = '';
      // }
      // else if(Math.abs(v) > low)
      // {
      // 	this.args.color = 'yellow';
      // }
      // else if(Math.abs(v) > med)
      // {
      // 	this.args.color = 'orange';
      // }
      // else if(Math.abs(v) > high)
      // {
      // 	this.args.color = 'red';
      // }
      // else if(this.args.flash > 0)
      // {
      // 	this.args.color = this.args.flashColor;
      // }
      // else
      // {
      // 	this.args.color = '';
      // }
      var chars = String(v).split('').map(charToModel);

      if (chars.length !== _this.args.chars.length) {
        _this.args.chars.splice(chars.length);
      }

      Object.assign(_this.args.chars, chars);
    });

    return _this;
  }

  _createClass(CharacterString, [{
    key: "characterToModel",
    value: function characterToModel(pos, i) {
      var original = pos;
      var type = 'number';

      if (pos === ' ' || Number(pos) != pos) {
        switch (pos) {
          case ' ':
            pos = -1;
            type = 'number';
            break;

          case '-':
            pos = 11;
            type = 'number';
            break;

          case ':':
            pos = 10;
            type = 'number';
            break;

          case '.':
            pos = 12;
            type = 'number';
            break;

          case '/':
            pos = 13;
            type = 'number';
            break;

          case ',':
            pos = 14;
            type = 'number';
            break;

          case '?':
            pos = 15;
            type = 'number';
            break;

          case '!':
            pos = 16;
            type = 'number';
            break;

          case '@':
            pos = 17;
            type = 'number';
            break;

          case '#':
            pos = 18;
            type = 'number';
            break;

          case '$':
            pos = 19;
            type = 'number';
            break;

          case '%':
            pos = 20;
            type = 'number';
            break;

          case '^':
            pos = 21;
            type = 'number';
            break;

          case '&':
            pos = 22;
            type = 'number';
            break;

          case '*':
            pos = 23;
            type = 'number';
            break;

          case '(':
            pos = 24;
            type = 'number';
            break;

          case ')':
            pos = 25;
            type = 'number';
            break;

          case '⏺':
            pos = 0;
            type = 'symbol2';
            break;

          case '▶':
            pos = 1;
            type = 'symbol2';
            break;

          case '⏸':
            pos = 2;
            type = 'symbol2';
            break;

          case '⏹':
            pos = 3;
            type = 'symbol2';
            break;

          case '⏮':
            pos = 4;
            type = 'symbol2';
            break;

          case '⏭':
            pos = 5;
            type = 'symbol2';
            break;

          case '\'':
            pos = 6;
            type = 'symbol2';
            break;

          case '"':
            pos = 7;
            type = 'symbol2';
            break;

          case '"':
            pos = 8;
            type = 'symbol2';
            break;

          case '=':
            pos = 9;
            type = 'symbol2';
            break;

          case '+':
            pos = 10;
            type = 'symbol2';
            break;

          case '[':
            pos = 11;
            type = 'symbol2';
            break;

          case ']':
            pos = 12;
            type = 'symbol2';
            break;

          case '{':
            pos = 13;
            type = 'symbol2';
            break;

          case '}':
            pos = 14;
            type = 'symbol2';
            break;

          case '\\':
            pos = 15;
            type = 'symbol2';
            break;

          case ';':
            pos = 16;
            type = 'symbol2';
            break;

          case '~':
            pos = 17;
            type = 'symbol2';
            break;

          case '|':
            pos = 18;
            type = 'symbol2';
            break;

          case '_':
            pos = 19;
            type = 'symbol2';
            break;

          case '>':
            pos = 20;
            type = 'symbol2';
            break;

          case '<':
            pos = 21;
            type = 'symbol2';
            break;

          case '⯇':
            pos = 22;
            type = 'symbol2';
            break;

          case '⯅':
            pos = 23;
            type = 'symbol2';
            break;

          case '⯆':
            pos = 24;
            type = 'symbol2';
            break;
          // ⯈

          case '`':
            pos = 25;
            type = 'symbol2';
            break;

          default:
            pos = String(pos).toLowerCase().charCodeAt(0) - 97;
            type = 'letter';
            break;
        }
      }

      if (this.args.chars[i]) {
        this.args.chars[i].original = original;
        this.args.chars[i].type = type;
        this.args.chars[i].pos = pos;
        return this.args.chars[i];
      }

      return {
        pos: pos,
        type: type,
        original: original
      };
    }
  }]);

  return CharacterString;
}(_View2.View);

exports.CharacterString = CharacterString;
});

;require.register("ui/ClickSwitch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClickSwitch = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ClickSwitch = /*#__PURE__*/function (_View) {
  _inherits(ClickSwitch, _View);

  var _super = _createSuper(ClickSwitch);

  function ClickSwitch() {
    var _this;

    _classCallCheck(this, ClickSwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./click-switch.html'));

    return _this;
  }

  _createClass(ClickSwitch, [{
    key: "toggle",
    value: function toggle() {
      this.args.active = !this.args.active;
    }
  }]);

  return ClickSwitch;
}(_View2.View);

exports.ClickSwitch = ClickSwitch;
});

;require.register("ui/HudFrame.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HudFrame = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HudFrame = /*#__PURE__*/function (_View) {
  _inherits(HudFrame, _View);

  var _super = _createSuper(HudFrame);

  function HudFrame() {
    var _this;

    _classCallCheck(this, HudFrame);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"hud-frame [[type]] [[alert]]\">\n\t\t<div class = \"hud-value\">[[value]]</div>\n\t</div>");

    return _this;
  }

  return HudFrame;
}(_View2.View);

exports.HudFrame = HudFrame;
});

;require.register("ui/click-switch.html", function(exports, require, module) {
module.exports = "<div class = \"switch\" data-active = \"[[active]]\"  cv-on = \"click:toggle(event)\">\n\n\t<div class = \"label labelOff\">\n\t\t<img src = \"/ui/mute.svg\" />\n\t</div>\n\n\t<div class = \"slide\">\n\t\t<div class = \"head\"></div>\n\t</div>\n\n\t<div class = \"label labelOn\">\n\t\t<img src = \"/ui/unmute.svg\" />\n\t</div>\n\n</div>\n"
});

;require.register("viewport/Layer.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Layer = void 0;

var _Bindable = require("curvature/base/Bindable");

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

var _Bag = require("curvature/base/Bag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Layer = /*#__PURE__*/function (_View) {
  _inherits(Layer, _View);

  var _super = _createSuper(Layer);

  function Layer(args, parent) {
    var _this;

    _classCallCheck(this, Layer);

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./layer.html'));

    _this[_Bindable.Bindable.NoGetters] = true;
    _this.args.width = args.width || 320;
    _this.args.height = args.height || 200;
    _this.args.blockSize = 32;
    _this.x = 0;
    _this.y = 0;
    _this.args.offsetX = 0;
    _this.args.offsetY = 0;
    _this.args.layerId = 0 || _this.args.layerId;
    Object.defineProperty(_assertThisInitialized(_this), 'blocksXY', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'blocks', {
      value: new _Bag.Bag()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'offsets', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'blockSrcs', {
      value: new Map()
    });
    _this.args.blocks = _this.blocks.list;
    _this.meta = {};
    var viewport = _this.args.viewport;
    var layers = viewport.tileMap.tileLayers;
    var layerDef = layers[_this.args.layerId];

    if (layerDef.properties) {
      var _iterator = _createForOfIteratorHelper(layerDef.properties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          _this.meta[property.name] = property.value;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      layerDef.layer = _assertThisInitialized(_this);
    }

    return _this;
  }

  _createClass(Layer, [{
    key: "move",
    value: function move() {
      var viewport = this.args.viewport;
      var layers = viewport.tileMap.tileLayers;
      var layerDef = layers[this.args.layerId];
      var controller = viewport.actorsById[this.meta.controller];
      this.offsetXChanged = 0;
      this.offsetYChanged = 0;

      if (layerDef) {
        layerDef.offsetXChanged = 0;
        layerDef.offsetYChanged = 0;
      }

      if (controller) {
        if (layerDef) {
          layerDef['offsetX'] = this.args.offsetX;
          layerDef['offsetY'] = this.args.offsetY;
        }

        var changedX = (controller.args.xLayer || 0) - this.args.offsetX;
        var changedY = (controller.args.yLayer || 0) - this.args.offsetY;
        this.args.offsetX = controller.args.xLayer || 0;
        this.args.offsetY = controller.args.yLayer || 0;

        if (layerDef) {
          layerDef["offsetXChanged"] = changedX;
          layerDef["offsetYChanged"] = changedY;
        }

        this["offsetXChanged"] = changedX;
        this["offsetYChanged"] = changedY;
      } else {
        this.args.offsetX = 0;
        this.args.offsetY = 0;
      }

      this.fallspeed = this.fallspeed || 0;
    }
  }, {
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      var viewport = this.args.viewport;
      var layers = viewport.tileMap.tileLayers;
      var layerDef = layers[this.args.layerId];
      var controller = viewport.actorsById[this.meta.controller];

      if (!layerDef) {
        return;
      }

      this.args.bindTo('destroyed', function (v) {
        var viewport = _this2.args.viewport;
        var layers = viewport.tileMap.tileLayers;
        var layerDef = layers[_this2.args.layerId];
        layerDef.destroyed = !!v;

        if (controller) {
          controller.args.destroyed = !!v;
        }
      });
    }
  }, {
    key: "update",
    value: function update(tileMap) {
      var viewport = this.args.viewport;

      if (this.args.destroyed && this.tags.background) {
        var _tileMap = viewport.tileMap;
        var _layerId = this.args.layerId;
        var layers = _tileMap.tileLayers;
        var layerDef = layers[_layerId];
        layerDef.destroyed = true;
        this.tags.background.style({
          display: 'none'
        });
        return;
      }

      var blockSize = this.args.blockSize;
      var blocksWide = Math.ceil(this.args.width / blockSize) + 1;
      var blocksHigh = Math.ceil(this.args.height / blockSize) + 1;
      var blocksXY = this.blocksXY;
      var centerX = blocksWide / 2;
      var centerY = blocksHigh / 2;
      var blocks = this.blocks;
      var offsets = this.offsets;
      var blockSrcs = this.blockSrcs;
      var offsetX = this.args.offsetX;
      var offsetY = this.args.offsetY;
      var layerId = this.args.layerId;
      var startColumn = 0;
      var endColumn = blocksWide;
      var ii = 0;

      for (var i = startColumn; i <= endColumn; i += Math.sign(blocksWide)) {
        var tileX = i + -Math.ceil(this.x / blockSize) + -Math.ceil(offsetX / blockSize) + (offsetX > 0 ? 1 : 0);

        for (var j = 0; j <= blocksHigh; j += Math.sign(blocksHigh)) {
          var xy = String(i) + '::' + String(j); // const tileY = j - Math.ceil(this.y / blockSize);

          var tileY = j + Math.floor(-this.y / blockSize) + (this.offsetYChange < 0 ? -Math.ceil(offsetY / blockSize) : -Math.floor(offsetY / blockSize)) + (offsetY < 0 ? -1 : 0);
          var blockId = tileMap.getTileNumber(tileX, tileY, layerId);
          var block = void 0;

          if (!blocksXY.has(xy)) {
            block = new _Tag.Tag('<div>');
            blocksXY.set(xy, block);
            block.style({
              width: blockSize + 'px',
              height: blockSize + 'px'
            });
            var transX = blockSize * i;
            var transY = blockSize * j;
            block.style({
              transform: "translate(".concat(transX, "px, ").concat(transY, "px) scale(1.01, 1.01)"),
              position: 'absolute',
              left: 0,
              top: 0
            });
            blocks.add(block);
          } else {
            block = blocksXY.get(xy);
          }

          var tileXY = [];

          if (layerId && blockId === false) {
            tileXY[0] = -1;
            tileXY[1] = -1;
          } else {
            tileXY = tileMap.getTile(blockId);
          }

          var existingOffset = offsets.get(block);
          var existingSrc = blockSrcs.get(block);
          var blockOffset = -1 * (tileXY[0] * blockSize) + 'px ' + -1 * (tileXY[1] * blockSize) + 'px';
          var blockSrc = tileXY[2];

          if (existingOffset !== blockOffset || existingSrc !== blockSrc) {
            if (blockId !== false && blockId !== 0) {
              block.style({
                display: 'initial',
                'background-position': blockOffset,
                'background-image': "url(/map/".concat(blockSrc, ")"),
                '--screenX': (centerX - ii) / centerX,
                '--screenY': (j - centerY) / centerY
              });
            } else if (block.node) {
              block.node.style.display = 'none';
            }
          }

          offsets.set(block, blockOffset);
          blockSrcs.set(block, blockSrc);
        }

        ii++;
      }

      if (this.tags.background) {
        var background = this.tags.background;
        background.style({
          '--offsetX': -offsetX % blockSize,
          '--offsetY': -offsetY % blockSize
        });
      }
    }
  }]);

  return Layer;
}(_View2.View);

exports.Layer = Layer;
});

;require.register("viewport/Viewport.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Viewport = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Bag = require("curvature/base/Bag");

var _Tag = require("curvature/base/Tag");

var _View2 = require("curvature/base/View");

var _Router = require("curvature/base/Router");

var _Keyboard = require("curvature/input/Keyboard");

var _TileMap = require("../tileMap/TileMap");

var _Titlecard = require("../titlecard/Titlecard");

var _Particle3d = require("../particle/Particle3d");

var _MarbleGarden = require("../backdrop/MarbleGarden");

var _ProtoLabrynth = require("../backdrop/ProtoLabrynth");

var _MysticCave = require("../backdrop/MysticCave");

var _Series = require("../intro/Series");

var _Card = require("../intro/Card");

var _TitleScreenCard = require("../intro/TitleScreenCard");

var _ThankYouCard = require("../intro/ThankYouCard");

var _LoadingCard = require("../intro/LoadingCard");

var _BootCard = require("../intro/BootCard");

var _DebianCard = require("../intro/DebianCard");

var _WebkitCard = require("../intro/WebkitCard");

var _GamepadCard = require("../intro/GamepadCard");

var _SeanCard = require("../intro/SeanCard");

var _PauseMenu = require("../Menu/PauseMenu.js");

var _MainMenu = require("../Menu/MainMenu.js");

var _LayerSwitch = require("../actor/LayerSwitch");

var _Region = require("../region/Region");

var _CharacterString = require("../ui/CharacterString");

var _HudFrame = require("../ui/HudFrame");

var _Layer = require("./Layer");

var _Controller = require("../controller/Controller");

var _BackdropPalette = require("../BackdropPalette");

var _ObjectPalette = require("../ObjectPalette");

var _ClickSwitch = require("../ui/ClickSwitch");

var _Console = require("subspace-console/Console");

var _Input = require("../console/task/Input");

var _Impulse = require("../console/task/Impulse");

var _Settings = require("../console/task/Settings");

var _Move = require("../console/task/Move");

var _Pos = require("../console/task/Pos");

var _RtcClient = require("../network/RtcClient");

var _RtcServer = require("../network/RtcServer");

var _Classifier = require("../Classifier");

var _ChatBox = require("../network/ChatBox");

var _Sonic = require("../actor/Sonic");

var _Tails = require("../actor/Tails");

var _Seymour = require("../actor/Seymour");

var _Chalmers = require("../actor/Chalmers");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ActorPointCache = Symbol('actor-point-cache');
var ColCellsNear = Symbol('collision-cells-near');
var ColCell = Symbol('collision-cell');
var Run = Symbol('run');

var Viewport = /*#__PURE__*/function (_View) {
  _inherits(Viewport, _View);

  var _super = _createSuper(Viewport);

  function Viewport(args, parent) {
    var _this;

    _classCallCheck(this, Viewport);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "secretSample", new Audio('/doom/dssecret.wav'));

    _defineProperty(_assertThisInitialized(_this), "secretsFound", new Set());

    _defineProperty(_assertThisInitialized(_this), "template", require('./viewport.html'));

    _this[_Bindable.Bindable.NoGetters] = true;

    _Router.Router.listen(_assertThisInitialized(_this), {
      '': function _() {
        return '';
      }
    });

    _this.args.screenEffects = [];
    _this.meta = {};
    _this.objectPalette = _ObjectPalette.ObjectPalette;
    _this.callIntervals = new Map();
    _this.callFrames = new Map();
    _this.willDetach = new Map();
    _this.backdrops = new Map();
    _this.checkpoints = new Map();
    _this.server = null;
    _this.client = null;
    _this.args.networked = false;
    _this.args.mouse = 'moved';
    _this.settings = _Bindable.Bindable.make({
      blur: true,
      displace: true,
      showHud: true,
      shortcuts: true,
      showFps: true,
      debugOsd: false,
      outline: 1,
      musicVol: 100,
      sfxVol: 100,
      username: 'player'
    });
    _this.vizi = true;
    _this.args.shakeX = 0;
    _this.args.shakeY = 0;
    _this.args.level = '';
    var mapUrl = '/map/pixel-hill-zone.json';
    var inputMapUrl = _Router.Router.query.map;
    var noMenu = false;

    if (inputMapUrl && inputMapUrl.match(/^\w/)) {
      mapUrl = '/map/' + inputMapUrl;
      noMenu = true;
    }

    _this.args.startFrameId = 0;
    _this.args.lastFrameId = -1;
    _this.tileMap = new _TileMap.TileMap({
      mapUrl: mapUrl
    });
    _this.sprites = new _Bag.Bag();
    _this.world = null;
    var ready = _this.tileMap.ready;
    var noIntro = _Router.Router.query.nointro;
    var cards = [];

    if (noMenu) {
      noIntro = true;
      cards.push(_this.args.zonecard = new _Titlecard.Titlecard({}, _assertThisInitialized(_this)));

      _this.tileMap.ready.then(function () {
        _this.setZoneCard();

        _this.args.zonecard.play().then(function () {
          _this.startLevel();
        });
      });
    } else if (!noIntro) {
      cards.push.apply(cards, _toConsumableArray(_this.introCards()));
    } else {
      _this.args.zonecard = new _Titlecard.Titlecard({
        waitFor: _this.tileMap.ready
      }, _assertThisInitialized(_this));
      cards.push(new _MainMenu.MainMenu({
        timeout: -1
      }, _assertThisInitialized(_this)), _this.args.zonecard);
    }

    _this.args.noIntro = noIntro ? 'no-intro' : '';
    _this.args.titlecard = new _Series.Series({
      cards: cards
    }, _assertThisInitialized(_this));
    _this.args.pauseMenu = new _PauseMenu.PauseMenu({}, _assertThisInitialized(_this));
    _this.particleObserver = new IntersectionObserver(function (entries, observer) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;

          if (entry.intersectionRation === 0) {
            entry.target.style.display = 'none';
            entry.target.remove();
          } else {
            delete entry.target.style.display;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }, {
      threshold: 0
    });
    _this.particles = new _Bag.Bag(function (i, s, a) {
      if (a === _Bag.Bag.ITEM_ADDED) {
        i.node && _this.particleObserver.observe(i.node);
        i.node && _this.tags.particles.appendChild(i.node);
      } else if (a === _Bag.Bag.ITEM_REMOVED) {
        i.remove();
      }
    });
    _this[Run] = 0;
    _this.effects = new _Bag.Bag();
    _this.maxCameraBound = 64;
    _this.cameraBound = 64;
    _this.args.particles = _this.particles.list;
    _this.args.effects = _this.effects.list;
    _this.args.maxFps = 60;
    _this.args.currentActor = '';
    _this.args.xOffset = 0.5;
    _this.args.yOffset = 0.5;
    _this.args.xOffsetTarget = 0.5;
    _this.args.yOffsetTarget = 0.75;
    _this.args.topLine = new _CharacterString.CharacterString({
      value: '',
      scale: 2
    });
    _this.args.status = new _CharacterString.CharacterString({
      value: '',
      scale: 2
    });
    _this.args.focusMe = new _CharacterString.CharacterString({
      value: '',
      scale: 2
    });
    _this.args.labelChar = new _CharacterString.CharacterString({
      value: 'Char: '
    });
    _this.args.labelX = new _CharacterString.CharacterString({
      value: 'x pos: '
    });
    _this.args.labelY = new _CharacterString.CharacterString({
      value: 'y pos: '
    });
    _this.args.demoIndicator = null;
    _this.args.labelGround = new _CharacterString.CharacterString({
      value: 'Grounded: '
    });
    _this.args.labelCamera = new _CharacterString.CharacterString({
      value: 'Camera: '
    });
    _this.args.labelAngle = new _CharacterString.CharacterString({
      value: 'Gnd theta: '
    });
    _this.args.labelGSpeed = new _CharacterString.CharacterString({
      value: 'Gnd spd: '
    });
    _this.args.labelXSpeed = new _CharacterString.CharacterString({
      value: 'X air spd: '
    });
    _this.args.labelYSpeed = new _CharacterString.CharacterString({
      value: 'Y air spd: '
    });
    _this.args.labelMode = new _CharacterString.CharacterString({
      value: 'Mode: '
    });
    _this.args.labelFrame = new _CharacterString.CharacterString({
      value: 'Frame ID: '
    });
    _this.args.labelFps = new _CharacterString.CharacterString({
      value: 'FPS: '
    });
    _this.args.labelAirAngle = new _CharacterString.CharacterString({
      value: 'Air theta: '
    });
    _this.args["char"] = new _CharacterString.CharacterString({
      value: '...'
    });
    _this.args.xPos = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.yPos = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.gSpeed = new _CharacterString.CharacterString({
      value: 0,
      high: 199,
      med: 99,
      low: 49
    });
    _this.args.ground = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.xSpeed = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.ySpeed = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.mode = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.angle = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.cameraMode = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.airAngle = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.nowPlaying = new _CharacterString.CharacterString({
      value: 'Now playing'
    });
    _this.args.trackName = new _CharacterString.CharacterString({
      value: 'Ice cap zone act 1 theme'
    });
    _this.args.fpsSprite = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.frame = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.scoreLabel = new _CharacterString.CharacterString({
      value: 'SCORE:',
      color: 'yellow'
    });
    _this.args.timerLabel = new _CharacterString.CharacterString({
      value: 'TIME: ',
      color: 'yellow'
    });
    _this.args.ringLabel = new _CharacterString.CharacterString({
      value: 'RINGS: ',
      color: 'yellow'
    });
    _this.args.actClearLabel = new _CharacterString.CharacterString({
      value: '',
      color: 'yellow'
    });
    _this.args.dialogLines = [];
    _this.args.perfectBonusLabel = new _CharacterString.CharacterString({
      value: 'PERFECT BONUS: ',
      color: 'yellow'
    });
    _this.args.perfectBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.speedBonusLabel = new _CharacterString.CharacterString({
      value: 'SPEED BONUS: ',
      color: 'yellow'
    });
    _this.args.speedBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.ringBonusLabel = new _CharacterString.CharacterString({
      value: 'RING BONUS: ',
      color: 'yellow'
    });
    _this.args.ringBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.timeBonusLabel = new _CharacterString.CharacterString({
      value: 'TIME BONUS: ',
      color: 'yellow'
    });
    _this.args.timeBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.totalBonusLabel = new _CharacterString.CharacterString({
      value: 'TOTAL: ',
      color: 'yellow'
    });
    _this.args.totalBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.rings = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.score = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.timer = new _CharacterString.CharacterString({
      value: '00:00'
    });
    _this.args.frameId = -1;

    _this.settings.bindTo('displace', function (v) {
      return _this.args.displacement = v ? 'on' : 'off';
    });

    _this.settings.bindTo('outline', function (v) {
      return _this.args.outline = v;
    });

    _this.settings.bindTo('debugOsd', function (v) {
      return _this.args.debugOsd = v;
    });

    _this.settings.bindTo('showHud', function (v) {
      return _this.args.showHud = v;
    });

    _this.settings.bindTo('shortcuts', function (v) {
      return _this.args.shortcuts = v;
    });

    _this.settings.bindTo('showFps', function (v) {
      return _this.args.showFps = v;
    });

    _this.args.emeralds = [// 'green'
      // , 'cyan'
      // , 'white'
      // , 'orangered'
      // , 'yellow'
      // , 'purple'
    ];

    for (var setting in _this.settings) {
      var val = localStorage.getItem('sonic-3000-setting-v0.0.0=' + setting);

      try {
        var _JSON$parse;

        _this.settings[setting] = (_JSON$parse = JSON.parse(val)) !== null && _JSON$parse !== void 0 ? _JSON$parse : _this.settings[setting];
      } catch (e) {
        console.warn(e);
      }
    }

    _this.settings.bindTo(function (v, k) {
      localStorage.setItem('sonic-3000-setting-v0.0.0=' + k, JSON.stringify(v));
    });

    _this.args.blockSize = 32;
    _this.args.populated = false;
    _this.args.willStick = false;
    _this.args.stayStuck = false;
    _this.args.willStick = true;
    _this.args.stayStuck = true;
    _this.args.width = 32 * 16;
    _this.args.height = 32 * 9;
    _this.args.scale = 2;

    if (_Router.Router.query.noScale) {
      _this.args.width = 32 * 14 * 2;
      _this.args.height = 32 * 8 * 2;
      _this.args.scale = 1;
    }

    if (_Router.Router.query.bigScale) {
      _this.args.width = 32 * 60;
      _this.args.height = 32 * 34;
      _this.args.scale = 1;
    }

    _this.collisions = new Map();
    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    _this.args.fgLayers = [];
    _this.args.layers = [];
    _this.args.animation = '';
    _this.regions = new Set();
    _this.spawn = new Set();
    _this.auras = new Set();
    _this.recent = new Set();
    _this.actorsById = {};
    _this.playable = new Set();
    _this.actors = new _Bag.Bag(function (i, s, a) {
      if (a == _Bag.Bag.ITEM_ADDED) {
        i.viewport = _assertThisInitialized(_this);

        _this.setColCell(i);

        if (i instanceof _Region.Region) {
          _this.regions.add(i);
        }

        if (i.controllable) {
          _this.playable.add(i);
        }

        _this.actorsById[i.args.id] = i;

        _this.objectDb.add(i);
      } else if (a == _Bag.Bag.ITEM_REMOVED) {
        i.viewport = null;
        i.remove();

        if (i[ColCell]) {
          _this.playable["delete"](i);

          i[ColCell]["delete"](i);
        }

        if (i instanceof _Region.Region) {
          _this.regions["delete"](i);
        }

        _this.auras["delete"](i);

        delete _this.actorsById[i.args.id];
        delete i[ColCell];

        _this.objectDb.remove(i);
      }
    });
    var critiera = [/^Art\s+$/, /^Collision\s+$/, /^Destructible\s+$/];

    var comparator = function comparator() {};

    _this.layerDb = new _Classifier.Classifier(critiera, comparator);
    _this.objectDb = new _Classifier.Classifier(Object.values(_ObjectPalette.ObjectPalette));
    _this.blocks = new _Bag.Bag();
    _this.args.blocks = _this.blocks.list;
    _this.args.actors = _this.actors.list;

    _this.listen(window, 'gamepadconnected', function (event) {
      return _this.padConnected(event);
    });

    _this.listen(window, 'gamepaddisconnected', function (event) {
      return _this.padRemoved(event);
    });

    _this.colCellDiv = _this.args.width > _this.args.height ? _this.args.width * 0.75 : _this.args.height * 0.75;
    _this.colCellCache = new Map();
    _this.colCells = new Map();
    _this[ActorPointCache] = new Map();
    _this.startTime = null;
    _this.args.audio = true;
    _this.nextControl = false;
    _this.updateStarted = new Set();
    _this.updateEnded = new Set();
    _this.updated = new Set();
    _this.args.xBlur = 0;
    _this.args.yBlur = 0; // this.args.controlCard = View.from(require('../cards/sonic-controls.html'));

    _this.args.controlCard = _View2.View.from(require('../cards/basic-controls.html'));
    _this.args.moveCard = _View2.View.from(require('../cards/basic-moves.html'));
    _this.args.isRecording = false;
    _this.args.isReplaying = false;
    _this.replayInputs = [];
    _this.replayFrames = new Map();
    _this.args.standalone = '';
    _this.args.fullscreen = '';
    _this.args.initializing = 'initializing';
    _this.args.muteSwitch = new _ClickSwitch.ClickSwitch();
    _this.args.muteSwitch.args.active = !!JSON.parse(localStorage.getItem('sonic-3000-audio-enabled') || 0);

    _this.args.muteSwitch.args.bindTo('active', function (v) {
      return _this.args.audio = v;
    });

    _this.args.bindTo('audio', function (v) {
      localStorage.setItem('sonic-3000-audio-enabled', v);
    });

    _this.args.showConsole = null;

    _this.listen(document, 'keydown', function (event) {
      if (event.key === 'Escape') {
        _this.args.showConsole = false;
      }

      if (event.key === 'F10' || event.key === '`') {
        if (!_this.args.subspace) {
          _this.args.subspace = new _Console.Console({
            scroller: _this.tags.subspace,
            path: {
              'input': _Input.Input,
              'move': _Move.Move,
              'impulse': _Impulse.Impulse,
              'pos': _Pos.Pos,
              'set': _Settings.Settings
            }
          }); // this.args.subspace.tasks.bindTo((v,k) => {
          // 	console.log(k,v);
          // });
        }

        _this.args.showConsole = _this.args.showConsole ? null : 'showConsole';
        event.preventDefault();
      }
    });

    _this.args.bindTo('showConsole', function (v) {
      if (!_this.args.subspace) {
        return;
      }

      if (v) {
        _this.onNextFrame(function () {
          return _this.args.subspace.focus();
        });

        _this.args.showConsole = 'showConsole';
      } else {
        _this.onNextFrame(function () {
          return _this.tags.viewport.focus();
        });

        _this.args.showConsole = null;
      }
    });

    _this.controller = new _Controller.Controller({
      deadZone: 0.2
    });

    _this.controller.zero();

    return _this;
  }

  _createClass(Viewport, [{
    key: "fullscreen",
    value: function fullscreen() {
      var _this2 = this;

      this.exitFullscreen();
      this.args.focusMe.args.hide = 'hide';
      this.initScale = this.args.scale;
      this.showStatus(3500, ' hit escape to revert. ');
      this.tags.viewport.node.requestFullscreen().then(function (res) {
        _this2.onTimeout(100, function () {
          _this2.fitScale();

          _this2.args.fullscreen = 'fullscreen';
        });
      })["catch"](function (e) {
        return console.error(e);
      });
    }
  }, {
    key: "exitFullscreen",
    value: function exitFullscreen() {
      if (document.fullscreenElement) {
        document.exitFullscreen();
        this.showStatus(0, '');
        this.args.focusMe.args.hide = '';
        this.args.fullscreen = '';
        return;
      }
    }
  }, {
    key: "fitScale",
    value: function fitScale() {
      var fill = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var hScale = window.innerHeight / this.args.height;
      var vScale = window.innerWidth / this.args.width;

      if (fill) {
        this.args.scale = hScale > vScale ? hScale : vScale;
      } else {
        this.args.scale = hScale > vScale ? vScale : hScale;
      }

      this.tags.frame && this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      });
    }
  }, {
    key: "showStatus",
    value: function showStatus(timeout, text) {
      var _this3 = this;

      this.args.status.args.hide = '';
      this.args.status.args.value = text;

      if (timeout >= 0) {
        this.onTimeout(timeout, function () {
          _this3.args.status.args.hide = 'hide';
        });
      }
    }
  }, {
    key: "onAttached",
    value: function onAttached(event) {
      var _this4 = this;

      _Settings.Settings.viewport = this;
      _Impulse.Impulse.viewport = this;
      _Input.Input.viewport = this;
      _Move.Move.viewport = this;
      _Pos.Pos.viewport = this;
      this.buildDetect();
      this.cpuDetect();
      this.gpuDetect();
      this.onTimeout(100, function () {
        return _this4.fitScale(false);
      });
      this.onTimeout(23500, function () {
        _this4.args.focusMe.args.value = ' Click here to enable keyboard control. ';
      });
      this.tags.blurDistance.setAttribute('style', "filter:url(#motionBlur)");
      this.tags.blurDistanceFg.setAttribute('style', "filter:url(#motionBlur)");
      this.listen(this.tags.frame, 'click', function (event) {
        if (event.target === _this4.tags.frame.node) {
          _this4.tags.viewport.focus();
        }
      });
      this.listen(window, 'resize', function (event) {
        _this4.onTimeout(100, function () {
          return _this4.fitScale(false);
        });
      });
      this.listen(document, 'fullscreenchange', function (event) {
        _this4.onTimeout(100, function () {
          return _this4.fitScale(false);
        });

        if (!document.fullscreenElement) {
          _this4.args.scale = _this4.initScale;
          _this4.args.fullscreen = '';
          return;
        }
      });
      this.args.titlecard.play();
      this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      }); // this.update();

      if (!this.startTime) {
        this.startTime = 0;
      }

      this.args.started = false;
      this.args.running = false;
      this.args.paused = false;
      this.listen(document.body, 'click', function (event) {
        if (event.target !== document.body) {
          return;
        }

        _this4.tags.viewport.focus();
      });
      this.args.scale = this.args.scale || 1;

      var keyboard = _Keyboard.Keyboard.get();

      keyboard.listening = true;
      keyboard.focusElement = this.tags.viewport.node;
      this.tags.viewport.node.focus();

      if (0 || window.matchMedia('(display-mode: standalone)').matches || window.matchMedia('(display-mode: fullscreen)').matches) {
        this.args.standalone = 'standalone';
        document.title = 'Sonic 3000';
        this.listen(window, 'resize', function () {
          return _this4.fitScale(false);
        });
        this.onTimeout(100, function () {
          return _this4.fitScale(false);
        });
      }

      this.onTimeout(100, function () {
        return _this4.args.initializing = '';
      });
    }
  }, {
    key: "setZoneCard",
    value: function setZoneCard() {
      if (this.tileMap.mapData && this.tileMap.mapData.properties) {
        var _iterator2 = _createForOfIteratorHelper(this.tileMap.mapData.properties),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var property = _step2.value;
            var name = property.name.replace(/-/g, '_');
            this.meta[name] = property.value;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      var line1 = this.meta.titlecard_title_1;
      var line2 = this.meta.titlecard_title_2;
      var author = this.meta.titlecard_author;
      var number = this.meta.titlecard_number;
      this.args.zonecard.args.firstLine = line1;
      this.args.zonecard.args.secondLine = line2;
      this.args.zonecard.args.creditLine = author;
      this.args.zonecard.args.actNumber = number;
      this.args.actName = "".concat(line1, " ").concat(line2, " ").concat(number);
    }
  }, {
    key: "fillBackground",
    value: function fillBackground() {
      var backdropClass = _BackdropPalette.BackdropPalette[this.meta.backdrop];
      delete this.args.backdrop;

      if (backdropClass) {
        this.args.backdrop = new backdropClass();
      } else {
        this.args.backdrop = null;
      }

      this.args.theme = this.meta.theme || 'construct';
      var layers = this.tileMap.tileLayers;
      var layerCount = layers.length;

      for (var i = 0; i < layerCount; i++) {
        var layer = new _Layer.Layer({
          layerId: i,
          viewport: this,
          name: layers[i].name,
          width: this.args.width,
          height: this.args.height
        });

        if (layers[i].name.substring(0, 10) === 'Foreground') {
          this.args.fgLayers.push(layer);
        } else {
          this.args.layers.push(layer);
        }
      }
    }
  }, {
    key: "startLevel",
    value: function startLevel() {
      var _this5 = this;

      this.setZoneCard();
      this.args.fade = false;
      this.args.startFrameId = this.args.frameId;

      if (!this.args.backdrop) {
        this.fillBackground();
      }

      if (this.args.networked) {
        var sonic = new _Chalmers.Chalmers({
          name: 'Player 1',
          x: 1500,
          y: 1600
        }, this);
        var tails = new _Seymour.Seymour({
          name: 'Player 2',
          x: 1400,
          y: 1600
        }, this);
        this.auras.add(sonic);
        this.auras.add(tails);
        this.actors.add(sonic);
        this.actors.add(tails);
        sonic.render(this.tags.actors);
        sonic.onRendered();
        sonic.onAttached && sonic.onAttached();
        tails.render(this.tags.actors);
        tails.onRendered();
        tails.onAttached && tails.onAttached();
      }

      this.populateMap();

      for (var _i = 0, _arr = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i < _arr.length; _i++) {
        var layer = _arr[_i];
        layer.args.destroyed = false;
      }

      if (!this.args.networked) {
        var actors = this.actors.list;

        if (!this.playableIterator) {
          this.playableIterator = this.playable.entries();
        }

        this.nextControl = Object.values(this.args.actors)[0]; // this.nextControl = this.nextControl || actors[0];

        if (!this.args.isReplaying && !this.args.isRecording) {
          this.args.demoIndicator = null;
          var storedPosition = this.getCheckpoint(this.nextControl.args.id);
          var checkpoint = storedPosition ? this.actorsById[storedPosition.checkpointId] : null;

          if (checkpoint) {
            this.args.startFrameId = this.args.frameId - storedPosition.frames;
            this.args.x = this.nextControl.args.x = checkpoint.x;
            this.args.y = this.nextControl.args.y = checkpoint.y;
          }
        }
      } else if (this.args.networked) {
        var _actors = this.actors.list;
        this.nextControl = this.nextControl || _actors[-1 + this.args.playerId];
      }

      if (this.nextControl && this.nextControl.controller) {
        this.nextControl.controller.zero();
      } else if (this.controller) {
        this.controller.zero();
      }

      _Keyboard.Keyboard.get().reset();

      this.args.zonecard.played.then(function () {
        _this5.args.started = true;
        _this5.args.running = true;

        _this5.update(); // this.update();


        _this5.args.level = 'level';
        _this5.args.running = false;

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'zone',
            eventAction: 'started',
            eventLabel: "".concat(_this5.args.actName)
          });
        }

        _this5.onTimeout(500, function () {
          _this5.startTime = Date.now();
          _this5.args.running = true;
        });
      });
    }
  }, {
    key: "takeInput",
    value: function takeInput(controller) {
      var keyboard = _Keyboard.Keyboard.get();

      keyboard.update();

      if (!this.gamepad) {
        controller.readInput({
          keyboard: keyboard
        });
      } else {
        var gamepads = navigator.getGamepads();

        for (var i = 0; i < gamepads.length; i++) {
          var gamepad = gamepads.item(i);

          if (!gamepad) {
            continue;
          }

          controller.readInput({
            keyboard: keyboard,
            gamepad: gamepad
          });

          if (gamepad) {
            var gamepadId = String(gamepad.id);

            if (gamepadId.match(/xbox/i)) {
              this.args.inputType = 'input-xbox';
            } else if (gamepadId.match(/playstation/i)) {
              this.args.inputType = 'input-playstation';
            } else {
              this.args.inputType = 'input-generic';
            }
          } else {
            this.args.inputName = 'keyboard';
            this.args.inputType = '';
          }
        }
      }

      if (controller.buttons[2011] && controller.buttons[2011].time === 1) {
        this.fullscreen();
      }

      if (controller.buttons[1020] && controller.buttons[1020].time === 1) {
        this.exitFullscreen();
      }

      if (!this.args.networked && !this.args.paused) {
        if (!this.dontSwitch && controller.buttons[11] && controller.buttons[11].time === 1) {
          this.playableIterator = this.playableIterator || this.playable.entries();
          var next = this.playableIterator.next();

          if (next.done) {
            this.playableIterator = false;
            this.playableIterator = this.playable.entries();
            next = this.playableIterator.next();
          }

          if (next.value) {
            this.nextControl = next.value[0];
            this.dontSwitch = 3;
          }
        }
      }

      if (this.args.started) {
        if (this.controlActor) {
          this.args.currentSheild = this.controlActor["public"].currentSheild ? this.controlActor["public"].currentSheild.type : '';
        }

        if (controller.buttons[9] && controller.buttons[9].active && controller.buttons[9].time === 1) {
          if (this.args.paused) {
            this.unpauseGame();
          } else {
            this.pauseGame();
          }
        }

        if (this.args.isRecording) {
          if (!this.args.demoIndicator) {
            this.args.demoIndicator = new _CharacterString.CharacterString({
              value: '⏺ REC',
              color: 'red'
            });
          }

          var frame = this.args.frameId;
          var input = controller.serialize();
          var args = {};

          if (this.controlActor) {
            args = _defineProperty({}, this.controlActor["public"].id, {
              x: this.controlActor["public"].x,
              y: this.controlActor["public"].y,
              gSpeed: this.controlActor["public"].gSpeed,
              xSpeed: this.controlActor["public"].xSpeed,
              ySpeed: this.controlActor["public"].ySpeed
            });
          }

          this.replayInputs.push({
            frame: frame,
            input: input,
            args: args
          });
        }
      }

      controller.update({
        gamepad: this.gamepad
      });
    }
  }, {
    key: "moveCamera",
    value: function moveCamera() {
      if (!this.controlActor) {
        return;
      }

      if (this.cameraBound <= this.maxCameraBound) {
        this.cameraBound = this.maxCameraBound;
      } else {
        this.cameraBound -= 0.05;
      }

      var cameraSpeed = 30;
      var actor = this.controlActor;

      if (actor.args.standingOn && actor.args.standingOn.isVehicle) {
        actor = actor.args.standingOn;
      }

      var highJump = actor["public"].highJump;
      var deepJump = actor["public"].deepJump;
      var falling = actor["public"].falling;
      var fallSpeed = actor["public"].ySpeed;

      if (actor["public"].jumping) {
        this.maxCameraBound = 24;

        if (deepJump || highJump) {
          this.maxCameraBound = 12;
        }
      } else {
        this.maxCameraBound = 64;
      }

      switch (actor.args.cameraMode) {
        case 'normal':
          this.args.xOffsetTarget = 0.5;
          this.args.yOffsetTarget = 0.75;
          this.maxCameraBound = 64;
          cameraSpeed = 25;
          break;

        case 'airplane':
          {
            var xSpeed = actor.args.xSpeed;
            var absSpeed = Math.abs(xSpeed);
            var shiftSpeed = 5;
            cameraSpeed = 10;
            var speedBias = Math.max(absSpeed / 100, 0.35) * -Math.sign(xSpeed);
            this.args.xOffsetTarget = 0.5 + speedBias;
            this.args.yOffsetTarget = 0.5;
            break;
          }
        // case 'railcar-aerial':
        // case 'railcar-normal':
        // 	this.args.xOffsetTarget = 0.5;
        // 	this.args.yOffsetTarget = 0.5;
        // 	this.maxCameraBound = 0;
        // 	cameraSpeed = 0;
        // 	break;

        case 'aerial':
          this.args.xOffsetTarget = 0.5;
          cameraSpeed = 30;

          if (!actor.args.flying && (deepJump || highJump)) {
            if (fallSpeed < 0) {
              this.args.yOffsetTarget = 0.9;
            } else {
              this.args.yOffsetTarget = 0.25; // cameraSpeed = 15;
            }
          } else {
            this.args.yOffsetTarget = 0.5;
          }

          break;

        case 'cinematic':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.50;
          this.maxCameraBound = 1;
          cameraSpeed = 0;
          break;

        case 'cliff':
          this.args.xOffsetTarget = 0.50 + -0.02 * actor.args.direction;
          this.args.yOffsetTarget = 0.45;
          cameraSpeed = 30;
          break;

        case 'bridge':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.65;
          cameraSpeed = 30;
          break;

        case 'boss':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.80;
          this.maxCameraBound = 48;
          cameraSpeed = 5;
          break;

        case 'draggable':
          this.args.xOffsetTarget = 0.5;
          this.args.yOffsetTarget = 0.5;
          this.maxCameraBound = 48;
          cameraSpeed = 3;
          break;

        default:
          this.maxCameraBound = 64;
          cameraSpeed = 25;
          break;
      }

      if (['normal', 'bridge', 'cliff', 'aerial'].includes(actor.args.cameraMode)) {
        var gSpeed = actor["public"].gSpeed;
        var _xSpeed = actor["public"].xSpeed;
        var grounded = !actor["public"].falling;

        var _absSpeed = Math.abs(grounded ? gSpeed : _xSpeed);

        var _shiftSpeed = 15;

        var _speedBias = Math.min(_absSpeed / 15, 1) * -Math.sign(gSpeed || _xSpeed);

        switch (actor.args.mode) {
          case 0:
            this.args.xOffsetTarget = 0.5 + _speedBias * 0.35;
            this.args.yOffsetTarget = 0.55;
            break;

          case 1:
            this.args.xOffsetTarget = 0.33;
            this.args.yOffsetTarget = 0.50 + _speedBias * 0.35;
            break;

          case 2:
            this.args.xOffsetTarget = 0.5 - _speedBias * 0.35;
            this.args.yOffsetTarget = 0.45;
            break;

          case 3:
            this.args.xOffsetTarget = 0.66;
            this.args.yOffsetTarget = 0.50 - _speedBias * 0.35;
            break;
        }
      }

      var ySpeedBias = 0;

      if (actor.args.falling && actor.args.ySpeed > 20) {
        ySpeedBias = -0.5 + -(actor.args.ySpeed / actor.args.ySpeedMax);
      }

      this.args.yOffsetTarget += actor.args.cameraBias + ySpeedBias;

      if (this.args.wallStick) {
        cameraBound = Math.abs(actor.y - this.args.y);
        cameraSpeed *= 3;
      }

      if (cameraSpeed) {
        var yOffsetDiff = this.args.yOffsetTarget - this.args.yOffset;
        var xOffsetDiff = this.args.xOffsetTarget - this.args.xOffset;
        this.args.xOffset += xOffsetDiff / cameraSpeed;
        this.args.yOffset += yOffsetDiff / cameraSpeed;
      } else {
        this.args.xOffset = this.args.xOffsetTarget;
        this.args.yOffset = this.args.yOffsetTarget;
      }

      var center = actor.rotatePoint(0, -actor.args.height / 2);
      var actorX = center[0] + -actor.x;
      var actorY = center[1] + -actor.y;
      var xNext = actorX + center[0] + this.args.width * this.args.xOffset;
      var yNext = actorY + center[1] + this.args.height * this.args.yOffset;
      var yDiff = this.args.y + -yNext;
      var xDiff = this.args.x + -xNext;
      var distance = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
      var angle = Math.atan2(yDiff, xDiff);
      var maxDistance = this.cameraBound;
      var dragDistance = Math.min(maxDistance, distance);
      var snapFactor = Math.abs(dragDistance / maxDistance);
      var snapFrames = 24;
      var snapSpeed = dragDistance / snapFrames;
      var x = xNext + dragDistance * Math.cos(angle);
      var y = yNext + dragDistance * Math.sin(angle);
      x = x - snapFactor * Math.cos(angle) * snapSpeed;
      y = y - snapFactor * Math.sin(angle) * snapSpeed;

      if (x > 96 && !this.meta.wrapX) {
        x = 96;
      }

      if (y > 96 && !this.meta.wrapY) {
        y = 96;
      }

      var xMax = -(this.tileMap.mapData.width * 32) + this.args.width - 96;
      var yMax = -(this.tileMap.mapData.height * 32) + this.args.height - 96;

      if (x < xMax && !this.meta.wrapX) {
        x = xMax;
      }

      if (y < yMax && !this.meta.wrapY) {
        y = yMax;
      }

      this.args.shakeX *= -0.99;
      this.args.shakeY *= -0.99;
      this.args.x = x + this.args.shakeX;
      this.args.y = y + this.args.shakeY;
    }
  }, {
    key: "applyMotionBlur",
    value: function applyMotionBlur() {
      var controlActor = this.controlActor;

      if (this.settings.blur && controlActor && this.tags.blur) {
        var xMoved = this.args.x - this.xPrev;
        var yMoved = this.args.y - this.yPrev;
        var xBlur = Math.pow(Number(xMoved) / 5, 2);
        var yBlur = Math.pow(Number(yMoved) / 5, 2);
        var maxBlur = 32;
        xBlur = xBlur < maxBlur ? xBlur : maxBlur;
        yBlur = yBlur < maxBlur ? yBlur : maxBlur;
        var blur = Math.sqrt(Math.pow(xBlur, 2) + Math.pow(yBlur, 2)) / 3;
        var blurAngle = Math.atan2(yMoved, xMoved);

        if (blur > 0.5) {
          this.tags.blurAngle.setAttribute('style', "transform:rotate(calc(1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleFg.setAttribute('style', "transform:rotate(calc(1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleCancel.setAttribute('style', "transform:rotate(calc(-1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleCancelFg.setAttribute('style', "transform:rotate(calc(-1rad * ".concat(blurAngle, "))"));
          this.tags.blur.setAttribute('stdDeviation', "".concat(blur * 0.75 - 1, ", 0"));
        } else {
          this.tags.blurAngle.setAttribute('style', "transform:none;");
          this.tags.blurAngleFg.setAttribute('style', "transform:none;");
          this.tags.blurAngleCancel.setAttribute('style', "transform:none;");
          this.tags.blurAngleCancelFg.setAttribute('style', "transform:none;");
          this.tags.blur.removeAttribute('stdDeviation');
        }

        this.xPrev = this.args.x;
        this.yPrev = this.args.y;
      } else {
        this.tags.blurAngle.setAttribute('style', "transform:none;");
        this.tags.blurAngleFg.setAttribute('style', "transform:none;");
        this.tags.blurAngleCancel.setAttribute('style', "transform:none;");
        this.tags.blurAngleCancelFg.setAttribute('style', "transform:none;");
        this.tags.blur.removeAttribute('stdDeviation');
      }
    }
  }, {
    key: "updateBackground",
    value: function updateBackground() {
      var controlActor = this.controlActor;

      if (controlActor && controlActor.standingOn && controlActor.standingOn.isVehicle) {
        controlActor = this.controlActor.standingOn;
      }

      for (var _i2 = 0, _arr2 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i2 < _arr2.length; _i2++) {
        var layer = _arr2[_i2];
        var xDir = Math.sign(layer.x - this.args.x);
        var yDir = Math.sign(layer.y - this.args.y);
        layer.x = this.args.x;
        layer.y = this.args.y;
        layer.update(this.tileMap, xDir, yDir);
      } // this.tileMap.ready.then();


      this.updateBackdrops();
      this.tags.bgFilters.style({
        '--x': this.args.x,
        '--y': this.args.y
      });
      this.tags.content.style({
        '--x': this.args.x,
        '--y': this.args.y,
        '--outlineWidth': this.settings.outline + 'px'
      });
      var xMod = this.args.x <= 0 ? this.args.x % this.args.blockSize : (-this.args.blockSize + this.args.x % this.args.blockSize) % this.args.blockSize;
      var yMod = this.args.y <= 0 ? this.args.y % this.args.blockSize : (-this.args.blockSize + this.args.y % this.args.blockSize) % this.args.blockSize;
      this.tags.background.style({
        transform: "translate( ".concat(xMod, "px, ").concat(yMod, "px )")
      });
      this.tags.foreground.style({
        transform: "translate( ".concat(xMod, "px, ").concat(yMod, "px )")
      });
      this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      });
    }
  }, {
    key: "updateBackdrops",
    value: function updateBackdrops() {
      var xMax = -(this.tileMap.mapData.width * 32);
      var yMax = -(this.tileMap.mapData.height * 32);

      var _iterator3 = _createForOfIteratorHelper(this.backdrops),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
              backdrop = _step3$value[1];

          if (!backdrop.view) {
            var backdropType = '';

            var _iterator4 = _createForOfIteratorHelper(backdrop.properties),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var property = _step4.value;

                if (property.name === 'backdrop') {
                  backdropType = property.value;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            if (backdropType === 'protolabrynth') {
              backdrop.view = new _ProtoLabrynth.ProtoLabrynth();
              backdrop.view.render(this.tags.backdrops);
            } else if (backdropType === 'mystic-cave') {
              backdrop.view = new _MysticCave.MysticCave();
              backdrop.view.render(this.tags.backdrops);
            }
          }

          var leftIntersect = this.args.width + -this.args.x + -backdrop.x;
          var rightIntersect = -(-backdrop.width + -this.args.x + -backdrop.x);
          var topIntersect = this.args.height + -this.args.y + -backdrop.y;
          var bottomIntersect = -(-backdrop.height + -this.args.y + -backdrop.y);
          backdrop.view && Object.assign(backdrop.view.args, {
            x: this.args.x,
            xMax: xMax,
            y: this.args.y + backdrop.y,
            yMax: this.args.y + backdrop.y + -backdrop.view.stacked,
            stacked: -backdrop.view.stacked + 'px',
            frame: this.args.frameId,
            top: topIntersect,
            bottom: bottomIntersect
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.args.backdrop && Object.assign(this.args.backdrop.args, {
        x: this.args.x,
        y: this.args.y,
        xMax: xMax,
        yMax: yMax,
        frame: this.args.frameId,
        stacked: -this.args.backdrop.stacked + 'px'
      });
    }
  }, {
    key: "populateMap",
    value: function populateMap() {
      if (this.args.populated) {
        return;
      }

      this.args.populated = true;
      var objDefs = this.tileMap.getObjectDefs();
      this.objDefs = new Map();

      var _iterator5 = _createForOfIteratorHelper(this.backdrops),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              id = _step5$value[0],
              backdrop = _step5$value[1];

          if (backdrop.view) {
            backdrop.view.remove();
          }

          this.backdrops["delete"](id);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(this.particles.list),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _particle = _step6.value;

          if (_particle) {
            _particle.remove();

            this.particles.remove(_particle);
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      for (var i in objDefs) {
        var objDef = objDefs[i];
        var objType = objDef.type;

        if (objType === 'particle') {
          var particle = new _Particle3d.Particle3d();
          particle.style({
            '--x': objDef.x,
            '--y': objDef.y
          });
          this.particles.add(particle.node);
        }

        if (objType === 'backdrop') {
          this.backdrops.set(objDef.id, objDef);
          continue;
        }

        this.objDefs.set(objDef.id, objDef);

        if (!_ObjectPalette.ObjectPalette[objType]) {
          continue;
        }

        if (this.args.networked) {
          if (!['layer-switch', 'ring', 'companion-block', 'region', 'force-region', 'shade-region', 'rolling-region', 'water-region', 'lava-region', 'block', 'switch', 'base-region', 'water-region', 'force-region', 'rolling-region', 'lava-region', 'q-block', 'sheild-fire-monitor', 'sheild-water-monitor', 'sheild-electric-monitor'].includes(objType)) {
            continue;
          }
        }

        var objClass = _ObjectPalette.ObjectPalette[objType];
        var rawActor = objClass.fromDef(objDef);
        rawActor[Run] = this[Run];
        rawActor[_Bindable.Bindable.NoGetters] = true;

        var actor = _Bindable.Bindable.make(rawActor);

        this.actors.add(actor);

        if (this.actorIsOnScreen(actor)) {
          actor.render(this.tags.actors);
          actor.args.display = actor.defaultDisplay || null;

          if (actor.onAttach && actor.onAttach() === false) {
            actor.detach();
          }
        } else {
          actor.args.display = 'none';
          actor.detach();
        } // actor.onRendered();


        if (actor.controllable) {
          actor.name = objDef.name; // this.auras.add( actor );

          actor.args.display = actor.defaultDisplay || null;
        }
      }

      var _iterator7 = _createForOfIteratorHelper(this.actors.list),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _actor = _step7.value;

          if (!_actor) {
            continue;
          }

          var position = this.getCheckpoint(_actor.args.id);

          if (position && position.checkpointId) {
            var checkpoint = this.actorsById[position.checkpointId];

            if (checkpoint) {
              _actor.args.x = checkpoint.x;
              _actor.args.y = checkpoint.y;
            }
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "actorIsOnScreen",
    value: function actorIsOnScreen(actor) {
      var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;

      if (!actor) {
        return;
      }

      var width = this.args.width;
      var height = this.args.height;
      var camLeft = -this.args.x + -16 + -margin;
      var camRight = -this.args.x + 16 + margin + width;
      var camTop = -this.args.y - margin;
      var camBottom = -this.args.y + height + margin;
      var actorWidth = actor.args.width;
      var actorTop = actor.y - actor.args.height; // const actorLeft  = actor.x - actorWidth / 2;

      var actorLeft = actor.x;
      var actorRight = actor.x + actorWidth + actorWidth / 2;

      if (camLeft < actorRight && camRight > actorLeft && camTop < actor.y && camBottom > actorTop) {
        return true;
      } else if (actorLeft < camRight && actorRight > camLeft && actorTop < camBottom && actor.y > camTop) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "spawnActors",
    value: function spawnActors() {
      var actorDoc = new DocumentFragment();
      var regionDoc = new DocumentFragment();
      var actorSpawned = false;
      var regionSpawned = false;

      var _iterator8 = _createForOfIteratorHelper(this.spawn),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var spawn = _step8.value;

          if (spawn.frame) {
            if (spawn.frame <= this.args.frameId) {
              this.spawn["delete"](spawn);
              spawn.object[_Bindable.Bindable.NoGetters] = true;
              spawn.object[Run] = this[Run];
              this.actors.add(_Bindable.Bindable.make(spawn.object));
              var isRegion = spawn.object instanceof _Region.Region;
              var doc = isRegion ? actorDoc : actorDoc;
              spawn.object.render(doc);
              spawn.object.onRendered();
              spawn.object.onAttached && spawn.object.onAttached();

              if (spawn.object.onAttach && spawn.object.onAttach() === false) {
                if (!spawn.object.args.hidden) {
                  spawn.object.detach();
                }
              }

              if (isRegion) {
                actorSpawned = true;
              } else {
                actorSpawned = true;
              }
            }
          } else {
            this.spawn["delete"](spawn);
            spawn.object[_Bindable.Bindable.NoGetters] = true;
            spawn.object[Run] = this[Run];
            this.actors.add(_Bindable.Bindable.make(spawn.object));
            spawn.object.render(actorDoc);
            spawn.object.onRendered();
            spawn.object.onAttached && spawn.object.onAttached();

            if (spawn.object.onAttach && spawn.object.onAttach() === false) {
              spawn.object.detach();
            }

            actorSpawned = true;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      if (actorSpawned) {
        this.tags.actors.append(actorDoc);
      }

      if (regionSpawned) {
        this.tags.actors.append(regionDoc);
      }
    }
  }, {
    key: "actorUpdateStart",
    value: function actorUpdateStart(actor) {
      if (this.updateStarted.has(actor)) {
        return;
      }

      this.updateStarted.add(actor);
      actor.updateStart();

      if (actor.colliding) {
        actor.colliding = false;
      }
    }
  }, {
    key: "actorUpdate",
    value: function actorUpdate(actor) {
      if (this.updated.has(actor)) {
        return;
      }

      this.updated.add(actor);
      actor.update();
    }
  }, {
    key: "actorUpdateEnd",
    value: function actorUpdateEnd(actor) {
      if (this.updateEnded.has(actor)) {
        return;
      }

      this.updateEnded.add(actor);
      actor.args.colliding = actor.colliding;
      actor.updateEnd();
      this.setColCell(actor);
    }
  }, {
    key: "nearbyActors",
    value: function nearbyActors(actor) {
      var nearbyCells = this.getNearbyColCells(actor);
      var width = this.args.width;
      var height = this.args.height;
      var x = this.args.x;
      var y = this.args.y;
      var result = new Set();

      for (var i in nearbyCells) {
        var cell = nearbyCells[i];
        var actors = cell;

        var _iterator9 = _createForOfIteratorHelper(actors),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var _actor2 = _step9.value;
            result.add(_actor2);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }

      return result;
    }
  }, {
    key: "update",
    value: function update() {
      var _this6 = this;

      for (var _i3 = 0, _arr3 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i3 < _arr3.length; _i3++) {
        var layer = _arr3[_i3];
        var xDir = Math.sign(layer.x - this.args.x);
        var yDir = Math.sign(layer.y - this.args.y);
        layer.x = this.args.x;
        layer.y = this.args.y;
        layer.move(this.tileMap, xDir, yDir);
      }

      var controller = this.controlActor ? this.controlActor.controller : this.controller;

      if (!this.args.paused || this.args.networked) {
        this.callFrameOuts();
        this.callFrameIntervals();
        this.args.lastFrameId = this.args.frameId;
        this.args.frameId++;
      }

      if (this.args.frameId % 600 === 0) {
        ga('set', 'metric1', this.args.frameId / 60);

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'fps-check',
            eventAction: "fps-check::".concat(navigator.platform, "::cores_").concat(navigator.hardwareConcurrency),
            eventLabel: "".concat(this.args.actName),
            eventValue: Math.trunc(this.args.fps)
          });
        }
      }

      if (!this.args.started) {
        this.startTime = Date.now();

        if (controller) {
          this.takeInput(controller);

          if (this.args.titlecard) {
            this.args.titlecard.input(controller);
          }
        }

        return;
      }

      if (this.args.paused !== false && !this.args.networked) {
        this.takeInput(controller);
        this.args.pauseMenu.input(controller);

        if (this.args.paused > 0) {
          this.args.paused--;
        } else {
          return;
        }
      }

      var _iterator10 = _createForOfIteratorHelper(this.willDetach),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              detachee = _step10$value[0],
              detacher = _step10$value[1];

          this.willDetach["delete"](detachee);
          detacher();
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      if (!Number(this.args.rings.args.value)) {
        this.args.ringLabel.args.color = 'red-alert';
      } else {
        this.args.ringLabel.args.color = 'yellow';
      }

      this.args.fpsSprite.args.value = Number(this.args.fps).toFixed(2);
      this.args.frame.args.value = this.args.frameId;
      var time = (this.args.frameId - this.args.startFrameId) / 60;
      var minutes = String(Math.trunc(Math.abs(time) / 60)).padStart(2, '0');
      var seconds = String(Math.trunc(Math.abs(time) % 60)).padStart(2, '0');
      var neg = time < 0 ? '-' : '';

      if (neg) {
        minutes = Number(minutes);
      }

      this.args.timer.args.value = "".concat(neg).concat(minutes, ":").concat(seconds);

      if (this.dontSwitch > 0) {
        this.dontSwitch--;
      }

      if (this.dontSwitch < 0) {
        this.dontSwitch = 0;
      }

      this.args.rippleFrame = this.args.frameId % 128;
      this.args.displaceWater = this.args.frameId % 128;
      this[ActorPointCache].clear();

      if (this.controlActor) {
        if (this.args.isReplaying) {
          if (!this.args.demoIndicator) {
            this.args.demoIndicator = new _CharacterString.CharacterString({
              value: '▶ PLAY',
              color: 'green'
            });
          }

          this.args.focusMe.args.hide = 'hide';

          if (this.replayFrames.has(this.args.frameId)) {
            var frame = this.replayFrames.get(this.args.frameId);

            for (var actorId in frame.args) {
              var actor = this.actorsById[actorId];

              if (frame.input) {
                actor.controller.replay(frame.input);
                actor.readInput();
              }

              if (frame.args) {
                Object.assign(actor.args, frame.args[actorId]);
              }
            }

            if (this.args.isReplaying) {
              this.args.hasRecording = true;
              this.args.topLine.args.value = ' i cant believe its not canvas. ';
              this.args.status.args.value = ' click here to exit demo. ';
            }
          } else {// this.args.isReplaying = false;
          }
        } else {
          if (this.gamepad) {
            this.args.focusMe.args.hide = 'hide';
          }

          if (!this.args.cutScene) {
            this.controlActor.controller && this.takeInput(this.controlActor.controller);
            this.controlActor.readInput();
          }
        }
      }

      if (!this.args.isReplaying && !this.args.isRecording) {
        this.args.demoIndicator = null;
      }

      this.updateStarted.clear();
      this.updated.clear();
      this.updateEnded.clear();

      if (this.args.running) {
        var updatable = new Set();

        var _iterator11 = _createForOfIteratorHelper(this.regions),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var region = _step11.value;

            if (!this.actorIsOnScreen(region, 768)) {
              continue;
            }

            updatable.add(region);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        var _iterator12 = _createForOfIteratorHelper(this.auras),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _actor3 = _step12.value;

            if (_actor3 !== this.controlActor) {
              updatable.add(_actor3);
            }

            var nearbyCells = this.getNearbyColCells(_actor3);

            var _iterator19 = _createForOfIteratorHelper(nearbyCells),
                _step19;

            try {
              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                var cell = _step19.value;

                var _iterator20 = _createForOfIteratorHelper(cell),
                    _step20;

                try {
                  for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                    var _actor4 = _step20.value;

                    if (_actor4 !== this.controlActor) {
                      updatable.add(_actor4);
                    }
                  }
                } catch (err) {
                  _iterator20.e(err);
                } finally {
                  _iterator20.f();
                }
              }
            } catch (err) {
              _iterator19.e(err);
            } finally {
              _iterator19.f();
            }
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }

        var _iterator13 = _createForOfIteratorHelper(updatable),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _actor5 = _step13.value;

            if (_actor5[Run] === this[Run]) {
              this.actorUpdateStart(_actor5);
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdateStart(this.controlActor);
          }
        }

        var _iterator14 = _createForOfIteratorHelper(updatable),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _actor6 = _step14.value;

            if (_actor6[Run] === this[Run]) {
              this.actorUpdate(_actor6);
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdate(this.controlActor);
          }
        }

        var _iterator15 = _createForOfIteratorHelper(updatable),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var _actor7 = _step15.value;

            if (_actor7[Run] === this[Run]) {
              this.actorUpdateEnd(_actor7);
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdateEnd(this.controlActor);
          }
        }

        var _iterator16 = _createForOfIteratorHelper(updatable),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _actor8 = _step16.value;

            if (_actor8[Run] === this[Run]) {
              this.setColCell(_actor8);
            }
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.setColCell(this.controlActor);
          }
        }

        if (this.collisions) {
          var _iterator17 = _createForOfIteratorHelper(this.collisions),
              _step17;

          try {
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              var _step17$value = _slicedToArray(_step17.value, 2),
                  collider = _step17$value[0],
                  collidees = _step17$value[1];

              var _iterator18 = _createForOfIteratorHelper(collidees),
                  _step18;

              try {
                for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                  var _step18$value = _slicedToArray(_step18.value, 2),
                      collidee = _step18$value[0],
                      type = _step18$value[1];

                  if (!collidee) {
                    continue;
                  }

                  collidee.pause(false);
                }
              } catch (err) {
                _iterator18.e(err);
              } finally {
                _iterator18.f();
              }
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
        }

        if (this.controlActor) {
          this.args.score.args.value = String(this.controlActor.args.score).padStart(4, ' ');
          this.args.rings.args.value = String(this.controlActor.args.rings).padStart(4, ' ');
          this.args.hasRings = !!this.controlActor.args.rings;
          this.args.hasEmeralds = !!this.controlActor.args.emeralds;
          this.args["char"].args.value = this.controlActor.args.name;
          this.args.charName = this.controlActor.args.name;

          if (this.args.debugOsd) {
            this.args.xPos.args.value = Number(this.controlActor.x).toFixed(3);
            this.args.yPos.args.value = Number(this.controlActor.y).toFixed(3);
            this.args.ground.args.value = this.controlActor.args.landed;
            this.args.gSpeed.args.value = Number(this.controlActor.args.gSpeed).toFixed(3);
            this.args.xSpeed.args.value = Number(this.controlActor.args.xSpeed).toFixed(3);
            this.args.ySpeed.args.value = Number(this.controlActor.args.ySpeed).toFixed(3);
            this.args.angle.args.value = (Math.round(this.controlActor.args.groundAngle * 1000) / 1000).toFixed(3);
            this.args.airAngle.args.value = (Math.round(this.controlActor.args.airAngle * 1000) / 1000).toFixed(3);
            var modes = ['FLOOR', 'L-WALL', 'CEILING', 'R-WALL'];
            this.args.mode.args.value = modes[Math.floor(this.controlActor.args.mode)] || Math.floor(this.controlActor.args.mode);
            this.args.cameraMode.args.value = this.controlActor.args.cameraMode;
          }
        }
      }

      var width = this.args.width;
      var height = this.args.height;
      var margin = 16;
      var camLeft = -this.args.x + -16 + -margin;
      var camRight = -this.args.x + width + -16 + margin;
      var camTop = -this.args.y - margin;
      var camBottom = -this.args.y + height + margin;
      var inAuras = new WeakSet();

      if (this.controlActor) {
        (function () {
          var actorDoc = new DocumentFragment();
          var regionDoc = new DocumentFragment();
          var wakeActors = false;
          var wakeRegions = false;
          var nearbyActors = _this6.nearbyActors(_this6.controlActor) || [];

          for (var _i4 = 0, _arr4 = [nearbyActors, _this6.regions]; _i4 < _arr4.length; _i4++) {
            var actorList = _arr4[_i4];

            var _iterator21 = _createForOfIteratorHelper(actorList),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var _actor9 = _step21.value;

                if (_actor9[Run] !== _this6[Run]) {
                  continue;
                }

                if (!_actor9.nodes.length) {
                  _actor9.render(_this6.tags.actors);
                }

                var actorIsOnScreen = _this6.actorIsOnScreen(_actor9);

                if (actorIsOnScreen && !(_actor9 instanceof _LayerSwitch.LayerSwitch)) {
                  _actor9.args.display = _actor9.defaultDisplay || null;

                  if (!_actor9.vizi) {
                    if (!_actor9.nodes.length) {
                      if (_actor9.onAttach && _actor9.onAttach() === false) {
                        _actor9.detach();
                      }
                    }

                    if (!_actor9["public"].hidden) {
                      if (_actor9 instanceof _Region.Region) {
                        _actor9.nodes.map(function (n) {
                          return actorDoc.append(n);
                        });

                        wakeActors = true;
                      } else {
                        _actor9.nodes.map(function (n) {
                          return actorDoc.append(n);
                        });

                        wakeActors = true;
                      }
                    }

                    _actor9.wakeUp();
                  }

                  _this6.willDetach["delete"](_actor9);

                  _actor9.vizi = true;
                }

                inAuras.add(_actor9);

                _this6.recent.add(_actor9);
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }

          var _iterator22 = _createForOfIteratorHelper(_this6.recent),
              _step22;

          try {
            var _loop = function _loop() {
              var actor = _step22.value;

              if (actor[Run] !== _this6[Run]) {
                _this6.recent["delete"](actor);

                return "continue";
              }

              var actorIsOnScreen = _this6.actorIsOnScreen(actor);

              if (actor.vizi && !_this6.willDetach.has(actor) && !actorIsOnScreen) {
                _this6.willDetach.set(actor, function () {
                  actor.sleep();
                  actor.args.display = 'none';
                  actor.detach();
                  actor.vizi = false;
                  actor.willhide = null;

                  _this6.willDetach["delete"](actor);
                });

                _this6.recent["delete"](actor);
              }
            };

            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }
          } catch (err) {
            _iterator22.e(err);
          } finally {
            _iterator22.f();
          }

          if (wakeActors) {
            _this6.tags.actors.append(actorDoc);
          }

          if (wakeRegions) {
            _this6.tags.actors.append(regionDoc);
          }
        })();
      }

      if (this.nextControl) {
        !this.args.networked && this.auras.clear();
        this.controlActor && this.controlActor.sprite && this.controlActor.sprite.parentNode && this.controlActor.sprite.parentNode.classList.remove('actor-selected');

        if (this.controlActor) {
          this.controlActor.args.selected = false;
        }

        this.controlActor = this.nextControl;
        this.controlActor.args.selected = true;
        this.auras.add(this.controlActor);
        this.controlActor.args.display = this.controlActor.defaultDisplay || null;
        this.controlActor.nodes.map(function (n) {
          return _this6.tags.actors.append(n);
        });
        this.controlActor.vizi = true;
        this.args.maxSpeed = null;
        this.nextControl = null;
      }

      this.updateBackground();

      if (this.controlActor) {
        this.controlActor.setCameraMode();
        this.moveCamera();
        this.applyMotionBlur();

        if (this.controlActor.args.name === 'seymour' && this.controlActor.y < 3840 && this.controlActor.x > 38400 && this.controlActor.standingOn && this.controlActor.standingOn.isVehicle) {
          this.args.secret = 'aurora';

          if (!this.secretsFound.has('seymour-aurora')) {
            if (this.args.audio && this.secretSample) {
              this.secretSample.currentTime = 0;
              this.secretSample.volume = 0.25;
              this.secretSample.play();
            }

            this.showStatus(10000, ' A secret is revealed ');
            this.secretsFound.add('seymour-aurora');
          }
        } else {
          this.args.secret = '';
        }
      }

      if (this.args.networked && this.controlActor) {
        var netState = {
          frame: this.serializePlayer()
        };

        if (this.args.playerId === 1) {
          this.server.send(JSON.stringify(netState));
        } else if (this.args.playerId === 2) {
          this.client.send(JSON.stringify(netState));
        }
      }

      this.spawnActors();
      this.collisions = new Map();
    }
  }, {
    key: "click",
    value: function click(event) {
      if (this.args.isReplaying) {
        this.controlActor.controller.zero();
        this.stop();
      }
    }
  }, {
    key: "regionsAtPoint",
    value: function regionsAtPoint(x, y) {
      var regions = new Set();

      var _iterator23 = _createForOfIteratorHelper(this.regions),
          _step23;

      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var region = _step23.value;
          var regionArgs = region["public"];
          var regionX = regionArgs.x;
          var regionY = regionArgs.y;
          var width = regionArgs.width;
          var height = regionArgs.height;
          var offset = Math.floor(width / 2);
          var left = regionX;
          var right = regionX + width;
          var top = regionY - height;
          var bottom = regionY;

          if (x >= left && right > x) {
            if (bottom >= y && y > top) {
              regions.add(region);
            }
          }
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }

      return regions;
    }
  }, {
    key: "actorsAtPoint",
    value: function actorsAtPoint(x, y) {
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var cacheKey = x + '::' + y;
      var actorPointCache = this[ActorPointCache];

      if (actorPointCache.has(cacheKey)) {
        return actorPointCache.get(cacheKey);
      }

      var actors = [];

      var _iterator24 = _createForOfIteratorHelper(this.getNearbyColCells({
        x: x,
        y: y
      })),
          _step24;

      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var cell = _step24.value;

          var _iterator25 = _createForOfIteratorHelper(cell),
              _step25;

          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var actor = _step25.value;
              // if(actor.removed)
              // {
              // 	continue;
              // }
              var actorArgs = actor.args;
              var actorX = actorArgs.x;
              var actorY = actorArgs.y;
              var width = actorArgs.width;
              var height = actorArgs.height;
              var myRadius = Math.max(Math.floor(w / 2), 0);
              var myLeft = x - myRadius;
              var myRight = x + myRadius;
              var myTop = y - Math.max(h, 0);
              var myBottom = y;
              var offset = width / 2;
              var otherLeft = actorX - offset;
              var otherRight = actorX + offset;
              var otherTop = actorY - height;
              var otherBottom = actorY;

              if (myRight >= otherLeft && otherRight > myLeft) {
                if (otherBottom >= myTop && myBottom > otherTop) {
                  actors.push(actor);
                }
              }
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }

      actorPointCache.set(cacheKey, actors);
      return actors;
    }
  }, {
    key: "padConnected",
    value: function padConnected(event) {
      this.gamepad = event.gamepad;

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'gamepad',
          eventAction: 'connected',
          eventLabel: event.gamepad.id
        });
      }
    }
  }, {
    key: "padRemoved",
    value: function padRemoved(event) {
      if (!this.gamepad) {
        return;
      }

      if (this.gamepad.index === event.gamepad.index) {
        this.gamepad = null;
      }

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'gamepad',
          eventAction: 'disconnected',
          eventLabel: event.gamepad.id
        });
      }
    }
  }, {
    key: "getColCell",
    value: function getColCell(actor) {
      var colCellDiv = this.colCellDiv;
      var colCells = this.colCells;
      var cellX = Math.floor(actor.x / colCellDiv);
      var cellY = Math.floor(actor.y / colCellDiv);
      var name = "".concat(cellX, ":").concat(cellY);

      if (!colCells.has(name)) {
        var cell = new Set();
        colCells.set(name, cell);
        cell.name = name;
        return cell;
      }

      return colCells.get(name);
    }
  }, {
    key: "setColCell",
    value: function setColCell(actor) {
      actor[_Bindable.Bindable.NoGetters] = true;
      actor = _Bindable.Bindable.make(actor);
      var cell = this.getColCell(actor);
      var originalCell = actor[ColCell];

      if (originalCell && originalCell !== cell) {
        originalCell["delete"](actor);
      }

      actor[ColCell] = cell;
      actor[ColCell].add(actor);
      return cell;
    }
  }, {
    key: "getNearbyColCells",
    value: function getNearbyColCells(actor) {
      var actorX = actor.x;
      var actorY = actor.y;
      var colCellDiv = this.colCellDiv;
      var cellX = Math.floor(actorX / colCellDiv);
      var cellY = Math.floor(actorY / colCellDiv);
      var name = "".concat(cellX, "::").concat(cellY);
      var cache = this.colCellCache.get(name);

      if (cache) {
        return cache.filter(function (set) {
          return set.size;
        });
      }

      var space = colCellDiv;
      var colA = actorX - space * 2;
      var colB = actorX - space;
      var colC = actorX;
      var colD = actorX + space;
      var colE = actorX + space * 2;
      var rowA = actorY - space * 2;
      var rowB = actorY - space;
      var rowC = actorY;
      var rowD = actorY + space;
      var rowE = actorY + space * 2;
      this.colCellCache.set(name, cache = [// this.getColCell({x:colA, y:rowA})
      // , this.getColCell({x:colA, y:rowB})
      // , this.getColCell({x:colA, y:rowC})
      // , this.getColCell({x:colA, y:rowD})
      // , this.getColCell({x:colA, y:rowE})
      // , this.getColCell({x:colB, y:rowA})
      this.getColCell({
        x: colB,
        y: rowB
      }), this.getColCell({
        x: colB,
        y: rowC
      }), this.getColCell({
        x: colB,
        y: rowD
      }) // , this.getColCell({x:colB, y:rowE})
      // , this.getColCell({x:colC, y:rowA})
      , this.getColCell({
        x: colC,
        y: rowB
      }), this.getColCell({
        x: colC,
        y: rowC
      }), this.getColCell({
        x: colC,
        y: rowD
      }) // , this.getColCell({x:colC, y:rowE})
      // , this.getColCell({x:colD, y:rowA})
      , this.getColCell({
        x: colD,
        y: rowB
      }), this.getColCell({
        x: colD,
        y: rowC
      }), this.getColCell({
        x: colD,
        y: rowD
      }) // , this.getColCell({x:colD, y:rowE})
      // , this.getColCell({x:colE, y:rowA})
      // , this.getColCell({x:colE, y:rowB})
      // , this.getColCell({x:colE, y:rowC})
      // , this.getColCell({x:colE, y:rowD})
      // , this.getColCell({x:colE, y:rowE})
      ]);
      return cache.filter(function (set) {
        return set.size;
      });
    }
  }, {
    key: "screenFilter",
    value: function screenFilter(filterName) {
      this.args.screenFilter = filterName;
    }
  }, {
    key: "reset",
    value: function reset() {
      this[Run]++;
      this.stop();
      this.tileMap.replacements.clear();
      this.tileMap.tileSetCache.clear();
      this.tileMap.tileCache.clear();
      this.callFrames.clear();
      this.callIntervals.clear();
      this.collisions.clear();
      this.colCellCache.clear();
      this.colCells.clear();
      this.regions.clear();
      this.spawn.clear();
      this.auras.clear();
      this.updateStarted.clear();
      this.updateEnded.clear();
      this.updated.clear();
      this.objectDb.clear();
      this.args.actClear = false;
      this.args.cutScene = false;
      this.args.fade = false;
      var layers = this.tileMap.tileLayers;

      var _iterator26 = _createForOfIteratorHelper(layers),
          _step26;

      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var layerDef = _step26.value;
          layerDef.offsetX = 0;
          layerDef.offsetY = 0;
          layerDef.offsetXChanged = 0;
          layerDef.offsetYChanged = 0;
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }

      for (var _i5 = 0, _arr5 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i5 < _arr5.length; _i5++) {
        var layer = _arr5[_i5];
        layer.args.destroyed = false;
        layer.args.offsetX = 0;
        layer.args.offsetY = 0;
        layer.args.offsetXChanged = 0;
        layer.args.offsetYChanged = 0;
      }

      var _iterator27 = _createForOfIteratorHelper(this.actors.items()),
          _step27;

      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var actor = _step27.value;
          this.actors.remove(actor);
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }

      this.controlActor && this.actors.remove(this.controlActor);
      this.nextControl = null;
      this.actorsById = {};

      var _iterator28 = _createForOfIteratorHelper(this.effects.list),
          _step28;

      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var effect = _step28.value;
          effect && this.effects.remove(effect);
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }

      var _iterator29 = _createForOfIteratorHelper(this.particles.list),
          _step29;

      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var particle = _step29.value;
          particle && this.particles.remove(particle);
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }

      this.spawn.clear();
      this[ActorPointCache].clear();
      this.args.isRecording = false;
      this.args.isReplaying = false;
      this.args.populated = false;
      this.controlActor = null; // this.args.frameId   = -1;

      this.tags.viewport.focus();
    }
  }, {
    key: "quit",
    value: function quit() {
      this.args.actClear = false;
      this.args.cutScene = false;
      this.args.fade = false;
      this.callFrames.clear();
      this.callIntervals.clear();
      this.collisions.clear();
      this.colCellCache.clear();
      this.colCells.clear();
      this.regions.clear();
      this.spawn.clear();
      this.auras.clear();
      this.args.timeBonus.args.value = 0;
      this.args.ringBonus.args.value = 0;
      this.args.speedBonus.args.value = 0;
      this.args.totalBonus.args.value = 0;

      var _iterator30 = _createForOfIteratorHelper(this.actors.items()),
          _step30;

      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var actor = _step30.value;
          this.actors.remove(actor);
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }

      for (var _i6 = 0, _arr6 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i6 < _arr6.length; _i6++) {
        var layer = _arr6[_i6];
        layer.args.destroyed = false;
      }

      this.willDetach.clear();
      this.objectDb.clear();
      this.args.isRecording = false;
      this.args.isReplaying = false;
      this.playableIterator = false;
      this.args.populated = false;
      this.args.paused = false;
      this.args.started = false;
      this.controlActor = null;
      this.args.frameId = -1;
      this.args.timer.args.value = '';
      this.args.rings.args.value = 0; // this.emeralds.args.value = 0;
      // this.coins.args.value    = 0;

      this.args.hasRings = false;
      this.args.hasCoins = false;
      this.args.hasEmeralds = false;
      this.args["char"].args.value = '';
      this.args.charName = '';
      this.args.level = false;
      var layers = this.args.layers;
      var layerCount = layers.length;

      var _iterator31 = _createForOfIteratorHelper(this.args.layers),
          _step31;

      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var _layer = _step31.value;

          _layer.remove();
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }

      var _iterator32 = _createForOfIteratorHelper(this.args.fgLayers),
          _step32;

      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var _layer2 = _step32.value;

          _layer2.remove();
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }

      var cards = [];
      cards.push.apply(cards, _toConsumableArray(this.returnHomeCards()));
      this.args.titlecard = new _Series.Series({
        cards: cards
      }, this);
      this.args.backdrop = null;
      this.args.titlecard.play();
    }
  }, {
    key: "introCards",
    value: function introCards() {
      return [new _LoadingCard.LoadingCard({
        timeout: 350,
        text: 'loading'
      }, this), new _BootCard.BootCard({
        timeout: 3500
      }), new _DebianCard.DebianCard({
        timeout: 4500
      }), new _WebkitCard.WebkitCard({
        timeout: 3500
      }), new _GamepadCard.GamepadCard({
        timeout: 2500
      }), new _SeanCard.SeanCard({
        timeout: 5000
      }, this)].concat(_toConsumableArray(this.homeCards()));
    }
  }, {
    key: "homeCards",
    value: function homeCards() {
      var titlecard = this.args.zonecard = new _Titlecard.Titlecard({}, this);
      return [new _TitleScreenCard.TitleScreenCard({
        timeout: 50000
      }, this), new _MainMenu.MainMenu({
        timeout: -1
      }, this), titlecard];
    }
  }, {
    key: "returnHomeCards",
    value: function returnHomeCards() {
      var titlecard = this.args.zonecard = new _Titlecard.Titlecard({}, this);
      return [new _ThankYouCard.ThankYouCard({
        timeout: 5000
      }, this)].concat(_toConsumableArray(this.homeCards()));
    }
  }, {
    key: "record",
    value: function record() {
      this.reset();
      this.args.frameId = 0;
      this.replayInputs = [];
      this.args.isRecording = true;
      this.args.isReplaying = false;
      this.args.hasRecording = true;
      this.args.paused = false;
      this.startLevel();
    }
  }, {
    key: "playback",
    value: function playback() {
      this.replayInputs = JSON.parse(localStorage.getItem('replay')) || [];

      var _iterator33 = _createForOfIteratorHelper(this.replayInputs),
          _step33;

      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var frame = _step33.value;
          this.replayFrames.set(frame.frame, frame);
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }

      this.reset();
      this.args.frameId = 0;
      this.args.isReplaying = true;
      this.args.isRecording = false;
      this.startLevel();
      this.args.paused = false;
    }
  }, {
    key: "stop",
    value: function stop() {
      this.args.isReplaying = false;
      this.args.isRecording = false;

      if (this.args.isRecording) {
        var replay = JSON.stringify(_toConsumableArray(this.replayInputs));
        localStorage.setItem('replay', replay);
      }

      this.controlActor && this.controlActor.controller.zero();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.tags.viewport && this.tags.viewport.focus();
    }
  }, {
    key: "getServer",
    value: function getServer() {
      var _this7 = this;

      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var rtcConfig = {
        iceServers: [// {urls: 'stun:stun1.l.google.com:19302'},
          // {urls: 'stun:stun2.l.google.com:19302'}
        ]
      };
      var server = !refresh && server || new _RtcServer.RtcServer(rtcConfig);

      var onOpen = function onOpen(event) {
        console.log('Connection opened!');
        _this7.args.chatBox = new _ChatBox.ChatBox({
          pipe: server
        }); // const actors = this.actors.list;
        // if(actors[1])
        // {
        // 	actors[1].args.name = 'Player 2';
        // }

        _this7.args.playerId = 1;
      };

      var onMessage = function onMessage(event) {
        var actors = _this7.actors.list;

        if (actors[1]) {
          var packet = JSON.parse(event.detail);
          var actor = actors[1];

          if (packet.frame) {
            if (packet.frame.frame > _this7.args.frameId) {
              _this7.args.frameId = packet.frame.frame;
            }

            if (packet.frame.input) {
              actor.controller.replay(packet.frame.input);
              actor.readInput();
            }

            if (packet.frame.args) {
              Object.assign(actor.args, packet.frame.args);
            }
          }
        }
      };

      this.listen(server, 'open', onOpen, {
        once: true
      });
      this.listen(server, 'message', onMessage);
      this.server = server; // console.log(server);

      return server;
    }
  }, {
    key: "getClient",
    value: function getClient() {
      var _this8 = this;

      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var rtcConfig = {
        iceServers: [// {urls: 'stun:stun1.l.google.com:19302'},
          // {urls: 'stun:stun2.l.google.com:19302'}
        ]
      };
      var client = !refresh && this.client || new _RtcClient.RtcClient(rtcConfig);

      var onOpen = function onOpen(event) {
        console.log('Connection opened!'); // const actors = this.actors.list;

        _this8.args.chatBox = new _ChatBox.ChatBox({
          pipe: client
        }); // if(actors[0])
        // {
        // 	actors[0].args.name = 'Player 1';
        // }

        _this8.args.playerId = 2;
      };

      var onMessage = function onMessage(event) {
        var actors = _this8.actors.list;

        if (actors[0]) {
          var packet = JSON.parse(event.detail);
          var actor = actors[0];

          if (packet.frame) {
            if (packet.frame.frame > _this8.args.frameId) {
              _this8.args.frameId = packet.frame.frame;
            }

            if (packet.frame.input) {
              actor.controller.replay(packet.frame.input);
              actor.readInput();
            }

            if (packet.frame.args) {
              Object.assign(actor.args, packet.frame.args);
            }
          }
        }
      };

      this.listen(client, 'open', onOpen, {
        once: true
      });
      this.listen(client, 'message', onMessage);
      this.client = client; // console.log(client);

      return client;
    }
  }, {
    key: "serializePlayer",
    value: function serializePlayer() {
      if (!this.controlActor || !this.controlActor.controller) {
        return {};
      }

      var frame = this.args.frameId;
      var input = this.controlActor.controller.serialize();
      var args = {
        x: this.controlActor["public"].x,
        y: this.controlActor["public"].y,
        gSpeed: this.controlActor["public"].gSpeed,
        xSpeed: this.controlActor["public"].xSpeed,
        ySpeed: this.controlActor["public"].ySpeed,
        direction: this.controlActor["public"].direction,
        facing: this.controlActor["public"].facing,
        falling: this.controlActor["public"].falling,
        rolling: this.controlActor["public"].rolling,
        jumping: this.controlActor["public"].jumping,
        flying: this.controlActor["public"].flying,
        "float": this.controlActor["public"]["float"],
        angle: this.controlActor["public"].angle,
        mode: this.controlActor["public"].mode,
        groundAngle: this.controlActor["public"].groundAngle
      };
      return {
        frame: frame,
        input: input,
        args: args
      };
    }
  }, {
    key: "onFrameOut",
    value: function onFrameOut(frames, callback) {
      if (frames <= 0) {
        callback();
        return;
      }

      var callFrame = this.args.frameId + frames;

      if (!this.callFrames.has(callFrame)) {
        this.callFrames.set(callFrame, new Set());
      }

      var callbacks = this.callFrames.get(callFrame);
      callbacks.add(callback);
      return function () {
        return callbacks["delete"](callback);
      };
    }
  }, {
    key: "onFrameInterval",
    value: function onFrameInterval(interval, callback) {
      if (frames <= 0) {
        return;
      }

      var callInterval = interval;

      if (!this.callIntervals.has(callInterval)) {
        this.callIntervals.set(callInterval, new Set());
      }

      var callbacks = this.callIntervals.get(callInterval);
      callbacks.add(callback);
      return function () {
        return callbacks["delete"](callback);
      };
    }
  }, {
    key: "callFrameOuts",
    value: function callFrameOuts() {
      for (var i = this.args.lastFrameId; i <= this.args.frameId; i++) {
        if (!this.callFrames.has(i)) {
          continue;
        }

        var callbacks = this.callFrames.get(i);

        var _iterator34 = _createForOfIteratorHelper(callbacks),
            _step34;

        try {
          for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
            var callback = _step34.value;
            callback();
          }
        } catch (err) {
          _iterator34.e(err);
        } finally {
          _iterator34.f();
        }

        this.callFrames["delete"](i);
      }
    }
  }, {
    key: "callFrameIntervals",
    value: function callFrameIntervals() {
      for (var i = this.args.lastFrameId; i <= this.args.frameId; i++) {
        var _iterator35 = _createForOfIteratorHelper(this.callIntervals),
            _step35;

        try {
          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
            var _step35$value = _slicedToArray(_step35.value, 2),
                interval = _step35$value[0],
                callbacks = _step35$value[1];

            if (i % interval === 0) {
              var _iterator36 = _createForOfIteratorHelper(callbacks),
                  _step36;

              try {
                for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                  var callback = _step36.value;
                  callback();
                }
              } catch (err) {
                _iterator36.e(err);
              } finally {
                _iterator36.f();
              }
            }
          }
        } catch (err) {
          _iterator35.e(err);
        } finally {
          _iterator35.f();
        }
      }
    }
  }, {
    key: "pauseGame",
    value: function pauseGame() {
      var _this9 = this;

      this.focus();
      this.args.paused = -1;
      this.args.pauseMenu.focusFirst();
      this.onTimeout(6, function () {
        _this9.controller && _this9.controller.zero();
      });
    }
  }, {
    key: "unpauseGame",
    value: function unpauseGame() {
      var _this10 = this;

      this.onTimeout(15, function () {
        _this10.controller && _this10.controller.zero();
      });
      this.onTimeout(30, function () {
        _this10.focus();
      });
      this.onTimeout(60, function () {
        _this10.args.paused = false;
      });
    }
  }, {
    key: "mousemove",
    value: function mousemove(event) {
      var _this11 = this;

      this.args.mouse = 'moved';
      this.onTimeout(5000, function () {
        _this11.args.mouse = 'hide';
      });
    }
  }, {
    key: "hyphenate",
    value: function hyphenate(string) {
      return String(string).replace(/\s/g, '-').toLowerCase();
    }
  }, {
    key: "storeCheckpoint",
    value: function storeCheckpoint(actorId, checkpointId) {
      if (!this.checkpoints[this.tileMap.mapUrl]) {
        this.checkpoints[this.tileMap.mapUrl] = {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      checkpointsByActor[actorId] = {
        checkpointId: checkpointId,
        frames: this.args.frameId - this.args.startFrameId
      };
      localStorage.setItem("checkpoints:::".concat(this.tileMap.mapUrl), JSON.stringify(this.checkpoints[this.tileMap.mapUrl]));
    }
  }, {
    key: "getCheckpoint",
    value: function getCheckpoint(actorId) {
      if (!this.checkpoints[this.tileMap.mapUrl]) {
        var checkpointSource = localStorage.getItem("checkpoints:::".concat(this.tileMap.mapUrl)) || '{}';
        this.checkpoints[this.tileMap.mapUrl] = JSON.parse(checkpointSource) || {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      var currentCheckpoint = checkpointsByActor[actorId];
      return currentCheckpoint;
    }
  }, {
    key: "clearCheckpoints",
    value: function clearCheckpoints(actorId) {
      if (!this.checkpoints[this.tileMap.mapUrl]) {
        this.checkpoints[this.tileMap.mapUrl] = {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      delete checkpointsByActor[actorId];
      localStorage.setItem("checkpoints:::".concat(this.tileMap.mapUrl), JSON.stringify(this.checkpoints[this.tileMap.mapUrl]));
    }
  }, {
    key: "showCenterMessage",
    value: function showCenterMessage(message, color) {
      this.args.centerMessage = new _CharacterString.CharacterString({
        value: message,
        color: color
      });
    }
  }, {
    key: "hideCenterMessage",
    value: function hideCenterMessage() {
      this.args.centerMessage = false;
    }
  }, {
    key: "showDialog",
    value: function showDialog() {
      var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      this.args.dialog = true;
      this.clearDialog();
      lines = lines.map(function (t) {
        return new _CharacterString.CharacterString({
          value: t
        });
      });
      var offset = 0;

      var _iterator37 = _createForOfIteratorHelper(lines),
          _step37;

      try {
        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
          var line = _step37.value;
          line.offset = offset;
          offset += line.args.value.length;
        }
      } catch (err) {
        _iterator37.e(err);
      } finally {
        _iterator37.f();
      }

      this.args.dialogLines = lines;
      this.args.dialogClasses = classes;
    }
  }, {
    key: "hideDialog",
    value: function hideDialog(message) {
      this.clearDialog();
      this.args.dialog = false;
    }
  }, {
    key: "clearDialog",
    value: function clearDialog() {
      this.args.dialogLines = [];
    }
  }, {
    key: "clearAct",
    value: function clearAct(message) {
      var _this12 = this;

      console.log(message);
      this.args.actClearLabel.args.value = message;
      var speedBonus = Math.trunc(this.controlActor.args.clearSpeed * 10);
      var ringBonus = this.controlActor.args.rings * 100;
      var timeBonus = 0;
      var time = (this.args.frameId - this.args.startFrameId) / 60;
      var seconds = Math.trunc(Math.abs(time));

      if (seconds < 30) {
        timeBonus = 50000;
      } else if (seconds < 45) {
        timeBonus = 10000;
      } else if (seconds < 60) {
        timeBonus = 5000;
      } else if (seconds < 90) {
        timeBonus = 4000;
      } else if (seconds < 120) {
        timeBonus = 3000;
      } else if (seconds < 180) {
        timeBonus = 2000;
      } else if (seconds < 240) {
        timeBonus = 1000;
      } else {
        timeBonus = 500;
      }

      var totalBonus = timeBonus + ringBonus + speedBonus;
      this.controlActor.args.score += totalBonus;
      this.args.actClear = true;
      this.args.timeBonus.args.value = 0;
      this.args.ringBonus.args.value = 0;
      this.args.speedBonus.args.value = 0;
      this.args.totalBonus.args.value = 0;
      this.onFrameOut(45, function () {
        return _this12.args.timeBonus.args.value = timeBonus;
      });
      this.onFrameOut(90, function () {
        return _this12.args.ringBonus.args.value = ringBonus;
      });
      this.onFrameOut(135, function () {
        return _this12.args.speedBonus.args.value = speedBonus;
      });
      this.onFrameOut(180, function () {
        return _this12.args.totalBonus.args.value = totalBonus;
      });
      this.onFrameOut(420, function () {
        return _this12.args.actClear = false;
      });
    }
  }, {
    key: "cpuDetect",
    value: function cpuDetect() {
      try {
        ga('send', 'event', {
          eventCategory: 'cpu',
          eventAction: 'cores',
          eventLabel: "core check",
          eventValue: navigator.hardwareConcurrency
        });
      } catch (error) {
        ga && ga('send', 'event', {
          eventCategory: 'cpu',
          eventAction: 'core check fail',
          eventLabel: "Cpu Detect Failure: ".concat(error)
        });
      }
    }
  }, {
    key: "gpuDetect",
    value: function gpuDetect() {
      try {
        this.gpuDetector = this.gpuDetector || document.createElement('canvas').getContext('webgl');
        var debug = this.gpuDetector.getExtension('WEBGL_debug_renderer_info');
        var vendor = this.gpuDetector.getParameter(debug.UNMASKED_VENDOR_WEBGL);
        var gpu = this.gpuDetector.getParameter(debug.UNMASKED_RENDERER_WEBGL);
        ga('send', 'event', {
          eventCategory: 'gpu',
          eventAction: vendor,
          eventLabel: gpu
        });
      } catch (error) {
        ga && ga('send', 'event', {
          eventCategory: 'gpu',
          eventAction: 'fail',
          eventLabel: "Gpu Detect Failure: ".concat(error)
        });
      }
    }
  }, {
    key: "buildDetect",
    value: function buildDetect() {
      var buildTag = document.head.querySelector('meta[name="x-build-time"]');
      var build = buildTag.getAttribute('content');
      ga && ga('send', 'event', {
        eventCategory: 'build',
        eventAction: 'build check',
        eventLabel: build
      });
    }
  }]);

  return Viewport;
}(_View2.View);

exports.Viewport = Viewport;
});

;require.register("viewport/layer.html", function(exports, require, module) {
module.exports = "<div data-name = \"[[name]]\" class = \"viewport-background\" cv-each = \"blocks:block:b\" cv-ref = \"background\" data-layer = \"[[layerId]]\">[[block]]</div>\n"
});

;require.register("viewport/viewport.html", function(exports, require, module) {
module.exports = "<section class = \"filters\" cv-each = \"effects:effect\">[[effect]]</section>\n\n<div class = \"viewport-frame [[initializing]] [[standalone]] [[secret]] [[level]] [[noIntro]] [[inputType]]\" cv-ref = \"frame\">\n\t<div class = \"viewport-header\">\n\t\t<span class = \"sean-icon\"></span>\n\t\t<h1>Pixel Physics</h1>\n\t</div>\n\t<div class = \"viewport [[standalone]] [[fullscreen]] displacement-[[displacement]] mouse-[[mouse]] [[theme]]\" cv-ref = \"viewport\" tabindex=\"0\" cv-on = \"click(event);mousemove(event)\">\n\n\t\t<svg height=\"100\" width=\"100\">\n\t\t<defs>\n\n\t\t\t<filter id=\"motionBlur\">\n\t\t\t\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0,0\" cv-ref = \"blur\" />\n\t\t\t</filter>\n\n\t\t\t<filter id=\"waterBlur\">\n\t\t\t\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.25,0\" />\n\t\t\t</filter>\n\n\t\t\t<filter id=\"dilate\">\n\t\t\t\t<feMorphology operator=\"dilate\" radius=\"0.25\" result = \"expanded\"/>\n\t\t\t\t<feMerge>\n\t\t\t\t\t<feMergeNode in=\"expanded\" />\n\t\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\n\t\t\t\t</feMerge>\n\t\t\t</filter>\n\n\t\t\t<filter id = \"waves\"\n\t\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\t\tx      =\"0%\"\n\t\t\t\ty      =\"0%\"\n\t\t\t\theight =\"100%\"\n\t\t\t\twidth  =\"100%\"\n\t\t\t>\n\t\t\t\t<feFlood\n\t\t\t\t\tflood-color=\"#408000\"\n\t\t\t\t\tresult = \"DisplacementGreen\"\n\t\t\t\t></feFlood>\n\n\t\t\t\t<feImage\n\t\t\t\t\txlink:href=\"/effects/wave.png\"\n\t\t\t\t\tresult=\"DisplacementSource\"\n\t\t\t\t\theight=\"64\"\n\t\t\t\t\twidth=\"64\"\n\t\t\t\t></feImage>\n\n\t\t\t\t<feTile\n\t\t\t\t\tin=\"DisplacementSource\"\n\t\t\t\t\tresult=\"DisplacementTile\"\n\t\t\t\t></feTile>\n\n\t\t\t\t<feComposite\n\t\t\t\t\tin  = \"DisplacementTile\"\n\t\t\t\t\tin2 = \"DisplacementGreen\"\n\t\t\t\t\tresult =\"DisplacementField\"\n\t\t\t\t\toperator =\"over\"\n\t\t\t\t></feComposite>\n\n\t\t\t\t<feOffset\n\t\t\t\t\tin  = \"DisplacementField\"\n\t\t\t\t\tout = \"DisplacementOffset\"\n\t\t\t\t\tdx  = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"dy\"\n\t\t\t\t\t\tvalues = \"0;-64\"\n\t\t\t\t\t\tdur=\"1500ms\"\n\t\t\t\t\t\trepeatCount=\"indefinite\" />\n\n\t\t\t\t</feOffset>\n\n\t\t\t\t<feDisplacementMap\n\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\tin2=\"DisplacementOffset\"\n\t\t\t\t\tresult=\"Displaced\"\n\t\t\t\t\txChannelSelector=\"R\"\n\t\t\t\t\tyChannelSelector=\"G\"\n\t\t\t\t\tscale=\"4\"\n\t\t\t\t></feDisplacementMap>\n\n\t\t\t\t<feGaussianBlur\n\t\t\t\t\tin=\"Displaced\"\n\t\t\t\t\tstdDeviation=\"0.35\"\n\t\t\t\t></feGaussianBlur>\n\n\t\t\t</filter>\n\n\t\t\t<filter id = \"ntsc\"\n\t\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\t\tx      = \"0%\"\n\t\t\t\ty      = \"0%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t\theight = \"200%\"\n\t\t\t>\n\t\t\t\t<feFlood\n\t\t\t\t\tflood-color=\"#808000\"\n\t\t\t\t\tresult = \"DisplacementGreen\"\n\t\t\t\t></feFlood>\n\n\t\t\t\t<feImage\n\t\t\t\t\txlink:href=\"/effects/ntsc-static.png\"\n\t\t\t\t\tresult =\"DisplacementSource\"\n\t\t\t\t\twidth  = \"128\"\n\t\t\t\t\theight = \"128\"\n\t\t\t\t></feImage>\n\n\t\t\t\t<feTile\n\t\t\t\t\tin=\"DisplacementSource\"\n\t\t\t\t\tresult=\"DisplacementTile\"\n\t\t\t\t></feTile>\n\n\t\t\t\t<feComposite\n\t\t\t\t\tin  = \"DisplacementTile\"\n\t\t\t\t\tin2 = \"DisplacementGreen\"\n\t\t\t\t\tresult =\"DisplacementField\"\n\t\t\t\t\toperator =\"over\"\n\t\t\t\t></feComposite>\n\n\t\t\t\t<feOffset\n\t\t\t\t\tin  = \"DisplacementField\"\n\t\t\t\t\tout = \"DisplacementOffset\"\n\t\t\t\t\tdx  = \"0\"\n\t\t\t\t\tdy  = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"dy\"\n\t\t\t\t\t\tvalues = \"-128;0\"\n\t\t\t\t\t\tdur=\"2000ms\"\n\t\t\t\t\t\trepeatCount=\"8\"\n\t\t\t\t\t></animate>\n\n\t\t\t\t</feOffset>\n\n\t\t\t\t<feDisplacementMap\n\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\tin2=\"DisplacementOffset\"\n\t\t\t\t\tresult=\"Displaced\"\n\t\t\t\t\txChannelSelector=\"R\"\n\t\t\t\t\tyChannelSelector=\"G\"\n\t\t\t\t\tscale = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"scale\"\n\t\t\t\t\t\tvalues = \"512;192;0\"\n\t\t\t\t\t\tdur=\"2000ms\"\n\t\t\t\t\t\trepeatCount=\"1\"\n\t\t\t\t\t></animate>\n\n\t\t\t\t</feDisplacementMap>\n\n\t\t\t</filter>\n\n\t\t</defs>\n\t\t</svg>\n\n\t\t<div class = \"viewport-zoom\">\n\n\t\t\t[[backdrop]]\n\n\t\t\t<div class = \"backdrops\" cv-ref =\"backdrops\"></div>\n\n\t\t\t<div class = \"blurAngle\" cv-ref = \"blurAngle\">\n\t\t\t<div class = \"blurDistance\" cv-ref = \"blurDistance\">\n\t\t\t<div class = \"blurAngleCancel\" cv-ref = \"blurAngleCancel\">\n\t\t\t\t<div\n\t\t\t\t\tcv-ref  = \"background\"\n\t\t\t\t\tclass   = \"viewport-bg-layers\"\n\t\t\t\t\tcv-each = \"layers:layer\"\n\t\t\t\t>[[layer]]</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"filters filters-background\" cv-ref = \"bgFilters\"></div>\n\n\t\t\t<div cv-ref = \"content\" class = \"viewport-content\">\n\t\t\t\t<div cv-ref = \"actors\" class = \"viewport-actors\"></div>\n\t\t\t\t<div cv-ref = \"particles\" class = \"viewport-particles\"></div>\n \t\t\t</div>\n\n\t\t\t<div class = \"blurAngle\" cv-ref = \"blurAngleFg\">\n\t\t\t<div class = \"blurDistance\" cv-ref = \"blurDistanceFg\">\n \t\t\t<div class = \"blurAngleCancel\" cv-ref = \"blurAngleCancelFg\">\n\t\t\t\t<div\n\t\t\t\t\tcv-ref  = \"foreground\"\n\t\t\t\t\tclass   = \"viewport-bg-layers\"\n\t\t\t\t\tcv-each = \"fgLayers:layer\"\n\t\t\t\t>[[layer]]</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n \t\t</div>\n\n \t\t<div class = \"viewport-overlay\">\n\t\t\t<div class = \"hud hud-top-right hud-table\"  cv-if = \"debugOsd\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colspan = \"2\">[[char]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelGround]]</td>\n\t\t\t\t\t\t<td>[[ground]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelCamera]]</td>\n\t\t\t\t\t\t<td>[[cameraMode]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelMode]]</td>\n\t\t\t\t\t\t<td>[[mode]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelX]]</td>\n\t\t\t\t\t\t<td>[[xPos]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelY]]</td>\n\t\t\t\t\t\t<td>[[yPos]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelGSpeed]]</td>\n\t\t\t\t\t\t<td>[[gSpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelXSpeed]]</td>\n\t\t\t\t\t\t<td>[[xSpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelYSpeed]]</td>\n\t\t\t\t\t\t<td>[[ySpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelAirAngle]]</td>\n\t\t\t\t\t\t<td>[[airAngle]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelAngle]]</td>\n\t\t\t\t\t\t<td>[[angle]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelFrame]]</td>\n\t\t\t\t\t\t<td>[[frame]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-top-right\" cv-if = \"showHud\">\n\n\t\t\t\t<div class = \"char-hud\">\n\t\t\t\t\t[[char]]\n\t\t\t\t\t<div class = \"char-icon [[charName|hyphenate]]\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class = \"emerald-hud\" cv-each = \"emeralds:emerald:e\">\n\t\t\t\t\t<img src = \"/Sonic/emerald-[[emerald]]-mini.png\" />\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-bottom-right\">\n\n\t\t\t\t<div cv-if = \"showHud\" class =\"sheild-hud [[currentSheild]] [[hasElectric]] [[hasFire]] [[hasWater]]\">\n\t\t\t\t\t<div class = \"sheild-icon sheild-electric\"></div>\n\t\t\t\t\t<div class = \"sheild-icon spacer\"></div>\n\t\t\t\t\t<div class = \"sheild-icon sheild-fire\"></div>\n\t\t\t\t\t<div class = \"sheild-icon sheild-water\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class = \"contents\" cv-if = \"showFps\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>[[labelFps]]</td>\n\t\t\t\t\t\t\t<td>[[fpsSprite]]</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</span>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-bottom-left\" cv-if = \"showHud\">\n\t\t\t\t[[nowPlaying]]\n\t\t\t\t[[trackName]]\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-top-left hud-table\"  cv-if = \"showHud\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[scoreLabel]]</td><td>[[score]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[timerLabel]]</td><td>[[timer]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[ringLabel]]</td><td>[[rings]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t<div class = \"demo-hud\" cv-if = \"demoIndicator\">[[demoIndicator]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered\" cv-if = \"actClear\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr><td colspan=\"2\">\n\t\t\t\t\t\t<div class = \"centered\">[[actClearLabel]]</div>\n\t\t\t\t\t</td></tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[timeBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[timeBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[ringBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[ringBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<!-- <tr>\n\t\t\t\t\t\t<td>[[perfectBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[perfectBonus]]</td>\n\t\t\t\t\t</tr> -->\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[speedBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[speedBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[totalBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[totalBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered\" cv-if = \"centerMessage\">\n\t\t\t\t[[centerMessage]]\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered-raised\" cv-if = \"dialog\">\n\t\t\t\t<div class = \"dialog-frame [[dialogClasses]]\">\n\t\t\t\t\t<div class = \"dialog-icon\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div cv-each = \"dialogLines:line\" class = \"dialog-text\">\n\t\t\t\t\t\t<span style = \"--text-offset:[[line.offset]]\">[[line]]</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"screen-effects\" cv-each = \"screenEffects:effect\">\n\t\t\t\t[[effect]]\n\t\t\t</div>\n\n\t\t\t<section class = \"pause-menu full\" cv-if = \"paused\">[[pauseMenu]]</section>\n\n\t\t\t[[titlecard]]\n\n\t\t\t<div class = \"topLine\">\n\t\t\t\t<div class = \"status-message\">[[topLine]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"focus-me\">\n\t\t\t\t<div class = \"status-message\">[[focusMe]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"status-message\">[[status]]</div>\n\n\t\t\t<section class = \"contents\" cv-if = \"networked\">[[chatBox]]</section>\n\n\t\t\t<!-- <div class = \"filters filters-foreground\" cv-ref = \"fgFilters\"></div> -->\n\n\t\t\t<div class = \"console [[showConsole]]\" cv-ref = \"subspace\" tab-index = \"0\">[[subspace]]</div>\n\n\t\t\t<div class = \"shade\" data-fade = \"[[fade]]\"></div>\n\n\t\t</div>\n\n\t\t<div class = \"quick-controls\" cv-if = \"shortcuts\">\n\n\t\t\t[[muteSwitch]]\n\n\t\t\t<div class = \"button\" cv-on = \"click:fullscreen()\">\n\t\t\t\t<image src = \"/ui/fullscreen.svg\" />\n\t\t\t</div>\n\n\t\t</div>\n\n\n\t</div>\n\n</div>\n"
});

;require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');

"use strict";

/* jshint ignore:start */
(function () {
  var WebSocket = window.WebSocket || window.MozWebSocket;
  var br = window.brunch = window.brunch || {};
  var ar = br['auto-reload'] = br['auto-reload'] || {};
  if (!WebSocket || ar.disabled) return;
  if (window._ar) return;
  window._ar = true;

  var cacheBuster = function cacheBuster(url) {
    var date = Math.round(Date.now() / 1000).toString();
    url = url.replace(/(\&|\\?)cacheBuster=\d*/, '');
    return url + (url.indexOf('?') >= 0 ? '&' : '?') + 'cacheBuster=' + date;
  };

  var browser = navigator.userAgent.toLowerCase();
  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;
  var reloaders = {
    page: function page() {
      window.location.reload(true);
    },
    stylesheet: function stylesheet() {
      [].slice.call(document.querySelectorAll('link[rel=stylesheet]')).filter(function (link) {
        var val = link.getAttribute('data-autoreload');
        return link.href && val != 'false';
      }).forEach(function (link) {
        link.href = cacheBuster(link.href);
      }); // Hack to force page repaint after 25ms.

      if (forceRepaint) setTimeout(function () {
        document.body.offsetHeight;
      }, 25);
    },
    javascript: function javascript() {
      var scripts = [].slice.call(document.querySelectorAll('script'));
      var textScripts = scripts.map(function (script) {
        return script.text;
      }).filter(function (text) {
        return text.length > 0;
      });
      var srcScripts = scripts.filter(function (script) {
        return script.src;
      });
      var loaded = 0;
      var all = srcScripts.length;

      var onLoad = function onLoad() {
        loaded = loaded + 1;

        if (loaded === all) {
          textScripts.forEach(function (script) {
            eval(script);
          });
        }
      };

      srcScripts.forEach(function (script) {
        var src = script.src;
        script.remove();
        var newScript = document.createElement('script');
        newScript.src = cacheBuster(src);
        newScript.async = true;
        newScript.onload = onLoad;
        document.head.appendChild(newScript);
      });
    }
  };
  var port = ar.port || 9485;
  var host = br.server || window.location.hostname || 'localhost';

  var connect = function connect() {
    var connection = new WebSocket('ws://' + host + ':' + port);

    connection.onmessage = function (event) {
      if (ar.disabled) return;
      var message = event.data;
      var reloader = reloaders[message] || reloaders.page;
      reloader();
    };

    connection.onerror = function () {
      if (connection.readyState) connection.close();
    };

    connection.onclose = function () {
      window.setTimeout(connect, 1000);
    };
  };

  connect();
})();
/* jshint ignore:end */
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,