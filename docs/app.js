(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};

require.register("curvature/animate/Ease.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ease = void 0;

var _Mixin = require("../base/Mixin");

var _PromiseMixin = require("../mixin/PromiseMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Ease = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Ease, _Mixin$with);

  var _super = _createSuper(Ease);

  function Ease(interval) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Ease);

    _this = _super.call(this);
    _this.interval = interval;
    _this.terminal = false;
    _this.initial = false;
    _this.timeout = false;
    _this["final"] = false;
    _this.canceled = false;
    _this.done = false;
    _this.calculate = _this.calculate || 'calculate' in options ? options.calculate : false;
    _this.bounded = 'bounded' in options ? options.bounded : true;
    _this.repeat = 'repeat' in options ? options.repeat : 1;
    _this.reverse = 'reverse' in options ? options.reverse : false;
    return _this;
  }

  _createClass(Ease, [{
    key: "start",
    value: function start() {
      var _this2 = this;

      this.done = false;
      requestAnimationFrame(function () {
        _this2.initial = Date.now();
        _this2.terminal = _this2.initial + _this2.interval;

        if (_this2.repeat >= 0) {
          _this2.terminal = _this2.initial + _this2.interval * _this2.repeat;
          _this2.timeout = setTimeout(function () {
            if (_this2.done) {
              return _this2.reverse ? 0 : 1;
            }

            _this2.done = true;

            _this2[_PromiseMixin.PromiseMixin.Accept](_this2.reverse ? 0 : 1);
          }, _this2.interval * _this2.repeat);
        }
      });
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this.done) {
        return this["final"];
      }

      clearTimeout(this.timeout);
      this["final"] = this.current();
      this.canceled = this.done = true;

      this[_PromiseMixin.PromiseMixin.Reject](this["final"]);

      return this["final"];
    }
  }, {
    key: "fraction",
    value: function fraction() {
      if (this.done) {
        return this.reverse ? 0 : 1;
      }

      if (this.initial === false) {
        return this.reverse ? 1 : 0;
      }

      var elapsed = Date.now() - this.initial;

      if (elapsed / this.interval >= this.repeat) {
        return this.reverse ? 0 : 1;
      }

      var fraction = elapsed % this.interval / this.interval;
      return this.reverse ? 1 - fraction : fraction;
    }
  }, {
    key: "current",
    value: function current() {
      var t = this.fraction();

      if (this.calculate) {
        return this.calculate(t);
      }

      return t;
    }
  }]);

  return Ease;
}(_Mixin.Mixin["with"](_PromiseMixin.PromiseMixin));

exports.Ease = Ease;
  })();
});

require.register("curvature/animate/ease/CubicInOut.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CubicInOut = void 0;

var _Ease2 = require("../Ease");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CubicInOut = /*#__PURE__*/function (_Ease) {
  _inherits(CubicInOut, _Ease);

  var _super = _createSuper(CubicInOut);

  function CubicInOut() {
    var _this;

    _classCallCheck(this, CubicInOut);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "calculate", function (t) {
      return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    });

    return _this;
  }

  return CubicInOut;
}(_Ease2.Ease);

exports.CubicInOut = CubicInOut;
  })();
});

require.register("curvature/animate/ease/QuintInOut.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuintInOut = void 0;

var _Ease2 = require("../Ease");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var QuintInOut = /*#__PURE__*/function (_Ease) {
  _inherits(QuintInOut, _Ease);

  var _super = _createSuper(QuintInOut);

  function QuintInOut() {
    var _this;

    _classCallCheck(this, QuintInOut);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "calculate", function (t) {
      return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    });

    return _this;
  }

  return QuintInOut;
}(_Ease2.Ease);

exports.QuintInOut = QuintInOut;
  })();
});

require.register("curvature/base/Bag.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bag = void 0;

var _Bindable = require("./Bindable");

var _Mixin = require("./Mixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var toId = function toId(_int) {
  return Number(_int);
};

var fromId = function fromId(id) {
  return parseInt(id);
};

var Mapped = Symbol('Mapped');
var Has = Symbol('Has');
var Add = Symbol('Add');
var Remove = Symbol('Remove');
var Delete = Symbol('Delete');

var Bag = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Bag, _Mixin$with);

  var _super = _createSuper(Bag);

  function Bag() {
    var _this;

    var changeCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, Bag);

    _this = _super.call(this);
    _this.changeCallback = changeCallback;
    _this.content = new Map();
    _this.current = 0;
    _this.length = 0;
    _this.list = _Bindable.Bindable.makeBindable([]);
    _this.meta = Symbol('meta');
    _this.type = undefined;
    return _this;
  }

  _createClass(Bag, [{
    key: "has",
    value: function has(item) {
      if (this[Mapped]) {
        return this[Mapped].has(item);
      }

      return this[Has](item);
    }
  }, {
    key: Has,
    value: function value(item) {
      return this.content.has(item);
    }
  }, {
    key: "add",
    value: function add(item) {
      if (this[Mapped]) {
        return this[Mapped].add(item);
      }

      return this[Add](item);
    }
  }, {
    key: Add,
    value: function value(item) {
      if (item === undefined || !(item instanceof Object)) {
        throw new Error('Only objects may be added to Bags.');
      }

      if (this.type && !(item instanceof this.type)) {
        console.error(this.type, item);
        throw new Error("Only objects of type ".concat(this.type, " may be added to this Bag."));
      }

      if (this.content.has(item)) {
        return;
      }

      var adding = new CustomEvent('adding', {
        detail: {
          item: item
        }
      });

      if (!this.dispatchEvent(adding)) {
        return;
      }

      var id = toId(this.current++);
      this.content.set(item, id);
      this.list[id] = item;

      if (this.changeCallback) {
        this.changeCallback(item, this.meta, Bag.ITEM_ADDED, id);
      }

      var add = new CustomEvent('added', {
        detail: {
          item: item,
          id: id
        }
      });
      this.dispatchEvent(add);
      this.length = this.size;
      return id;
    }
  }, {
    key: "remove",
    value: function remove(item) {
      if (this[Mapped]) {
        return this[Mapped].remove(item);
      }

      return this[Remove](item);
    }
  }, {
    key: Remove,
    value: function value(item) {
      if (item === undefined || !(item instanceof Object)) {
        throw new Error('Only objects may be removed from Bags.');
      }

      if (this.type && !(item instanceof this.type)) {
        console.error(this.type, item);
        throw new Error("Only objects of type ".concat(this.type, " may be removed from this Bag."));
      }

      if (!this.content.has(item)) {
        if (this.changeCallback) {
          this.changeCallback(item, this.meta, 0, undefined);
        }

        return false;
      }

      var removing = new CustomEvent('removing', {
        detail: {
          item: item
        }
      });

      if (!this.dispatchEvent(removing)) {
        return;
      }

      var id = this.content.get(item);
      delete this.list[id];
      this.content["delete"](item);

      if (this.changeCallback) {
        this.changeCallback(item, this.meta, Bag.ITEM_REMOVED, id);
      }

      var remove = new CustomEvent('removed', {
        detail: {
          item: item,
          id: id
        }
      });
      this.dispatchEvent(remove);
      this.length = this.size;
      return item;
    }
  }, {
    key: "delete",
    value: function _delete(item) {
      if (this[Mapped]) {
        return this[Mapped]["delete"](item);
      }

      this[Delete](item);
    }
  }, {
    key: Delete,
    value: function value(item) {
      this.remove(item);
    }
  }, {
    key: "map",
    value: function map() {
      var mapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {
        return x;
      };
      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
        return x;
      };
      var mappedItems = new WeakMap();
      var mappedBag = new Bag();
      mappedBag[Mapped] = this;
      this.addEventListener('added', function (event) {
        var item = event.detail.item;

        if (!filter(item)) {
          return;
        }

        if (mappedItems.has(item)) {
          return;
        }

        var mapped = mapper(item);
        mappedItems.set(item, mapped);
        mappedBag[Add](mapped);
      });
      this.addEventListener('removed', function (event) {
        var item = event.detail.item;

        if (!mappedItems.has(item)) {
          return;
        }

        var mapped = mappedItems.get(item);
        mappedItems["delete"](item);
        mappedBag[Remove](mapped);
      });
      return mappedBag;
    }
  }, {
    key: "size",
    get: function get() {
      return this.content.size;
    }
  }, {
    key: "items",
    value: function items() {
      return Array.from(this.content.entries()).map(function (entry) {
        return entry[0];
      });
    }
  }]);

  return Bag;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Bag = Bag;
Object.defineProperty(Bag, 'ITEM_ADDED', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: 1
});
Object.defineProperty(Bag, 'ITEM_REMOVED', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: -1
});
  })();
});

require.register("curvature/base/Bindable.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bindable = void 0;

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Ref = Symbol('ref');
var Original = Symbol('original');
var Deck = Symbol('deck');
var Binding = Symbol('binding');
var SubBinding = Symbol('subBinding');
var BindingAll = Symbol('bindingAll');
var IsBindable = Symbol('isBindable');
var Wrapping = Symbol('wrapping');
var Names = Symbol('Names');
var Executing = Symbol('executing');
var Stack = Symbol('stack');
var ObjSymbol = Symbol('object');
var Wrapped = Symbol('wrapped');
var Unwrapped = Symbol('unwrapped');
var GetProto = Symbol('getProto');
var OnGet = Symbol('onGet');
var OnAllGet = Symbol('onAllGet');
var BindChain = Symbol('bindChain');
var Descriptors = Symbol('Descriptors');
var Before = Symbol('Before');
var After = Symbol('After');
var NoGetters = Symbol('NoGetters');
var TypedArray = Object.getPrototypeOf(Int8Array);
var SetIterator = Set.prototype[Symbol.iterator];
var MapIterator = Map.prototype[Symbol.iterator];
var win = globalThis;
var excludedClasses = [win.Node, win.File, win.Map, win.Set, win.WeakMap, win.WeakSet, win.ArrayBuffer, win.ResizeObserver, win.MutationObserver, win.PerformanceObserver, win.IntersectionObserver, win.IDBCursor, win.IDBCursorWithValue, win.IDBDatabase, win.IDBFactory, win.IDBIndex, win.IDBKeyRange, win.IDBObjectStore, win.IDBOpenDBRequest, win.IDBRequest, win.IDBTransaction, win.IDBVersionChangeEvent, win.Event, win.CustomEvent, win.FileSystemFileHandle].filter(function (x) {
  return typeof x === 'function';
});

var Bindable = /*#__PURE__*/function () {
  function Bindable() {
    _classCallCheck(this, Bindable);
  }

  _createClass(Bindable, null, [{
    key: "isBindable",
    value: function isBindable(object) {
      if (!object || !object[IsBindable]) {
        return false;
      }

      return object[IsBindable] === Bindable;
    }
  }, {
    key: "onDeck",
    value: function onDeck(object, key) {
      return object[Deck][key] || false;
    }
  }, {
    key: "ref",
    value: function ref(object) {
      return object[Ref] || object || false;
    }
  }, {
    key: "makeBindable",
    value: function makeBindable(object) {
      return this.make(object);
    }
  }, {
    key: "shuck",
    value: function shuck(original, seen) {
      seen = seen || new Map();
      var clone = {};

      if (original instanceof TypedArray || original instanceof ArrayBuffer) {
        var _clone = original.slice(0);

        seen.set(original, _clone);
        return _clone;
      }

      var properties = Object.keys(original);

      for (var i in properties) {
        var ii = properties[i];

        if (ii.substring(0, 3) === '___') {
          continue;
        }

        var alreadyCloned = seen.get(original[ii]);

        if (alreadyCloned) {
          clone[ii] = alreadyCloned;
          continue;
        }

        if (original[ii] === original) {
          seen.set(original[ii], clone);
          clone[ii] = clone;
          continue;
        }

        if (original[ii] && _typeof(original[ii]) === 'object') {
          var originalProp = original[ii];

          if (Bindable.isBindable(original[ii])) {
            originalProp = original[ii][Original];
          }

          clone[ii] = this.shuck(originalProp, seen);
        } else {
          clone[ii] = original[ii];
        }

        seen.set(original[ii], clone[ii]);
      }

      if (Bindable.isBindable(original)) {
        delete clone.bindTo;
        delete clone.isBound;
      }

      return clone;
    }
  }, {
    key: "make",
    value: function make(object) {
      var _this = this;

      if (!object || !['function', 'object'].includes(_typeof(object))) {
        return object;
      }

      if (object[Ref]) {
        return object[Ref];
      }

      if (object[IsBindable]) {
        return object;
      }

      if (Object.isSealed(object) || Object.isFrozen(object) || !Object.isExtensible(object) || excludedClasses.filter(function (x) {
        return object instanceof x;
      }).length) {
        return object;
      }

      Object.defineProperty(object, IsBindable, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Bindable
      });
      Object.defineProperty(object, Ref, {
        configurable: true,
        enumerable: false,
        writable: true,
        value: false
      });
      Object.defineProperty(object, Original, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: object
      });
      Object.defineProperty(object, Deck, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, Binding, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, SubBinding, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Map()
      });
      Object.defineProperty(object, BindingAll, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, Executing, {
        enumerable: false,
        writable: true
      });
      Object.defineProperty(object, Wrapping, {
        enumerable: false,
        writable: true
      });
      Object.defineProperty(object, Stack, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, Before, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, After, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: []
      });
      Object.defineProperty(object, Wrapped, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Object.preventExtensions(new Map())
      });
      Object.defineProperty(object, Unwrapped, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: {}
      });
      Object.defineProperty(object, Descriptors, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Object.preventExtensions(new Map())
      });

      var bindTo = function bindTo(property) {
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var bindToAll = false;

        if (Array.isArray(property)) {
          var debinders = property.forEach(function (p) {
            return bindTo(p, callback, options);
          });
          return function () {
            return debinders.forEach(function (d) {
              return d();
            });
          };
        }

        if (property instanceof Function) {
          options = callback || {};
          callback = property;
          bindToAll = true;
        }

        if (options.delay >= 0) {
          callback = _this.wrapDelayCallback(callback, options.delay);
        }

        if (options.throttle >= 0) {
          callback = _this.wrapThrottleCallback(callback, options.throttle);
        }

        if (options.wait >= 0) {
          callback = _this.wrapWaitCallback(callback, options.wait);
        }

        if (options.frame) {
          callback = _this.wrapFrameCallback(callback, options.frame);
        }

        if (options.idle) {
          callback = _this.wrapIdleCallback(callback);
        }

        if (bindToAll) {
          var bindIndex = object[BindingAll].length;
          object[BindingAll].push(callback);

          if (!('now' in options) || options.now) {
            for (var i in object) {
              callback(object[i], i, object, false);
            }
          }

          return function () {
            delete object[BindingAll][bindIndex];
          };
        }

        if (!object[Binding][property]) {
          object[Binding][property] = new Set();
        } // let bindIndex = object[Binding][property].length;


        if (options.children) {
          var original = callback;

          callback = function callback() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var v = args[0];
            var subDebind = object[SubBinding].get(original);

            if (subDebind) {
              object[SubBinding]["delete"](original);
              subDebind();
            }

            if (_typeof(v) !== 'object') {
              original.apply(void 0, args);
              return;
            }

            var vv = Bindable.make(v);

            if (Bindable.isBindable(vv)) {
              object[SubBinding].set(original, vv.bindTo(function () {
                for (var _len2 = arguments.length, subArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  subArgs[_key2] = arguments[_key2];
                }

                return original.apply(void 0, args.concat(subArgs));
              }, Object.assign({}, options, {
                children: false
              })));
            }

            original.apply(void 0, args);
          };
        }

        object[Binding][property].add(callback);

        if (!('now' in options) || options.now) {
          callback(object[property], property, object, false);
        }

        var debinder = function debinder() {
          var subDebind = object[SubBinding].get(callback);

          if (subDebind) {
            object[SubBinding]["delete"](callback);
            subDebind();
          }

          if (!object[Binding][property]) {
            return;
          }

          if (!object[Binding][property].has(callback)) {
            return;
          }

          object[Binding][property]["delete"](callback);
        };

        if (options.removeWith && options.removeWith instanceof View) {
          options.removeWith.onRemove(function () {
            return debinder;
          });
        }

        return debinder;
      };

      Object.defineProperty(object, 'bindTo', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: bindTo
      });

      var ___before = function ___before(callback) {
        var beforeIndex = object[Before].length;
        object[Before].push(callback);
        var cleaned = false;
        return function () {
          if (cleaned) {
            return;
          }

          cleaned = true;
          delete object[Before][beforeIndex];
        };
      };

      var ___after = function ___after(callback) {
        var afterIndex = object[After].length;
        object[After].push(callback);
        var cleaned = false;
        return function () {
          if (cleaned) {
            return;
          }

          cleaned = true;
          delete object[After][afterIndex];
        };
      };

      Object.defineProperty(object, BindChain, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: function value(path, callback) {
          var parts = path.split('.');
          var node = parts.shift();
          var subParts = parts.slice(0);
          var debind = [];
          debind.push(object.bindTo(node, function (v, k, t, d) {
            var rest = subParts.join('.');

            if (subParts.length === 0) {
              callback(v, k, t, d);
              return;
            }

            if (v === undefined) {
              v = t[k] = _this.make({});
            }

            debind = debind.concat(v[BindChain](rest, callback));
          }));
          return function () {
            return debind.forEach(function (x) {
              return x();
            });
          };
        }
      });
      Object.defineProperty(object, '___before', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: ___before
      });
      Object.defineProperty(object, '___after', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: ___after
      });

      var isBound = function isBound() {
        for (var i in object[BindingAll]) {
          if (object[BindingAll][i]) {
            return true;
          }
        }

        for (var _i in object[Binding]) {
          for (var j in object[Binding][_i]) {
            if (object[Binding][_i][j]) {
              return true;
            }
          }
        }

        return false;
      };

      Object.defineProperty(object, 'isBound', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: isBound
      });

      var _loop = function _loop(i) {
        if (object[i] && object[i] instanceof Object && !object[i] instanceof Promise) {
          if (!excludedClasses.filter(function (excludeClass) {
            return object[i] instanceof excludeClass;
          }).length && Object.isExtensible(object[i]) && !Object.isSealed(object[i])) {
            object[i] = Bindable.make(object[i]);
          }
        }
      };

      for (var i in object) {
        _loop(i);
      }

      var set = function set(target, key, value) {
        if (wrapped.has(key)) {
          wrapped["delete"](key);
        }

        if (key === Original) {
          return true;
        }

        var onDeck = object[Deck];

        if (onDeck[key] !== undefined && onDeck[key] === value) {
          return true;
        }

        if (key.slice && key.slice(-3) === '___') {
          return true;
        }

        if (target[key] === value || typeof value === 'number' && isNaN(onDeck[key]) && isNaN(value)) {
          return true;
        }

        if (value && value instanceof Object) {
          if (!excludedClasses.filter(function (x) {
            return object instanceof x;
          }).length && Object.isExtensible(object) && !Object.isSealed(object)) {
            if (!object[NoGetters]) {}

            value = Bindable.make(value);
          }
        }

        onDeck[key] = value;

        for (var _i2 in object[BindingAll]) {
          if (!object[BindingAll][_i2]) {
            continue;
          }

          object[BindingAll][_i2](value, key, target, false);
        }

        var stop = false;

        if (key in object[Binding]) {
          var _iterator = _createForOfIteratorHelper(object[Binding][key]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var callback = _step.value;

              if (callback(value, key, target, false, target[key]) === false) {
                stop = true;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        delete onDeck[key];

        if (!stop) {
          var descriptor = Object.getOwnPropertyDescriptor(target, key);
          var excluded = target instanceof File && key == 'lastModifiedDate';

          if (!excluded && (!descriptor || descriptor.writable) && target[key] === value) {
            target[key] = value;
          }
        }

        var result = Reflect.set(target, key, value);

        if (Array.isArray(target) && object[Binding]['length']) {
          for (var _i3 in object[Binding]['length']) {
            var _callback = object[Binding]['length'][_i3];

            _callback(target.length, 'length', target, false, target.length);
          }
        }

        return result;
      };

      var deleteProperty = function deleteProperty(target, key) {
        var onDeck = object[Deck];

        if (onDeck[key] !== undefined) {
          return true;
        }

        if (!(key in target)) {
          return true;
        }

        if (descriptors.has(key)) {
          var descriptor = descriptors.get(key);

          if (descriptor && !descriptor.configurable) {
            return false;
          }

          descriptors["delete"](key);
        }

        onDeck[key] = null;

        if (wrapped.has(key)) {
          wrapped["delete"](key);
        }

        for (var _i4 in object[BindingAll]) {
          object[BindingAll][_i4](undefined, key, target, true, target[key]);
        }

        if (key in object[Binding]) {
          var _iterator2 = _createForOfIteratorHelper(object[Binding][key]),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var binding = _step2.value;
              binding(undefined, key, target, true, target[key]);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }

        delete onDeck[key];
        delete target[key];
        return true;
      };

      var construct = function construct(target, args) {
        var key = 'constructor';

        for (var _i5 in target[Before]) {
          target[Before][_i5](target, key, object[Stack], undefined, args);
        }

        var instance = Bindable.make(_construct(target[Original], _toConsumableArray(args)));

        for (var _i6 in target[After]) {
          target[After][_i6](target, key, object[Stack], instance, args);
        }

        return instance;
      };

      var descriptors = object[Descriptors];
      var wrapped = object[Wrapped];
      var stack = object[Stack];

      var get = function get(target, key) {
        if (wrapped.has(key)) {
          return wrapped.get(key);
        }

        if (key === Ref || key === Original || key === 'apply' || key === 'isBound' || key === 'bindTo' || key === '__proto__' || key === 'constructor') {
          return object[key];
        }

        var descriptor;

        if (descriptors.has(key)) {
          descriptor = descriptors.get(key);
        } else {
          descriptor = Object.getOwnPropertyDescriptor(object, key);
          descriptors.set(key, descriptor);
        }

        if (descriptor && !descriptor.configurable && !descriptor.writable) {
          return object[key];
        }

        if (OnAllGet in object) {
          return object[OnAllGet](key);
        }

        if (OnGet in object && !(key in object)) {
          return object[OnGet](key);
        }

        if (descriptor && !descriptor.configurable && !descriptor.writable) {
          wrapped.set(key, object[key]);
          return object[key];
        }

        if (typeof object[key] === 'function') {
          if (Names in object[key]) {
            return object[key];
          }

          Object.defineProperty(object[Unwrapped], key, {
            configurable: false,
            enumerable: false,
            writable: true,
            value: object[key]
          });
          var prototype = Object.getPrototypeOf(object);
          var isMethod = prototype[key] === object[key];
          var objRef = typeof Promise === 'function' && object instanceof Promise || typeof Map === 'function' && object instanceof Map || typeof Set === 'function' && object instanceof Set || typeof MapIterator === 'function' && object.prototype === MapIterator || typeof SetIterator === 'function' && object.prototype === SetIterator || typeof SetIterator === 'function' && object.prototype === SetIterator || typeof WeakMap === 'function' && object instanceof WeakMap || typeof WeakSet === 'function' && object instanceof WeakSet || typeof Date === 'function' && object instanceof Date || typeof TypedArray === 'function' && object instanceof TypedArray || typeof ArrayBuffer === 'function' && object instanceof ArrayBuffer || typeof EventTarget === 'function' && object instanceof EventTarget || typeof ResizeObserver === 'function' && object instanceof ResizeObserver || typeof MutationObserver === 'function' && object instanceof MutationObserver || typeof PerformanceObserver === 'function' && object instanceof PerformanceObserver || typeof IntersectionObserver === 'function' && object instanceof IntersectionObserver || typeof object[Symbol.iterator] === 'function' && key === 'next' ? object : object[Ref];

          var wrappedMethod = function wrappedMethod() {
            object[Executing] = key;
            stack.unshift(key);

            for (var _len3 = arguments.length, providedArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              providedArgs[_key3] = arguments[_key3];
            }

            var _iterator3 = _createForOfIteratorHelper(object[Before]),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var beforeCallback = _step3.value;
                beforeCallback(object, key, stack, object, providedArgs);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            var ret;

            if (new.target) {
              ret = _construct(object[Unwrapped][key], providedArgs);
            } else {
              var func = object[Unwrapped][key];

              if (isMethod) {
                ret = func.apply(objRef || object, providedArgs);
              } else {
                ret = func.apply(void 0, providedArgs);
              }
            }

            var _iterator4 = _createForOfIteratorHelper(object[After]),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var afterCallback = _step4.value;
                afterCallback(object, key, stack, object, providedArgs);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            object[Executing] = null;
            stack.shift();
            return ret;
          };

          wrappedMethod[Names] = wrappedMethod[Names] || new WeakMap();
          wrappedMethod[Names].set(object, key);

          wrappedMethod[OnAllGet] = function (key) {
            var selfName = wrappedMethod[Names].get(object);
            return object[selfName][key];
          };

          var result = Bindable.make(wrappedMethod);
          wrapped.set(key, result);
          return result;
        }

        return object[key];
      };

      var getPrototypeOf = function getPrototypeOf(target) {
        if (GetProto in object) {
          return object[GetProto];
        }

        return Reflect.getPrototypeOf(target);
      };

      var handler = {
        get: get,
        set: set,
        construct: construct,
        getPrototypeOf: getPrototypeOf,
        deleteProperty: deleteProperty
      };

      if (object[NoGetters]) {
        delete handler.get;
      }

      Object.defineProperty(object, Ref, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: new Proxy(object, handler)
      });
      return object[Ref];
    }
  }, {
    key: "clearBindings",
    value: function clearBindings(object) {
      var clearObj = function clearObj(o) {
        return Object.keys(o).map(function (k) {
          return delete o[k];
        });
      };

      var maps = function maps(func) {
        return function () {
          for (var _len4 = arguments.length, os = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            os[_key4] = arguments[_key4];
          }

          return os.map(func);
        };
      };

      var clearObjs = maps(clearObj);
      clearObjs(object[Wrapped], object[Binding], object[BindingAll], object[After], object[Before]);
    }
  }, {
    key: "resolve",
    value: function resolve(object, path) {
      var owner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var node;
      var pathParts = path.split('.');
      var top = pathParts[0];

      while (pathParts.length) {
        if (owner && pathParts.length === 1) {
          var obj = this.make(object);
          return [obj, pathParts.shift(), top];
        }

        node = pathParts.shift();

        if (!node in object || !object[node] || !(object[node] instanceof Object)) {
          object[node] = {};
        }

        object = this.make(object[node]);
      }

      return [this.make(object), node, top];
    }
  }, {
    key: "wrapDelayCallback",
    value: function wrapDelayCallback(callback, delay) {
      return function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return setTimeout(function () {
          return callback.apply(void 0, args);
        }, delay);
      };
    }
  }, {
    key: "wrapThrottleCallback",
    value: function wrapThrottleCallback(callback, throttle) {
      var _this2 = this;

      this.throttles.set(callback, false);
      return function () {
        if (_this2.throttles.get(callback, true)) {
          return;
        }

        callback.apply(void 0, arguments);

        _this2.throttles.set(callback, true);

        setTimeout(function () {
          _this2.throttles.set(callback, false);
        }, throttle);
      };
    }
  }, {
    key: "wrapWaitCallback",
    value: function wrapWaitCallback(callback, wait) {
      var _this3 = this;

      return function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        var waiter;

        if (waiter = _this3.waiters.get(callback)) {
          _this3.waiters["delete"](callback);

          clearTimeout(waiter);
        }

        waiter = setTimeout(function () {
          return callback.apply(void 0, args);
        }, wait);

        _this3.waiters.set(callback, waiter);
      };
    }
  }, {
    key: "wrapFrameCallback",
    value: function wrapFrameCallback(callback, frames) {
      return function () {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        requestAnimationFrame(function () {
          return callback.apply(void 0, args);
        });
      };
    }
  }, {
    key: "wrapIdleCallback",
    value: function wrapIdleCallback(callback) {
      return function () {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        // Compatibility for Safari 08/2020
        var req = window.requestIdleCallback || requestAnimationFrame;
        req(function () {
          return callback.apply(void 0, args);
        });
      };
    }
  }]);

  return Bindable;
}();

exports.Bindable = Bindable;

_defineProperty(Bindable, "waiters", new WeakMap());

_defineProperty(Bindable, "throttles", new WeakMap());

Object.defineProperty(Bindable, 'OnGet', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: OnGet
});
Object.defineProperty(Bindable, 'NoGetters', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: NoGetters
});
Object.defineProperty(Bindable, 'GetProto', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: GetProto
});
Object.defineProperty(Bindable, 'OnAllGet', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: OnAllGet
});
  })();
});

require.register("curvature/base/Cache.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cache = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Cache = /*#__PURE__*/function () {
  function Cache() {
    _classCallCheck(this, Cache);
  }

  _createClass(Cache, null, [{
    key: "store",
    value: function store(key, value, expiry) {
      var bucket = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'standard';
      var expiration = 0;

      if (expiry) {
        expiration = expiry * 1000 + new Date().getTime();
      }

      if (!this.buckets) {
        this.buckets = new Map();
      }

      if (!this.buckets.has(bucket)) {
        this.buckets.set(bucket, new Map());
      }

      var eventEnd = new CustomEvent('cvCacheStore', {
        cancelable: true,
        detail: {
          key: key,
          value: value,
          expiry: expiry,
          bucket: bucket
        }
      });

      if (document.dispatchEvent(eventEnd)) {
        this.buckets.get(bucket).set(key, {
          value: value,
          expiration: expiration
        });
      }
    }
  }, {
    key: "load",
    value: function load(key) {
      var defaultvalue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var bucket = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'standard';
      var eventEnd = new CustomEvent('cvCacheLoad', {
        cancelable: true,
        detail: {
          key: key,
          defaultvalue: defaultvalue,
          bucket: bucket
        }
      });

      if (!document.dispatchEvent(eventEnd)) {
        return defaultvalue;
      }

      if (this.buckets && this.buckets.has(bucket) && this.buckets.get(bucket).has(key)) {
        var entry = this.buckets.get(bucket).get(key); // console.log(this.bucket[bucket][key].expiration, (new Date).getTime());

        if (entry.expiration === 0 || entry.expiration > new Date().getTime()) {
          return this.buckets.get(bucket).get(key).value;
        }
      }

      return defaultvalue;
    }
  }]);

  return Cache;
}();

exports.Cache = Cache;
  })();
});

require.register("curvature/base/Config.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AppConfig = {};
var _require = require;

try {
  AppConfig = _require('/Config').Config || {};
} catch (error) {
  globalThis.devMode === true && console.error(error);
}

var Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }

  _createClass(Config, null, [{
    key: "get",
    value: function get(name) {
      return this.configs[name];
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this.configs[name] = value;
      return this;
    }
  }, {
    key: "dump",
    value: function dump() {
      return this.configs;
    }
  }, {
    key: "init",
    value: function init() {
      for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {
        configs[_key] = arguments[_key];
      }

      for (var i in configs) {
        var config = configs[i];

        if (typeof config === 'string') {
          config = JSON.parse(config);
        }

        for (var name in config) {
          var value = config[name];
          return this.configs[name] = value;
        }
      }

      return this;
    }
  }]);

  return Config;
}();

exports.Config = Config;
Object.defineProperty(Config, 'configs', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: AppConfig
});
  })();
});

require.register("curvature/base/Dom.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dom = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var traversals = 0;

var Dom = /*#__PURE__*/function () {
  function Dom() {
    _classCallCheck(this, Dom);
  }

  _createClass(Dom, null, [{
    key: "mapTags",
    value: function mapTags(doc, selector, callback, startNode, endNode) {
      var result = [];
      var started = true;

      if (startNode) {
        started = false;
      }

      var ended = false;
      var treeWalker = document.createTreeWalker(doc, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
        acceptNode: function acceptNode(node, walker) {
          if (!started) {
            if (node === startNode) {
              started = true;
            } else {
              return NodeFilter.FILTER_SKIP;
            }
          }

          if (endNode && node === endNode) {
            ended = true;
          }

          if (ended) {
            return NodeFilter.FILTER_SKIP;
          }

          if (selector) {
            if (node instanceof Element) {
              if (node.matches(selector)) {
                return NodeFilter.FILTER_ACCEPT;
              }
            }

            return NodeFilter.FILTER_SKIP;
          }

          return NodeFilter.FILTER_ACCEPT;
        }
      }, false);
      var traversal = traversals++;

      while (treeWalker.nextNode()) {
        result.push(callback(treeWalker.currentNode, treeWalker));
      }

      return result;
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(doc, event) {
      doc.dispatchEvent(event);
      Dom.mapTags(doc, false, function (node) {
        node.dispatchEvent(event);
      });
    }
  }]);

  return Dom;
}();

exports.Dom = Dom;
  })();
});

require.register("curvature/base/Mixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mixin = void 0;

var _Bindable = require("./Bindable");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Constructor = Symbol('constructor');
var MixinList = Symbol('mixinList');

var Mixin = /*#__PURE__*/function () {
  function Mixin() {
    _classCallCheck(this, Mixin);
  }

  _createClass(Mixin, null, [{
    key: "from",
    value: function from(baseClass) {
      for (var _len = arguments.length, mixins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        mixins[_key - 1] = arguments[_key];
      }

      var newClass = /*#__PURE__*/function (_baseClass) {
        _inherits(newClass, _baseClass);

        var _super = _createSuper(newClass);

        function newClass() {
          var _this;

          _classCallCheck(this, newClass);

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var instance = baseClass.constructor ? _this = _super.call.apply(_super, [this].concat(args)) : null;

          var _iterator = _createForOfIteratorHelper(mixins),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mixin = _step.value;

              if (mixin[Mixin.Constructor]) {
                mixin[Mixin.Constructor].apply(_assertThisInitialized(_this));
              }

              switch (_typeof(mixin)) {
                case 'function':
                  Mixin.mixClass(mixin, newClass);
                  break;

                case 'object':
                  Mixin.mixObject(mixin, _assertThisInitialized(_this));
                  break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return _possibleConstructorReturn(_this, instance);
        }

        return newClass;
      }(baseClass);

      return newClass;
    }
  }, {
    key: "make",
    value: function make() {
      for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        classes[_key3] = arguments[_key3];
      }

      var base = classes.pop();
      return Mixin.to.apply(Mixin, [base].concat(classes));
    }
  }, {
    key: "to",
    value: function to(base) {
      var descriptors = {};

      for (var _len4 = arguments.length, mixins = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        mixins[_key4 - 1] = arguments[_key4];
      }

      mixins.map(function (mixin) {
        switch (_typeof(mixin)) {
          case 'object':
            Object.assign(descriptors, Object.getOwnPropertyDescriptors(mixin));
            break;

          case 'function':
            Object.assign(descriptors, Object.getOwnPropertyDescriptors(mixin.prototype));
            break;
        }

        delete descriptors.constructor;
        Object.defineProperties(base.prototype, descriptors);
      });
    }
  }, {
    key: "with",
    value: function _with() {
      for (var _len5 = arguments.length, mixins = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        mixins[_key5] = arguments[_key5];
      }

      return this.from.apply(this, [/*#__PURE__*/function () {
        function _class() {
          _classCallCheck(this, _class);
        }

        return _class;
      }()].concat(mixins));
    }
  }, {
    key: "mixObject",
    value: function mixObject(mixin, instance) {
      var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(mixin)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var func = _step2.value;

          if (typeof mixin[func] === 'function') {
            instance[func] = mixin[func].bind(instance);
            continue;
          }

          instance[func] = mixin[func];
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(mixin)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _func = _step3.value;

          if (typeof mixin[_func] === 'function') {
            instance[_func] = mixin[_func].bind(instance);
            continue;
          }

          instance[_func] = mixin[_func];
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "mixClass",
    value: function mixClass(cls, newClass) {
      var _iterator4 = _createForOfIteratorHelper(Object.getOwnPropertyNames(cls.prototype)),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var func = _step4.value;

          if (['name', 'prototype', 'length'].includes(func)) {
            continue;
          }

          var descriptor = Object.getOwnPropertyDescriptor(newClass, func);

          if (descriptor && !descriptor.writable) {
            continue;
          }

          if (typeof cls[func] !== 'function') {
            newClass.prototype[func] = cls.prototype[func];
            continue;
          }

          newClass.prototype[func] = cls.prototype[func].bind(newClass.prototype);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(cls.prototype)),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _func2 = _step5.value;

          if (typeof cls[_func2] !== 'function') {
            newClass.prototype[_func2] = cls.prototype[_func2];
            continue;
          }

          newClass.prototype[_func2] = cls.prototype[_func2].bind(newClass.prototype);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(Object.getOwnPropertyNames(cls)),
          _step6;

      try {
        var _loop = function _loop() {
          var func = _step6.value;

          if (['name', 'prototype', 'length'].includes(func)) {
            return "continue";
          }

          var descriptor = Object.getOwnPropertyDescriptor(newClass, func);

          if (descriptor && !descriptor.writable) {
            return "continue";
          }

          if (typeof cls[func] !== 'function') {
            newClass[func] = cls[func];
            return "continue";
          }

          var prev = newClass[func] || false;
          var meth = cls[func].bind(newClass);

          newClass[func] = function () {
            prev && prev.apply(void 0, arguments);
            return meth.apply(void 0, arguments);
          };
        };

        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(cls)),
          _step7;

      try {
        var _loop2 = function _loop2() {
          var func = _step7.value;

          if (typeof cls[func] !== 'function') {
            newClass.prototype[func] = cls[func];
            return "continue";
          }

          var prev = newClass[func] || false;
          var meth = cls[func].bind(newClass);

          newClass[func] = function () {
            prev && prev.apply(void 0, arguments);
            return meth.apply(void 0, arguments);
          };
        };

        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _ret2 = _loop2();

          if (_ret2 === "continue") continue;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "mix",
    value: function mix(mixinTo) {
      var constructors = [];
      var allStatic = {};
      var allInstance = {};

      var mixable = _Bindable.Bindable.makeBindable(mixinTo);

      var _loop3 = function _loop3(base) {
        var instanceNames = Object.getOwnPropertyNames(base.prototype);
        var staticNames = Object.getOwnPropertyNames(base);
        var prefix = /^(before|after)__(.+)/;

        var _iterator8 = _createForOfIteratorHelper(staticNames),
            _step8;

        try {
          var _loop5 = function _loop5() {
            var methodName = _step8.value;
            var match = methodName.match(prefix);

            if (match) {
              switch (match[1]) {
                case 'before':
                  mixable.___before(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;

                case 'after':
                  mixable.___after(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;
              }

              return "continue";
            }

            if (allStatic[methodName]) {
              return "continue";
            }

            if (typeof base[methodName] !== 'function') {
              return "continue";
            }

            allStatic[methodName] = base[methodName];
          };

          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _ret3 = _loop5();

            if (_ret3 === "continue") continue;
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        var _iterator9 = _createForOfIteratorHelper(instanceNames),
            _step9;

        try {
          var _loop6 = function _loop6() {
            var methodName = _step9.value;
            var match = methodName.match(prefix);

            if (match) {
              switch (match[1]) {
                case 'before':
                  mixable.___before(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base.prototype[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;

                case 'after':
                  mixable.___after(function (t, e, s, o, a) {
                    if (e !== match[2]) {
                      return;
                    }

                    var method = base.prototype[methodName].bind(o);
                    return method.apply(void 0, _toConsumableArray(a));
                  });

                  break;
              }

              return "continue";
            }

            if (allInstance[methodName]) {
              return "continue";
            }

            if (typeof base.prototype[methodName] !== 'function') {
              return "continue";
            }

            allInstance[methodName] = base.prototype[methodName];
          };

          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var _ret4 = _loop6();

            if (_ret4 === "continue") continue;
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      };

      for (var base = this; base && base.prototype; base = Object.getPrototypeOf(base)) {
        _loop3(base);
      }

      for (var methodName in allStatic) {
        mixinTo[methodName] = allStatic[methodName].bind(mixinTo);
      }

      var _loop4 = function _loop4(_methodName) {
        mixinTo.prototype[_methodName] = function () {
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }

          return allInstance[_methodName].apply(this, args);
        };
      };

      for (var _methodName in allInstance) {
        _loop4(_methodName);
      }

      return mixable;
    }
  }]);

  return Mixin;
}();

exports.Mixin = Mixin;
Mixin.Constructor = Constructor;
  })();
});

require.register("curvature/base/Router.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = void 0;

var _View = require("./View");

var _Cache = require("./Cache");

var _Config = require("./Config");

var _Routes = require("./Routes");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NotFoundError = Symbol('NotFound');
var InternalError = Symbol('Internal');

var Router = /*#__PURE__*/function () {
  function Router() {
    _classCallCheck(this, Router);
  }

  _createClass(Router, null, [{
    key: "wait",
    value: function wait(view) {
      var _this = this;

      var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DOMContentLoaded';
      var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      node.addEventListener(event, function () {
        _this.listen(view);
      });
    }
  }, {
    key: "listen",
    value: function listen(listener) {
      var _this2 = this;

      var routes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.listener = listener || this.listener;
      this.routes = routes || listener.routes;
      Object.assign(this.query, this.queryOver({}));

      var listen = function listen(event) {
        event.preventDefault();

        if (event.state && 'routedId' in event.state) {
          if (event.state.routedId <= _this2.routeCount) {
            _this2.history.splice(event.state.routedId);

            _this2.routeCount = event.state.routedId;
          } else if (event.state.routedId > _this2.routeCount) {
            _this2.history.push(event.state.prev);

            _this2.routeCount = event.state.routedId;
          }

          _this2.state = event.state;
        } else {
          if (_this2.prevPath !== null && _this2.prevPath !== location.pathname) {
            _this2.history.push(_this2.prevPath);
          }
        }

        if (location.origin !== 'null') {
          _this2.match(location.pathname, listener);
        } else {
          _this2.match(_this2.nextPath, listener);
        }

        for (var i in _this2.query) {
          delete _this2.query[i];
        }

        Object.assign(_this2.query, _this2.queryOver({}));
      };

      window.addEventListener('popstate', listen);
      window.addEventListener('cvUrlChanged', listen);
      var route = location.origin !== 'null' ? location.pathname + location.search : false;

      if (location.origin && location.hash) {
        route += location.hash;
      }

      var state = {
        routedId: this.routeCount,
        url: location.pathname,
        prev: this.prevPath
      };

      if (location.origin !== 'null') {
        history.replaceState(state, null, location.pathname);
      }

      this.go(route !== false ? route : '/');
    }
  }, {
    key: "go",
    value: function go(path) {
      var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var configTitle = _Config.Config.get('title');

      if (configTitle) {
        document.title = configTitle;
      }

      var state = {
        routedId: this.routeCount,
        prev: this.prevPath,
        url: location.pathname
      };

      if (silent === -1) {
        this.match(path, this.listener, true);
      } else if (location.origin === 'null') {
        this.nextPath = path;
      } else if (silent === 2 && location.pathname !== path) {
        history.replaceState(state, null, path);
      } else if (location.pathname !== path) {
        history.pushState(state, null, path);
      }

      if (!silent || silent < 0) {
        if (silent === false) {
          this.path = null;
        }

        if (!silent) {
          if (path.substring(0, 1) === '#') {
            window.dispatchEvent(new HashChangeEvent('hashchange'));
          } else {
            window.dispatchEvent(new CustomEvent('cvUrlChanged'));
          }
        }
      }

      for (var i in this.query) {
        delete this.query[i];
      }

      Object.assign(this.query, this.queryOver({}));
      this.prevPath = path;
    }
  }, {
    key: "match",
    value: function match(path, listener) {
      var _this3 = this;

      var forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (this.path === path && !forceRefresh && typeof document !== 'undefined') {
        return;
      }

      this.queryString = location.search;
      this.path = path;
      var prev = this.prevPath;
      var current = listener && listener.args ? listener.args.content : null;

      var routes = this.routes || listener && listener.routes || _Routes.Routes.dump();

      var query = new URLSearchParams(location.search);

      for (var i in this.query) {
        delete this.query[i];
      }

      Object.assign(this.query, this.queryOver({}));
      var args = {},
          selected = false,
          result = '';
      path = path.substr(1).split('/');

      for (var _i in this.query) {
        args[_i] = this.query[_i];
      }

      L1: for (var _i2 in routes) {
        var route = _i2.split('/');

        if (route.length < path.length && route[route.length - 1] !== '*') {
          continue;
        }

        L2: for (var j in route) {
          if (route[j].substr(0, 1) == '%') {
            var argName = null;
            var groups = /^%(\w+)\??/.exec(route[j]);

            if (groups && groups[1]) {
              argName = groups[1];
            }

            if (!argName) {
              throw new Error("".concat(route[j], " is not a valid argument segment in route \"").concat(_i2, "\""));
            }

            if (!path[j]) {
              if (route[j].substr(route[j].length - 1, 1) == '?') {
                args[argName] = '';
              } else {
                continue L1;
              }
            } else {
              args[argName] = path[j];
            }
          } else if (route[j] !== '*' && path[j] !== route[j]) {
            continue L1;
          }
        }

        selected = _i2;
        result = routes[_i2];

        if (route[route.length - 1] === '*') {
          args.pathparts = path.slice(route.length - 1);
        }

        break;
      }

      var eventStart = new CustomEvent('cvRouteStart', {
        cancelable: true,
        detail: {
          path: path,
          prev: prev,
          root: listener,
          selected: selected,
          routes: routes
        }
      });

      if (typeof document !== 'undefined') {
        if (!document.dispatchEvent(eventStart)) {
          return;
        }
      }

      if (!forceRefresh && listener && current && result instanceof Object && current instanceof result && !(result instanceof Promise) && current.update(args)) {
        listener.args.content = current;
        return true;
      }

      if (!(selected in routes)) {
        routes[selected] = routes[NotFoundError];
      }

      var processRoute = function processRoute(selected) {
        var result = false;

        if (typeof routes[selected] === 'function') {
          if (routes[selected].prototype instanceof _View.View) {
            result = new routes[selected](args);
          } else {
            result = routes[selected](args);
          }
        } else {
          result = routes[selected];
        }

        return result;
      };

      try {
        result = processRoute(selected);

        if (result === false) {
          result = processRoute(NotFoundError);
        }

        if (!(result instanceof Promise)) {
          result = Promise.resolve(result); // return this.update(
          // 	listener
          // 	, path
          // 	, result
          // 	, routes
          // 	, selected
          // 	, args
          // 	, forceRefresh
          // );
        }

        if (typeof document === 'undefined') {
          return result;
        }

        return result.then(function (realResult) {
          _this3.update(listener, path, realResult, routes, selected, args, forceRefresh);
        })["catch"](function (error) {
          if (typeof document !== 'undefined') {
            document.dispatchEvent(new CustomEvent('cvRouteError', {
              detail: {
                error: error,
                path: path,
                prev: prev,
                view: listener,
                routes: routes,
                selected: selected
              }
            }));
          }

          _this3.update(listener, path, window['devMode'] ? String(error) : 'Error: 500', routes, selected, args, forceRefresh);

          throw error;
        });
      } catch (error) {
        console.error(error);

        if (typeof document !== 'undefined') {
          document.dispatchEvent(new CustomEvent('cvRouteError', {
            detail: {
              error: error,
              path: path,
              prev: prev,
              view: listener,
              routes: routes,
              selected: selected
            }
          }));
        }

        this.update(listener, path, window['devMode'] ? String(error) : 'Error: 500', routes, selected, args, forceRefresh); // throw error;
      }
    }
  }, {
    key: "update",
    value: function update(listener, path, result, routes, selected, args, forceRefresh) {
      if (!listener) {
        return;
      }

      var prev = this.prevPath;
      var event = new CustomEvent('cvRoute', {
        cancelable: true,
        detail: {
          result: result,
          path: path,
          prev: prev,
          view: listener,
          routes: routes,
          selected: selected
        }
      });

      if (result !== false) {
        if (listener.args.content instanceof _View.View) {
          listener.args.content.pause(true);
          listener.args.content.remove();
        }

        if (document.dispatchEvent(event)) {
          listener.args.content = result;
        }

        if (result instanceof _View.View) {
          result.pause(false);
          result.update(args, forceRefresh);
        }
      }

      var eventEnd = new CustomEvent('cvRouteEnd', {
        cancelable: true,
        detail: {
          result: result,
          path: path,
          prev: prev,
          view: listener,
          routes: routes,
          selected: selected
        }
      });
      document.dispatchEvent(eventEnd);
    }
  }, {
    key: "queryOver",
    value: function queryOver() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var params = new URLSearchParams(location.search);
      var finalArgs = {};
      var query = {};

      var _iterator = _createForOfIteratorHelper(params),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var pair = _step.value;
          query[pair[0]] = pair[1];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      finalArgs = Object.assign(finalArgs, query, args);
      delete finalArgs['api'];
      return finalArgs; // for(let i in query)
      // {
      // 	finalArgs[i] = query[i];
      // }
      // for(let i in args)
      // {
      // 	finalArgs[i] = args[i];
      // }
    }
  }, {
    key: "queryToString",
    value: function queryToString() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parts = [],
          finalArgs = args;

      if (!fresh) {
        finalArgs = this.queryOver(args);
      }

      for (var i in finalArgs) {
        if (finalArgs[i] === '') {
          continue;
        }

        parts.push(i + '=' + encodeURIComponent(finalArgs[i]));
      }

      return parts.join('&');
    }
  }, {
    key: "setQuery",
    value: function setQuery(name, value, silent) {
      var args = this.queryOver();
      args[name] = value;

      if (value === undefined) {
        delete args[name];
      }

      var queryString = this.queryToString(args, true);
      this.go(location.pathname + (queryString ? '?' + queryString : '?'), silent);
    }
  }]);

  return Router;
}();

exports.Router = Router;
Object.defineProperty(Router, 'query', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: {}
});
Object.defineProperty(Router, 'history', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: []
});
Object.defineProperty(Router, 'routeCount', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: 0
});
Object.defineProperty(Router, 'prevPath', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: null
});
Object.defineProperty(Router, 'queryString', {
  configurable: false,
  enumerable: false,
  writable: true,
  value: null
});
Object.defineProperty(Router, 'InternalError', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: InternalError
});
Object.defineProperty(Router, 'NotFoundError', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: NotFoundError
});
  })();
});

require.register("curvature/base/Routes.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Routes = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AppRoutes = {};
var _require = require;

try {
  Object.assign(AppRoutes, _require('Routes').Routes || {});
} catch (error) {
  globalThis.devMode === true && console.warn(error);
}

var Routes = /*#__PURE__*/function () {
  function Routes() {
    _classCallCheck(this, Routes);
  }

  _createClass(Routes, null, [{
    key: "get",
    value: function get(name) {
      return this.routes[name];
    }
  }, {
    key: "dump",
    value: function dump() {
      return this.routes;
    }
  }]);

  return Routes;
}();

exports.Routes = Routes;
Object.defineProperty(Routes, 'routes', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: AppRoutes
});
  })();
});

require.register("curvature/base/RuleSet.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleSet = void 0;

var _Dom = require("./Dom");

var _Tag = require("./Tag");

var _View = require("./View");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RuleSet = /*#__PURE__*/function () {
  function RuleSet() {
    _classCallCheck(this, RuleSet);
  }

  _createClass(RuleSet, [{
    key: "add",
    value: function add(selector, callback) {
      this.rules = this.rules || {};
      this.rules[selector] = this.rules[selector] || [];
      this.rules[selector].push(callback);
      return this;
    }
  }, {
    key: "apply",
    value: function apply() {
      var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
      var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      RuleSet.apply(doc, view);

      for (var selector in this.rules) {
        for (var i in this.rules[selector]) {
          var callback = this.rules[selector][i];
          var wrapped = RuleSet.wrap(doc, callback, view);
          var nodes = doc.querySelectorAll(selector);

          var _iterator = _createForOfIteratorHelper(nodes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var node = _step.value;
              wrapped(node);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }
  }, {
    key: "purge",
    value: function purge() {
      if (!this.rules) {
        return;
      }

      for (var _i = 0, _Object$entries = Object.entries(this.rules); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            k = _Object$entries$_i[0],
            v = _Object$entries$_i[1];

        if (!this.rules[k]) {
          continue;
        }

        for (var kk in this.rules[k]) {
          delete this.rules[k][kk];
        }
      }
    }
  }], [{
    key: "add",
    value: function add(selector, callback) {
      this.globalRules = this.globalRules || {};
      this.globalRules[selector] = this.globalRules[selector] || [];
      this.globalRules[selector].push(callback);
      return this;
    }
  }, {
    key: "apply",
    value: function apply() {
      var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
      var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      for (var selector in this.globalRules) {
        for (var i in this.globalRules[selector]) {
          var callback = this.globalRules[selector][i];
          var wrapped = this.wrap(doc, callback, view);
          var nodes = doc.querySelectorAll(selector);

          var _iterator2 = _createForOfIteratorHelper(nodes),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var node = _step2.value;
              wrapped(node);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }
  }, {
    key: "wait",
    value: function wait() {
      var _this = this;

      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'DOMContentLoaded';
      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

      var listener = function (event, node) {
        return function () {
          node.removeEventListener(event, listener);
          return _this.apply();
        };
      }(event, node);

      node.addEventListener(event, listener);
    }
  }, {
    key: "wrap",
    value: function wrap(doc, originalCallback) {
      var view = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var callback = originalCallback;

      if (originalCallback instanceof _View.View || originalCallback && originalCallback.prototype && originalCallback.prototype instanceof _View.View) {
        callback = function callback() {
          return originalCallback;
        };
      }

      return function (element) {
        if (typeof element.___cvApplied___ === 'undefined') {
          Object.defineProperty(element, '___cvApplied___', {
            enumerable: false,
            writable: false,
            value: new WeakSet()
          });
        }

        if (element.___cvApplied___.has(originalCallback)) {
          return;
        }

        var direct, parentView;

        if (view) {
          direct = parentView = view;

          if (view.viewList) {
            parentView = view.viewList.parent;
          }
        }

        var tag = new _Tag.Tag(element, parentView, null, undefined, direct);
        var parent = tag.element.parentNode;
        var sibling = tag.element.nextSibling;
        var result = callback(tag);

        if (result !== false) {
          element.___cvApplied___.add(originalCallback);
        }

        if (result instanceof HTMLElement) {
          result = new _Tag.Tag(result);
        }

        if (result instanceof _Tag.Tag) {
          if (!result.element.contains(tag.element)) {
            while (tag.element.firstChild) {
              result.element.appendChild(tag.element.firstChild);
            }

            tag.remove();
          }

          if (sibling) {
            parent.insertBefore(result.element, sibling);
          } else {
            parent.appendChild(result.element);
          }
        }

        if (result && result.prototype && result.prototype instanceof _View.View) {
          result = new result({}, view);
        }

        if (result instanceof _View.View) {
          if (view) {
            view.cleanup.push(function (r) {
              return function () {
                r.remove();
              };
            }(result));
            view.cleanup.push(view.args.bindTo(function (v, k, t) {
              t[k] = v;
              result.args[k] = v;
            }));
            view.cleanup.push(result.args.bindTo(function (v, k, t, d) {
              t[k] = v;
              view.args[k] = v;
            }));
          }

          tag.clear();
          result.render(tag.element);
        }
      };
    }
  }]);

  return RuleSet;
}();

exports.RuleSet = RuleSet;
  })();
});

require.register("curvature/base/SetMap.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetMap = void 0;

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SetMap = /*#__PURE__*/function () {
  function SetMap() {
    _classCallCheck(this, SetMap);

    _defineProperty(this, "_map", new Map());
  }

  _createClass(SetMap, [{
    key: "has",
    value: function has(key) {
      return this._map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._map.get(key);
    }
  }, {
    key: "getOne",
    value: function getOne(key) {
      var set = this.get(key);

      var _iterator = _createForOfIteratorHelper(set),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          return entry;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "add",
    value: function add(key, value) {
      var set = this._map.get(key);

      if (!set) {
        this._map.set(key, set = new Set());
      }

      return set.add(value);
    }
  }, {
    key: "remove",
    value: function remove(key, value) {
      var set = this._map.get(key);

      if (!set) {
        return;
      }

      var res = set["delete"](value);

      if (!set.size) {
        this._map["delete"](key);
      }

      return res;
    }
  }, {
    key: "values",
    value: function values() {
      return _construct(Set, _toConsumableArray(_toConsumableArray(this._map.values()).map(function (set) {
        return _toConsumableArray(set.values());
      })));
    }
  }]);

  return SetMap;
}();

exports.SetMap = SetMap;
  })();
});

require.register("curvature/base/Tag.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tag = void 0;

var _Bindable = require("./Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CurrentStyle = Symbol('CurrentStyle');

var styler = function styler(styles) {
  if (!this.node) {
    return;
  }

  for (var property in styles) {
    var stringedProperty = String(styles[property]);

    if (this[CurrentStyle].has(property) && this[CurrentStyle].get(property) === styles[property]) {
      continue;
    }

    if (property[0] === '-') {
      this.node.style.setProperty(property, stringedProperty);
    } else {
      this.node.style[property] = stringedProperty;
    }

    if (styles[property] !== undefined) {
      this[CurrentStyle].set(property, styles[property]);
    } else {
      this[CurrentStyle]["delete"](property);
    }
  }
};

var getter = function getter(name) {
  var _this = this;

  if (typeof this[name] === 'function') {
    return this[name];
  }

  if (this.node && typeof this.node[name] === 'function') {
    return function () {
      var _this$node;

      return (_this$node = _this.node)[name].apply(_this$node, arguments);
    };
  }

  if (name === 'style') {
    return this.proxy.style;
  }

  if (this.node && name in this.node) {
    return this.node[name];
  }

  return this[name];
};

var Tag = /*#__PURE__*/function () {
  function Tag(element, parent, ref, index, direct) {
    var _this2 = this;

    _classCallCheck(this, Tag);

    if (typeof element === 'string') {
      var subdoc = document.createRange().createContextualFragment(element);
      element = subdoc.firstChild;
    }

    this.element = _Bindable.Bindable.makeBindable(element);
    this.node = this.element;
    this.parent = parent;
    this.direct = direct;
    this.ref = ref;
    this.index = index;
    this.cleanup = [];
    this[_Bindable.Bindable.OnAllGet] = getter.bind(this);
    this[CurrentStyle] = new Map();

    var boundStyler = _Bindable.Bindable.make(styler.bind(this));

    Object.defineProperty(this, 'style', {
      value: boundStyler
    });
    this.proxy = _Bindable.Bindable.make(this);
    this.proxy.style.bindTo(function (v, k, t, d) {
      if (_this2[CurrentStyle].has(k) && _this2[CurrentStyle].get(k) === v) {
        return;
      }

      _this2.node.style[k] = v;

      if (!d && v !== undefined) {
        _this2[CurrentStyle].set(k, v);
      } else {
        _this2[CurrentStyle]["delete"](k);
      }
    });
    this.proxy.bindTo(function (v, k) {
      if (k === 'index') {
        return;
      }

      if (k in element && element[k] !== v) {
        element[k] = v;
      }

      return false;
    });
    return this.proxy;
  }

  _createClass(Tag, [{
    key: "attr",
    value: function attr(attributes) {
      for (var attribute in attributes) {
        if (attributes[attribute] === undefined) {
          this.node.removeAttribute(attribute);
        } else if (attributes[attribute] === null) {
          this.node.setAttribute(attribute, '');
        } else {
          this.node.setAttribute(attribute, attributes[attribute]);
        }
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.node) {
        this.node.remove();
      }

      _Bindable.Bindable.clearBindings(this);

      var cleanup;

      while (cleanup = this.cleanup.shift()) {
        cleanup();
      }

      this.clear();

      if (!this.node) {
        return;
      }

      var detachEvent = new Event('cvDomDetached');
      this.node.dispatchEvent(detachEvent);
      this.node = this.element = this.ref = this.parent = undefined;
    }
  }, {
    key: "clear",
    value: function clear() {
      if (!this.node) {
        return;
      }

      var detachEvent = new Event('cvDomDetached');

      while (this.node.firstChild) {
        this.node.firstChild.dispatchEvent(detachEvent);
        this.node.removeChild(this.node.firstChild);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      var paused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    }
  }, {
    key: "listen",
    value: function listen(eventName, callback, options) {
      var node = this.node;
      node.addEventListener(eventName, callback, options);

      var remove = function remove() {
        node.removeEventListener(eventName, callback, options);
      };

      var remover = function remover() {
        remove();

        remove = function remove() {
          return console.warn('Already removed!');
        };
      };

      this.parent.onRemove(function () {
        return remover();
      });
      return remover;
    }
  }]);

  return Tag;
}();

exports.Tag = Tag;
  })();
});

require.register("curvature/base/View.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _Bindable = require("./Bindable");

var _ViewList = require("./ViewList");

var _Router = require("./Router");

var _Dom = require("./Dom");

var _Tag = require("./Tag");

var _Bag = require("./Bag");

var _RuleSet = require("./RuleSet");

var _Mixin = require("./Mixin");

var _PromiseMixin = require("../mixin/PromiseMixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var dontParse = Symbol('dontParse');
var expandBind = Symbol('expandBind');
var uuid = Symbol('uuid');
var moveIndex = 0;

var View = /*#__PURE__*/function (_Mixin$with) {
  _inherits(View, _Mixin$with);

  var _super = _createSuper(View);

  function View() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var mainView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, View);

    _this = _super.call(this, args, mainView);
    Object.defineProperty(_assertThisInitialized(_this), 'args', {
      value: _Bindable.Bindable.make(args)
    });
    Object.defineProperty(_assertThisInitialized(_this), uuid, {
      value: _this.constructor.uuid()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodesAttached', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodesDetached', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), '_onRemove', {
      value: new _Bag.Bag(function (i, s, a) {})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'cleanup', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'parent', {
      value: mainView
    });
    Object.defineProperty(_assertThisInitialized(_this), 'views', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'viewLists', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'withViews', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'tags', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(_assertThisInitialized(_this), 'nodes', {
      value: _Bindable.Bindable.make([])
    });
    Object.defineProperty(_assertThisInitialized(_this), 'timeouts', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'intervals', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'frames', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'ruleSet', {
      value: new _RuleSet.RuleSet()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'preRuleSet', {
      value: new _RuleSet.RuleSet()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'subBindings', {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), 'templates', {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), 'eventCleanup', {
      value: []
    });
    Object.defineProperty(_assertThisInitialized(_this), 'unpauseCallbacks', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'interpolateRegex', {
      value: /(\[\[((?:\$+)?[\w\.\|-]+)\]\])/g
    });
    Object.defineProperty(_assertThisInitialized(_this), 'rendered', {
      value: new Promise(function (accept, reject) {
        return Object.defineProperty(_assertThisInitialized(_this), 'renderComplete', {
          value: accept
        });
      })
    });
    _this.controller = _assertThisInitialized(_this);
    _this.loaded = Promise.resolve(_assertThisInitialized(_this));
    _this.template = "";
    _this.firstNode = null;
    _this.lastNode = null;
    _this.viewList = null;
    _this.mainView = null;
    _this.preserve = false;
    _this.removed = false; // return Bindable.make(this);

    return _this;
  }

  _createClass(View, [{
    key: "_id",
    get: function get() {
      return this[uuid];
    }
  }, {
    key: "onFrame",
    value: function onFrame(callback) {
      var _this2 = this;

      var stopped = false;

      var cancel = function cancel() {
        stopped = true;
      };

      var c = function c(timestamp) {
        if (_this2.removed || stopped) {
          return;
        }

        if (!_this2.paused) {
          callback(Date.now());
        }

        requestAnimationFrame(c);
      };

      requestAnimationFrame(function () {
        return c(Date.now());
      });
      this.frames.push(cancel);
      return cancel;
    }
  }, {
    key: "onNextFrame",
    value: function onNextFrame(callback) {
      return requestAnimationFrame(function () {
        return callback(Date.now());
      });
    }
  }, {
    key: "onIdle",
    value: function onIdle(callback) {
      return requestIdleCallback(function () {
        return callback(Date.now());
      });
    }
  }, {
    key: "onTimeout",
    value: function onTimeout(time, callback) {
      var _this3 = this;

      var timeoutInfo = {
        timeout: null,
        callback: null,
        time: time,
        fired: false,
        created: new Date().getTime(),
        paused: false
      };

      var wrappedCallback = function wrappedCallback() {
        callback();
        timeoutInfo.fired = true;

        _this3.timeouts["delete"](timeoutInfo.timeout);
      };

      var timeout = setTimeout(wrappedCallback, time);
      timeoutInfo.callback = wrappedCallback;
      timeoutInfo.timeout = timeout;
      this.timeouts.set(timeoutInfo.timeout, timeoutInfo);
      return timeout;
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout(_x) {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function (timeout) {
      var _iterator = _createForOfIteratorHelper(this.timeouts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              callback = _step$value[0],
              timeoutInfo = _step$value[1];

          clearTimeout(timeoutInfo.timeout);
          this.timeouts["delete"](timeoutInfo.timeout);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    })
  }, {
    key: "onInterval",
    value: function onInterval(time, callback) {
      var timeout = setInterval(callback, time);
      this.intervals.push({
        timeout: timeout,
        callback: callback,
        time: time,
        paused: false
      });
      return timeout;
    }
  }, {
    key: "clearInterval",
    value: function (_clearInterval) {
      function clearInterval(_x2) {
        return _clearInterval.apply(this, arguments);
      }

      clearInterval.toString = function () {
        return _clearInterval.toString();
      };

      return clearInterval;
    }(function (timeout) {
      for (var i in this.intervals) {
        if (timeout === this.intervals[i].timeout) {
          clearInterval(this.intervals[i].timeout);
          delete this.intervals[i];
        }
      }
    })
  }, {
    key: "pause",
    value: function pause() {
      var paused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (paused === undefined) {
        this.paused = !this.paused;
      }

      this.paused = paused;

      if (this.paused) {
        var _iterator2 = _createForOfIteratorHelper(this.timeouts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                callback = _step2$value[0],
                timeout = _step2$value[1];

            if (timeout.fired) {
              this.timeouts["delete"](timeout.timeout);
              continue;
            }

            clearTimeout(timeout.timeout);
            timeout.paused = true;
            timeout.time = Math.max(0, timeout.time - (Date.now() - timeout.created));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        for (var i in this.intervals) {
          clearInterval(this.intervals[i].timeout);
        }
      } else {
        var _iterator3 = _createForOfIteratorHelper(this.timeouts),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                _callback = _step3$value[0],
                _timeout = _step3$value[1];

            if (!_timeout.paused) {
              continue;
            }

            if (_timeout.fired) {
              this.timeouts["delete"](_timeout.timeout);
              continue;
            }

            _timeout.timeout = setTimeout(_timeout.callback, _timeout.time);
            _timeout.paused = false;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        for (var _i2 in this.intervals) {
          if (!this.intervals[_i2].timeout.paused) {
            continue;
          }

          this.intervals[_i2].timeout.paused = false;
          this.intervals[_i2].timeout = setInterval(this.intervals[_i2].callback, this.intervals[_i2].time);
        }

        var _iterator4 = _createForOfIteratorHelper(this.unpauseCallbacks),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _step4$value = _slicedToArray(_step4.value, 2),
                _callback2 = _step4$value[1];

            _callback2();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        this.unpauseCallbacks.clear();
      }

      var _iterator5 = _createForOfIteratorHelper(this.viewLists),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              tag = _step5$value[0],
              viewList = _step5$value[1];

          viewList.pause(!!paused);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      for (var _i3 in this.tags) {
        if (Array.isArray(this.tags[_i3])) {
          for (var j in this.tags[_i3]) {
            this.tags[_i3][j].pause(!!paused);
          }

          continue;
        }

        this.tags[_i3].pause(!!paused);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$nodes,
          _this4 = this;

      var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var insertPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (parentNode instanceof View) {
        parentNode = parentNode.firstNode.parentNode;
      }

      if (insertPoint instanceof View) {
        insertPoint = insertPoint.firstNode;
      }

      if (this.firstNode) {
        return this.reRender(parentNode, insertPoint);
      }

      this.dispatchEvent(new CustomEvent('render'));
      var templateParsed = this.template instanceof DocumentFragment ? this.template.cloneNode(true) : View.templates.has(this.template);
      var subDoc = templateParsed ? this.template instanceof DocumentFragment ? templateParsed : View.templates.get(this.template).cloneNode(true) : document.createRange().createContextualFragment(this.template);

      if (!templateParsed && !(this.template instanceof DocumentFragment)) {
        View.templates.set(this.template, subDoc.cloneNode(true));
      }

      this.mainView || this.preRuleSet.apply(subDoc, this);
      this.mapTags(subDoc);
      this.mainView || this.ruleSet.apply(subDoc, this);

      if (window.devMode === true) {
        this.firstNode = document.createComment("Template ".concat(this._id, " Start"));
        this.lastNode = document.createComment("Template ".concat(this._id, " End"));
      } else {
        this.firstNode = document.createTextNode('');
        this.lastNode = document.createTextNode('');
      }

      (_this$nodes = this.nodes).push.apply(_this$nodes, [this.firstNode].concat(_toConsumableArray(Array.from(subDoc.childNodes)), [this.lastNode]));

      this.postRender(parentNode);
      this.dispatchEvent(new CustomEvent('rendered'));

      if (!this.dispatchAttach()) {
        return;
      }

      if (parentNode) {
        var rootNode = parentNode.getRootNode();

        if (insertPoint) {
          parentNode.insertBefore(this.firstNode, insertPoint);
          parentNode.insertBefore(this.lastNode, insertPoint);
        } else {
          parentNode.appendChild(this.firstNode);
          parentNode.appendChild(this.lastNode);
        }

        parentNode.insertBefore(subDoc, this.lastNode);
        moveIndex++;

        if (rootNode.isConnected) {
          this.attached(rootNode, parentNode);
          this.dispatchAttached(rootNode, parentNode);
        } else {
          var firstDomAttach = function firstDomAttach(event) {
            if (!event.target.isConnected) {
              return;
            }

            _this4.attached(rootNode, parentNode);

            _this4.dispatchAttached(rootNode, parentNode);

            parentNode.removeEventListener('cvDomAttached', firstDomAttach);
          };

          parentNode.addEventListener('cvDomAttached', firstDomAttach);
        }
      }

      this.renderComplete(this.nodes);
      return this.nodes;
    }
  }, {
    key: "dispatchAttach",
    value: function dispatchAttach() {
      return this.dispatchEvent(new CustomEvent('attach', {
        cancelable: true,
        target: this
      }));
    }
  }, {
    key: "dispatchAttached",
    value: function dispatchAttached(rootNode, parentNode) {
      var view = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      this.dispatchEvent(new CustomEvent('attached', {
        detail: {
          view: view || this,
          node: parentNode,
          root: rootNode,
          mainView: this
        }
      }));
      this.dispatchDomAttached(view);

      var _iterator6 = _createForOfIteratorHelper(this.nodesAttached.items()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var callback = _step6.value;
          callback(rootNode, parentNode);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "dispatchDomAttached",
    value: function dispatchDomAttached(view) {
      var _this5 = this;

      this.nodes.filter(function (n) {
        return n.nodeType !== Node.COMMENT_NODE;
      }).forEach(function (child) {
        if (!child.matches) {
          return;
        }

        _Dom.Dom.mapTags(child, false, function (tag, walker) {
          if (!tag.matches) {
            return;
          }

          tag.dispatchEvent(new CustomEvent('cvDomAttached', {
            target: tag,
            detail: {
              view: view || _this5,
              mainView: _this5
            }
          }));
        });

        child.dispatchEvent(new CustomEvent('cvDomAttached', {
          target: child,
          detail: {
            view: view || _this5,
            mainView: _this5
          }
        }));
      });
    }
  }, {
    key: "reRender",
    value: function reRender(parentNode, insertPoint) {
      var willReRender = this.dispatchEvent(new CustomEvent('reRender'), {
        cancelable: true,
        target: this
      });

      if (!willReRender) {
        return;
      }

      var subDoc = new DocumentFragment();

      if (this.firstNode.isConnected) {
        var detach = this.nodesDetached.items();

        for (var i in detach) {
          detach[i]();
        }
      }

      subDoc.append.apply(subDoc, _toConsumableArray(this.nodes));

      if (parentNode) {
        if (insertPoint) {
          parentNode.insertBefore(this.firstNode, insertPoint);
          parentNode.insertBefore(this.lastNode, insertPoint);
        } else {
          parentNode.appendChild(this.firstNode);
          parentNode.appendChild(this.lastNode);
        }

        parentNode.insertBefore(subDoc, this.lastNode);
        this.dispatchEvent(new CustomEvent('reRendered'), {
          cancelable: true,
          target: this
        });
        var rootNode = parentNode.getRootNode();

        if (rootNode.isConnected) {
          this.attached(rootNode, parentNode);
          this.dispatchAttached(rootNode, parentNode);
        }
      }

      return this.nodes;
    }
  }, {
    key: "mapTags",
    value: function mapTags(subDoc) {
      var _this6 = this;

      _Dom.Dom.mapTags(subDoc, false, function (tag, walker) {
        if (tag[dontParse]) {
          return;
        }

        if (tag.matches) {
          tag = _this6.mapInterpolatableTag(tag);
          tag = tag.matches('[cv-template]') && _this6.mapTemplateTag(tag) || tag;
          tag = tag.matches('[cv-slot]') && _this6.mapSlotTag(tag) || tag;
          tag = tag.matches('[cv-prerender]') && _this6.mapPrendererTag(tag) || tag;
          tag = tag.matches('[cv-link]') && _this6.mapLinkTag(tag) || tag;
          tag = tag.matches('[cv-attr]') && _this6.mapAttrTag(tag) || tag;
          tag = tag.matches('[cv-expand]') && _this6.mapExpandableTag(tag) || tag;
          tag = tag.matches('[cv-ref]') && _this6.mapRefTag(tag) || tag;
          tag = tag.matches('[cv-on]') && _this6.mapOnTag(tag) || tag;
          tag = tag.matches('[cv-each]') && _this6.mapEachTag(tag) || tag;
          tag = tag.matches('[cv-bind]') && _this6.mapBindTag(tag) || tag;
          tag = tag.matches('[cv-with]') && _this6.mapWithTag(tag) || tag;
          tag = tag.matches('[cv-if]') && _this6.mapIfTag(tag) || tag;
          tag = tag.matches('[cv-view]') && _this6.mapViewTag(tag) || tag;
        } else {
          tag = _this6.mapInterpolatableTag(tag);
        }

        if (tag !== walker.currentNode) {
          walker.currentNode = tag;
        }
      });
    }
  }, {
    key: "mapExpandableTag",
    value: function mapExpandableTag(tag) {
      /*/
      const tagCompiler = this.compileExpandableTag(tag);
      	const newTag = tagCompiler(this);
      	tag.replaceWith(newTag);
      	return newTag;
      /*/
      var existing = tag[expandBind];

      if (existing) {
        existing();
        tag[expandBind] = false;
      }

      var _Bindable$resolve = _Bindable.Bindable.resolve(this.args, tag.getAttribute('cv-expand'), true),
          _Bindable$resolve2 = _slicedToArray(_Bindable$resolve, 2),
          proxy = _Bindable$resolve2[0],
          expandProperty = _Bindable$resolve2[1];

      tag.removeAttribute('cv-expand');

      if (!proxy[expandProperty]) {
        proxy[expandProperty] = {};
      }

      proxy[expandProperty] = _Bindable.Bindable.make(proxy[expandProperty]);
      this.onRemove(tag[expandBind] = proxy[expandProperty].bindTo(function (v, k, t, d, p) {
        if (d || v === undefined) {
          tag.removeAttribute(k, v);
          return;
        }

        if (v === null) {
          tag.setAttribute(k, '');
          return;
        }

        tag.setAttribute(k, v);
      })); // let expandProperty = tag.getAttribute('cv-expand');
      // let expandArg = Bindable.makeBindable(
      // 	this.args[expandProperty] || {}
      // );
      // tag.removeAttribute('cv-expand');
      // for(let i in expandArg)
      // {
      // 	if(i === 'name' || i === 'type')
      // 	{
      // 		continue;
      // 	}
      // 	let debind = expandArg.bindTo(i, ((tag,i)=>(v)=>{
      // 		tag.setAttribute(i, v);
      // 	})(tag,i));
      // 	this.onRemove(()=>{
      // 		debind();
      // 		if(expandArg.isBound())
      // 		{
      // 			Bindable.clearBindings(expandArg);
      // 		}
      // 	});
      // }

      return tag; //*/
    }
  }, {
    key: "compileExpandableTag",
    value: function compileExpandableTag(sourceTag) {
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);
        var expandProperty = tag.getAttribute('cv-expand');

        var expandArg = _Bindable.Bindable.make(bindingView.args[expandProperty] || {});

        tag.removeAttribute('cv-expand');

        var _loop = function _loop(i) {
          if (i === 'name' || i === 'type') {
            return "continue";
          }

          var debind = expandArg.bindTo(i, function (tag, i) {
            return function (v) {
              tag.setAttribute(i, v);
            };
          }(tag, i));
          bindingView.onRemove(function () {
            debind();

            if (expandArg.isBound()) {
              _Bindable.Bindable.clearBindings(expandArg);
            }
          });
        };

        for (var i in expandArg) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return tag;
      };
    }
  }, {
    key: "mapAttrTag",
    value: function mapAttrTag(tag) {
      //*/
      var tagCompiler = this.compileAttrTag(tag);
      var newTag = tagCompiler(this);
      tag.replaceWith(newTag);
      return newTag;
      /*/
      	let attrProperty = tag.getAttribute('cv-attr');
      	tag.removeAttribute('cv-attr');
      	let pairs = attrProperty.split(',');
      let attrs = pairs.map((p) => p.split(':'));
      	for (let i in attrs)
      {
      	let proxy        = this.args;
      	let bindProperty = attrs[i][1];
      	let property     = bindProperty;
      		if(bindProperty.match(/\./))
      	{
      		[proxy, property] = Bindable.resolve(
      			this.args
      			, bindProperty
      			, true
      		);
      	}
      		let attrib = attrs[i][0];
      		this.onRemove(proxy.bindTo(
      		property
      		, (v)=>{
      			if(v == null)
      			{
      				tag.setAttribute(attrib, '');
      				return;
      			}
      			tag.setAttribute(attrib, v);
      		}
      	));
      }
      	return tag;
      	//*/
    }
  }, {
    key: "compileAttrTag",
    value: function compileAttrTag(sourceTag) {
      var attrProperty = sourceTag.getAttribute('cv-attr');
      var pairs = attrProperty.split(',');
      var attrs = pairs.map(function (p) {
        return p.split(':');
      });
      sourceTag.removeAttribute('cv-attr');
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);

        var _loop2 = function _loop2(i) {
          var bindProperty = attrs[i][1] || attrs[i][0];

          var _Bindable$resolve3 = _Bindable.Bindable.resolve(bindingView.args, bindProperty, true),
              _Bindable$resolve4 = _slicedToArray(_Bindable$resolve3, 2),
              proxy = _Bindable$resolve4[0],
              property = _Bindable$resolve4[1];

          var attrib = attrs[i][0];
          bindingView.onRemove(proxy.bindTo(property, function (v, k, t, d) {
            if (d || v === undefined) {
              tag.removeAttribute(attrib, v);
              return;
            }

            if (v === null) {
              tag.setAttribute(attrib, '');
              return;
            }

            tag.setAttribute(attrib, v);
          }));
        };

        for (var i in attrs) {
          _loop2(i);
        }

        return tag;
      };
    }
  }, {
    key: "mapInterpolatableTag",
    value: function mapInterpolatableTag(tag) {
      var _this7 = this;

      var regex = this.interpolateRegex;

      if (tag.nodeType === Node.TEXT_NODE) {
        var original = tag.nodeValue;

        if (!this.interpolatable(original)) {
          return tag;
        }

        var header = 0;
        var match;

        var _loop3 = function _loop3() {
          var bindProperty = match[2];
          var unsafeHtml = false;
          var unsafeView = false;
          var propertySplit = bindProperty.split('|');
          var transformer = false;

          if (propertySplit.length > 1) {
            transformer = _this7.stringTransformer(propertySplit.slice(1));
            bindProperty = propertySplit[0];
          }

          if (bindProperty.substr(0, 2) === '$$') {
            unsafeHtml = true;
            unsafeView = true;
            bindProperty = bindProperty.substr(2);
          }

          if (bindProperty.substr(0, 1) === '$') {
            unsafeHtml = true;
            bindProperty = bindProperty.substr(1);
          }

          if (bindProperty.substr(0, 3) === '000') {
            expand = true;
            bindProperty = bindProperty.substr(3);
            return "continue";
          }

          var staticPrefix = original.substring(header, match.index);
          header = match.index + match[1].length;
          var staticNode = document.createTextNode(staticPrefix);
          staticNode[dontParse] = true;
          tag.parentNode.insertBefore(staticNode, tag);
          var dynamicNode = void 0;

          if (unsafeHtml) {
            dynamicNode = document.createElement('div');
          } else {
            dynamicNode = document.createTextNode('');
          }

          dynamicNode[dontParse] = true;
          var proxy = _this7.args;
          var property = bindProperty;

          if (bindProperty.match(/\./)) {
            var _Bindable$resolve5 = _Bindable.Bindable.resolve(_this7.args, bindProperty, true);

            var _Bindable$resolve6 = _slicedToArray(_Bindable$resolve5, 2);

            proxy = _Bindable$resolve6[0];
            property = _Bindable$resolve6[1];
          }

          tag.parentNode.insertBefore(dynamicNode, tag);

          if (_typeof(proxy) !== 'object') {
            return "break";
          }

          proxy = _Bindable.Bindable.make(proxy);
          var debind = proxy.bindTo(property, function (v, k, t) {
            if (t[k] !== v && (t[k] instanceof View || t[k] instanceof Node || t[k] instanceof _Tag.Tag)) {
              if (!t[k].preserve) {
                t[k].remove();
              }
            }

            dynamicNode.nodeValue = '';

            if (unsafeView && !(v instanceof View)) {
              var _v;

              var unsafeTemplate = (_v = v) !== null && _v !== void 0 ? _v : '';
              v = new View(_this7.args, _this7);
              v.template = unsafeTemplate;
            }

            if (transformer) {
              v = transformer(v);
            }

            if (v instanceof View) {
              var onAttach = function onAttach(rootNode, parentNode) {
                v.dispatchAttached(rootNode, parentNode, _this7);
              };

              _this7.nodesAttached.add(onAttach);

              v.render(tag.parentNode, dynamicNode);

              var cleanup = function cleanup() {
                if (!v.preserve) {
                  v.remove();
                }
              };

              _this7.onRemove(cleanup);

              v.onRemove(function () {
                _this7.nodesAttached.remove(onAttach);

                _this7._onRemove.remove(cleanup);
              });
            } else if (v instanceof Node) {
              tag.parentNode.insertBefore(v, dynamicNode);

              _this7.onRemove(function () {
                return v.remove();
              });
            } else if (v instanceof _Tag.Tag) {
              tag.parentNode.insertBefore(v.node, dynamicNode);

              _this7.onRemove(function () {
                return v.remove();
              });
            } else {
              if (v instanceof Object && v.__toString instanceof Function) {
                v = v.__toString();
              }

              if (unsafeHtml) {
                dynamicNode.innerHTML = v;
              } else {
                dynamicNode.nodeValue = v;
              }
            }

            dynamicNode[dontParse] = true;
          });

          _this7.onRemove(debind);
        };

        while (match = regex.exec(original)) {
          var _ret2 = _loop3();

          if (_ret2 === "continue") continue;
          if (_ret2 === "break") break;
        }

        var staticSuffix = original.substring(header);
        var staticNode = document.createTextNode(staticSuffix);
        staticNode[dontParse] = true;
        tag.parentNode.insertBefore(staticNode, tag);
        tag.nodeValue = '';
      } else if (tag.nodeType === Node.ELEMENT_NODE) {
        var _loop4 = function _loop4(i) {
          if (!_this7.interpolatable(tag.attributes[i].value)) {
            return "continue";
          }

          var header = 0;
          var match = void 0;
          var original = tag.attributes[i].value;
          var attribute = tag.attributes[i];
          var bindProperties = {};
          var segments = [];

          while (match = regex.exec(original)) {
            segments.push(original.substring(header, match.index));

            if (!bindProperties[match[2]]) {
              bindProperties[match[2]] = [];
            }

            bindProperties[match[2]].push(segments.length);
            segments.push(match[1]);
            header = match.index + match[1].length;
          }

          segments.push(original.substring(header));

          var _loop5 = function _loop5(j) {
            var proxy = _this7.args;
            var property = j;
            var propertySplit = j.split('|');
            var transformer = false;
            var longProperty = j;

            if (propertySplit.length > 1) {
              transformer = _this7.stringTransformer(propertySplit.slice(1));
              property = propertySplit[0];
            }

            if (property.match(/\./)) {
              var _Bindable$resolve7 = _Bindable.Bindable.resolve(_this7.args, property, true);

              var _Bindable$resolve8 = _slicedToArray(_Bindable$resolve7, 2);

              proxy = _Bindable$resolve8[0];
              property = _Bindable$resolve8[1];
            }

            var matching = [];
            var bindProperty = j;
            var matchingSegments = bindProperties[longProperty]; // const changeAttribute = (v, k, t, d) => {
            // 	tag.setAttribute(attribute.name, segments.join(''));
            // };

            _this7.onRemove(proxy.bindTo(property, function (v, k, t, d) {
              if (transformer) {
                v = transformer(v);
              }

              for (var _i4 in bindProperties) {
                for (var _j in bindProperties[longProperty]) {
                  segments[bindProperties[longProperty][_j]] = t[_i4];

                  if (k === property) {
                    segments[bindProperties[longProperty][_j]] = v;
                  }
                }
              }

              if (!_this7.paused) {
                // changeAttribute(v,k,t,d);
                tag.setAttribute(attribute.name, segments.join(''));
              } else {
                // this.unpauseCallbacks.set(attribute, () => changeAttribute(v,k,t,d));
                _this7.unpauseCallbacks.set(attribute, function () {
                  return tag.setAttribute(attribute.name, segments.join(''));
                });
              }
            }));

            _this7.onRemove(function () {
              if (!proxy.isBound()) {
                _Bindable.Bindable.clearBindings(proxy);
              }
            });
          };

          for (var j in bindProperties) {
            _loop5(j);
          }
        };

        for (var i = 0; i < tag.attributes.length; i++) {
          var _ret3 = _loop4(i);

          if (_ret3 === "continue") continue;
        }
      }

      return tag;
    }
  }, {
    key: "mapRefTag",
    value: function mapRefTag(tag) {
      var refAttr = tag.getAttribute('cv-ref');

      var _refAttr$split = refAttr.split(':'),
          _refAttr$split2 = _slicedToArray(_refAttr$split, 3),
          refProp = _refAttr$split2[0],
          _refAttr$split2$ = _refAttr$split2[1],
          refClassname = _refAttr$split2$ === void 0 ? null : _refAttr$split2$,
          _refAttr$split2$2 = _refAttr$split2[2],
          refKey = _refAttr$split2$2 === void 0 ? null : _refAttr$split2$2;

      var refClass = _Tag.Tag;

      if (refClassname) {
        refClass = this.stringToClass(refClassname);
      }

      tag.removeAttribute('cv-ref');
      Object.defineProperty(tag, '___tag___', {
        enumerable: false,
        writable: true
      });
      this.onRemove(function () {
        tag.___tag___ = null;
        tag.remove();
      });
      var parent = this;
      var direct = this;

      if (this.viewList) {
        parent = this.viewList.parent; // if(!this.viewList.parent.tags[refProp])
        // {
        // 	this.viewList.parent.tags[refProp] = [];
        // }
        // let refKeyVal = this.args[refKey];
        // this.viewList.parent.tags[refProp][refKeyVal] = new refClass(
        // 	tag, this, refProp, refKeyVal
        // );
      } else {// this.tags[refProp] = new refClass(
        // 	tag, this, refProp
        // );
      }

      var tagObject = new refClass(tag, this, refProp, undefined, direct);
      tag.___tag___ = tagObject;
      this.tags[refProp] = tagObject;

      while (parent) {
        var refKeyVal = this.args[refKey];

        if (refKeyVal !== undefined) {
          if (!parent.tags[refProp]) {
            parent.tags[refProp] = [];
          }

          parent.tags[refProp][refKeyVal] = tagObject;
        } else {
          parent.tags[refProp] = tagObject;
        }

        if (!parent.parent) {
          break;
        }

        parent = parent.parent;
      }

      return tag;
    }
  }, {
    key: "mapBindTag",
    value: function mapBindTag(tag) {
      var _this8 = this;

      var bindArg = tag.getAttribute('cv-bind');
      var proxy = this.args;
      var property = bindArg;
      var top = null;

      if (bindArg.match(/\./)) {
        var _Bindable$resolve9 = _Bindable.Bindable.resolve(this.args, bindArg, true);

        var _Bindable$resolve10 = _slicedToArray(_Bindable$resolve9, 3);

        proxy = _Bindable$resolve10[0];
        property = _Bindable$resolve10[1];
        top = _Bindable$resolve10[2];
      }

      if (proxy !== this.args) {
        this.subBindings[bindArg] = this.subBindings[bindArg] || [];
        this.onRemove(this.args.bindTo(top, function () {
          while (_this8.subBindings.length) {
            _this8.subBindings.shift()();
          }
        }));
      }

      var unsafeHtml = false;

      if (property.substr(0, 1) === '$') {
        property = property.substr(1);
        unsafeHtml = true;
      }

      var debind = proxy.bindTo(property, function (v, k, t, d, p) {
        if ((p instanceof View || p instanceof Node || p instanceof _Tag.Tag) && p !== v) {
          p.remove();
        }

        var autoChangedEvent = new CustomEvent('cvAutoChanged', {
          bubbles: true
        });

        if (['INPUT', 'SELECT', 'TEXTAREA'].includes(tag.tagName)) {
          var _type = tag.getAttribute('type');

          if (_type && _type.toLowerCase() === 'checkbox') {
            tag.checked = !!v;
            tag.dispatchEvent(autoChangedEvent);
          } else if (_type && _type.toLowerCase() === 'radio') {
            tag.checked = v == tag.value;
            tag.dispatchEvent(autoChangedEvent);
          } else if (_type !== 'file') {
            if (tag.tagName === 'SELECT') {
              var selectOption = function selectOption() {
                for (var i = 0; i < tag.options.length; i++) {
                  var option = tag.options[i];

                  if (option.value == v) {
                    tag.selectedIndex = i;
                  }
                }
              };

              selectOption();

              _this8.nodesAttached.add(selectOption);
            } else {
              tag.value = v == null ? '' : v;
            }

            tag.dispatchEvent(autoChangedEvent);
          }
        } else {
          if (v instanceof View) {
            var _iterator7 = _createForOfIteratorHelper(tag.childNodes),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var node = _step7.value;
                node.remove();
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            var onAttach = function onAttach(parentNode) {
              v.dispatchDomAttached(_this8); // if(v.nodes.length && v.dispatchAttach())
              // {
              // 	v.attached(parentNode.getRootNode(), parentNode, this);
              // 	v.dispatchAttached(parentNode.getRootNode(), parentNode, this);
              // }
            };

            _this8.nodesAttached.add(onAttach);

            v.render(tag);
            v.onRemove(function () {
              return _this8.nodesAttached.remove(onAttach);
            });
          } else if (v instanceof Node) {
            tag.insert(v);
          } else if (v instanceof _Tag.Tag) {
            tag.append(v.node);
          } else if (unsafeHtml) {
            if (tag.innerHTML !== v) {
              v = String(v);

              if (tag.innerHTML === v.substring(0, tag.innerHTML.length)) {
                tag.innerHTML += v.substring(tag.innerHTML.length);
              } else {
                var _iterator8 = _createForOfIteratorHelper(tag.childNodes),
                    _step8;

                try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var _node = _step8.value;

                    _node.remove();
                  }
                } catch (err) {
                  _iterator8.e(err);
                } finally {
                  _iterator8.f();
                }

                tag.innerHTML = v;
              }

              _Dom.Dom.mapTags(tag, false, function (t) {
                return t[dontParse] = true;
              });
            }
          } else {
            if (tag.textContent !== v) {
              var _iterator9 = _createForOfIteratorHelper(tag.childNodes),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var _node2 = _step9.value;

                  _node2.remove();
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }

              tag.textContent = v;
            }
          }
        }
      });

      if (proxy !== this.args) {
        this.subBindings[bindArg].push(debind);
      }

      this.onRemove(debind);
      var type = tag.getAttribute('type');
      var multi = tag.getAttribute('multiple');

      var inputListener = function inputListener(event) {
        if (event.target !== tag) {
          return;
        }

        if (type && type.toLowerCase() === 'checkbox') {
          if (tag.checked) {
            proxy[property] = event.target.getAttribute('value');
          } else {
            proxy[property] = false;
          }
        } else if (event.target.matches('[contenteditable=true]')) {
          proxy[property] = event.target.innerHTML;
        } else if (type === 'file' && multi) {
          var files = Array.from(event.target.files);

          var current = proxy[property] || _Bindable.Bindable.onDeck(proxy, property);

          if (!current || !files.length) {
            proxy[property] = files;
          } else {
            var _loop6 = function _loop6(i) {
              if (files[i] !== current[i]) {
                files[i].toJSON = function () {
                  return {
                    name: file[i].name,
                    size: file[i].size,
                    type: file[i].type,
                    date: file[i].lastModified
                  };
                };

                current[i] = files[i];
                return "break";
              }
            };

            for (var i in files) {
              var _ret4 = _loop6(i);

              if (_ret4 === "break") break;
            }
          }
        } else if (type === 'file' && !multi && event.target.files.length) {
          var _file = event.target.files.item(0);

          _file.toJSON = function () {
            return {
              name: _file.name,
              size: _file.size,
              type: _file.type,
              date: _file.lastModified
            };
          };

          proxy[property] = _file;
        } else {
          proxy[property] = event.target.value;
        }
      };

      if (type === 'file' || type === 'radio') {
        tag.addEventListener('change', inputListener);
      } else {
        tag.addEventListener('input', inputListener);
        tag.addEventListener('change', inputListener);
        tag.addEventListener('value-changed', inputListener);
      }

      this.onRemove(function () {
        if (type === 'file' || type === 'radio') {
          tag.removeEventListener('change', inputListener);
        } else {
          tag.removeEventListener('input', inputListener);
          tag.removeEventListener('change', inputListener);
          tag.removeEventListener('value-changed', inputListener);
        }
      });
      tag.removeAttribute('cv-bind');
      return tag;
    }
  }, {
    key: "mapOnTag",
    value: function mapOnTag(tag) {
      var _this9 = this;

      var referents = String(tag.getAttribute('cv-on'));
      referents.split(';').map(function (a) {
        return a.split(':');
      }).forEach(function (a) {
        a = a.map(function (a) {
          return a.trim();
        });
        var argLen = a.length;
        var eventName = String(a.shift()).trim();
        var callbackName = String(a.shift() || eventName).trim();
        var eventFlags = String(a.shift() || '').trim();
        var argList = [];
        var groups = /(\w+)(?:\(([$\w\s-'",]+)\))?/.exec(callbackName);

        if (groups) {
          callbackName = groups[1].replace(/(^[\s\n]+|[\s\n]+$)/, '');

          if (groups[2]) {
            argList = groups[2].split(',').map(function (s) {
              return s.trim();
            });
          }
        }

        if (!argList.length) {
          argList.push('$event');
        }

        if (!eventName || argLen === 1) {
          eventName = callbackName;
        }

        var eventMethod;
        var parent = _this9;

        var _loop7 = function _loop7() {
          var controller = parent.controller;

          if (typeof controller[callbackName] === 'function') {
            eventMethod = function eventMethod() {
              controller[callbackName].apply(controller, arguments);
            };

            return "break";
          } else if (typeof parent[callbackName] === 'function') {
            eventMethod = function eventMethod() {
              var _parent;

              (_parent = parent)[callbackName].apply(_parent, arguments);
            };

            return "break";
          }

          if (parent.parent) {
            parent = parent.parent;
          } else {
            return "break";
          }
        };

        while (parent) {
          var _ret5 = _loop7();

          if (_ret5 === "break") break;
        }

        var eventListener = function eventListener(event) {
          var argRefs = argList.map(function (arg) {
            var match;

            if (Number(arg) == arg) {
              return arg;
            } else if (arg === 'event' || arg === '$event') {
              return event;
            } else if (arg === '$view') {
              return parent;
            } else if (arg === '$controller') {
              return controller;
            } else if (arg === '$tag') {
              return tag;
            } else if (arg === '$parent') {
              return _this9.parent;
            } else if (arg === '$subview') {
              return _this9;
            } else if (arg in _this9.args) {
              return _this9.args[arg];
            } else if (match = /^['"]([\w-]+?)["']$/.exec(arg)) {
              return match[1];
            }
          });

          if (!(typeof eventMethod === 'function')) {
            throw new Error("".concat(callbackName, " is not defined on View object.") + "\n" + "Tag:" + "\n" + "".concat(tag.outerHTML));
          }

          eventMethod.apply(void 0, _toConsumableArray(argRefs));
        };

        var eventOptions = {};

        if (eventFlags.includes('p')) {
          eventOptions.passive = true;
        } else if (eventFlags.includes('P')) {
          eventOptions.passive = false;
        }

        if (eventFlags.includes('c')) {
          eventOptions.capture = true;
        } else if (eventFlags.includes('C')) {
          eventOptions.capture = false;
        }

        if (eventFlags.includes('o')) {
          eventOptions.once = true;
        } else if (eventFlags.includes('O')) {
          eventOptions.once = false;
        }

        switch (eventName) {
          case '_init':
            eventListener();
            break;

          case '_attach':
            _this9.nodesAttached.add(eventListener);

            break;

          case '_detach':
            _this9.nodesDetached.add(eventListener);

            break;

          default:
            tag.addEventListener(eventName, eventListener, eventOptions);

            _this9.onRemove(function () {
              tag.removeEventListener(eventName, eventListener, eventOptions);
            });

            break;
        }

        return [eventName, callbackName, argList];
      });
      tag.removeAttribute('cv-on');
      return tag;
    }
  }, {
    key: "mapLinkTag",
    value: function mapLinkTag(tag) {
      /*/
      const tagCompiler = this.compileLinkTag(tag);
      	const newTag = tagCompiler(this);
      	tag.replaceWith(newTag);
      	return newTag;
      /*/
      var linkAttr = tag.getAttribute('cv-link');
      tag.setAttribute('href', linkAttr);

      var linkClick = function linkClick(event) {
        event.preventDefault();

        if (linkAttr.substring(0, 4) === 'http' || linkAttr.substring(0, 2) === '//') {
          window.open(tag.getAttribute('href', linkAttr));
          return;
        }

        _Router.Router.go(tag.getAttribute('href'));
      };

      tag.addEventListener('click', linkClick);
      this.onRemove(function (tag, eventListener) {
        return function () {
          tag.removeEventListener('click', eventListener);
          tag = undefined;
          eventListener = undefined;
        };
      }(tag, linkClick));
      tag.removeAttribute('cv-link');
      return tag; //*/
    }
  }, {
    key: "compileLinkTag",
    value: function compileLinkTag(sourceTag) {
      var linkAttr = sourceTag.getAttribute('cv-link');
      sourceTag.removeAttribute('cv-link');
      return function (bindingView) {
        var tag = sourceTag.cloneNode(true);
        tag.setAttribute('href', linkAttr);
        return tag;
      };
    }
  }, {
    key: "mapPrendererTag",
    value: function mapPrendererTag(tag) {
      var prerenderAttr = tag.getAttribute('cv-prerender');
      var prerendering = window.prerenderer || navigator.userAgent.match(/prerender/i);

      if (prerendering) {
        window.prerenderer = window.prerenderer || true;
      }

      if (prerenderAttr === 'never' && prerendering || prerenderAttr === 'only' && !prerendering) {
        tag.parentNode.removeChild(tag);
      }

      return tag;
    }
  }, {
    key: "mapWithTag",
    value: function mapWithTag(tag) {
      var _this10 = this;

      var withAttr = tag.getAttribute('cv-with');
      var carryAttr = tag.getAttribute('cv-carry');
      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-with');
      tag.removeAttribute('cv-carry');
      tag.removeAttribute('cv-view');
      var viewClass = viewAttr ? this.stringToClass(viewAttr) : View;
      var subTemplate = new DocumentFragment();

      _toConsumableArray(tag.childNodes).forEach(function (n) {
        return subTemplate.appendChild(n);
      });

      var carryProps = [];

      if (carryAttr) {
        carryProps = carryAttr.split(',').map(function (s) {
          return s.trim();
        });
      }

      var debind = this.args.bindTo(withAttr, function (v, k, t, d) {
        if (_this10.withViews.has(tag)) {
          _this10.withViews["delete"](tag);
        }

        while (tag.firstChild) {
          tag.removeChild(tag.firstChild);
        }

        var view = new viewClass({}, _this10);

        _this10.onRemove(function (view) {
          return function () {
            view.remove();
          };
        }(view));

        view.template = subTemplate;

        var _loop8 = function _loop8(i) {
          var debind = _this10.args.bindTo(carryProps[i], function (v, k) {
            view.args[k] = v;
          });

          view.onRemove(debind);

          _this10.onRemove(function () {
            debind();
            view.remove();
          });
        };

        for (var i in carryProps) {
          _loop8(i);
        }

        var _loop9 = function _loop9(_i5) {
          if (_typeof(v) !== 'object') {
            return "continue";
          }

          v = _Bindable.Bindable.make(v);
          var debind = v.bindTo(_i5, function (vv, kk, tt, dd) {
            if (!dd) {
              view.args[kk] = vv;
            } else if (kk in view.args) {
              delete view.args[kk];
            }
          });
          var debindUp = view.args.bindTo(_i5, function (vv, kk, tt, dd) {
            if (!dd) {
              v[kk] = vv;
            } else if (kk in v) {
              delete v[kk];
            }
          });

          _this10.onRemove(function () {
            debind();

            if (!v.isBound()) {
              _Bindable.Bindable.clearBindings(v);
            }

            view.remove();
          });

          view.onRemove(function () {
            debind();

            if (!v.isBound()) {
              _Bindable.Bindable.clearBindings(v);
            }
          });
        };

        for (var _i5 in v) {
          var _ret6 = _loop9(_i5);

          if (_ret6 === "continue") continue;
        }

        view.render(tag);

        _this10.withViews.set(tag, view);
      });
      this.onRemove(function () {
        _this10.withViews["delete"](tag);

        debind();
      });
      return tag;
    }
  }, {
    key: "mapViewTag",
    value: function mapViewTag(tag) {
      var _this11 = this;

      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-view');
      var subTemplate = new DocumentFragment();

      _toConsumableArray(tag.childNodes).forEach(function (n) {
        return subTemplate.appendChild(n);
      });

      var parts = viewAttr.split(':');
      var viewClass = parts.pop() ? this.stringToClass(viewAttr) : View;
      var viewName = parts.shift();
      var view = new viewClass(this.args, this);
      this.views.set(tag, view);

      if (viewName) {
        this.views.set(viewName, view);
      }

      this.onRemove(function (view) {
        return function () {
          view.remove();

          _this11.views["delete"](tag);

          _this11.views["delete"](viewName);
        };
      }(view));
      view.template = subTemplate;
      view.render(tag);
      return tag;
    }
  }, {
    key: "mapEachTag",
    value: function mapEachTag(tag) {
      var _this12 = this;

      var eachAttr = tag.getAttribute('cv-each');
      var viewAttr = tag.getAttribute('cv-view');
      tag.removeAttribute('cv-each');
      tag.removeAttribute('cv-view');
      var viewClass = viewAttr ? this.stringToClass(viewAttr) : View;
      var subTemplate = new DocumentFragment();

      _toConsumableArray(tag.childNodes).forEach(function (n) {
        return subTemplate.appendChild(n);
      });

      var _eachAttr$split = eachAttr.split(':'),
          _eachAttr$split2 = _slicedToArray(_eachAttr$split, 3),
          eachProp = _eachAttr$split2[0],
          asProp = _eachAttr$split2[1],
          keyProp = _eachAttr$split2[2];

      var proxy = this.args;
      var property = eachProp;

      if (eachProp.match(/\./)) {
        var _Bindable$resolve11 = _Bindable.Bindable.resolve(this.args, eachProp, true);

        var _Bindable$resolve12 = _slicedToArray(_Bindable$resolve11, 2);

        proxy = _Bindable$resolve12[0];
        property = _Bindable$resolve12[1];
      }

      var debind = proxy.bindTo(property, function (v, k, t, d, p) {
        if (v instanceof _Bag.Bag) {
          v = v.list;
        }

        if (_this12.viewLists.has(tag)) {
          _this12.viewLists.get(tag).remove();
        }

        var viewList = new _ViewList.ViewList(subTemplate, asProp, v, _this12, keyProp, viewClass);

        var viewListRemover = function viewListRemover() {
          return viewList.remove();
        };

        _this12.onRemove(viewListRemover);

        viewList.onRemove(function () {
          return _this12._onRemove.remove(viewListRemover);
        });

        var debindA = _this12.args.bindTo(function (v, k, t, d) {
          if (k === '_id') {
            return;
          }

          if (!d) {
            viewList.subArgs[k] = v;
          } else {
            if (k in viewList.subArgs) {
              delete viewList.subArgs[k];
            }
          }
        });

        var debindB = viewList.args.bindTo(function (v, k, t, d, p) {
          if (k === '_id' || k === 'value' || String(k).substring(0, 3) === '___') {
            return;
          }

          if (!d) {
            if (k in _this12.args) {
              _this12.args[k] = v;
            }
          } else {
            delete _this12.args[k];
          }
        });
        viewList.onRemove(debindA);
        viewList.onRemove(debindB);

        _this12.onRemove(debindA);

        _this12.onRemove(debindB);

        while (tag.firstChild) {
          tag.removeChild(tag.firstChild);
        }

        _this12.viewLists.set(tag, viewList);

        viewList.render(tag);
      });
      this.onRemove(debind);
      return tag;
    }
  }, {
    key: "mapIfTag",
    value: function mapIfTag(tag) {
      var _this13 = this;

      var sourceTag = tag;
      var viewProperty = sourceTag.getAttribute('cv-view');
      var ifProperty = sourceTag.getAttribute('cv-if');
      var isProperty = sourceTag.getAttribute('cv-is');
      var inverted = false;
      var defined = false;
      sourceTag.removeAttribute('cv-view');
      sourceTag.removeAttribute('cv-if');
      sourceTag.removeAttribute('cv-is');
      var viewClass = viewProperty ? this.stringToClass(viewProperty) : View;

      if (ifProperty.substr(0, 1) === '!') {
        ifProperty = ifProperty.substr(1);
        inverted = true;
      }

      if (ifProperty.substr(0, 1) === '?') {
        ifProperty = ifProperty.substr(1);
        defined = true;
      }

      var subTemplate = new DocumentFragment();

      _toConsumableArray(sourceTag.childNodes).forEach(function (n) {
        return subTemplate.appendChild(n);
      });

      var bindingView = this;
      var ifDoc = new DocumentFragment();
      var view = new viewClass(Object.assign({}, this.args), bindingView);
      view.tags.bindTo(function (v, k) {
        return _this13.tags[k] = v;
      }, {
        removeWith: this
      });
      view.template = subTemplate;
      var proxy = bindingView.args;
      var property = ifProperty;

      if (ifProperty.match(/\./)) {
        var _Bindable$resolve13 = _Bindable.Bindable.resolve(bindingView.args, ifProperty, true);

        var _Bindable$resolve14 = _slicedToArray(_Bindable$resolve13, 2);

        proxy = _Bindable$resolve14[0];
        property = _Bindable$resolve14[1];
      }

      view.render(ifDoc);
      var propertyDebind = proxy.bindTo(property, function (v, k) {
        var o = v;

        if (defined) {
          v = v !== null && v !== undefined;
        }

        if (v instanceof _Bag.Bag) {
          v = v.list;
        }

        if (Array.isArray(v)) {
          v = !!v.length;
        }

        if (isProperty !== null) {
          v = o == isProperty;
        }

        if (inverted) {
          v = !v;
        }

        if (v) {
          tag.appendChild(ifDoc);

          _toConsumableArray(ifDoc.childNodes).forEach(function (node) {
            return _Dom.Dom.mapTags(node, false, function (tag, walker) {
              if (!tag.matches) {
                return;
              }

              tag.dispatchEvent(new CustomEvent('cvDomAttached', {
                target: tag,
                detail: {
                  view: view || _this13,
                  mainView: _this13
                }
              }));
            });
          });
        } else {
          view.nodes.forEach(function (n) {
            return ifDoc.appendChild(n);
          });

          _Dom.Dom.mapTags(ifDoc, false, function (tag, walker) {
            if (!tag.matches) {
              return;
            }

            new CustomEvent('cvDomDetached', {
              target: tag,
              detail: {
                view: view || _this13,
                mainView: _this13
              }
            });
          });
        }
      }, {
        children: Array.isArray(proxy[property])
      }); // const propertyDebind = this.args.bindChain(property, onUpdate);

      bindingView.onRemove(propertyDebind);
      var debindA = this.args.bindTo(function (v, k, t, d) {
        if (k === '_id') {
          return;
        }

        if (!d) {
          view.args[k] = v;
        } else if (k in view.args) {
          delete view.args[k];
        }
      });
      var debindB = view.args.bindTo(function (v, k, t, d, p) {
        if (k === '_id' || String(k).substring(0, 3) === '___') {
          return;
        }

        if (k in _this13.args) {
          if (!d) {
            _this13.args[k] = v;
          } else {
            delete _this13.args[k];
          }
        }
      });

      var viewDebind = function viewDebind() {
        propertyDebind();
        debindA();
        debindB();

        bindingView._onRemove.remove(propertyDebind); // bindingView._onRemove.remove(bindableDebind);

      };

      bindingView.onRemove(viewDebind);
      this.onRemove(function () {
        debindA();
        debindB();
        view.remove();

        if (bindingView !== _this13) {
          bindingView.remove();
        }
      });
      return tag;
    }
  }, {
    key: "compileIfTag",
    value: function compileIfTag(sourceTag) {
      var ifProperty = sourceTag.getAttribute('cv-if');
      var inverted = false;
      sourceTag.removeAttribute('cv-if');

      if (ifProperty.substr(0, 1) === '!') {
        ifProperty = ifProperty.substr(1);
        inverted = true;
      }

      var subTemplate = new DocumentFragment();

      _toConsumableArray(sourceTag.childNodes).forEach(function (n) {
        return subTemplate.appendChild(n.cloneNode(true));
      });

      return function (bindingView) {
        var tag = sourceTag.cloneNode();
        var ifDoc = new DocumentFragment();
        var view = new View({}, bindingView);
        view.template = subTemplate; // view.parent   = bindingView;

        bindingView.syncBind(view);
        var proxy = bindingView.args;
        var property = ifProperty;

        if (ifProperty.match(/\./)) {
          var _Bindable$resolve15 = _Bindable.Bindable.resolve(bindingView.args, ifProperty, true);

          var _Bindable$resolve16 = _slicedToArray(_Bindable$resolve15, 2);

          proxy = _Bindable$resolve16[0];
          property = _Bindable$resolve16[1];
        }

        var hasRendered = false;
        var propertyDebind = proxy.bindTo(property, function (v, k) {
          if (!hasRendered) {
            var renderDoc = bindingView.args[property] || inverted ? tag : ifDoc;
            view.render(renderDoc);
            hasRendered = true;
            return;
          }

          if (Array.isArray(v)) {
            v = !!v.length;
          }

          if (inverted) {
            v = !v;
          }

          if (v) {
            tag.appendChild(ifDoc);
          } else {
            view.nodes.forEach(function (n) {
              return ifDoc.appendChild(n);
            });
          }
        }); // let cleaner = bindingView;
        // while(cleaner.parent)
        // {
        // 	cleaner = cleaner.parent;
        // }

        bindingView.onRemove(propertyDebind);

        var bindableDebind = function bindableDebind() {
          if (!proxy.isBound()) {
            _Bindable.Bindable.clearBindings(proxy);
          }
        };

        var viewDebind = function viewDebind() {
          propertyDebind();
          bindableDebind();

          bindingView._onRemove.remove(propertyDebind);

          bindingView._onRemove.remove(bindableDebind);
        };

        view.onRemove(viewDebind);
        return tag;
      };
    }
  }, {
    key: "mapTemplateTag",
    value: function mapTemplateTag(tag) {
      var templateName = tag.getAttribute('cv-template');
      tag.removeAttribute('cv-template');

      this.templates[templateName] = function () {
        return tag.tagName === 'TEMPLATE' ? tag.content.cloneNode(true) : new DocumentFragment(tag.innerHTML);
      };

      this.rendered.then(function () {
        return tag.remove();
      });
      return tag;
    }
  }, {
    key: "mapSlotTag",
    value: function mapSlotTag(tag) {
      var templateName = tag.getAttribute('cv-slot');
      var getTemplate = this.templates[templateName];

      if (!getTemplate) {
        var parent = this;

        while (parent) {
          getTemplate = parent.templates[templateName];

          if (getTemplate) {
            break;
          }

          parent = this.parent;
        }

        if (!getTemplate) {
          console.error("Template ".concat(templateName, " not found."));
          return;
        }
      }

      var template = getTemplate();
      tag.removeAttribute('cv-slot');

      while (tag.firstChild) {
        tag.firstChild.remove();
      }

      tag.appendChild(template);
      return tag;
    }
  }, {
    key: "syncBind",
    value: function syncBind(subView) {
      var _this14 = this;

      var debindA = this.args.bindTo(function (v, k, t, d) {
        if (k === '_id') {
          return;
        }

        if (subView.args[k] !== v) {
          subView.args[k] = v;
        }
      });
      var debindB = subView.args.bindTo(function (v, k, t, d, p) {
        if (k === '_id') {
          return;
        }

        var newRef = v;
        var oldRef = p;

        if (newRef instanceof View) {
          newRef = newRef.___ref___;
        }

        if (oldRef instanceof View) {
          oldRef = oldRef.___ref___;
        }

        if (newRef !== oldRef && oldRef instanceof View) {
          p.remove();
        }

        if (k in _this14.args) {
          _this14.args[k] = v;
        }
      });
      this.onRemove(debindA);
      this.onRemove(debindB);
      subView.onRemove(function () {
        _this14._onRemove.remove(debindA);

        _this14._onRemove.remove(debindB);
      });
    }
  }, {
    key: "postRender",
    value: function postRender(parentNode) {}
  }, {
    key: "attached",
    value: function attached(parentNode) {}
  }, {
    key: "interpolatable",
    value: function interpolatable(str) {
      return !!String(str).match(this.interpolateRegex);
    }
  }, {
    key: "remove",
    value: function remove() {
      var _this15 = this;

      var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var remover = function remover() {
        for (var i in _this15.tags) {
          if (Array.isArray(_this15.tags[i])) {
            _this15.tags[i] && _this15.tags[i].forEach(function (t) {
              return t.remove();
            });

            _this15.tags[i].splice(0);
          } else {
            _this15.tags[i] && _this15.tags[i].remove();
            _this15.tags[i] = undefined;
          }
        }

        for (var _i6 in _this15.nodes) {
          _this15.nodes[_i6] && _this15.nodes[_i6].dispatchEvent(new Event('cvDomDetached'));
          _this15.nodes[_i6] && _this15.nodes[_i6].remove();
          _this15.nodes[_i6] = undefined;
        }

        _this15.nodes.splice(0);

        _this15.firstNode = _this15.lastNode = undefined;
      };

      if (now) {
        remover();
      } else {
        requestAnimationFrame(remover);
      }

      var callbacks = this._onRemove.items();

      var _iterator10 = _createForOfIteratorHelper(callbacks),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var callback = _step10.value;
          callback();

          this._onRemove.remove(callback);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      var _iterator11 = _createForOfIteratorHelper(this.cleanup),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var cleanup = _step11.value;
          cleanup && cleanup();
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      this.cleanup.length = 0;

      var _iterator12 = _createForOfIteratorHelper(this.viewLists),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var _step12$value = _slicedToArray(_step12.value, 2),
              tag = _step12$value[0],
              viewList = _step12$value[1];

          viewList.remove();
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      this.viewLists.clear();

      var _iterator13 = _createForOfIteratorHelper(this.timeouts),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _step13$value = _slicedToArray(_step13.value, 2),
              _callback3 = _step13$value[0],
              timeout = _step13$value[1];

          clearTimeout(timeout.timeout);
          this.timeouts["delete"](timeout.timeout);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }

      var _iterator14 = _createForOfIteratorHelper(this.intervals),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var interval = _step14.value;
          clearInterval(interval);
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }

      this.intervals.length = 0;

      var _iterator15 = _createForOfIteratorHelper(this.frames),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var frame = _step15.value;
          frame();
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }

      this.frames.length = 0;
      this.preRuleSet.purge();
      this.ruleSet.purge();
      this.removed = true;
    }
  }, {
    key: "findTag",
    value: function findTag(selector) {
      for (var i in this.nodes) {
        var result = void 0;

        if (!this.nodes[i].querySelector) {
          continue;
        }

        if (this.nodes[i].matches(selector)) {
          return new _Tag.Tag(this.nodes[i], this, undefined, undefined, this);
        }

        if (result = this.nodes[i].querySelector(selector)) {
          return new _Tag.Tag(result, this, undefined, undefined, this);
        }
      }
    }
  }, {
    key: "findTags",
    value: function findTags(selector) {
      var _this16 = this;

      return this.nodes.filter(function (n) {
        return n.querySelectorAll;
      }).map(function (n) {
        return _toConsumableArray(n.querySelectorAll(selector));
      }).flat().map(function (n) {
        return new _Tag.Tag(n, _this16, undefined, undefined, _this16);
      }) || [];
    }
  }, {
    key: "onRemove",
    value: function onRemove(callback) {
      this._onRemove.add(callback);
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "beforeUpdate",
    value: function beforeUpdate(args) {}
  }, {
    key: "afterUpdate",
    value: function afterUpdate(args) {}
  }, {
    key: "stringTransformer",
    value: function stringTransformer(methods) {
      var _this17 = this;

      return function (x) {
        for (var m in methods) {
          var parent = _this17;
          var method = methods[m];

          while (parent && !parent[method]) {
            parent = parent.parent;
          }

          if (!parent) {
            return;
          }

          x = parent[methods[m]](x);
        }

        return x;
      };
    }
  }, {
    key: "stringToClass",
    value: function stringToClass(refClassname) {
      if (View.refClasses.has(refClassname)) {
        return View.refClasses.get(refClassname);
      }

      var refClassSplit = refClassname.split('/');
      var refShortClass = refClassSplit[refClassSplit.length - 1];

      var refClass = require(refClassname);

      View.refClasses.set(refClassname, refClass[refShortClass]);
      return refClass[refShortClass];
    }
  }, {
    key: "preventParsing",
    value: function preventParsing(node) {
      node[dontParse] = true;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.nodes.map(function (n) {
        return n.outerHTML;
      }).join(' ');
    }
  }, {
    key: "listen",
    value: function listen(node, eventName, callback, options) {
      var _this18 = this;

      if (typeof node === 'string') {
        options = callback;
        callback = eventName;
        eventName = node;
        node = this;
      }

      if (node instanceof View) {
        return this.listen(node.nodes, eventName, callback, options);
      }

      if (Array.isArray(node)) {
        return node.map(function (n) {
          return _this18.listen(n, eventName, callback, options);
        }).forEach(function (r) {
          return r();
        });
      }

      if (node instanceof _Tag.Tag) {
        return this.listen(node.element, eventName, callback, options);
      }

      node.addEventListener(eventName, callback, options);

      var remove = function remove() {
        return node.removeEventListener(eventName, callback, options);
      };

      var remover = function remover() {
        remove();

        remove = function remove() {};
      };

      this.onRemove(function () {
        return remover();
      });
      return remover;
    }
  }, {
    key: "detach",
    value: function detach() {
      for (var n in this.nodes) {
        this.nodes[n].remove();
      }

      return this.nodes;
    }
  }], [{
    key: "from",
    value: function from(template) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var view = new this(args, parent);
      view.template = template;
      return view;
    }
  }, {
    key: "isView",
    value: function isView() {
      return View;
    }
  }, {
    key: "uuid",
    value: function uuid() {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
        return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
      });
    }
  }]);

  return View;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.View = View;
Object.defineProperty(View, 'templates', {
  value: new Map()
});
Object.defineProperty(View, 'refClasses', {
  value: new Map()
});
  })();
});

require.register("curvature/base/ViewList.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewList = void 0;

var _Bindable = require("./Bindable");

var _SetMap = require("./SetMap");

var _View = require("./View");

var _Bag = require("./Bag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ViewList = /*#__PURE__*/function () {
  function ViewList(template, subProperty, list, parent) {
    var _this = this;

    var keyProperty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var viewClass = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

    _classCallCheck(this, ViewList);

    this.removed = false;
    this.args = _Bindable.Bindable.makeBindable({});
    this.args.value = _Bindable.Bindable.makeBindable(list || {});
    this.subArgs = _Bindable.Bindable.makeBindable({});
    this.views = [];
    this.cleanup = [];
    this.viewClass = viewClass || _View.View;
    this._onRemove = new _Bag.Bag();
    this.template = template;
    this.subProperty = subProperty;
    this.keyProperty = keyProperty;
    this.tag = null;
    this.downDebind = [];
    this.upDebind = [];
    this.paused = false;
    this.parent = parent;
    this.rendered = new Promise(function (accept, reject) {
      Object.defineProperty(_this, 'renderComplete', {
        configurable: false,
        writable: true,
        value: accept
      });
    });
    this.willReRender = false;

    this.args.___before(function (t, e, s, o, a) {
      if (e == 'bindTo') {
        return;
      }

      _this.paused = true;
    });

    this.args.___after(function (t, e, s, o, a) {
      if (e == 'bindTo') {
        return;
      }

      _this.paused = s.length > 1;

      _this.reRender();
    });

    var debind = this.args.value.bindTo(function (v, k, t, d) {
      if (_this.paused) {
        return;
      }

      var kk = k;

      if (_typeof(k) === 'symbol') {
        return;
      }

      if (isNaN(k)) {
        kk = '_' + k;
      }

      if (d) {
        if (_this.views[kk]) {
          _this.views[kk].remove();
        }

        delete _this.views[kk];

        for (var i in _this.views) {
          if (isNaN(i)) {
            _this.views[i].args[_this.keyProperty] = i.substr(1);
            continue;
          }

          _this.views[i].args[_this.keyProperty] = i;
        }
      } else if (!_this.views[kk]) {
        cancelAnimationFrame(_this.willReRender);
        _this.willReRender = requestAnimationFrame(function () {
          _this.reRender();
        });
      } else if (_this.views[kk] && _this.views[kk].args) {
        _this.views[kk].args[_this.keyProperty] = k;
        _this.views[kk].args[_this.subProperty] = v;
      }
    });

    this._onRemove.add(debind);

    Object.preventExtensions(this);
  }

  _createClass(ViewList, [{
    key: "render",
    value: function render(tag) {
      var _this2 = this;

      var renders = [];

      var _iterator = _createForOfIteratorHelper(this.views),
          _step;

      try {
        var _loop = function _loop() {
          var view = _step.value;
          view.render(tag);
          renders.push(view.rendered.then(function () {
            return view;
          }));
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.tag = tag;
      Promise.all(renders).then(function (views) {
        return _this2.renderComplete(views);
      });
      this.parent.dispatchEvent(new CustomEvent('listRendered', {
        detail: {
          detail: {
            key: this.subProperty,
            value: this.args.value
          }
        }
      }));
    }
  }, {
    key: "reRender",
    value: function reRender() {
      var _this3 = this;

      if (this.paused || !this.tag) {
        return;
      }

      var views = [];
      var existingViews = new _SetMap.SetMap();

      for (var i in this.views) {
        var view = this.views[i];
        var rawValue = view.args[this.subProperty];
        existingViews.add(rawValue, view);
        views[i] = view;
      }

      var finalViews = [];
      var finalViewSet = new Set();
      this.downDebind.length && this.downDebind.forEach(function (d) {
        return d && d();
      });
      this.upDebind.length && this.upDebind.forEach(function (d) {
        return d && d();
      });
      this.upDebind.length = 0;
      this.downDebind.length = 0;
      var minKey = Infinity;
      var anteMinKey = Infinity;

      var _loop2 = function _loop2(_i) {
        var found = false;
        var k = _i;

        if (isNaN(k)) {
          k = '_' + _i;
        } else if (String(k).length) {
          k = Number(k);
        }

        if (_this3.args.value[_i] !== undefined && existingViews.has(_this3.args.value[_i])) {
          var existingView = existingViews.getOne(_this3.args.value[_i]);

          if (existingView) {
            existingView.args[_this3.keyProperty] = _i;
            finalViews[k] = existingView;
            finalViewSet.add(existingView);
            found = true;

            if (!isNaN(k)) {
              minKey = Math.min(minKey, k);
              k > 0 && (anteMinKey = Math.min(anteMinKey, k));
            }

            existingViews.remove(_this3.args.value[_i], existingView);
          }
        }

        if (!found) {
          var viewArgs = {};

          var _view = finalViews[k] = new _this3.viewClass(viewArgs, _this3.parent);

          if (!isNaN(k)) {
            minKey = Math.min(minKey, k);
            k > 0 && (anteMinKey = Math.min(anteMinKey, k));
          }

          finalViews[k].template = _this3.template;
          finalViews[k].viewList = _this3;
          finalViews[k].args[_this3.keyProperty] = _i;
          finalViews[k].args[_this3.subProperty] = _this3.args.value[_i];
          _this3.upDebind[k] = viewArgs.bindTo(_this3.subProperty, function (v, k, t, d) {
            var index = viewArgs[_this3.keyProperty];

            if (d) {
              delete _this3.args.value[index];
              return;
            }

            _this3.args.value[index] = v;
          });
          _this3.downDebind[k] = _this3.subArgs.bindTo(function (v, k, t, d) {
            if (d) {
              delete viewArgs[k];
              return;
            }

            viewArgs[k] = v;
          });

          var upDebind = function upDebind() {
            _this3.upDebind.filter(function (x) {
              return x;
            }).forEach(function (d) {
              return d();
            });

            _this3.upDebind.length = 0;
          };

          var downDebind = function downDebind() {
            _this3.downDebind.filter(function (x) {
              return x;
            }).forEach(function (d) {
              return d();
            });

            _this3.downDebind.length = 0;
          };

          _view.onRemove(function () {
            _this3._onRemove.remove(upDebind);

            _this3._onRemove.remove(downDebind);

            _this3.upDebind[k] && _this3.upDebind[k]();
            _this3.downDebind[k] && _this3.downDebind[k]();
            delete _this3.upDebind[k];
            delete _this3.downDebind[k];
          });

          _this3._onRemove.add(upDebind);

          _this3._onRemove.add(downDebind);

          viewArgs[_this3.subProperty] = _this3.args.value[_i];
        }
      };

      for (var _i in this.args.value) {
        _loop2(_i);
      }

      for (var _i2 in views) {
        if (!finalViewSet.has(views[_i2])) {
          views[_i2].remove();
        }
      }

      if (Array.isArray(this.args.value)) {
        var localMin = minKey === 0 && finalViews[1] !== undefined && finalViews.length > 1 || anteMinKey === Infinity ? minKey : anteMinKey;

        var renderRecurse = function renderRecurse() {
          var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var ii = finalViews.length - i - 1;

          while (ii > localMin && finalViews[ii] === undefined) {
            ii--;
          }

          if (ii < localMin) {
            return Promise.resolve();
          }

          if (finalViews[ii] === _this3.views[ii]) {
            if (finalViews[ii] && !finalViews[ii].firstNode) {
              finalViews[ii].render(_this3.tag, finalViews[ii + 1]);
              return finalViews[ii].rendered.then(function () {
                return renderRecurse(Number(i) + 1);
              });
            } else {
              if (i % 500) {
                return renderRecurse(Number(i) + 1);
              } else {
                return new Promise(function (accept) {
                  return requestAnimationFrame(function () {
                    return accept(renderRecurse(Number(i) + 1));
                  });
                });
              }
            }
          }

          finalViews[ii].render(_this3.tag, finalViews[ii + 1]);

          _this3.views.splice(ii, 0, finalViews[ii]);

          return finalViews[ii].rendered.then(function () {
            return renderRecurse(i + 1);
          });
        };

        this.rendered = renderRecurse();
      } else {
        var renders = [];
        var leftovers = Object.assign({}, finalViews);

        var isInt = function isInt(x) {
          return parseInt(x) === x - 0;
        };

        var keys = Object.keys(finalViews).sort(function (a, b) {
          if (isInt(a) && isInt(b)) {
            return Math.sign(a - b);
          }

          if (!isInt(a) && !isInt(b)) {
            return 0;
          }

          if (!isInt(a) && isInt(b)) {
            return -1;
          }

          if (isInt(a) && !isInt(b)) {
            return 1;
          }
        });

        var _iterator2 = _createForOfIteratorHelper(keys),
            _step2;

        try {
          var _loop3 = function _loop3() {
            var i = _step2.value;
            delete leftovers[i];

            if (finalViews[i].firstNode && finalViews[i] === _this3.views[i]) {
              return "continue";
            }

            finalViews[i].render(_this3.tag);
            renders.push(finalViews[i].rendered.then(function () {
              return finalViews[i];
            }));
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _ret = _loop3();

            if (_ret === "continue") continue;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        for (var _i3 in leftovers) {
          delete this.args.views[_i3];
          leftovers.remove();
        }

        this.rendered = Promise.all(renders);
      }

      for (var _i4 in finalViews) {
        if (isNaN(_i4)) {
          finalViews[_i4].args[this.keyProperty] = _i4.substr(1);
          continue;
        }

        finalViews[_i4].args[this.keyProperty] = _i4;
      }

      this.views = Array.isArray(this.args.value) ? [].concat(finalViews) : finalViews;
      finalViewSet.clear();
      this.willReRender = false;
      this.rendered.then(function () {
        _this3.parent.dispatchEvent(new CustomEvent('listRendered', {
          detail: {
            detail: {
              key: _this3.subProperty,
              value: _this3.args.value,
              tag: _this3.tag
            }
          }
        }));

        _this3.tag.dispatchEvent(new CustomEvent('listRendered', {
          detail: {
            detail: {
              key: _this3.subProperty,
              value: _this3.args.value,
              tag: _this3.tag
            }
          }
        }));
      });
    }
  }, {
    key: "pause",
    value: function pause() {
      var _pause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      for (var i in this.views) {
        this.views[i].pause(_pause);
      }
    }
  }, {
    key: "onRemove",
    value: function onRemove(callback) {
      this._onRemove.add(callback);
    }
  }, {
    key: "remove",
    value: function remove() {
      for (var i in this.views) {
        this.views[i].remove();
      }

      var onRemove = this._onRemove.items();

      for (var _i5 in onRemove) {
        this._onRemove.remove(onRemove[_i5]);

        onRemove[_i5]();
      }

      var cleanup;

      while (this.cleanup.length) {
        cleanup = this.cleanup.pop();
        cleanup();
      }

      this.views = [];

      while (this.tag && this.tag.firstChild) {
        this.tag.removeChild(this.tag.firstChild);
      }

      if (this.subArgs) {
        _Bindable.Bindable.clearBindings(this.subArgs);
      }

      _Bindable.Bindable.clearBindings(this.args);

      if (this.args.value && !this.args.value.isBound()) {
        _Bindable.Bindable.clearBindings(this.args.value);
      }

      this.removed = true;
    }
  }]);

  return ViewList;
}();

exports.ViewList = ViewList;
  })();
});

require.register("curvature/input/Keyboard.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyboard = void 0;

var _Bindable = require("../base/Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Keyboard = /*#__PURE__*/function () {
  function Keyboard() {
    var _this = this;

    _classCallCheck(this, Keyboard);

    this.maxDecay = 120;
    this.comboTime = 500;
    this.listening = false;
    this.focusElement = document.body;
    this[_Bindable.Bindable.NoGetters] = true;
    Object.defineProperty(this, 'combo', {
      value: _Bindable.Bindable.make([])
    });
    Object.defineProperty(this, 'whichs', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'codes', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'keys', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedWhich', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedCode', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'pressedKey', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedWhich', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedCode', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'releasedKey', {
      value: _Bindable.Bindable.make({})
    });
    Object.defineProperty(this, 'keyRefs', {
      value: _Bindable.Bindable.make({})
    });
    document.addEventListener('keyup', function (event) {
      if (!_this.listening) {
        return;
      }

      if (!(_this.keys[event.key] > 0) && _this.focusElement && document.activeElement !== _this.focusElement && (!_this.focusElement.contains(document.activeElement) || document.activeElement.matches('input,textarea'))) {
        return;
      }

      event.preventDefault();
      _this.releasedWhich[event.which] = Date.now();
      _this.releasedCode[event.code] = Date.now();
      _this.releasedKey[event.key] = Date.now();
      _this.whichs[event.which] = -1;
      _this.codes[event.code] = -1;
      _this.keys[event.key] = -1;
    });
    document.addEventListener('keydown', function (event) {
      if (!_this.listening) {
        return;
      }

      if (_this.focusElement && document.activeElement !== _this.focusElement && (!_this.focusElement.contains(document.activeElement) || document.activeElement.matches('input,textarea'))) {
        return;
      }

      event.preventDefault();

      if (event.repeat) {
        return;
      }

      _this.combo.push(event.code);

      clearTimeout(_this.comboTimer);
      _this.comboTimer = setTimeout(function () {
        return _this.combo.splice(0);
      }, _this.comboTime);
      _this.pressedWhich[event.which] = Date.now();
      _this.pressedCode[event.code] = Date.now();
      _this.pressedKey[event.key] = Date.now();

      if (_this.keys[event.key] > 0) {
        return;
      }

      _this.whichs[event.which] = 1;
      _this.codes[event.code] = 1;
      _this.keys[event.key] = 1;
    });

    var windowBlur = function windowBlur(event) {
      for (var i in _this.keys) {
        if (_this.keys[i] < 0) {
          continue;
        }

        _this.releasedKey[i] = Date.now();
        _this.keys[i] = -1;
      }

      for (var _i in _this.codes) {
        if (_this.codes[_i] < 0) {
          continue;
        }

        _this.releasedCode[_i] = Date.now();
        _this.codes[_i] = -1;
      }

      for (var _i2 in _this.whichs) {
        if (_this.whichs[_i2] < 0) {
          continue;
        }

        _this.releasedWhich[_i2] = Date.now();
        _this.whichs[_i2] = -1;
      }
    };

    window.addEventListener('blur', windowBlur);
    window.addEventListener('visibilitychange', function () {
      if (document.visibilityState === 'visible') {
        return;
      }

      windowBlur();
    });
  }

  _createClass(Keyboard, [{
    key: "getKeyRef",
    value: function getKeyRef(keyCode) {
      var keyRef = this.keyRefs[keyCode] = this.keyRefs[keyCode] || _Bindable.Bindable.make({});

      return keyRef;
    }
  }, {
    key: "getKeyTime",
    value: function getKeyTime(key) {
      var released = this.releasedKey[key];
      var pressed = this.pressedKey[key];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getCodeTime",
    value: function getCodeTime(code) {
      var released = this.releasedCode[code];
      var pressed = this.pressedCode[code];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getWhichTime",
    value: function getWhichTime(code) {
      var released = this.releasedWhich[code];
      var pressed = this.pressedWhich[code];

      if (!pressed) {
        return 0;
      }

      if (!released || released < pressed) {
        return Date.now() - pressed;
      }

      return (Date.now() - released) * -1;
    }
  }, {
    key: "getKey",
    value: function getKey(key) {
      if (!this.keys[key]) {
        return 0;
      }

      return this.keys[key];
    }
  }, {
    key: "getKeyCode",
    value: function getKeyCode(code) {
      if (!this.codes[code]) {
        return 0;
      }

      return this.codes[code];
    }
  }, {
    key: "reset",
    value: function reset() {
      for (var i in this.keys) {
        delete this.keys[i];
      }

      for (var i in this.codes) {
        delete this.codes[i];
      }

      for (var i in this.whichs) {
        delete this.whichs[i];
      }
    }
  }, {
    key: "update",
    value: function update() {
      for (var i in this.keys) {
        if (this.keys[i] > 0) {
          this.keys[i]++;
        } else if (this.keys[i] > -this.maxDecay) {
          this.keys[i]--;
        } else {
          delete this.keys[i];
        }
      }

      for (var i in this.codes) {
        var released = this.releasedCode[i];
        var pressed = this.pressedCode[i];
        var keyRef = this.getKeyRef(i);

        if (this.codes[i] > 0) {
          keyRef.frames = this.codes[i]++;
          keyRef.time = pressed ? Date.now() - pressed : 0;
          keyRef.down = true;

          if (!released || released < pressed) {
            return;
          }

          return (Date.now() - released) * -1;
        } else if (this.codes[i] > -this.maxDecay) {
          keyRef.frames = this.codes[i]--;
          keyRef.time = released - Date.now();
          keyRef.down = false;
        } else {
          keyRef.frames = 0;
          keyRef.time = 0;
          keyRef.down = false;
          delete this.codes[i];
        }
      }

      for (var i in this.whichs) {
        if (this.whichs[i] > 0) {
          this.whichs[i]++;
        } else if (this.whichs[i] > -this.maxDecay) {
          this.whichs[i]--;
        } else {
          delete this.whichs[i];
        }
      }
    }
  }], [{
    key: "get",
    value: function get() {
      return this.instance = this.instance || _Bindable.Bindable.make(new this());
    }
  }]);

  return Keyboard;
}();

exports.Keyboard = Keyboard;
  })();
});

require.register("curvature/input/Sequence.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sequence = void 0;

var _Bindable = require("../base/Bindable");

var _Mixin = require("../base/Mixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

var _Bindable$NoGetters;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_Bindable$NoGetters = _Bindable.Bindable.NoGetters;

var Sequence = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Sequence, _Mixin$with);

  var _super = _createSuper(Sequence);

  function Sequence(_ref) {
    var _this;

    var callback = _ref.callback,
        keys = _ref.keys,
        timing = _ref.timing,
        gamepad = _ref.gamepad;

    _classCallCheck(this, Sequence);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), _Bindable$NoGetters, true);

    _defineProperty(_assertThisInitialized(_this), "lastTap", false);

    _defineProperty(_assertThisInitialized(_this), "recent", []);

    _defineProperty(_assertThisInitialized(_this), "callback", function () {});

    _defineProperty(_assertThisInitialized(_this), "timing", 500);

    _defineProperty(_assertThisInitialized(_this), "keys", '');

    var _ref2 = [callback, timing, keys, gamepad];
    _this.callback = _ref2[0];
    _this.timing = _ref2[1];
    _this.keys = _ref2[2];
    _this.gamepad = _ref2[3];
    return _this;
  }

  _createClass(Sequence, [{
    key: "check",
    value: function check(k) {
      var recent = this.recent;
      var now = Date.now();

      if (now + -this.lastTap > this.timing) {
        recent.splice(0);
      }

      recent.push({
        code: k,
        time: Date.now()
      });
      var current = recent.map(function (r) {
        return r.code;
      }).join(',');
      var konami = this.keys.join(',');
      this.lastTap = now;
      var matched = [];

      for (var i in recent) {
        var r = recent[i];
        var matchable = recent.slice(i);
        var chunk = matchable.map(function (r) {
          return r.code;
        }).join(',');

        if (chunk === konami.substr(0, chunk.length)) {
          matched.push.apply(matched, _toConsumableArray(matchable));
          this.dispatchEvent(new CustomEvent('advance', {
            detail: {
              matched: matched,
              recent: recent,
              keys: this.keys,
              length: matchable.length
            }
          }));
          break;
        }
      }

      if (!matched.length) {
        this.dispatchEvent(new CustomEvent('cancel', {
          detail: {
            matched: matched,
            recent: recent,
            keys: this.keys,
            length: matched.length
          }
        }));
        return;
      }

      if (konami === current.substr(-konami.length)) {
        this.dispatchEvent(new CustomEvent('complete', {
          detail: {
            matched: matched,
            recent: recent,
            keys: this.keys,
            length: matched.length
          }
        }));
      }
    }
  }]);

  return Sequence;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Sequence = Sequence;
  })();
});

require.register("curvature/mixin/EventTargetMixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventTargetMixin = void 0;

var _Mixin = require("../base/Mixin");

var _EventTargetMixin;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _EventTarget = Symbol('Target');

var EventTargetMixin = (_EventTargetMixin = {}, _defineProperty(_EventTargetMixin, _Mixin.Mixin.Constructor, function () {
  try {
    this[_EventTarget] = new EventTarget();
  } catch (error) {
    this[_EventTarget] = document.createDocumentFragment();
  }
}), _defineProperty(_EventTargetMixin, "dispatchEvent", function dispatchEvent() {
  var _this$_EventTarget;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var event = args[0];

  if (typeof event === 'string') {
    event = new CustomEvent(event);
    args[0] = event;
  }

  (_this$_EventTarget = this[_EventTarget]).dispatchEvent.apply(_this$_EventTarget, args);

  var defaultHandler = "on".concat(event.type[0].toUpperCase() + event.type.slice(1));

  if (typeof this[defaultHandler] === 'function') {
    this[defaultHandler](event);
  }

  return event.returnValue;
}), _defineProperty(_EventTargetMixin, "addEventListener", function addEventListener() {
  var _this$_EventTarget2;

  (_this$_EventTarget2 = this[_EventTarget]).addEventListener.apply(_this$_EventTarget2, arguments);
}), _defineProperty(_EventTargetMixin, "removeEventListener", function removeEventListener() {
  var _this$_EventTarget3;

  (_this$_EventTarget3 = this[_EventTarget]).removeEventListener.apply(_this$_EventTarget3, arguments);
}), _EventTargetMixin);
exports.EventTargetMixin = EventTargetMixin;
  })();
});

require.register("curvature/mixin/PromiseMixin.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromiseMixin = void 0;

var _Mixin = require("../base/Mixin");

var _PromiseMixin;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _Promise = Symbol('Promise');

var Accept = Symbol('Accept');
var Reject = Symbol('Reject');
var PromiseMixin = (_PromiseMixin = {}, _defineProperty(_PromiseMixin, _Mixin.Mixin.Constructor, function () {
  var _this = this;

  this[_Promise] = new Promise(function (accept, reject) {
    _this[Accept] = accept;
    _this[Reject] = reject;
  });
}), _defineProperty(_PromiseMixin, "then", function then() {
  var _this$_Promise;

  return (_this$_Promise = this[_Promise]).then.apply(_this$_Promise, arguments);
}), _defineProperty(_PromiseMixin, "catch", function _catch() {
  var _this$_Promise2;

  return (_this$_Promise2 = this[_Promise])["catch"].apply(_this$_Promise2, arguments);
}), _defineProperty(_PromiseMixin, "finally", function _finally() {
  var _this$_Promise3;

  return (_this$_Promise3 = this[_Promise])["finally"].apply(_this$_Promise3, arguments);
}), _PromiseMixin);
exports.PromiseMixin = PromiseMixin;
Object.defineProperty(PromiseMixin, 'Reject', {
  value: Reject
});
Object.defineProperty(PromiseMixin, 'Accept', {
  value: Accept
});
  })();
});

require.register("curvature/model/Database.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Database = void 0;

var _Bindable = require("../base/Bindable");

var _Mixin = require("../base/Mixin");

var _EventTargetMixin = require("../mixin/EventTargetMixin");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BeforeWrite = Symbol('BeforeWrite');
var AfterWrite = Symbol('AfterWrite');
var BeforeDelete = Symbol('BeforeDelete');
var AfterDelete = Symbol('AfterDelete');
var BeforeInsert = Symbol('BeforeInsert');
var AfterInsert = Symbol('AfterInsert');
var BeforeUpdate = Symbol('BeforeUpdate');
var AfterUpdate = Symbol('AfterUpdate');
var BeforeRead = Symbol('BeforeRead');
var AfterRead = Symbol('AfterRead');
var PrimaryKey = Symbol('PrimaryKey');
var Connection = Symbol('Connection');
var Instances = Symbol('Instances');
var HighWater = Symbol('HighWater');
var Metadata = Symbol('Metadata');
var Timers = Symbol('Timers');
var Target = Symbol('Target');
var Store = Symbol('Store');
var Fetch = Symbol('Each');
var Name = Symbol('Name');
var Bank = Symbol('Bank');

var Database = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Database, _Mixin$with);

  var _super = _createSuper(Database);

  function Database(connection) {
    var _this;

    _classCallCheck(this, Database);

    _this = _super.call(this);
    Object.defineProperty(_assertThisInitialized(_this), Connection, {
      value: connection
    });
    Object.defineProperty(_assertThisInitialized(_this), Name, {
      value: connection.name
    });
    Object.defineProperty(_assertThisInitialized(_this), Timers, {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), Metadata, {
      value: {}
    });
    Object.defineProperty(_assertThisInitialized(_this), Bank, {
      value: {}
    });
    return _this;
  }

  _createClass(Database, [{
    key: "select",
    value: function select(_ref) {
      var _this2 = this;

      var store = _ref.store,
          index = _ref.index,
          _ref$range = _ref.range,
          range = _ref$range === void 0 ? null : _ref$range,
          _ref$ranges = _ref.ranges,
          ranges = _ref$ranges === void 0 ? [] : _ref$ranges,
          _ref$direction = _ref.direction,
          direction = _ref$direction === void 0 ? 'next' : _ref$direction,
          _ref$limit = _ref.limit,
          limit = _ref$limit === void 0 ? 0 : _ref$limit,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? false : _ref$type,
          _ref$origin = _ref.origin,
          origin = _ref$origin === void 0 ? undefined : _ref$origin,
          _ref$map = _ref.map,
          map = _ref$map === void 0 ? undefined : _ref$map;
      var t = this[Connection].transaction(store, "readonly");
      var s = t.objectStore(store);
      var i = index ? s.index(index) : s;

      if (!ranges || !ranges.length) {
        ranges = [range];
      }

      return {
        each: this[Fetch](type, i, direction, ranges, limit, offset, origin, map),
        one: this[Fetch](type, i, direction, ranges, 1, offset, origin, map),
        then: function then(c) {
          return _this2[Fetch](type, i, direction, ranges, limit, offset, origin, map)(function (e) {
            return e;
          }).then(c);
        }
      };
    }
  }, {
    key: "insert",
    value: function insert(storeName, records) {
      var _this3 = this;

      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this[Bank][storeName] = this[Bank][storeName] || {};
      var trans = this[Connection].transaction([storeName], 'readwrite');
      var store = trans.objectStore(storeName);
      var bank = this[Bank][storeName];
      var list = true;

      if (!Array.isArray(records)) {
        records = [records];
        list = false;
      }

      var results = records.map(function (record) {
        return new Promise(function (accept, reject) {
          record = _Bindable.Bindable.make(record);
          var detail = {
            database: _this3[Name],
            record: record,
            store: storeName,
            type: 'write',
            subType: 'insert',
            origin: origin
          };
          var beforeWriteResult = record[Database.BeforeWrite] ? record[Database.BeforeWrite](detail) : null;
          var beforeInsertResult = record[Database.BeforeInsert] ? record[Database.BeforeInsert](detail) : null;
          var request = store.add(Object.assign({}, _Bindable.Bindable.shuck(record)));

          if (beforeWriteResult === false || beforeInsertResult === false) {
            return;
          }

          request.onerror = function (error) {
            _this3.dispatchEvent(new CustomEvent('writeError', {
              detail: detail
            }));

            reject(error);
          };

          request.onsuccess = function (event) {
            var pk = event.target.result;
            bank[pk] = record;
            var cancelable = true;
            detail.key = Database.getPrimaryKey(record);

            var eventResult = _this3.dispatchEvent(new CustomEvent('write', {
              cancelable: cancelable,
              detail: detail
            }));

            if (eventResult) {
              record[PrimaryKey] = Symbol["for"](pk);

              if (!_this3[Metadata][storeName]) {
                _this3[Metadata][storeName] = _this3.getStoreMeta(storeName, 'store', {});
              }

              if (_this3[Metadata][storeName]) {
                var currentHighMark = _this3.checkHighWaterMark(storeName, record);

                var currentLowMark = _this3.checkLowWaterMark(storeName, record);

                var metadata = _this3[Metadata][storeName];
                var recordMark = record[metadata.highWater];

                if (origin.setHighWater && currentHighMark < recordMark) {
                  _this3.setHighWaterMark(storeName, record, origin, 'insert');
                }

                if (origin.setLowWater && currentLowMark > recordMark) {
                  _this3.setLowWaterMark(storeName, record, origin, 'insert');
                }
              }

              record[Database.AfterInsert] && record[Database.AfterInsert](detail);
              record[Database.AfterWrite] && record[Database.AfterWrite](detail);
            } else {
              trans.abort();
            }

            accept(record);
          };
        });
      });
      var finalResult;

      if (list) {
        finalResult = Promise.allSettled(results);
      } else {
        finalResult = results[0];
      }

      Promise.all(results).then(function () {
        return trans.commit && trans.commit();
      });
      return finalResult;
    }
  }, {
    key: "update",
    value: function update(storeName, record) {
      var _this4 = this;

      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!record[PrimaryKey]) {
        throw Error('Value provided is not a DB record!');
      }

      return new Promise(function (accept, reject) {
        var trans = _this4[Connection].transaction([storeName], 'readwrite');

        var store = trans.objectStore(storeName);
        var detail = {
          database: _this4[Name],
          key: Database.getPrimaryKey(record),
          record: record,
          store: storeName,
          type: 'write',
          subType: 'update',
          origin: origin
        };
        record[Database.AfterInsert] && record[Database.AfterInsert](detail);
        record[Database.AfterWrite] && record[Database.AfterWrite](detail);
        var beforeWriteResult = record[Database.BeforeWrite] ? record[Database.BeforeWrite](detail) : null;
        var beforeUpdateResult = record[Database.BeforeUpdate] ? record[Database.BeforeUpdate](detail) : null;

        if (beforeWriteResult === false || beforeUpdateResult === false) {
          return;
        }

        var request = store.put(Object.assign({}, _Bindable.Bindable.shuck(record)));

        request.onerror = function (error) {
          _this4.dispatchEvent(new CustomEvent('writeError', {
            detail: detail
          }));

          reject(error);
        };

        request.onsuccess = function (event) {
          var cancelable = true;

          var eventResult = _this4.dispatchEvent(new CustomEvent('write', {
            cancelable: cancelable,
            detail: detail
          }));

          if (eventResult) {
            if (!_this4[Metadata][storeName]) {
              _this4[Metadata][storeName] = _this4.getStoreMeta(storeName, 'store', {});
            }

            if (_this4[Metadata][storeName]) {
              var currentHighMark = _this4.checkHighWaterMark(storeName, record);

              var currentLowMark = _this4.checkLowWaterMark(storeName, record);

              var metadata = _this4[Metadata][storeName];
              var recordMark = record[metadata.highWater];

              if (origin.setHighWater && currentHighMark < recordMark) {
                _this4.setHighWaterMark(storeName, record, origin, 'insert');
              }

              if (origin.setLowWater && currentLowMark > recordMark) {
                _this4.setLowWaterMark(storeName, record, origin, 'insert');
              }
            }

            trans.commit && trans.commit();
          } else {
            trans.abort();
          }

          accept(event);
        };
      });
    }
  }, {
    key: "delete",
    value: function _delete(storeName, record) {
      var _this5 = this;

      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

      if (!record[PrimaryKey]) {
        throw Error('Value provided is not a DB record!');
      }

      return new Promise(function (accept, reject) {
        var trans = _this5[Connection].transaction([storeName], 'readwrite');

        var store = trans.objectStore(storeName);
        var detail = {
          database: _this5[Name],
          record: record,
          key: Database.getPrimaryKey(record),
          store: storeName,
          type: 'write',
          subType: 'delete',
          origin: origin
        };
        var beforeDeleteResult = record[Database.BeforeDelete] ? record[Database.BeforeDelete](detail) : null;

        if (beforeDeleteResult === false) {
          return;
        }

        var request = store["delete"](record.id);
        record[PrimaryKey] = undefined;
        record[Database.AfterDelete] && record[Database.AfterDelete](detail);

        request.onerror = function (error) {
          detail.original = error;
          var deleteEvent = new CustomEvent('writeError', {
            detail: detail
          });

          _this5.dispatchEvent(deleteEvent);

          reject(error);
        };

        request.onsuccess = function (event) {
          detail.original = event;
          var writeEvent = new CustomEvent('write', {
            detail: detail
          });

          _this5.dispatchEvent(writeEvent);

          trans.commit && trans.commit();
          accept(writeEvent);
        };
      });
    }
  }, {
    key: "clear",
    value: function clear(storeName) {
      var _this6 = this;

      return new Promise(function (accept, reject) {
        var trans = _this6[Connection].transaction([storeName], 'readwrite');

        var store = trans.objectStore(storeName);
        var request = store.clear();
        var detail = {
          database: _this6[Name],
          store: storeName,
          type: 'write',
          subType: 'clear',
          origin: origin
        };

        request.onerror = function (error) {
          detail.original = error;
          var deleteEvent = new CustomEvent('writeError', {
            detail: detail
          });

          _this6.dispatchEvent(deleteEvent);

          reject(error);
        };

        request.onsuccess = function (event) {
          detail.original = event;
          var writeEvent = new CustomEvent('write', {
            detail: detail
          });

          _this6.dispatchEvent(writeEvent);

          trans.commit && trans.commit();
          accept(writeEvent);
        };
      });
    }
  }, {
    key: "listStores",
    value: function listStores() {
      return _toConsumableArray(this[Connection].objectStoreNames);
    }
  }, {
    key: "listIndexes",
    value: function listIndexes(storeName) {
      var trans = this[Connection].transaction([storeName]);
      var store = trans.objectStore(storeName);
      return _toConsumableArray(store.indexNames);
    }
  }, {
    key: Fetch,
    value: function value(type, index, direction, ranges, limit, offset, origin, map) {
      var _this7 = this;

      return function (callback) {
        return Promise.all(ranges.map(function (range) {
          return new Promise(function (accept, reject) {
            var request = index.openCursor(range, direction);
            var i = 0;

            var resultHandler = function resultHandler(event) {
              var cursor = event.target.result;

              if (!cursor) {
                return accept({
                  record: null,
                  result: null,
                  index: i
                });
              }

              _this7[Bank][storeName] = _this7[Bank][storeName] || {};
              var bank = _this7[Bank][storeName];
              var pk = cursor.primaryKey;
              var value = type ? type.from(cursor.value) : cursor.value;

              var bindableValue = _Bindable.Bindable.makeBindable(value);

              var detail = {
                database: _this7[Name],
                key: Database.getPrimaryKey(bindableValue),
                record: value,
                store: index.name,
                type: 'read',
                subType: 'select',
                origin: origin
              };
              var beforeReadResult = value[Database.BeforeRead] ? value[Database.BeforeRead](detail) : null;

              if (offset > i++ || beforeReadResult === false) {
                return cursor["continue"]();
              }

              if (bank[pk]) {
                Object.assign(bank[pk], value);
              } else {
                value[PrimaryKey] = Symbol["for"](pk);
                bank[pk] = value;
              }

              var source = cursor.source;
              var storeName = source.objectStore ? source.objectStore.name : index.name;
              detail.record = value;
              bank[pk][Database.AfterRead] && bank[pk][Database.AfterRead](detail);
              var cancelable = true;

              var eventResult = _this7.dispatchEvent(new CustomEvent('read', {
                detail: detail,
                cancelable: cancelable
              }));

              if (eventResult) {
                var record = type ? type.from(bank[pk]) : bank[pk];
                record[PrimaryKey] = Symbol["for"](pk);
                var mapped = map ? map(record) : record;
                var result = callback ? callback(mapped, i) : mapped;

                if (limit && i - offset >= limit) {
                  offset += limit;
                  return accept({
                    mapped: mapped,
                    result: result,
                    index: i
                  });
                }
              }

              cursor["continue"]();
            };

            request.addEventListener('success', resultHandler);
          });
        })).then(function (results) {
          if (results.length === 1) {
            return results[0];
          }

          return results;
        });
      };
    }
  }, {
    key: "setStoreMeta",
    value: function setStoreMeta(storeName, key, value) {
      localStorage.setItem("::::cvdb::".concat(storeName, "::").concat(key), JSON.stringify(value));
    }
  }, {
    key: "getStoreMeta",
    value: function getStoreMeta(storeName, key) {
      var notFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var source = localStorage.getItem("::::cvdb::".concat(storeName, "::").concat(key));
      var value = source !== null ? JSON.parse(source) : notFound;

      if (value === null) {
        return notFound;
      }

      return value;
    }
  }, {
    key: "createObjectStore",
    value: function createObjectStore(storeName, options) {
      var eventLog = this[Connection].createObjectStore(storeName, options);
      this.setStoreMeta(storeName, 'store', options);
      return eventLog;
    }
  }, {
    key: "deleteObjectStore",
    value: function deleteObjectStore(storeName) {
      return this[Connection].deleteObjectStore(storeName);
    }
  }, {
    key: "checkHighWaterMark",
    value: function checkHighWaterMark(storeName, record) {
      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var currentMark = this.getStoreMeta(storeName, 'highWater', 0);
      return currentMark;
    }
  }, {
    key: "setHighWaterMark",
    value: function setHighWaterMark(storeName, record) {
      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var subType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var metadata = this[Metadata][storeName];
      var recordMark = record[metadata.highWater];
      var currentMark = this.getStoreMeta(storeName, 'highWater', 0);
      this.setStoreMeta(storeName, 'highWater', recordMark);
      this.dispatchEvent(new CustomEvent('highWaterMoved', {
        detail: {
          database: this[Name],
          record: record,
          store: storeName,
          type: 'highWaterMoved',
          subType: subType,
          origin: origin,
          oldValue: currentMark,
          value: recordMark
        }
      }));
    }
  }, {
    key: "checkLowWaterMark",
    value: function checkLowWaterMark(storeName, record) {
      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var currentMark = this.getStoreMeta(storeName, 'lowWater', Infinity);
      return currentMark;
    }
  }, {
    key: "setLowWaterMark",
    value: function setLowWaterMark(storeName, record) {
      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var subType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var metadata = this[Metadata][storeName];
      var recordMark = record[metadata.highWater];
      var currentMark = this.getStoreMeta(storeName, 'lowWater', null);
      this.setStoreMeta(storeName, 'lowWater', recordMark);
      this.dispatchEvent(new CustomEvent('lowWaterMoved', {
        detail: {
          database: this[Name],
          record: record,
          store: storeName,
          type: 'lowWaterMoved',
          subType: subType,
          origin: origin,
          oldValue: currentMark,
          value: recordMark
        }
      }));
    }
  }], [{
    key: "open",
    value: function open(dbName) {
      var _this8 = this;

      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this[Instances][dbName]) {
        return this[Instances][dbName];
      }

      return this[Instances][dbName] = new Promise(function (accept, reject) {
        var request = indexedDB.open(dbName, version);

        request.onerror = function (error) {
          Database.dispatchEvent(new CustomEvent('error', {
            detail: {
              database: _this8[Name],
              error: error,
              store: undefined,
              type: 'read',
              subType: 'select'
            }
          }));
          reject(error);
        };

        request.onsuccess = function (event) {
          var instance = new _this8(event.target.result);
          accept(instance);
        };

        request.onupgradeneeded = function (event) {
          var connection = event.target.result;
          connection.addEventListener('error', function (error) {
            return console.error(error);
          });
          var instance = new _this8(connection);

          for (var v = event.oldVersion + 1; v <= version; v += 1) {
            instance['_version_' + v](connection);
          }
        };
      });
    }
  }, {
    key: "getPrimaryKey",
    value: function getPrimaryKey(record) {
      return record[PrimaryKey] ? record[PrimaryKey] : null;
    }
  }, {
    key: "destroyDatabase",
    value: function destroyDatabase() {
      var _this9 = this;

      return new Promise(function (accept, reject) {
        var request = indexedDB["delete"](dbName);

        request.onerror = function (error) {
          Database.dispatchEvent(new CustomEvent('error', {
            detail: {
              database: dbName,
              error: error,
              type: 'destroy'
            }
          }));
          reject(error);
        };

        request.onsuccess = function (event) {
          delete _this9[Instances][dbName];
          accept(dbName);
        };
      });
    }
  }]);

  return Database;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Database = Database;
Object.defineProperty(Database, Instances, {
  value: []
});
Object.defineProperty(Database, Target, {
  value: document.createDocumentFragment()
});
Object.defineProperty(Database, 'BeforeDelete', {
  value: BeforeDelete
});
Object.defineProperty(Database, 'AfterDelete', {
  value: AfterDelete
});
Object.defineProperty(Database, 'BeforeWrite', {
  value: BeforeWrite
});
Object.defineProperty(Database, 'AfterWrite', {
  value: AfterWrite
});
Object.defineProperty(Database, 'BeforeInsert', {
  value: BeforeInsert
});
Object.defineProperty(Database, 'AfterInsert', {
  value: AfterInsert
});
Object.defineProperty(Database, 'BeforeUpdate', {
  value: BeforeUpdate
});
Object.defineProperty(Database, 'AfterUpdate', {
  value: AfterUpdate
});
Object.defineProperty(Database, 'BeforeRead', {
  value: BeforeRead
});
Object.defineProperty(Database, 'AfterRead', {
  value: AfterRead
});
Object.defineProperty(Database, 'PKSymbol', {
  value: PrimaryKey
});

var _loop = function _loop(method) {
  Object.defineProperty(Database, method, {
    value: function value() {
      var _Database$Target;

      return (_Database$Target = Database[Target])[method].apply(_Database$Target, arguments);
    }
  });
};

for (var method in ['addEventListener', 'removeEventListener', 'dispatchEvent']) {
  _loop(method);
}
  })();
});

require.register("curvature/net/Elicit.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "curvature");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Elicit = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

var _PromiseMixin = require("curvature/mixin/PromiseMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var IterateDownload = Symbol('IterateDownload');
var Retry = Symbol('Retry');
var HandleFirstByte = Symbol('HandleFirstByte');
var HandleProgress = Symbol('HandleProgress');
var HandleComplete = Symbol('HandleComplete');
var HandleHeaders = Symbol('HandleHeaders');
var HandleClose = Symbol('HandleClose');
var HandleError = Symbol('HandleError');
var HandleOpen = Symbol('HandleOpen');
var HandleFail = Symbol('HandleFail');
var LastChunkSize = Symbol('LastChunkSize');
var LastChunkTime = Symbol('LastChunkTime');
var Options = Symbol('Options');
var Fetch = Symbol('Fetch');
var Type = Symbol('Type');
var Url = Symbol('Url');
var RetriesLeft = Symbol('RetriesLeft');
var TimeoutLeft = Symbol('TimeoutLeft');
var Timeout = Symbol('Timeout');
var Timer = Symbol('Timer');
var Canceller = Symbol('Canecller');
var Cancelled = Symbol('Caneclled');
var Paused = Symbol('Paused');
var Received = Symbol('Received');
var Length = Symbol('Length');
var Opened = Symbol('Opened');
var Closed = Symbol('Closed');
var Start = Symbol('Start');
var First = Symbol('First');
var End = Symbol('End');

var Elicit = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Elicit, _Mixin$with);

  var _super = _createSuper(Elicit);

  function Elicit(url) {
    var _this2;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Elicit);

    _this2 = _super.call(this);
    _this2[RetriesLeft] = options.retries || 5;
    _this2[Timeout] = options.timeout || 4500;
    _this2[TimeoutLeft] = options.maxTimeout || _this2[Timeout] * _this2[RetriesLeft];
    _this2[LastChunkTime] = 0;
    _this2[LastChunkSize] = 0;
    _this2[Cancelled] = false;
    _this2[Received] = 0;
    _this2[Paused] = false;
    _this2[Closed] = 0;
    _this2[Options] = Object.assign({}, options);
    _this2[Url] = url;

    if (!options.defer) {
      _this2.open();
    }

    return _this2;
  }

  _createClass(Elicit, [{
    key: "open",
    value: function open() {
      var _this3 = this;

      if (this[Opened] && !this[Closed]) {
        return;
      }

      if (!this[Start]) {
        this[Start] = Date.now();
      }

      this[Canceller] = new AbortController();
      this[Options].signal = this[Canceller].signal;
      this[Opened] = Date.now();
      this[Closed] = 0;
      this[First] = 0;
      this[Fetch] = fetch(this[Url], this[Options]).then(function (response) {
        return _this3[HandleOpen](response);
      })["catch"](function (error) {
        return _this3[HandleError](error);
      });

      var onTimeout = function onTimeout() {
        if (!_this3[First]) {
          _this3[Canceller].abort();

          _this3[HandleClose]();

          _this3[TimeoutLeft] = Math.max(0, _this3[TimeoutLeft] - _this3[Timeout]);

          if (!_this3[TimeoutLeft]) {
            return;
          }

          _this3[HandleFail](new Error('Timed out.'));
        }
      };

      this[Timer] = setTimeout(onTimeout, this[Timeout]);
    }
  }, {
    key: "headers",
    value: function headers() {
      return this[Fetch].then(function (_ref) {
        var response = _ref.response,
            stream = _ref.stream;
        return response.headers;
      });
    }
  }, {
    key: "json",
    value: function json() {
      var _this4 = this;

      return this[Fetch].then(function (_ref2) {
        var response = _ref2.response,
            stream = _ref2.stream;
        var wrapped = new Response(stream, {
          headers: {
            'Content-Type': _this4.type
          }
        });
        return wrapped.json();
      });
    }
  }, {
    key: "text",
    value: function text() {
      var _this5 = this;

      return this[Fetch].then(function (_ref3) {
        var response = _ref3.response,
            stream = _ref3.stream;
        var wrapped = new Response(stream, {
          headers: {
            'Content-Type': _this5.type
          }
        });
        return wrapped.text();
      });
    }
  }, {
    key: "css",
    value: function css() {
      return this.text().then(function (css) {
        var sheet = new CSSStyleSheet();
        sheet.replace(css);
        return sheet;
      });
    }
  }, {
    key: "blob",
    value: function blob() {
      var _this6 = this;

      return this[Fetch].then(function (_ref4) {
        var response = _ref4.response,
            stream = _ref4.stream;
        var wrapped = new Response(stream, {
          headers: {
            'Content-Type': _this6.type
          }
        });
        return wrapped.blob();
      });
    }
  }, {
    key: "buffer",
    value: function buffer() {
      return this.blob().then(function (blob) {
        return blob.arrayBuffer();
      });
    }
  }, {
    key: "bytes",
    value: function bytes() {
      return this.buffer().then(function (buffer) {
        return new Uint8Array(buffer);
      });
    }
  }, {
    key: "objectUrl",
    value: function objectUrl() {
      return this.blob().then(function (blob) {
        return URL.createObjectURL(blob);
      });
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (!this.emitCancelEvent()) {
        return;
      }

      this[Canceller].abort();
      this[Cancelled] = true;
      this.emitCancelledEvent();
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this[End] || this[Paused] || this[Closed]) {
        return;
      }

      if (!this.emitPauseEvent()) {
        return;
      }

      this[Paused] = true;
      this.emitPausedEvent();
    }
  }, {
    key: "unpause",
    value: function unpause() {
      if (this[End] || !this[Paused]) {
        return;
      }

      if (!this.emitUnpauseEvent()) {
        return;
      }

      this[Paused] = false;
      this.emitUnpausedEvent();
    }
  }, {
    key: "done",
    get: function get() {
      return !!this[End];
    }
  }, {
    key: "type",
    get: function get() {
      return this[Type];
    }
  }, {
    key: "totalTime",
    get: function get() {
      if (!this[End]) {
        return Date.now() - this[Start];
      }

      return this[End] - this[Start];
    }
  }, {
    key: "waitTime",
    get: function get() {
      if (!this[First]) {
        return Date.now() - this[Opened];
      }

      return this[First] - this[Opened];
    }
  }, {
    key: "loadTime",
    get: function get() {
      if (!this[Opened]) {
        return 0;
      }

      if (!this[Closed]) {
        return Date.now() - this[First];
      }

      return this[Closed] - this[First];
    }
  }, {
    key: "speed",
    get: function get() {
      if (!this[Opened]) {
        return 0;
      }

      var time;

      if (this[End]) {
        time = this[End] - this[LastChunkTime];
      } else {
        time = Date.now() - this[LastChunkTime];
      }

      if (!time) {
        time = 0.01;
      }

      return this[LastChunkSize] / time;
    }
  }, {
    key: "received",
    get: function get() {
      return this[Received];
    }
  }, {
    key: "length",
    get: function get() {
      return this[Length];
    }
  }, {
    key: "isPaused",
    get: function get() {
      return this[Paused];
    }
  }, {
    key: IterateDownload,
    value: function value(reader, controller, length) {
      var _this7 = this;

      this[HandleProgress](length, 0);
      var lastTime = Date.now();
      var lastSize = 1;

      var handleChunk = function handleChunk(_ref5) {
        var done = _ref5.done,
            value = _ref5.value;

        if (done) {
          controller.close();
          return _this7[HandleComplete]();
        }

        controller.enqueue(value);
        _this7[Received] += value.length;

        if (!_this7[First]) {
          _this7[HandleFirstByte](value);
        }

        _this7[HandleProgress](length, _this7[Received]);

        _this7[LastChunkTime] = lastTime;
        _this7[LastChunkSize] = lastSize;
        lastTime = Date.now();
        lastSize = value.length;
        return iterate();
      };

      var iterate = function iterate() {
        if (_this7[Cancelled]) {
          return reader.cancel();
        }

        if (_this7[Paused]) {
          return new Promise(function (accept) {
            setTimeout(function () {
              return accept(iterate());
            }, 100);
          });
        }

        return reader.read().then(function (chunk) {
          return handleChunk(chunk);
        })["catch"](function (error) {
          return _this7[HandleError](error);
        });
      };

      return iterate();
    }
  }, {
    key: Retry,
    value: function value() {
      if (!this.emitRetryEvent()) {
        return;
      }

      if (this[RetriesLeft] <= 0) {
        return;
      }

      this[Canceller].abort();
      this[HandleClose]();
      this[Received] = 0;
      this[RetriesLeft]--;
      return this.open();
    }
  }, {
    key: HandleOpen,
    value: function value(response) {
      var reader = response.body.getReader();
      var length = this[Length] || response.headers.get('Content-Length');
      var type = this[type] || response.headers.get('Content-Type');
      this[Length] = length;
      this[Type] = type;
      this[HandleHeaders](response.headers);

      var _this = this;

      var stream = new ReadableStream({
        start: function start(controller) {
          _this[IterateDownload](reader, controller, length);
        }
      });
      return {
        response: response,
        stream: stream
      };
    }
  }, {
    key: HandleClose,
    value: function value() {
      this[Closed] = Date.now();
      this.emitCloseEvent();
    }
  }, {
    key: HandleHeaders,
    value: function value(headers) {
      this.emitHeadersEvent(headers);
    }
  }, {
    key: HandleProgress,
    value: function value(length, received) {
      this.emitProgressEvent(length, received);
    }
  }, {
    key: HandleComplete,
    value: function value() {
      this[End] = Date.now();
      this[HandleClose]();
      this.emitCompleteEvent();

      this[_PromiseMixin.PromiseMixin.Accept]();
    }
  }, {
    key: HandleError,
    value: function value(error) {
      console.warn(error);

      if (!this.emitErrorEvent(error)) {
        return this[Retry]();
      }

      return this[HandleFail](error);
    }
  }, {
    key: HandleFail,
    value: function value(error) {
      this[End] = Date.now();
      this[HandleClose]();
      this.emitFailEvent(error);
      return this[_PromiseMixin.PromiseMixin.Reject](error);
    }
  }, {
    key: HandleFirstByte,
    value: function value(received) {
      clearInterval(this[Timer]);
      this[First] = Date.now();
      this.emitFirstByteEvent(received);
    }
  }, {
    key: "emitProgressEvent",
    value: function emitProgressEvent(length, received) {
      var done = length ? received / length : 0;
      var totalTime = this.totalTime;
      var loadTime = this.loadTime;
      var waitTime = this.waitTime;
      var speed = this.speed;
      return this.dispatchEvent(new CustomEvent('progress', {
        detail: {
          length: length,
          received: received,
          done: done,
          speed: speed,
          loadTime: loadTime,
          waitTime: waitTime,
          totalTime: totalTime
        }
      }));
    }
  }, {
    key: "emitOpenEvent",
    value: function emitOpenEvent() {
      return this.dispatchEvent(new CustomEvent('open'));
    }
  }, {
    key: "emitCloseEvent",
    value: function emitCloseEvent() {
      return this.dispatchEvent(new CustomEvent('close'));
    }
  }, {
    key: "emitFirstByteEvent",
    value: function emitFirstByteEvent(received) {
      return this.dispatchEvent(new CustomEvent('firstByte', {
        detail: {
          received: received
        }
      }));
    }
  }, {
    key: "emitHeadersEvent",
    value: function emitHeadersEvent(headers) {
      return this.dispatchEvent(new CustomEvent('headers', {
        detail: {
          headers: headers
        }
      }));
    }
  }, {
    key: "emitCompleteEvent",
    value: function emitCompleteEvent() {
      return this.dispatchEvent(new CustomEvent('complete'));
    }
  }, {
    key: "emitErrorEvent",
    value: function emitErrorEvent() {
      return this.dispatchEvent(new CustomEvent('error', {
        cancelable: this[RetriesLeft] > 0
      }));
    }
  }, {
    key: "emitRetryEvent",
    value: function emitRetryEvent() {
      return this.dispatchEvent(new CustomEvent('retry', {
        cancelable: true
      }));
    }
  }, {
    key: "emitFailEvent",
    value: function emitFailEvent() {
      return this.dispatchEvent(new CustomEvent('fail'));
    }
  }, {
    key: "emitPauseEvent",
    value: function emitPauseEvent() {
      return this.dispatchEvent(new CustomEvent('pause', {
        cancelable: true
      }));
    }
  }, {
    key: "emitPausedEvent",
    value: function emitPausedEvent() {
      this.dispatchEvent(new CustomEvent('paused'));
    }
  }, {
    key: "emitUnpauseEvent",
    value: function emitUnpauseEvent() {
      return this.dispatchEvent(new CustomEvent('unpause', {
        cancelable: true
      }));
    }
  }, {
    key: "emitUnpausedEvent",
    value: function emitUnpausedEvent() {
      this.dispatchEvent(new CustomEvent('unpaused'));
    }
  }, {
    key: "emitCancelEvent",
    value: function emitCancelEvent() {
      return this.dispatchEvent(new CustomEvent('cancel', {
        cancelable: true
      }));
    }
  }, {
    key: "emitCancelledEvent",
    value: function emitCancelledEvent() {
      return this.dispatchEvent(new CustomEvent('cancelled'));
    }
  }]);

  return Elicit;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin, _PromiseMixin.PromiseMixin)); // elicit.addEventListener('open', event => console.log(event));
// elicit.addEventListener('close', event => console.log(event));
// elicit.addEventListener('firstByte', event => console.log(event));
// elicit.addEventListener('headers', event => console.log(event));
// elicit.addEventListener('complete', event => console.log(event));
// elicit.addEventListener('error', event => console.log(event));
// elicit.addEventListener('fail', event => console.log(event));
// elicit.addEventListener('pause', event => console.log(event));
// elicit.addEventListener('paused', event => console.log(event));
// elicit.addEventListener('unpause', event => console.log(event));
// elicit.addEventListener('unpaused', event => console.log(event));
// elicit.addEventListener('cancelled', event => console.log(event));
// elicit.addEventListener('cancel', event => console.log(event));


exports.Elicit = Elicit;
  })();
});

require.register("sixgram/Actions.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "sixgram");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HOME = exports.LEAVE = exports.ENTER = exports.INSERT = exports.IGNORE = void 0;
var IGNORE = 0;
exports.IGNORE = IGNORE;
var INSERT = 1;
exports.INSERT = INSERT;
var ENTER = 2;
exports.ENTER = ENTER;
var LEAVE = 3;
exports.LEAVE = LEAVE;
var HOME = 4;
exports.HOME = HOME;
  })();
});

require.register("sixgram/Chunk.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "sixgram");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chunk = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Chunk = function Chunk() {
  _classCallCheck(this, Chunk);

  this.depth = 0;
  this.match = null;
  this.type = 'normal';
  this.list = [];
};

exports.Chunk = Chunk;
  })();
});

require.register("sixgram/Parser.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "sixgram");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;

var _Chunk = require("./Chunk");

var _Actions = require("./Actions");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Parser = /*#__PURE__*/function () {
  function Parser(tokens, modes) {
    _classCallCheck(this, Parser);

    this.tokens = tokens || {};
    this.modes = modes || {};
  }

  _createClass(Parser, [{
    key: "parse",
    value: function parse(source) {
      this.index = 0;
      this.mode = 'normal';
      this.stack = [];

      if (!(this.mode in this.modes)) {
        throw new Error("Mode ".concat(this.mode, " does not exist on parser."), this);
      }

      var chunk = new _Chunk.Chunk();
      var mode = this.modes[this.mode];
      chunk.type = this.mode;

      while (this.index < source.length) {
        var matched = false;

        for (var tokenName in mode) {
          var token = this.tokens[tokenName];
          var search = token.exec(source.substr(this.index));

          if (!search || search.index > 0) {
            continue;
          }

          if (!mode[tokenName]) {
            throw new Error("Invalid token type \"".concat(tokenName, "\" found in mode \"").concat(this.mode, "\"."));
            continue;
          }

          var value = search[0];
          var actions = _typeof(mode[tokenName]) === 'object' ? mode[tokenName] : [mode[tokenName]];
          matched = true;
          this.index += value.length;
          var type = 'normal';

          for (var i in actions) {
            var action = actions[i];

            if (typeof action === 'string') {
              if (!(action in this.modes)) {
                throw new Error("Mode \"".concat(action, "\" does not exist."));
              }

              this.mode = action;
              mode = this.modes[this.mode];
              type = action;
              continue;
            }

            switch (action) {
              case _Actions.INSERT:
                chunk.list.push(value);
                break;

              case _Actions.ENTER:
                var newChunk = new _Chunk.Chunk();
                newChunk.depth = chunk.depth + 1;
                newChunk.match = value;
                newChunk.groups = _toConsumableArray(value.match(token)).slice(1);
                newChunk.mode = type;
                newChunk.type = tokenName;
                chunk.list.push(newChunk);
                this.stack.push(chunk);
                chunk = newChunk; // this.mode = chunk.type;

                break;

              case _Actions.LEAVE:
                if (!this.stack.length) {// throw new Warning(`Already at the top of the stack.`)
                } else {
                  chunk = this.stack.pop();
                  this.mode = chunk.type;
                  mode = this.modes[this.mode];
                }

                break;

              case _Actions.HOME:
                this.stack.splice(0);
                mode = this.modes['normal'];
                break;
            }
          }

          break;
        }

        if (!matched) {
          break;
        }
      }

      if (this.stack.length) {
        throw new Error('Did not return to top of stack!');
      }

      return this.stack.shift() || chunk;
    }
  }]);

  return Parser;
}();

exports.Parser = Parser;
  })();
});

require.register("sixgram/Renderer.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "sixgram");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Renderer = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Renderer = /*#__PURE__*/function () {
  function Renderer(ops) {
    _classCallCheck(this, Renderer);

    this.ops = ops || {};
  }

  _createClass(Renderer, [{
    key: "process",
    value: function process(tree) {
      var output = '';

      for (var i in tree.list) {
        var chunk = tree.list[i];

        if (this.ops[tree.type]) {
          var processed = this.ops[tree.type](chunk, tree);

          if (processed !== false) {
            output += processed;
          }
        } else if (chunk !== false) {
          output += chunk;
        }
      }

      return output;
    }
  }]);

  return Renderer;
}();

exports.Renderer = Renderer;
  })();
});

require.register("subspace-console/Console.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Console = void 0;

var _View2 = require("curvature/base/View");

var _Bag = require("curvature/base/Bag");

var _MeltingText = require("./view/MeltingText");

var _EchoMessage = require("./view/EchoMessage");

var _Task = require("./Task");

var _Path = require("./Path");

var _Renderer = require("./ansi/Renderer");

var _Parser = require("./ansi/Parser");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Console = /*#__PURE__*/function (_View) {
  _inherits(Console, _View);

  var _super = _createSuper(Console);

  function Console() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Console);

    _this = _super.call(this, args);
    var defaults = {
      init: false,
      path: _Path.Path
    };
    var allOptions = Object.assign({}, defaults, options);
    _this.template = "<div class = \"terminal [[inverted]]\" cv-on = \"click:focus(event);:keydown(event):c;:keyup(event)c\">\n\t<div class = \"output\" cv-each = \"output:line:l\" cv-ref = \"output:curvature/base/Tag\">\n\t\t<p>[[line]]</p>\n\t</div>\n\t<div class = \"bottom\">\n\t\t<div>[[prompt]]&nbsp;</div>\n\t\t<div>\n\t\t\t<form cv-on = \"submit:cancel(event)\">\n\t\t\t\t<textarea\n\t\t\t\t\tcv-bind = \"input\"\n\t\t\t\t\tcv-ref  = \"input:curvature/base/Tag\"\n\t\t\t\t\trow     = \"1\"\n\t\t\t\t></textarea>\n\t\t\t</form>\n\n\t\t\t<form cv-on = \"submit:cancel(event)\">\n\t\t\t\t<input\n\t\t\t\t\tautocomplete = \"one-time-code\"\n\t\t\t\t\tname    = \"pw-input\"\n\t\t\t\t\ttype    = \"password\"\n\t\t\t\t\tcv-bind = \"input\"\n\t\t\t\t\tcv-ref  = \"password:curvature/base/Tag\"\n\t\t\t\t/>\n\t\t\t</form>\n\n\t\t\t<input\n\t\t\t\tcv-on  = \"input:fileLoaded(event)\"\n\t\t\t\tcv-ref = \"file:curvature/base/Tag\"\n\t\t\t\tname   = \"file-input\"\n\t\t\t\ttype   = \"file\"\n\t\t\t\tstyle  = \"display: none\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n</div>\n\n<div class = \"scanlines\"></div>\n";
    _this.args.input = '';
    _this.args.output = [];
    _this.args.inverted = '';
    _this.localEcho = true;
    _this.postToken = null;
    _this.args.prompt = '::';
    _this.routes = {};
    _this.args.passwordMode = false;
    _this.tasks = [];
    _this.taskList = new _Bag.Bag();
    _this.taskList.type = _Task.Task;
    _this.max = 10;
    _this.historyCursor = -1;
    _this.history = [];
    _this.env = new Map();

    _this.args.output.___after(function (t, k, o, a) {
      if (k !== 'push') {
        return;
      }

      _this.onNextFrame(function () {
        return _this.scrollToBottom();
      });
    });

    if (allOptions.init) {
      _this.runScript(allOptions.init);
    }

    _this.scroller = allOptions.scroller || document.body;
    _this.path = allOptions.path || {};
    _this.originalInput = '';
    return _this;
  }

  _createClass(Console, [{
    key: "runCommand",
    value: function runCommand(command) {
      var _this2 = this;

      if (this.historyCursor != 0) {
        this.history.unshift(command);
      }

      return new Promise(function (accept) {
        var task;

        if (command.substring(0, 1) === '/') {
          if (!_this2.args.passwordMode) {
            var output = new _EchoMessage.EchoMessage({
              message: command
            });

            _this2.args.output.push(output);
          }

          var unescaped = _this2.unescape(command.substr(1));

          task = _this2.interpret(unescaped);
        } else if (_this2.tasks.length) {
          if (!_this2.args.passwordMode) {
            var _output = new _EchoMessage.EchoMessage({
              message: command,
              prompt: _this2.tasks[0].prompt
            });

            _this2.args.output.push(_output);
          }

          var _unescaped = _this2.unescape(command);

          task = _this2.tasks[0].write(_unescaped) || Promise.resolve();
        } else {
          if (!_this2.args.passwordMode) {
            _this2.args.output.push(":: ".concat(command));
          }

          var _unescaped2 = _this2.unescape(command);

          task = _this2.interpret(_unescaped2);
        }

        if (!(task instanceof _Task.Task) && !(task instanceof Promise)) {
          task = Promise.resolve(task);

          _this2.args.output.push(":: ".concat(command));
        }

        _this2.historyCursor = -1;
        _this2.originalInput = _this2.args.input = '';
        task.then(function (result) {
          return accept(result);
        });
      })["catch"](function (error) {
        _this2.args.output.push("Unexpected error: ".concat(error));
      });
    }
  }, {
    key: "runScript",
    value: function runScript(url) {
      var _this3 = this;

      fetch(url + '?api=txt').then(function (response) {
        return response.text();
      }).then(function (init) {
        var lines = init.split("\n");

        var process = function process(lines) {
          if (!lines.length) {
            return;
          }

          var line = lines.shift();

          if (line && line[0] == '!') {
            _this3.args.output.push(line.substring(1));

            process(lines);
          } else if (line) {
            _this3.runCommand(line).then(function () {
              return process(lines);
            });
          } else {
            process(lines);
          }
        };

        process(lines);
      });
    }
  }, {
    key: "postRender",
    value: function postRender() {
      var _this4 = this;

      var inputBox = this.tags.input.element;
      var passwordBox = this.tags.password.element;
      this.args.bindTo('input', function (v) {// inputBox.style.height = 'auto';
        // inputBox.style.height = inputBox.scrollHeight + 'px';
      }, {
        frame: 1
      });
      this.args.bindTo('passwordMode', function (v) {
        if (v) {
          inputBox.style.display = 'none';
          passwordBox.style.display = 'unset';
        } else {
          inputBox.style.display = 'unset';
          passwordBox.style.display = 'none';
        }
      });
      this.args.bindTo('passwordMode', function (v) {
        _this4.focus(null, v);
      }, {
        frame: 1
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var passwordMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (event) {
        event.preventDefault();
      }

      if (event && event.target && event.target.matches('input,textarea')) {
        return;
      }

      if (window.getSelection().toString()) {
        return;
      }

      if (passwordMode || this.args.passwordMode) {
        this.tags.password.element.focus();
        return;
      }

      this.tags.input.element.focus();
    }
  }, {
    key: "interpret",
    value: function interpret(input) {
      var _this5 = this;

      this.historyCursor = -1;
      var expressions = input.split(/\s*\;\s*/);
      var lastTask = null;

      var _iterator = _createForOfIteratorHelper(expressions),
          _step;

      try {
        var _loop = function _loop() {
          var expression = _step.value;

          var task = _this5.pipe(expression.split(/\s*\|\s*/));

          if (task) {
            _this5.tasks.unshift(task);

            var output = function output(event) {
              var line = event.detail;

              if (_typeof(line) === 'object') {
                _this5.args.output.push(line);
              } else {
                var prompt = task.outPrompt || task.prompt || _this5.args.prompt || '::';

                var rendered = _this5.parseAnsi(line, prompt);

                _this5.args.output.push(rendered);
              }
            };

            var error = function error(event) {
              console.error(event);
              var line = event.detail;
              var errorPrompt = task.errorPrompt || '!!';

              var rendered = _this5.parseAnsi(line, errorPrompt);

              _this5.args.output.push(rendered);
            };

            task.addEventListener('output', output);
            task.addEventListener('error', error);
            task.execute();
            task["catch"](function (error) {
              return console.error(error);
            });
            task["catch"](function (error) {
              return _this5.args.output.push("!! ".concat(error));
            });
            _this5.args.prompt = task.prompt;
            task["finally"](function (done) {
              task.removeEventListener('error', error);
              task.removeEventListener('output', output);

              _this5.tasks.shift();

              if (_this5.tasks.length) {
                _this5.args.prompt = _this5.tasks[0].prompt;
              } else {
                _this5.args.prompt = '::';
              }
            });
          }

          lastTask = task;
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return lastTask;
    }
  }, {
    key: "pipe",
    value: function pipe(commands, previousTask) {
      var task = null;
      var commandString = commands.shift();
      var args = commandString.trim().split(' ');
      var command = args.shift().trim();

      if (command.length > 1 && command.substr(-1) == "?") {
        command = command.substr(0, command.length - 1);

        if (command in this.path) {
          this.args.output.push("?? ".concat(this.path[command].helpText));
          this.args.output.push("?? ".concat(this.path[command].useText));
        }

        return;
      }

      if (command in this.path) {
        var cmdClass = this.path[command];
        task = new cmdClass(args, previousTask, this);
      } else {
        switch (command) {
          case 'clear':
            this.args.output.splice(0);
            break;

          case 'z':
            this.args.output.splice(0);
            this.args.output.push(new _MeltingText.MeltingText({
              input: '!!!'
            }));
            break;

          case 'commands':
          case '?':
            this.args.output.push("   Subspace Console 0.29a \xA92018-2021 Sean Morris");

            for (var cmd in this.path) {
              this.args.output.push(" * ".concat(cmd, " - ").concat(this.path[cmd].helpText));
              this.path[cmd].useText && this.args.output.push("   ".concat(this.path[cmd].useText));
              this.args.output.push("  ");
            }

            break;

          default:
            this.args.output.push("!! Bad command: ".concat(command));
        }
      }

      if (commands.length) {
        return this.pipe(commands, task);
      }

      return task;
    }
  }, {
    key: "keydown",
    value: function keydown(event, autocomplete) {
      switch (event.key) {
        case 'Tab':
          if (autocomplete) {
            break;
          }

          event.preventDefault();
          break;

        case 'Enter':
          if (!event.ctrlKey) {
            event.preventDefault();
          }

          break;
      }
    }
  }, {
    key: "keyup",
    value: function keyup(event, autocomplete) {
      var _this6 = this;

      switch (event.key) {
        case 'ArrowDown':
          {
            this.onNextFrame(function () {
              return _this6.scrollToBottom();
            });
            this.historyCursor--;

            if (this.historyCursor <= -1) {
              this.historyCursor = -1;
              this.args.input = this.originalInput;
              return;
            }

            this.args.input = this.history[this.historyCursor];
            var element = this.tags.input.element;
            element.selectionStart = element.value.length;
            element.selectionEnd = element.value.length;
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
            break;
          }

        case 'ArrowUp':
          {
            this.onNextFrame(function () {
              return _this6.scrollToBottom();
            });

            if (this.historyCursor == -1) {
              this.originalInput = this.args.input;
            }

            this.historyCursor++;

            if (this.historyCursor >= this.history.length) {
              this.historyCursor--;
              return;
            }

            this.args.input = this.history[this.historyCursor];
            var _element = this.tags.input.element;
            _element.selectionStart = _element.value.length;
            _element.selectionEnd = _element.value.length;
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
            break;
          }

        case 'Escape':
          if (this.tasks.length) {
            console.log(_Task.Task.KILL);
            this.tasks[0]["finally"](function () {
              return _this6.args.output.push(":: Killed.");
            });
            this.tasks[0].signal(_Task.Task.KILL);
            this.tasks[0].signal('kill');
          }

          this.args.passwordMode = false;
          break;

        case 'Tab':
          event.preventDefault();

          if (!this.args.input || this.args.input[0] !== '/') {
            break;
          }

          var search = this.args.input.substr(1);

          for (var cmd in this.path) {
            if (cmd.length < search.length) {
              continue;
            }

            if (search === cmd.substr(0, search.length)) {
              this.args.input = '/' + cmd;
              break;
            }
          }

          break;

        case 'Enter':
          if (!event.ctrlKey) {
            event.preventDefault();
          } else {
            return;
          }

          this.runCommand(this.args.input);
          this.args.input = '';
          break;

        default:
          this.historyCursor = -1;
          this.scrollToBottom();
          break;
      }
    }
  }, {
    key: "cancel",
    value: function cancel(event) {
      event.preventDefault();
      event.stopPropagation();
    }
  }, {
    key: "scrollToBottom",
    value: function scrollToBottom() {
      var scroller = (this.scroller === document.body ? window : this.scroller) || window;
      var scrollTo = (this.scroller === document.body ? this.scroller : document.body).scrollHeight;
      this.onNextFrame(function () {
        scroller.scrollTo({
          behavior: 'smooth',
          left: 0,
          top: scrollTo
        });
      });
    }
  }, {
    key: "parseAnsi",
    value: function parseAnsi(line, prompt) {
      line = line.replace(/</g, '&lt;').replace(/>/g, '&gt;');
      var renderer = new _Renderer.Renderer();

      var parsed = _Parser.Parser.parse(line);

      var wrapped = renderer.process(parsed);

      if (!prompt) {
        return _View2.View.from("<span class =\"ansi\">".concat(wrapped, "</span>"));
      }

      var promptEsc = prompt.replace(/</g, '&lt;').replace(/>/g, '&gt;');

      var rendered = _View2.View.from("".concat(promptEsc, " <span class =\"ansi\">").concat(wrapped, "</span>"));

      return rendered;
    }
  }, {
    key: "unescape",
    value: function unescape(string) {
      return string.replace(/\\n/gm, '\n').replace(/\\r/gm, '\r').replace(/\\t/gm, '\t').replace(/\\e/gm, "\x1B").replace(/\\u001b/gm, "\x1B");
    }
  }, {
    key: "write",
    value: function write() {
      for (var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++) {
        lines[_key] = arguments[_key];
      }

      for (var _i = 0, _lines = lines; _i < _lines.length; _i++) {
        var line = _lines[_i];

        if (typeof line === 'string') {
          var unescaped = this.unescape(line);
          var parsed = this.parseAnsi(unescaped);
          this.args.output.push(parsed);
          continue;
        }

        this.args.output.push(line);
      }
    }
  }]);

  return Console;
}(_View2.View);

exports.Console = Console;
  })();
});

require.register("subspace-console/Path.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Path = void 0;

var _Task = require("subspace-console/Task");

var Path = {};
exports.Path = Path;
  })();
});

require.register("subspace-console/Task.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Task = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Mixin = require("curvature/base/Mixin");

var _Target = require("./mixin/Target");

var _TaskSignals = require("./mixin/TaskSignals");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var taskId = 0;
var target = Symbol('target');
var Accept = Symbol('accept');
var Reject = Symbol('reject');
var Execute = Symbol('execute');

var Task = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Task, _Mixin$with);

  var _super = _createSuper(Task);

  function Task() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Task);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "title", 'Generic Task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '::');

    _this.args = args;
    _this.prev = prev;
    _this.term = term;
    _this.status = -1;
    _this.thread = new Promise(function (accept, reject) {
      _this[Accept] = accept;
      _this[Reject] = reject;
    });
    _this.id = taskId++;
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(Task, [{
    key: "then",
    value: function then(callback) {
      return this.thread.then(callback);
    }
  }, {
    key: "catch",
    value: function _catch(callback) {
      return this.thread["catch"](callback);
    }
  }, {
    key: "finally",
    value: function _finally(callback) {
      return this.thread["finally"](callback);
    }
  }, {
    key: "print",
    value: function print(detail) {
      this.dispatchEvent(new CustomEvent('output', {
        detail: detail
      }));
    }
  }, {
    key: "printErr",
    value: function printErr(detail) {
      this.dispatchEvent(new CustomEvent('error', {
        detail: detail
      }));
    }
  }, {
    key: "write",
    value: function write(line) {
      return this.main(line);
    }
  }, {
    key: "signal",
    value: function signal(signalName) {
      if (this["signal::".concat(signalName)]) {
        this["signal::".concat(signalName)]();
      }

      switch (signalName) {
        case 'close':
          if (this.dispatchEvent(new CustomEvent('close'))) {
            this.status > 0 ? this[Reject]() : this[Accept]();
          }

          break;

        case 'kill':
          this.status > 0 ? this[Reject]() : this[Accept]();
          break;
      }
    }
  }, {
    key: "execute",
    value: function execute() {
      return this[Execute](this.prev);
    }
  }, {
    key: Execute,
    value: function value() {
      var _this2 = this;

      var onOutputEvent = function onOutputEvent(_ref) {
        var detail = _ref.detail;
        return _this2.write(detail);
      };

      var init = this.init.apply(this, _toConsumableArray(this.args));
      var prev = this.prev;

      if (prev) {
        prev.addEventListener('output', onOutputEvent);
      }

      if (!(init instanceof Promise)) {
        init = Promise.resolve(init);
      }

      if (prev) {
        prev[Execute]();
        return Promise.allSettled([prev, init])["finally"](function () {
          prev.then(function (r) {
            return _this2[Accept](r);
          });
          prev["catch"](function (e) {
            return _this2[Reject](r);
          });
          prev.removeEventListener('output', onOutputEvent);
          return _this2.done();
        });
      } else {
        return Promise.allSettled([init]).then(function (result) {
          try {
            _this2.main(undefined);

            _this2[Accept]();
          } catch (_unused) {
            _this2[Reject]();
          }

          _this2.done();
        });
      }
    }
  }, {
    key: "init",
    value: function init() {}
  }, {
    key: "main",
    value: function main() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    }
  }, {
    key: "done",
    value: function done(results) {
      return this.status;
    }
  }]);

  return Task;
}(_Mixin.Mixin["with"](_Target.Target, _TaskSignals.TaskSignals));

exports.Task = Task;
  })();
});

require.register("subspace-console/ansi/Colors255.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Colors255 = void 0;
var Colors255 = {
  "0": {
    "r": 0,
    "g": 0,
    "b": 0
  },
  "1": {
    "r": 128,
    "g": 0,
    "b": 0
  },
  "2": {
    "r": 0,
    "g": 128,
    "b": 0
  },
  "3": {
    "r": 128,
    "g": 128,
    "b": 0
  },
  "4": {
    "r": 0,
    "g": 0,
    "b": 128
  },
  "5": {
    "r": 128,
    "g": 0,
    "b": 128
  },
  "6": {
    "r": 0,
    "g": 128,
    "b": 128
  },
  "7": {
    "r": 192,
    "g": 192,
    "b": 192
  },
  "8": {
    "r": 128,
    "g": 128,
    "b": 128
  },
  "9": {
    "r": 255,
    "g": 0,
    "b": 0
  },
  "10": {
    "r": 0,
    "g": 255,
    "b": 0
  },
  "11": {
    "r": 255,
    "g": 255,
    "b": 0
  },
  "12": {
    "r": 0,
    "g": 0,
    "b": 255
  },
  "13": {
    "r": 255,
    "g": 0,
    "b": 255
  },
  "14": {
    "r": 0,
    "g": 255,
    "b": 255
  },
  "15": {
    "r": 255,
    "g": 255,
    "b": 255
  },
  "16": {
    "r": 0,
    "g": 0,
    "b": 0
  },
  "17": {
    "r": 0,
    "g": 0,
    "b": 95
  },
  "18": {
    "r": 0,
    "g": 0,
    "b": 135
  },
  "19": {
    "r": 0,
    "g": 0,
    "b": 175
  },
  "20": {
    "r": 0,
    "g": 0,
    "b": 215
  },
  "21": {
    "r": 0,
    "g": 0,
    "b": 255
  },
  "22": {
    "r": 0,
    "g": 95,
    "b": 0
  },
  "23": {
    "r": 0,
    "g": 95,
    "b": 95
  },
  "24": {
    "r": 0,
    "g": 95,
    "b": 135
  },
  "25": {
    "r": 0,
    "g": 95,
    "b": 175
  },
  "26": {
    "r": 0,
    "g": 95,
    "b": 215
  },
  "27": {
    "r": 0,
    "g": 95,
    "b": 255
  },
  "28": {
    "r": 0,
    "g": 135,
    "b": 0
  },
  "29": {
    "r": 0,
    "g": 135,
    "b": 95
  },
  "30": {
    "r": 0,
    "g": 135,
    "b": 135
  },
  "31": {
    "r": 0,
    "g": 135,
    "b": 175
  },
  "32": {
    "r": 0,
    "g": 135,
    "b": 215
  },
  "33": {
    "r": 0,
    "g": 135,
    "b": 255
  },
  "34": {
    "r": 0,
    "g": 175,
    "b": 0
  },
  "35": {
    "r": 0,
    "g": 175,
    "b": 95
  },
  "36": {
    "r": 0,
    "g": 175,
    "b": 135
  },
  "37": {
    "r": 0,
    "g": 175,
    "b": 175
  },
  "38": {
    "r": 0,
    "g": 175,
    "b": 215
  },
  "39": {
    "r": 0,
    "g": 175,
    "b": 255
  },
  "40": {
    "r": 0,
    "g": 215,
    "b": 0
  },
  "41": {
    "r": 0,
    "g": 215,
    "b": 95
  },
  "42": {
    "r": 0,
    "g": 215,
    "b": 135
  },
  "43": {
    "r": 0,
    "g": 215,
    "b": 175
  },
  "44": {
    "r": 0,
    "g": 215,
    "b": 215
  },
  "45": {
    "r": 0,
    "g": 215,
    "b": 255
  },
  "46": {
    "r": 0,
    "g": 255,
    "b": 0
  },
  "47": {
    "r": 0,
    "g": 255,
    "b": 95
  },
  "48": {
    "r": 0,
    "g": 255,
    "b": 135
  },
  "49": {
    "r": 0,
    "g": 255,
    "b": 175
  },
  "50": {
    "r": 0,
    "g": 255,
    "b": 215
  },
  "51": {
    "r": 0,
    "g": 255,
    "b": 255
  },
  "52": {
    "r": 95,
    "g": 0,
    "b": 0
  },
  "53": {
    "r": 95,
    "g": 0,
    "b": 95
  },
  "54": {
    "r": 95,
    "g": 0,
    "b": 135
  },
  "55": {
    "r": 95,
    "g": 0,
    "b": 175
  },
  "56": {
    "r": 95,
    "g": 0,
    "b": 215
  },
  "57": {
    "r": 95,
    "g": 0,
    "b": 255
  },
  "58": {
    "r": 95,
    "g": 95,
    "b": 0
  },
  "59": {
    "r": 95,
    "g": 95,
    "b": 95
  },
  "60": {
    "r": 95,
    "g": 95,
    "b": 135
  },
  "61": {
    "r": 95,
    "g": 95,
    "b": 175
  },
  "62": {
    "r": 95,
    "g": 95,
    "b": 215
  },
  "63": {
    "r": 95,
    "g": 95,
    "b": 255
  },
  "64": {
    "r": 95,
    "g": 135,
    "b": 0
  },
  "65": {
    "r": 95,
    "g": 135,
    "b": 95
  },
  "66": {
    "r": 95,
    "g": 135,
    "b": 135
  },
  "67": {
    "r": 95,
    "g": 135,
    "b": 175
  },
  "68": {
    "r": 95,
    "g": 135,
    "b": 215
  },
  "69": {
    "r": 95,
    "g": 135,
    "b": 255
  },
  "70": {
    "r": 95,
    "g": 175,
    "b": 0
  },
  "71": {
    "r": 95,
    "g": 175,
    "b": 95
  },
  "72": {
    "r": 95,
    "g": 175,
    "b": 135
  },
  "73": {
    "r": 95,
    "g": 175,
    "b": 175
  },
  "74": {
    "r": 95,
    "g": 175,
    "b": 215
  },
  "75": {
    "r": 95,
    "g": 175,
    "b": 255
  },
  "76": {
    "r": 95,
    "g": 215,
    "b": 0
  },
  "77": {
    "r": 95,
    "g": 215,
    "b": 95
  },
  "78": {
    "r": 95,
    "g": 215,
    "b": 135
  },
  "79": {
    "r": 95,
    "g": 215,
    "b": 175
  },
  "80": {
    "r": 95,
    "g": 215,
    "b": 215
  },
  "81": {
    "r": 95,
    "g": 215,
    "b": 255
  },
  "82": {
    "r": 95,
    "g": 255,
    "b": 0
  },
  "83": {
    "r": 95,
    "g": 255,
    "b": 95
  },
  "84": {
    "r": 95,
    "g": 255,
    "b": 135
  },
  "85": {
    "r": 95,
    "g": 255,
    "b": 175
  },
  "86": {
    "r": 95,
    "g": 255,
    "b": 215
  },
  "87": {
    "r": 95,
    "g": 255,
    "b": 255
  },
  "88": {
    "r": 135,
    "g": 0,
    "b": 0
  },
  "89": {
    "r": 135,
    "g": 0,
    "b": 95
  },
  "90": {
    "r": 135,
    "g": 0,
    "b": 135
  },
  "91": {
    "r": 135,
    "g": 0,
    "b": 175
  },
  "92": {
    "r": 135,
    "g": 0,
    "b": 215
  },
  "93": {
    "r": 135,
    "g": 0,
    "b": 255
  },
  "94": {
    "r": 135,
    "g": 95,
    "b": 0
  },
  "95": {
    "r": 135,
    "g": 95,
    "b": 95
  },
  "96": {
    "r": 135,
    "g": 95,
    "b": 135
  },
  "97": {
    "r": 135,
    "g": 95,
    "b": 175
  },
  "98": {
    "r": 135,
    "g": 95,
    "b": 215
  },
  "99": {
    "r": 135,
    "g": 95,
    "b": 255
  },
  "100": {
    "r": 135,
    "g": 135,
    "b": 0
  },
  "101": {
    "r": 135,
    "g": 135,
    "b": 95
  },
  "102": {
    "r": 135,
    "g": 135,
    "b": 135
  },
  "103": {
    "r": 135,
    "g": 135,
    "b": 175
  },
  "104": {
    "r": 135,
    "g": 135,
    "b": 215
  },
  "105": {
    "r": 135,
    "g": 135,
    "b": 255
  },
  "106": {
    "r": 135,
    "g": 175,
    "b": 0
  },
  "107": {
    "r": 135,
    "g": 175,
    "b": 95
  },
  "108": {
    "r": 135,
    "g": 175,
    "b": 135
  },
  "109": {
    "r": 135,
    "g": 175,
    "b": 175
  },
  "110": {
    "r": 135,
    "g": 175,
    "b": 215
  },
  "111": {
    "r": 135,
    "g": 175,
    "b": 255
  },
  "112": {
    "r": 135,
    "g": 215,
    "b": 0
  },
  "113": {
    "r": 135,
    "g": 215,
    "b": 95
  },
  "114": {
    "r": 135,
    "g": 215,
    "b": 135
  },
  "115": {
    "r": 135,
    "g": 215,
    "b": 175
  },
  "116": {
    "r": 135,
    "g": 215,
    "b": 215
  },
  "117": {
    "r": 135,
    "g": 215,
    "b": 255
  },
  "118": {
    "r": 135,
    "g": 255,
    "b": 0
  },
  "119": {
    "r": 135,
    "g": 255,
    "b": 95
  },
  "120": {
    "r": 135,
    "g": 255,
    "b": 135
  },
  "121": {
    "r": 135,
    "g": 255,
    "b": 175
  },
  "122": {
    "r": 135,
    "g": 255,
    "b": 215
  },
  "123": {
    "r": 135,
    "g": 255,
    "b": 255
  },
  "124": {
    "r": 175,
    "g": 0,
    "b": 0
  },
  "125": {
    "r": 175,
    "g": 0,
    "b": 95
  },
  "126": {
    "r": 175,
    "g": 0,
    "b": 135
  },
  "127": {
    "r": 175,
    "g": 0,
    "b": 175
  },
  "128": {
    "r": 175,
    "g": 0,
    "b": 215
  },
  "129": {
    "r": 175,
    "g": 0,
    "b": 255
  },
  "130": {
    "r": 175,
    "g": 95,
    "b": 0
  },
  "131": {
    "r": 175,
    "g": 95,
    "b": 95
  },
  "132": {
    "r": 175,
    "g": 95,
    "b": 135
  },
  "133": {
    "r": 175,
    "g": 95,
    "b": 175
  },
  "134": {
    "r": 175,
    "g": 95,
    "b": 215
  },
  "135": {
    "r": 175,
    "g": 95,
    "b": 255
  },
  "136": {
    "r": 175,
    "g": 135,
    "b": 0
  },
  "137": {
    "r": 175,
    "g": 135,
    "b": 95
  },
  "138": {
    "r": 175,
    "g": 135,
    "b": 135
  },
  "139": {
    "r": 175,
    "g": 135,
    "b": 175
  },
  "140": {
    "r": 175,
    "g": 135,
    "b": 215
  },
  "141": {
    "r": 175,
    "g": 135,
    "b": 255
  },
  "142": {
    "r": 175,
    "g": 175,
    "b": 0
  },
  "143": {
    "r": 175,
    "g": 175,
    "b": 95
  },
  "144": {
    "r": 175,
    "g": 175,
    "b": 135
  },
  "145": {
    "r": 175,
    "g": 175,
    "b": 175
  },
  "146": {
    "r": 175,
    "g": 175,
    "b": 215
  },
  "147": {
    "r": 175,
    "g": 175,
    "b": 255
  },
  "148": {
    "r": 175,
    "g": 215,
    "b": 0
  },
  "149": {
    "r": 175,
    "g": 215,
    "b": 95
  },
  "150": {
    "r": 175,
    "g": 215,
    "b": 135
  },
  "151": {
    "r": 175,
    "g": 215,
    "b": 175
  },
  "152": {
    "r": 175,
    "g": 215,
    "b": 215
  },
  "153": {
    "r": 175,
    "g": 215,
    "b": 255
  },
  "154": {
    "r": 175,
    "g": 255,
    "b": 0
  },
  "155": {
    "r": 175,
    "g": 255,
    "b": 95
  },
  "156": {
    "r": 175,
    "g": 255,
    "b": 135
  },
  "157": {
    "r": 175,
    "g": 255,
    "b": 175
  },
  "158": {
    "r": 175,
    "g": 255,
    "b": 215
  },
  "159": {
    "r": 175,
    "g": 255,
    "b": 255
  },
  "160": {
    "r": 215,
    "g": 0,
    "b": 0
  },
  "161": {
    "r": 215,
    "g": 0,
    "b": 95
  },
  "162": {
    "r": 215,
    "g": 0,
    "b": 135
  },
  "163": {
    "r": 215,
    "g": 0,
    "b": 175
  },
  "164": {
    "r": 215,
    "g": 0,
    "b": 215
  },
  "165": {
    "r": 215,
    "g": 0,
    "b": 255
  },
  "166": {
    "r": 215,
    "g": 95,
    "b": 0
  },
  "167": {
    "r": 215,
    "g": 95,
    "b": 95
  },
  "168": {
    "r": 215,
    "g": 95,
    "b": 135
  },
  "169": {
    "r": 215,
    "g": 95,
    "b": 175
  },
  "170": {
    "r": 215,
    "g": 95,
    "b": 215
  },
  "171": {
    "r": 215,
    "g": 95,
    "b": 255
  },
  "172": {
    "r": 215,
    "g": 135,
    "b": 0
  },
  "173": {
    "r": 215,
    "g": 135,
    "b": 95
  },
  "174": {
    "r": 215,
    "g": 135,
    "b": 135
  },
  "175": {
    "r": 215,
    "g": 135,
    "b": 175
  },
  "176": {
    "r": 215,
    "g": 135,
    "b": 215
  },
  "177": {
    "r": 215,
    "g": 135,
    "b": 255
  },
  "178": {
    "r": 215,
    "g": 175,
    "b": 0
  },
  "179": {
    "r": 215,
    "g": 175,
    "b": 95
  },
  "180": {
    "r": 215,
    "g": 175,
    "b": 135
  },
  "181": {
    "r": 215,
    "g": 175,
    "b": 175
  },
  "182": {
    "r": 215,
    "g": 175,
    "b": 215
  },
  "183": {
    "r": 215,
    "g": 175,
    "b": 255
  },
  "184": {
    "r": 215,
    "g": 215,
    "b": 0
  },
  "185": {
    "r": 215,
    "g": 215,
    "b": 95
  },
  "186": {
    "r": 215,
    "g": 215,
    "b": 135
  },
  "187": {
    "r": 215,
    "g": 215,
    "b": 175
  },
  "188": {
    "r": 215,
    "g": 215,
    "b": 215
  },
  "189": {
    "r": 215,
    "g": 215,
    "b": 255
  },
  "190": {
    "r": 215,
    "g": 255,
    "b": 0
  },
  "191": {
    "r": 215,
    "g": 255,
    "b": 95
  },
  "192": {
    "r": 215,
    "g": 255,
    "b": 135
  },
  "193": {
    "r": 215,
    "g": 255,
    "b": 175
  },
  "194": {
    "r": 215,
    "g": 255,
    "b": 215
  },
  "195": {
    "r": 215,
    "g": 255,
    "b": 255
  },
  "196": {
    "r": 255,
    "g": 0,
    "b": 0
  },
  "197": {
    "r": 255,
    "g": 0,
    "b": 95
  },
  "198": {
    "r": 255,
    "g": 0,
    "b": 135
  },
  "199": {
    "r": 255,
    "g": 0,
    "b": 175
  },
  "200": {
    "r": 255,
    "g": 0,
    "b": 215
  },
  "201": {
    "r": 255,
    "g": 0,
    "b": 255
  },
  "202": {
    "r": 255,
    "g": 95,
    "b": 0
  },
  "203": {
    "r": 255,
    "g": 95,
    "b": 95
  },
  "204": {
    "r": 255,
    "g": 95,
    "b": 135
  },
  "205": {
    "r": 255,
    "g": 95,
    "b": 175
  },
  "206": {
    "r": 255,
    "g": 95,
    "b": 215
  },
  "207": {
    "r": 255,
    "g": 95,
    "b": 255
  },
  "208": {
    "r": 255,
    "g": 135,
    "b": 0
  },
  "209": {
    "r": 255,
    "g": 135,
    "b": 95
  },
  "210": {
    "r": 255,
    "g": 135,
    "b": 135
  },
  "211": {
    "r": 255,
    "g": 135,
    "b": 175
  },
  "212": {
    "r": 255,
    "g": 135,
    "b": 215
  },
  "213": {
    "r": 255,
    "g": 135,
    "b": 255
  },
  "214": {
    "r": 255,
    "g": 175,
    "b": 0
  },
  "215": {
    "r": 255,
    "g": 175,
    "b": 95
  },
  "216": {
    "r": 255,
    "g": 175,
    "b": 135
  },
  "217": {
    "r": 255,
    "g": 175,
    "b": 175
  },
  "218": {
    "r": 255,
    "g": 175,
    "b": 215
  },
  "219": {
    "r": 255,
    "g": 175,
    "b": 255
  },
  "220": {
    "r": 255,
    "g": 215,
    "b": 0
  },
  "221": {
    "r": 255,
    "g": 215,
    "b": 95
  },
  "222": {
    "r": 255,
    "g": 215,
    "b": 135
  },
  "223": {
    "r": 255,
    "g": 215,
    "b": 175
  },
  "224": {
    "r": 255,
    "g": 215,
    "b": 215
  },
  "225": {
    "r": 255,
    "g": 215,
    "b": 255
  },
  "226": {
    "r": 255,
    "g": 255,
    "b": 0
  },
  "227": {
    "r": 255,
    "g": 255,
    "b": 95
  },
  "228": {
    "r": 255,
    "g": 255,
    "b": 135
  },
  "229": {
    "r": 255,
    "g": 255,
    "b": 175
  },
  "230": {
    "r": 255,
    "g": 255,
    "b": 215
  },
  "231": {
    "r": 255,
    "g": 255,
    "b": 255
  },
  "232": {
    "r": 8,
    "g": 8,
    "b": 8
  },
  "233": {
    "r": 18,
    "g": 18,
    "b": 18
  },
  "234": {
    "r": 28,
    "g": 28,
    "b": 28
  },
  "235": {
    "r": 38,
    "g": 38,
    "b": 38
  },
  "236": {
    "r": 48,
    "g": 48,
    "b": 48
  },
  "237": {
    "r": 58,
    "g": 58,
    "b": 58
  },
  "238": {
    "r": 68,
    "g": 68,
    "b": 68
  },
  "239": {
    "r": 78,
    "g": 78,
    "b": 78
  },
  "240": {
    "r": 88,
    "g": 88,
    "b": 88
  },
  "241": {
    "r": 98,
    "g": 98,
    "b": 98
  },
  "242": {
    "r": 108,
    "g": 108,
    "b": 108
  },
  "243": {
    "r": 118,
    "g": 118,
    "b": 118
  },
  "244": {
    "r": 128,
    "g": 128,
    "b": 128
  },
  "245": {
    "r": 138,
    "g": 138,
    "b": 138
  },
  "246": {
    "r": 148,
    "g": 148,
    "b": 148
  },
  "247": {
    "r": 158,
    "g": 158,
    "b": 158
  },
  "248": {
    "r": 168,
    "g": 168,
    "b": 168
  },
  "249": {
    "r": 178,
    "g": 178,
    "b": 178
  },
  "250": {
    "r": 188,
    "g": 188,
    "b": 188
  },
  "251": {
    "r": 198,
    "g": 198,
    "b": 198
  },
  "252": {
    "r": 208,
    "g": 208,
    "b": 208
  },
  "253": {
    "r": 218,
    "g": 218,
    "b": 218
  },
  "254": {
    "r": 228,
    "g": 228,
    "b": 228
  },
  "255": {
    "r": 238,
    "g": 238,
    "b": 238
  }
};
exports.Colors255 = Colors255;
  })();
});

require.register("subspace-console/ansi/Parser.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;

var _Actions = require("sixgram/Actions");

var _Parser = require("sixgram/Parser");

var tokens = {
  reset: /\u001b\[(0);?m/,
  graphics: /\u001b\[(\d+);?(\d+)?;?([\d;]*)?./,
  escaped: /\\([^e])/,
  characters: /[\s\S]+?(?=\x1B|$)/
};
var modes = {
  normal: {
    reset: [_Actions.IGNORE, _Actions.ENTER, _Actions.LEAVE],
    escaped: [_Actions.IGNORE, _Actions.ENTER, _Actions.LEAVE],
    graphics: [_Actions.IGNORE, _Actions.ENTER, _Actions.LEAVE],
    characters: [_Actions.INSERT]
  }
};
var Parser = new _Parser.Parser(tokens, modes);
exports.Parser = Parser;
  })();
});

require.register("subspace-console/ansi/Renderer.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Renderer = void 0;

var _Renderer = require("sixgram/Renderer");

var _pallete = require("./pallete");

var _Colors = require("./Colors255");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var audio = new AudioContext();
var gainNode = audio.createGain();
gainNode.connect(audio.destination);
gainNode.gain.value = 10 * 0.01;

var Renderer = /*#__PURE__*/function (_BaseRenderer) {
  _inherits(Renderer, _BaseRenderer);

  var _super = _createSuper(Renderer);

  function Renderer() {
    var _this;

    _classCallCheck(this, Renderer);

    _this = _super.call(this, {
      normal: function normal(chunk, parent) {
        return _this.setGraphicsMode(chunk, parent);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "style", {});

    return _this;
  }

  _createClass(Renderer, [{
    key: "reset",
    value: function reset() {
      for (var _i = 0, _Object$entries = Object.entries(this.style); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),
            k = _Object$entries$_i[0];

        delete this.style[k];
      }
    }
  }, {
    key: "beep",
    value: function beep() {
      var oscillator = audio.createOscillator();
      oscillator.connect(gainNode);
      oscillator.frequency.value = 840;
      oscillator.type = "square";
      oscillator.start(audio.currentTime);
      oscillator.stop(audio.currentTime + 200 * 0.001);
    }
  }, {
    key: "setGraphicsMode",
    value: function setGraphicsMode(chunk, parent) {
      if (typeof chunk === 'string') {
        if (chunk === '') {
          return false;
        }

        var styleString = '';

        for (var _i2 = 0, _Object$entries2 = Object.entries(this.style); _i2 < _Object$entries2.length; _i2++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
              key = _Object$entries2$_i[0],
              val = _Object$entries2$_i[1];

          styleString += "".concat(key, ": ").concat(val, "; ");
        }

        return "<span class = \"ansi\" style = \"".concat(styleString, "\">").concat(chunk, "</span>");
      }

      if (_typeof(chunk) === 'object') {
        if (chunk.type === 'escaped' && chunk.groups[0] === 'a') {
          this.beep();
        }

        if (chunk.type === 'graphics' || chunk.type === 'reset') {
          for (var g = 0; g < chunk.groups.length; g++) {
            var group = Number(chunk.groups[g]);

            if (chunk.groups[g] === '') {
              return false;
            }

            switch (group) {
              case 0:
                for (var _key in this.style) {
                  delete this.style[_key];
                }

                break;

              case 1:
                this.style['filter'] = 'contrast(1.25)'; // this.style['text-shadow'] = '1px 1px 1px rgba(0,0,0,0.25), 0px 0px 1px rgba(0,0,0,0.125)';

                this.style['font-weight'] = 'bold';
                this.style['opacity'] = 1;
                break;

              case 2:
                this.style['filter'] = 'brightness(0.85)';
                this.style['font-weight'] = 'light';
                this.style['opacity'] = 0.75;
                break;

              case 3:
                this.style['font-style'] = 'italic';
                break;

              case 4:
                this.style['text-decoration'] = 'underline';
                break;

              case 5:
                this.style['animation'] = 'var(--ansiBlink)';
                break;

              case 7:
                this.style['filter'] = 'invert(1)';
                break;

              case 8:
                this.style['filter'] = 'contrast(0.5)';
                this.style['opacity'] = 0.1;
                break;

              case 9:
                this.style['text-decoration'] = 'line-through';
                break;

              case 10:
                this.style['font-family'] = 'var(--base-font))';
                break;

              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
                this.style['font-family'] = "var(--alt-font-no-".concat(group, ")");
                break;

              case 20:
                this.style['font-family'] = 'var(--alt-font-fraktur)';
                this.style['font-size'] = '1.1rem';
                break;

              case 21:
                this.style['font-weight'] = 'initial';
                break;

              case 22:
                this.style['font-weight'] = 'initial';
                break;

              case 23:
                this.style['font-weight'] = 'initial';
                this.style['font-style'] = 'initial';
                break;

              case 24:
                this.style['text-decoration'] = 'none';
                this.style['font-family'] = 'sans-serif';
                this.style['font-size'] = '12pt';
                break;

              case 25:
                this.style['animation'] = 'none';
                break;

              case 26:
                this.style['text-transform'] = 'full-width';
                break;

              case 27:
                this.style['filter'] = 'initial';
                break;

              case 28:
                this.style['opacity'] = 'initial';
                break;

              case 29:
                this.style['text-decoration'] = 'initial';
                break;

              case 30:
                this.style['color'] = _pallete.pallete.black;
                break;

              case 31:
                this.style['color'] = _pallete.pallete.red;
                break;

              case 32:
                this.style['color'] = _pallete.pallete.green;
                break;

              case 33:
                this.style['color'] = _pallete.pallete.yellow;
                break;

              case 34:
                this.style['color'] = _pallete.pallete.blue;
                break;

              case 35:
                this.style['color'] = _pallete.pallete.magenta;
                break;

              case 36:
                this.style['color'] = _pallete.pallete.cyan;
                break;

              case 37:
                this.style['color'] = _pallete.pallete.white;
                break;

              case 38:
                if (chunk.groups[1 + g] == 2) {
                  var _chunk$groups$split = chunk.groups[2 + g].split(';'),
                      _chunk$groups$split2 = _slicedToArray(_chunk$groups$split, 3),
                      rd = _chunk$groups$split2[0],
                      gr = _chunk$groups$split2[1],
                      bl = _chunk$groups$split2[2];

                  this.style['color'] = "rgb(".concat(rd, ",").concat(gr, ",").concat(bl, ")");
                }

                if (chunk.groups[1 + g] == 5) {
                  var _Colors255$Number = _Colors.Colors255[Number(chunk.groups[2 + g])],
                      _rd = _Colors255$Number.r,
                      _gr = _Colors255$Number.g,
                      _bl = _Colors255$Number.b;

                  this.style['color'] = "rgb(".concat(_rd, ",").concat(_gr, ",").concat(_bl, ")");
                }

                g += 2;
                break;

              case 39:
                this.style['color'] = 'var(--fgColor)';
                break;

              case 40:
                this.style['background-color'] = _pallete.pallete.black;
                break;

              case 41:
                this.style['background-color'] = _pallete.pallete.red;
                break;

              case 42:
                this.style['background-color'] = _pallete.pallete.green;
                break;

              case 43:
                this.style['background-color'] = _pallete.pallete.yellow;
                break;

              case 44:
                this.style['background-color'] = _pallete.pallete.blue;
                break;

              case 45:
                this.style['background-color'] = _pallete.pallete.magenta;
                break;

              case 46:
                this.style['background-color'] = _pallete.pallete.cyan;
                break;

              case 47:
                this.style['background-color'] = _pallete.pallete.white;
                break;

              case 48:
                if (chunk.groups[1 + g] == 2) {
                  var _chunk$groups$split3 = chunk.groups[2 + g].split(';'),
                      _chunk$groups$split4 = _slicedToArray(_chunk$groups$split3, 3),
                      _rd2 = _chunk$groups$split4[0],
                      _gr2 = _chunk$groups$split4[1],
                      _bl2 = _chunk$groups$split4[2];

                  this.style['background-color'] = "rgb(".concat(_rd2, ",").concat(_gr2, ",").concat(_bl2, ")");
                }

                if (chunk.groups[1 + g] == 5) {
                  var _Colors255$Number2 = _Colors.Colors255[Number(chunk.groups[2 + g])],
                      _rd3 = _Colors255$Number2.r,
                      _gr3 = _Colors255$Number2.g,
                      _bl3 = _Colors255$Number2.b;

                  this.style['background-color'] = "rgb(".concat(_rd3, ",").concat(_gr3, ",").concat(_bl3, ")");
                }

                g += 2;
                break;

              case 49:
                this.style['background-color'] = 'var(--bgColor)';
                break;

              case 50:
                this.style['text-transform'] = 'initial';
                break;

              case 51:
                this.style['border'] = '1px solid currentColor';
                break;

              case 52:
                this.style['border'] = '1px solid currentColor';
                this.style['border-radius'] = '1em';
                break;

              case 53:
                this.style['text-decoration'] = 'overline';
                break;

              case 54:
                this.style['border'] = 'initial';
                break;

              case 55:
                this.style['border'] = 'initial';
                break;
            }
          }
        }

        return false;
      }
    }
  }]);

  return Renderer;
}(_Renderer.Renderer);

exports.Renderer = Renderer;
  })();
});

require.register("subspace-console/ansi/pallete.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pallete = void 0;
var pallete = {
  black: 'var(--ansi-black, #000000)',
  dBlack: 'var(--ansi-black-dark, #343434)',
  bBlack: 'var(--ansi-black-light, #888888)',
  red: 'var(--ansi-red, #c0002c)',
  dRed: 'var(--ansi-red-dark, #4a132b)',
  bRed: 'var(--ansi-red-light, #ff7869)',
  green: 'var(--ansi-green, #80a763)',
  dGreen: 'var(--ansi-green-dark, #326f38)',
  bGreen: 'var(--ansi-green-light, #93d393)',
  yellow: 'var(--ansi-yellow, #e3c651)',
  dYellow: 'var(--ansi-yellow-dark, #baa447)',
  bYellow: 'var(--ansi-yellow-light, #fdc253)',
  blue: 'var(--ansi-blue, #5485c0)',
  dBlue: 'var(--ansi-blue-dark, #38577d)',
  bBlue: 'var(--ansi-blue-light, #77aff2)',
  magenta: 'var(--ansi-magenta, #C61B6E)',
  dMagenta: 'var(--ansi-magenta-dark, #935894)',
  bMagenta: 'var(--ansi-magenta-light, #bf83c0)',
  cyan: 'var(--ansi-cyan, #57c2c0)',
  dCyan: 'var(--ansi-cyan-dark, #2d5695)',
  bCyan: 'var(--ansi-cyan-light, #cef6f5)',
  white: 'var(--ansi-cyan, #e0e0e0)',
  dWhite: 'var(--ansi-cyan-dark, #b0b0b0)',
  bWhite: 'var(--ansi-cyan-light, #ffffff)'
};
exports.pallete = pallete;
  })();
});

require.register("subspace-console/mixin/Target.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Target = void 0;

var _Mixin = require("curvature/base/Mixin");

var _Target;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var target = Symbol('target');
var index = 0;
var Target = (_Target = {}, _defineProperty(_Target, _Mixin.Mixin.Constructor, function () {
  try {
    this[target] = new EventTarget();
  } catch (error) {
    this[target] = document.createDocumentFragment();
  }

  this[target].x = index++;
}), _defineProperty(_Target, "dispatchEvent", function dispatchEvent() {
  var _this$target;

  (_this$target = this[target]).dispatchEvent.apply(_this$target, arguments);
}), _defineProperty(_Target, "addEventListener", function addEventListener() {
  var _this$target2;

  (_this$target2 = this[target]).addEventListener.apply(_this$target2, arguments);
}), _defineProperty(_Target, "removeEventListener", function removeEventListener() {
  var _this$target3;

  (_this$target3 = this[target]).removeEventListener.apply(_this$target3, arguments);
}), _Target);
exports.Target = Target;
  })();
});

require.register("subspace-console/mixin/TaskSignals.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaskSignals = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TaskSignals = /*#__PURE__*/function () {
  function TaskSignals() {
    _classCallCheck(this, TaskSignals);
  }

  _createClass(TaskSignals, [{
    key: 'signal::kill',
    value: function signalKill() {
      console.log('KILL!');
      this.status > 0 ? this[Reject]() : this[Accept]();
    }
  }, {
    key: 'signal::close',
    value: function signalClose() {
      if (this.dispatchEvent(new CustomEvent('error', {
        detail: detail
      }))) {
        this.status > 0 ? this[Reject]() : this[Accept]();
      }
    }
  }]);

  return TaskSignals;
}();

exports.TaskSignals = TaskSignals;

_defineProperty(TaskSignals, "KILL", 'kill');

_defineProperty(TaskSignals, "CLOSE", 'close');
  })();
});

require.register("subspace-console/view/EchoMessage.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EchoMessage = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EchoMessage = /*#__PURE__*/function (_View) {
  _inherits(EchoMessage, _View);

  var _super = _createSuper(EchoMessage);

  function EchoMessage() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EchoMessage);

    _this = _super.call(this, args);
    _this.args.prompt = _this.args.prompt || '<<';
    _this.template = "<span>[[prompt]]&nbsp;</span><span class = \"text\">[[message]]</span>";
    return _this;
  }

  return EchoMessage;
}(_View2.View);

exports.EchoMessage = EchoMessage;
  })();
});

require.register("subspace-console/view/MeltingText.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "subspace-console");
  (function() {
    "use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeltingText = void 0;

var _View = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MeltingText = /*#__PURE__*/function (_BaseView) {
  _inherits(MeltingText, _BaseView);

  var _super = _createSuper(MeltingText);

  function MeltingText(args) {
    var _this;

    _classCallCheck(this, MeltingText);

    _this = _super.call(this, args);
    _this.last = _this.init = Date.now();
    _this.charUp = [// '\u030d', /*     ̍     */		'\u030e', /*     ̎     */		'\u0304', /*     ̄     */		'\u0305', /*     ̅     */
    // '\u033f', /*     ̿     */		'\u0311', /*     ̑     */		'\u0306', /*     ̆     */		'\u0310', /*     ̐     */
    // '\u0352', /*     ͒     */		'\u0357', /*     ͗     */		'\u0351', /*     ͑     */		'\u0307', /*     ̇     */
    // '\u0308', /*     ̈     */		'\u030a', /*     ̊     */		'\u0342', /*     ͂     */		'\u0343', /*     ̓     */
    "\u0344",
    /*     ̈́     */

    /*	'\u034a', /*     ͊     */

    /*	'\u034b', /*     ͋     */

    /*	'\u034c', /*     ͌     */
    "\u0303",
    /*     ̃     */

    /*	'\u0302', /*     ̂     */

    /*	'\u030c', /*     ̌     */

    /*	'\u0350', /*     ͐     */
    "\u0300"
    /*     ̀     */
    //	'\u0301', /*     ́     */		'\u030b', /*     ̋     */		'\u030f', /*     ̏     */
    // '\u0312', /*     ̒     */		'\u0313', /*     ̓     */		'\u0314', /*     ̔     */		'\u033d', /*     ̽     */
    // '\u0309', /*     ̉     */		'\u0363', /*     ͣ     */		'\u0364', /*     ͤ     */		'\u0365', /*     ͥ     */
    // '\u0366', /*     ͦ     */		'\u0367', /*     ͧ     */		'\u0368', /*     ͨ     */		'\u0369', /*     ͩ     */
    // '\u036a', /*     ͪ     */		'\u036b', /*     ͫ     */		'\u036c', /*     ͬ     */		'\u036d', /*     ͭ     */
    // '\u036e', /*     ͮ     */		'\u036f', /*     ͯ     */		'\u033e', /*     ̾     */		'\u035b', /*     ͛     */
    ];
    _this.charMid = ["\u0315",
    /*     ̕     */
    "\u031B",
    /*     ̛     */
    "\u0340",
    /*     ̀     */
    "\u0341",
    /*     ́     */
    "\u0358",
    /*     ͘     */
    "\u0321",
    /*     ̡     */
    "\u0322",
    /*     ̢     */
    "\u0327",
    /*     ̧     */
    "\u0328",
    /*     ̨     */
    "\u0334",
    /*     ̴     */
    "\u0335",
    /*     ̵     */
    "\u0336",
    /*     ̶     */
    "\u034F",
    /*     ͏     */
    "\u035C",
    /*     ͜     */
    "\u035D",
    /*     ͝     */
    "\u035E",
    /*     ͞     */
    "\u035F",
    /*     ͟     */
    "\u0360",
    /*     ͠     */

    /*'\u0362',      ͢     */
    "\u0338",
    /*     ̸     */
    "\u0337",
    /*     ̷     */
    "\u0361"
    /*     ͡     */

    /*'\u0489'     ҉_     */
    ];
    _this.charDown = [// '\u0316', /*     ̖     */		'\u0317', /*     ̗     */		'\u0318', /*     ̘     */		'\u0319', /*     ̙     */
    // '\u0316', /*     ̖     */		'\u0317', /*     ̗     */		'\u0318', /*     ̘     */		'\u0319', /*     ̙     */
    // '\u0320', /*     ̠     */		'\u0324', /*     ̤     */		'\u0325', /*     ̥     */		'\u0326', /*     ̦     */
    // '\u0329', /*     ̩     */		'\u032a', /*     ̪     */		'\u032b', /*     ̫     */		'\u032c', /*     ̬     */
    // '\u032d', /*     ̭     */		'\u032e', /*     ̮     */		'\u032f', /*     ̯     */		'\u0330', /*     ̰     */
    // '\u0331', /*     ̱     */		'\u0332', /*     ̲     */		'\u0333', /*     ̳     */		'\u0339', /*     ̹     */
    "\u033A",
    /*     ̺     */
    "\u033B",
    /*     ̻     */
    "\u033C",
    /*     ̼     */
    "\u0345"
    /*     ͅ     */
    //'\u0347', /*     ͇     */		'\u0348', /*     ͈     */		'\u0349', /*     ͉     */		'\u034d', /*     ͍     */
    //'\u034e', /*     ͎     */		'\u0353', /*     ͓     */		'\u0354', /*     ͔     */		'\u0355', /*     ͕     */
    // '\u0356', /*     ͖     */		'\u0359', /*     ͙     */		'\u035a', /*     ͚     */		'\u0323' /*     ̣     */
    ];
    _this.template = "\n\t\t\t<div cv-bind = \"output\" class = \"melting\"></div>\n\t\t";
    _this.args.input = "Magic is no more than the art of employing consciously invisible means to produce visible effects. Will, love, and imagination are magic powers that everyone possesses; and whoever knows how to develop them to their fullest extent is a magician. Magic has but one dogma, namely, that the seen is the measure of the unseen\n"; // this.args.input      = 'anything';

    _this.args.output = 'uh.';
    _this.corruptors = [];
    _this.maxMaxCorrupt = 25;
    _this.maxCorrupt = 0;
    _this.type = '';

    _this.onFrame(function () {
      _this.typewriter(_this.args.input);
    });

    _this.onInterval(16 * 4, function () {
      var selection = window.getSelection();

      if (selection.anchorOffset !== selection.focusOffset) {
        return;
      }

      if (selection.anchorNode !== selection.focusNode) {
        return;
      }

      _this.args.output = _this.corrupt(_this.type); // this.args.output = this.type;
    });

    _this.args.bindTo('input', function (v) {
      _this.type = '';
      _this.corruptors = [];
    });

    return _this;
  }

  _createClass(MeltingText, [{
    key: "age",
    value: function age() {
      return this.init - Date.now();
    }
  }, {
    key: "lastFrame",
    value: function lastFrame() {
      return this.last - Date.now();
    }
  }, {
    key: "corrupt",
    value: function corrupt(v) {
      if (v.length * 1.15 < this.args.input.length) {
        return this.type;
      }

      var chars = v.split('');

      var random = function random(x) {
        return parseInt(Math.random() * x);
      };

      if (random(1024) < 256 && this.maxCorrupt < this.maxMaxCorrupt) {
        this.maxCorrupt += 5;
      }

      for (var _i in chars) {
        this.corruptors[_i] = this.corruptors[_i] || [];

        if (chars[_i].match(/\W/)) {
          continue;
        }

        var charSets = [// this.charDown // Melt Slow
        this.charDown, this.charMid // Melt
        // this.charDown, this.charUp,   this.charMid, // Boil
        // this.charMid, this.charUp, // Burn
        // this.charMid // Simmer
        // this.charUp // Rain
        ];
        var charSet = charSets[random(charSets.length)];

        if (random(8192) < 1) {
          this.corruptors[_i].unshift(charSet[random(charSet.length)]);
        }

        if (this.corruptors[_i].length < this.maxCorrupt) {
          this.corruptors[_i].unshift(charSet[random(charSet.length)]);
        }

        if (random(2048) < 1 && this.maxCorrupt > 25) {
          this.corruptors[_i].splice(5 * random(5));
        }

        this.corruptors[_i].push(this.corruptors[_i].shift());
      }

      for (var i in chars) {
        if (this.corruptors[i]) {
          chars[i] += this.corruptors[i].join('');
        }
      }

      return chars.join('');
    }
  }, {
    key: "typewriter",
    value: function typewriter(v) {
      this.type = this.type || '';

      if (this.type !== v) {
        this.type += v.substr(this.type.length, 1);
        this.onTimeout(150, function () {
          var max = window.scrollY + window.innerHeight;

          if (document.body.scrollHeight > max) {
            window.scrollTo({
              top: document.body.scrollHeight,
              left: 0,
              behavior: 'smooth'
            });
          }
        });
      } else {
        return true;
      }

      return false;
    }
  }]);

  return MeltingText;
}(_View.View);

exports.MeltingText = MeltingText;
  })();
});

require.register("three-collada-loader/index.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "three-collada-loader");
  (function() {
    var THREE = require( 'three' );

/**
* @author Tim Knip / http://www.floorplanner.com/ / tim at floorplanner.com
* @author Tony Parisi / http://www.tonyparisi.com/
*/

var ColladaLoader = function () {

    var COLLADA = null;
    var scene = null;
    var visualScene;
    var kinematicsModel;

    var readyCallbackFunc = null;

    var sources = {};
    var images = {};
    var animations = {};
    var controllers = {};
    var geometries = {};
    var materials = {};
    var effects = {};
    var cameras = {};
    var lights = {};

    var animData;
    var kinematics;
    var visualScenes;
    var kinematicsModels;
    var baseUrl;
    var morphs;
    var skins;

    var flip_uv = true;
    var preferredShading = THREE.SmoothShading;

    var options = {
        // Force Geometry to always be centered at the local origin of the
        // containing Mesh.
        centerGeometry: false,

        // Axis conversion is done for geometries, animations, and controllers.
        // If we ever pull cameras or lights out of the COLLADA file, they'll
        // need extra work.
        convertUpAxis: false,

        subdivideFaces: true,

        upAxis: 'Y',

        // For reflective or refractive materials we'll use this cubemap
        defaultEnvMap: null

    };

    var colladaUnit = 1.0;
    var colladaUp = 'Y';
    var upConversion = null;

    function load ( url, readyCallback, progressCallback, failCallback ) {

        var length = 0;

        if ( document.implementation && document.implementation.createDocument ) {

            var request = new XMLHttpRequest();

            request.onreadystatechange = function() {

                if ( request.readyState === 4 ) {

                    if ( request.status === 0 || request.status === 200 ) {

                        if ( request.response ) {

                            readyCallbackFunc = readyCallback;
                            parse( request.response, undefined, url );

                        } else {

                            if ( failCallback ) {

                                failCallback();

                            } else {

                                console.error( "ColladaLoader: Empty or non-existing file (" + url + ")" );

                            }

                        }

                    }

                } else if ( request.readyState === 3 ) {

                    if ( progressCallback ) {

                        if ( length === 0 ) {

                            length = request.getResponseHeader( "Content-Length" );

                        }

                        progressCallback( { total: length, loaded: request.responseText.length } );

                    }

                }

            };

            request.open( "GET", url, true );
            request.send( null );

        } else {

            alert( "Don't know how to parse XML!" );

        }

    }

    function parse( text, callBack, url ) {

        COLLADA = new DOMParser().parseFromString( text, 'text/xml' );
        callBack = callBack || readyCallbackFunc;

        if ( url !== undefined ) {

            var parts = url.split( '/' );
            parts.pop();
            baseUrl = ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';

        }

        parseAsset();
        setUpConversion();
        images = parseLib( "library_images image", _Image, "image" );
        materials = parseLib( "library_materials material", Material, "material" );
        effects = parseLib( "library_effects effect", Effect, "effect" );
        geometries = parseLib( "library_geometries geometry", Geometry, "geometry" );
        cameras = parseLib( "library_cameras camera", Camera, "camera" );
        lights = parseLib( "library_lights light", Light, "light" );
        controllers = parseLib( "library_controllers controller", Controller, "controller" );
        animations = parseLib( "library_animations animation", Animation, "animation" );
        visualScenes = parseLib( "library_visual_scenes visual_scene", VisualScene, "visual_scene" );
        kinematicsModels = parseLib( "library_kinematics_models kinematics_model", KinematicsModel, "kinematics_model" );

        morphs = [];
        skins = [];

        visualScene = parseScene();
        scene = new THREE.Group();

        for ( var i = 0; i < visualScene.nodes.length; i ++ ) {

            scene.add( createSceneGraph( visualScene.nodes[ i ] ) );

        }

        // unit conversion
        scene.scale.multiplyScalar( colladaUnit );

        createAnimations();

        kinematicsModel = parseKinematicsModel();
        createKinematics();

        var result = {

            scene: scene,
            morphs: morphs,
            skins: skins,
            animations: animData,
            kinematics: kinematics,
            dae: {
                images: images,
                materials: materials,
                cameras: cameras,
                lights: lights,
                effects: effects,
                geometries: geometries,
                controllers: controllers,
                animations: animations,
                visualScenes: visualScenes,
                visualScene: visualScene,
                scene: visualScene,
                kinematicsModels: kinematicsModels,
                kinematicsModel: kinematicsModel
            }

        };

        if ( callBack ) {

            callBack( result );

        }

        return result;

    }

    function setPreferredShading ( shading ) {

        preferredShading = shading;

    }

    function parseAsset () {

        var elements = COLLADA.querySelectorAll('asset');

        var element = elements[0];

        if ( element && element.childNodes ) {

            for ( var i = 0; i < element.childNodes.length; i ++ ) {

                var child = element.childNodes[ i ];

                switch ( child.nodeName ) {

                    case 'unit':

                        var meter = child.getAttribute( 'meter' );

                        if ( meter ) {

                            colladaUnit = parseFloat( meter );

                        }

                        break;

                    case 'up_axis':

                        colladaUp = child.textContent.charAt(0);
                        break;

                }

            }

        }

    }

    function parseLib ( q, classSpec, prefix ) {

        var elements = COLLADA.querySelectorAll(q);

        var lib = {};

        var i = 0;

        var elementsLength = elements.length;

        for ( var j = 0; j < elementsLength; j ++ ) {

            var element = elements[j];
            var daeElement = ( new classSpec() ).parse( element );

            if ( !daeElement.id || daeElement.id.length === 0 ) daeElement.id = prefix + ( i ++ );
            lib[ daeElement.id ] = daeElement;

        }

        return lib;

    }

    function parseScene() {

        var sceneElement = COLLADA.querySelectorAll('scene instance_visual_scene')[0];

        if ( sceneElement ) {

            var url = sceneElement.getAttribute( 'url' ).replace( /^#/, '' );
            return visualScenes[ url.length > 0 ? url : 'visual_scene0' ];

        } else {

            return null;

        }

    }

    function parseKinematicsModel() {

        var kinematicsModelElement = COLLADA.querySelectorAll('instance_kinematics_model')[0];

        if ( kinematicsModelElement ) {

            var url = kinematicsModelElement.getAttribute( 'url' ).replace(/^#/, '');
            return kinematicsModels[ url.length > 0 ? url : 'kinematics_model0' ];

        } else {

            return null;

        }

    }

    function createAnimations() {

        animData = [];

        // fill in the keys
        recurseHierarchy( scene );

    }

    function recurseHierarchy( node ) {

        var n = visualScene.getChildById( node.colladaId, true ),
            newData = null;

        if ( n && n.keys ) {

            newData = {
                fps: 60,
                hierarchy: [ {
                    node: n,
                    keys: n.keys,
                    sids: n.sids
                } ],
                node: node,
                name: 'animation_' + node.name,
                length: 0
            };

            animData.push(newData);

            for ( var i = 0, il = n.keys.length; i < il; i ++ ) {

                newData.length = Math.max( newData.length, n.keys[i].time );

            }

        } else {

            newData = {
                hierarchy: [ {
                    keys: [],
                    sids: []
                } ]
            }

        }

        for ( var i = 0, il = node.children.length; i < il; i ++ ) {

            var d = recurseHierarchy( node.children[i] );

            for ( var j = 0, jl = d.hierarchy.length; j < jl; j ++ ) {

                newData.hierarchy.push( {
                    keys: [],
                    sids: []
                } );

            }

        }

        return newData;

    }

    function calcAnimationBounds () {

        var start = 1000000;
        var end = -start;
        var frames = 0;
        var ID;
        for ( var id in animations ) {

            var animation = animations[ id ];
            ID = ID || animation.id;
            for ( var i = 0; i < animation.sampler.length; i ++ ) {

                var sampler = animation.sampler[ i ];

                sampler.create();

                start = Math.min( start, sampler.startTime );
                end = Math.max( end, sampler.endTime );
                frames = Math.max( frames, sampler.input.length );

            }

        }

        return { start:start, end:end, frames:frames,ID:ID };

    }

    function createMorph ( geometry, ctrl ) {

        var morphCtrl = ctrl instanceof InstanceController ? controllers[ ctrl.url ] : ctrl;

        if ( !morphCtrl || !morphCtrl.morph ) {

            console.log("could not find morph controller!");
            return;

        }

        var morph = morphCtrl.morph;

        for ( var i = 0; i < morph.targets.length; i ++ ) {

            var target_id = morph.targets[ i ];
            var daeGeometry = geometries[ target_id ];

            if ( !daeGeometry.mesh ||
                 !daeGeometry.mesh.primitives ||
                 !daeGeometry.mesh.primitives.length ) {
                 continue;
            }

            var target = daeGeometry.mesh.primitives[ 0 ].geometry;

            if ( target.vertices.length === geometry.vertices.length ) {

                geometry.morphTargets.push( { name: "target_1", vertices: target.vertices } );

            }

        }

        geometry.morphTargets.push( { name: "target_Z", vertices: geometry.vertices } );

    }

    function createSkin ( geometry, ctrl, applyBindShape ) {

        var skinCtrl = controllers[ ctrl.url ];

        if ( !skinCtrl || !skinCtrl.skin ) {

            console.log( "could not find skin controller!" );
            return;

        }

        if ( !ctrl.skeleton || !ctrl.skeleton.length ) {

            console.log( "could not find the skeleton for the skin!" );
            return;

        }

        var skin = skinCtrl.skin;
        var skeleton = visualScene.getChildById( ctrl.skeleton[ 0 ] );
        var hierarchy = [];

        applyBindShape = applyBindShape !== undefined ? applyBindShape : true;

        var bones = [];
        geometry.skinWeights = [];
        geometry.skinIndices = [];

        //createBones( geometry.bones, skin, hierarchy, skeleton, null, -1 );
        //createWeights( skin, geometry.bones, geometry.skinIndices, geometry.skinWeights );

        /*
        geometry.animation = {
            name: 'take_001',
            fps: 30,
            length: 2,
            JIT: true,
            hierarchy: hierarchy
        };
        */

        if ( applyBindShape ) {

            for ( var i = 0; i < geometry.vertices.length; i ++ ) {

                geometry.vertices[ i ].applyMatrix4( skin.bindShapeMatrix );

            }

        }

    }

    function setupSkeleton ( node, bones, frame, parent ) {

        node.world = node.world || new THREE.Matrix4();
        node.localworld = node.localworld || new THREE.Matrix4();
        node.world.copy( node.matrix );
        node.localworld.copy( node.matrix );

        if ( node.channels && node.channels.length ) {

            var channel = node.channels[ 0 ];
            var m = channel.sampler.output[ frame ];

            if ( m instanceof THREE.Matrix4 ) {

                node.world.copy( m );
                node.localworld.copy(m);
                if (frame === 0)
                    node.matrix.copy(m);
            }

        }

        if ( parent ) {

            node.world.multiplyMatrices( parent, node.world );

        }

        bones.push( node );

        for ( var i = 0; i < node.nodes.length; i ++ ) {

            setupSkeleton( node.nodes[ i ], bones, frame, node.world );

        }

    }

    function setupSkinningMatrices ( bones, skin ) {

        // FIXME: this is dumb...

        for ( var i = 0; i < bones.length; i ++ ) {

            var bone = bones[ i ];
            var found = -1;

            if ( bone.type != 'JOINT' ) continue;

            for ( var j = 0; j < skin.joints.length; j ++ ) {

                if ( bone.sid === skin.joints[ j ] ) {

                    found = j;
                    break;

                }

            }

            if ( found >= 0 ) {

                var inv = skin.invBindMatrices[ found ];

                bone.invBindMatrix = inv;
                bone.skinningMatrix = new THREE.Matrix4();
                bone.skinningMatrix.multiplyMatrices(bone.world, inv); // (IBMi * JMi)
                bone.animatrix = new THREE.Matrix4();

                bone.animatrix.copy(bone.localworld);
                bone.weights = [];

                for ( var j = 0; j < skin.weights.length; j ++ ) {

                    for (var k = 0; k < skin.weights[ j ].length; k ++ ) {

                        var w = skin.weights[ j ][ k ];

                        if ( w.joint === found ) {

                            bone.weights.push( w );

                        }

                    }

                }

            } else {

                console.warn( "ColladaLoader: Could not find joint '" + bone.sid + "'." );

                bone.skinningMatrix = new THREE.Matrix4();
                bone.weights = [];

            }
        }

    }

    //Walk the Collada tree and flatten the bones into a list, extract the position, quat and scale from the matrix
    function flattenSkeleton(skeleton) {

        var list = [];
        var walk = function(parentid, node, list) {

            var bone = {};
            bone.name = node.sid;
            bone.parent = parentid;
            bone.matrix = node.matrix;
            var data = [ new THREE.Vector3(),new THREE.Quaternion(),new THREE.Vector3() ];
            bone.matrix.decompose(data[0], data[1], data[2]);

            bone.pos = [ data[0].x,data[0].y,data[0].z ];

            bone.scl = [ data[2].x,data[2].y,data[2].z ];
            bone.rotq = [ data[1].x,data[1].y,data[1].z,data[1].w ];
            list.push(bone);

            for (var i in node.nodes) {

                walk(node.sid, node.nodes[i], list);

            }

        };

        walk(-1, skeleton, list);
        return list;

    }

    //Move the vertices into the pose that is proper for the start of the animation
    function skinToBindPose(geometry,skeleton,skinController) {

        var bones = [];
        setupSkeleton( skeleton, bones, -1 );
        setupSkinningMatrices( bones, skinController.skin );
        var v = new THREE.Vector3();
        var skinned = [];

        for (var i = 0; i < geometry.vertices.length; i ++) {

            skinned.push(new THREE.Vector3());

        }

        for ( i = 0; i < bones.length; i ++ ) {

            if ( bones[ i ].type != 'JOINT' ) continue;

            for ( var j = 0; j < bones[ i ].weights.length; j ++ ) {

                var w = bones[ i ].weights[ j ];
                var vidx = w.index;
                var weight = w.weight;

                var o = geometry.vertices[vidx];
                var s = skinned[vidx];

                v.x = o.x;
                v.y = o.y;
                v.z = o.z;

                v.applyMatrix4( bones[i].skinningMatrix );

                s.x += (v.x * weight);
                s.y += (v.y * weight);
                s.z += (v.z * weight);
            }

        }

        for (var i = 0; i < geometry.vertices.length; i ++) {

            geometry.vertices[i] = skinned[i];

        }

    }

    function applySkin ( geometry, instanceCtrl, frame ) {

        var skinController = controllers[ instanceCtrl.url ];

        frame = frame !== undefined ? frame : 40;

        if ( !skinController || !skinController.skin ) {

            console.log( 'ColladaLoader: Could not find skin controller.' );
            return;

        }

        if ( !instanceCtrl.skeleton || !instanceCtrl.skeleton.length ) {

            console.log( 'ColladaLoader: Could not find the skeleton for the skin. ' );
            return;

        }

        var animationBounds = calcAnimationBounds();
        var skeleton = visualScene.getChildById( instanceCtrl.skeleton[0], true ) || visualScene.getChildBySid( instanceCtrl.skeleton[0], true );

        //flatten the skeleton into a list of bones
        var bonelist = flattenSkeleton(skeleton);
        var joints = skinController.skin.joints;

        //sort that list so that the order reflects the order in the joint list
        var sortedbones = [];
        for (var i = 0; i < joints.length; i ++) {

            for (var j = 0; j < bonelist.length; j ++) {

                if (bonelist[j].name === joints[i]) {

                    sortedbones[i] = bonelist[j];

                }

            }

        }

        //hook up the parents by index instead of name
        for (var i = 0; i < sortedbones.length; i ++) {

            for (var j = 0; j < sortedbones.length; j ++) {

                if (sortedbones[i].parent === sortedbones[j].name) {

                    sortedbones[i].parent = j;

                }

            }

        }


        var i, j, w, vidx, weight;
        var v = new THREE.Vector3(), o, s;

        // move vertices to bind shape
        for ( i = 0; i < geometry.vertices.length; i ++ ) {
            geometry.vertices[i].applyMatrix4( skinController.skin.bindShapeMatrix );
        }

        var skinIndices = [];
        var skinWeights = [];
        var weights = skinController.skin.weights;

        // hook up the skin weights
        // TODO - this might be a good place to choose greatest 4 weights
        for ( var i =0; i < weights.length; i ++ ) {

            var indicies = new THREE.Vector4(weights[i][0] ? weights[i][0].joint : 0,weights[i][1] ? weights[i][1].joint : 0,weights[i][2] ? weights[i][2].joint : 0,weights[i][3] ? weights[i][3].joint : 0);
            var weight = new THREE.Vector4(weights[i][0] ? weights[i][0].weight : 0,weights[i][1] ? weights[i][1].weight : 0,weights[i][2] ? weights[i][2].weight : 0,weights[i][3] ? weights[i][3].weight : 0);

            skinIndices.push(indicies);
            skinWeights.push(weight);

        }

        geometry.skinIndices = skinIndices;
        geometry.skinWeights = skinWeights;
        geometry.bones = sortedbones;
        // process animation, or simply pose the rig if no animation

        //create an animation for the animated bones
        //NOTE: this has no effect when using morphtargets
        var animationdata = { "name":animationBounds.ID,"fps":30,"length":animationBounds.frames / 30,"hierarchy":[] };

        for (var j = 0; j < sortedbones.length; j ++) {

            animationdata.hierarchy.push({ parent:sortedbones[j].parent, name:sortedbones[j].name, keys:[] });

        }

        console.log( 'ColladaLoader:', animationBounds.ID + ' has ' + sortedbones.length + ' bones.' );



        skinToBindPose(geometry, skeleton, skinController);


        for ( frame = 0; frame < animationBounds.frames; frame ++ ) {

            var bones = [];
            var skinned = [];
            // process the frame and setup the rig with a fresh
            // transform, possibly from the bone's animation channel(s)

            setupSkeleton( skeleton, bones, frame );
            setupSkinningMatrices( bones, skinController.skin );

            for (var i = 0; i < bones.length; i ++) {

                for (var j = 0; j < animationdata.hierarchy.length; j ++) {

                    if (animationdata.hierarchy[j].name === bones[i].sid) {

                        var key = {};
                        key.time = (frame / 30);
                        key.matrix = bones[i].animatrix;

                        if (frame === 0)
                            bones[i].matrix = key.matrix;

                        var data = [ new THREE.Vector3(),new THREE.Quaternion(),new THREE.Vector3() ];
                        key.matrix.decompose(data[0], data[1], data[2]);

                        key.pos = [ data[0].x,data[0].y,data[0].z ];

                        key.scl = [ data[2].x,data[2].y,data[2].z ];
                        key.rot = data[1];

                        animationdata.hierarchy[j].keys.push(key);

                    }

                }

            }

            geometry.animation = animationdata;

        }

    }

    function createKinematics() {

        if ( kinematicsModel && kinematicsModel.joints.length === 0 ) {
            kinematics = undefined;
            return;
        }

        var jointMap = {};

        var _addToMap = function( jointIndex, parentVisualElement ) {

            var parentVisualElementId = parentVisualElement.getAttribute( 'id' );
            var colladaNode = visualScene.getChildById( parentVisualElementId, true );
            var joint = kinematicsModel.joints[ jointIndex ];

            scene.traverse(function( node ) {

                if ( node.colladaId == parentVisualElementId ) {

                    jointMap[ jointIndex ] = {
                        node: node,
                        transforms: colladaNode.transforms,
                        joint: joint,
                        position: joint.zeroPosition
                    };

                }

            });

        };

        kinematics = {

            joints: kinematicsModel && kinematicsModel.joints,

            getJointValue: function( jointIndex ) {

                var jointData = jointMap[ jointIndex ];

                if ( jointData ) {

                    return jointData.position;

                } else {

                    console.log( 'getJointValue: joint ' + jointIndex + ' doesn\'t exist' );

                }

            },

            setJointValue: function( jointIndex, value ) {

                var jointData = jointMap[ jointIndex ];

                if ( jointData ) {

                    var joint = jointData.joint;

                    if ( value > joint.limits.max || value < joint.limits.min ) {

                        console.log( 'setJointValue: joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ')' );

                    } else if ( joint.static ) {

                        console.log( 'setJointValue: joint ' + jointIndex + ' is static' );

                    } else {

                        var threejsNode = jointData.node;
                        var axis = joint.axis;
                        var transforms = jointData.transforms;

                        var matrix = new THREE.Matrix4();

                        for (i = 0; i < transforms.length; i ++ ) {

                            var transform = transforms[ i ];

                            // kinda ghetto joint detection
                            if ( transform.sid && transform.sid.indexOf( 'joint' + jointIndex ) !== -1 ) {

                                // apply actual joint value here
                                switch ( joint.type ) {

                                    case 'revolute':

                                        matrix.multiply( m1.makeRotationAxis( axis, THREE.Math.degToRad(value) ) );
                                        break;

                                    case 'prismatic':

                                        matrix.multiply( m1.makeTranslation(axis.x * value, axis.y * value, axis.z * value ) );
                                        break;

                                    default:

                                        console.warn( 'setJointValue: unknown joint type: ' + joint.type );
                                        break;

                                }

                            } else {

                                var m1 = new THREE.Matrix4();

                                switch ( transform.type ) {

                                    case 'matrix':

                                        matrix.multiply( transform.obj );

                                        break;

                                    case 'translate':

                                        matrix.multiply( m1.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );

                                        break;

                                    case 'rotate':

                                        matrix.multiply( m1.makeRotationAxis( transform.obj, transform.angle ) );

                                        break;

                                }
                            }
                        }

                        // apply the matrix to the threejs node
                        var elementsFloat32Arr = matrix.elements;
                        var elements = Array.prototype.slice.call( elementsFloat32Arr );

                        var elementsRowMajor = [
                            elements[ 0 ],
                            elements[ 4 ],
                            elements[ 8 ],
                            elements[ 12 ],
                            elements[ 1 ],
                            elements[ 5 ],
                            elements[ 9 ],
                            elements[ 13 ],
                            elements[ 2 ],
                            elements[ 6 ],
                            elements[ 10 ],
                            elements[ 14 ],
                            elements[ 3 ],
                            elements[ 7 ],
                            elements[ 11 ],
                            elements[ 15 ]
                        ];

                        threejsNode.matrix.set.apply( threejsNode.matrix, elementsRowMajor );
                        threejsNode.matrix.decompose( threejsNode.position, threejsNode.quaternion, threejsNode.scale );
                    }

                } else {

                    console.log( 'setJointValue: joint ' + jointIndex + ' doesn\'t exist' );

                }

            }

        };

        var element = COLLADA.querySelector('scene instance_kinematics_scene');

        if ( element ) {

            for ( var i = 0; i < element.childNodes.length; i ++ ) {

                var child = element.childNodes[ i ];

                if ( child.nodeType != 1 ) continue;

                switch ( child.nodeName ) {

                    case 'bind_joint_axis':

                        var visualTarget = child.getAttribute( 'target' ).split( '/' ).pop();
                        var axis = child.querySelector('axis param').textContent;
                        var jointIndex = parseInt( axis.split( 'joint' ).pop().split( '.' )[0] );
                        var visualTargetElement = COLLADA.querySelector( '[sid="' + visualTarget + '"]' );

                        if ( visualTargetElement ) {
                            var parentVisualElement = visualTargetElement.parentElement;
                            _addToMap(jointIndex, parentVisualElement);
                        }

                        break;

                    default:

                        break;

                }

            }
        }

    }

    function createSceneGraph ( node, parent ) {

        var obj = new THREE.Object3D();
        var skinned = false;
        var skinController;
        var morphController;
        var i, j;

        // FIXME: controllers

        for ( i = 0; i < node.controllers.length; i ++ ) {

            var controller = controllers[ node.controllers[ i ].url ];

            switch ( controller.type ) {

                case 'skin':

                    if ( geometries[ controller.skin.source ] ) {

                        var inst_geom = new InstanceGeometry();

                        inst_geom.url = controller.skin.source;
                        inst_geom.instance_material = node.controllers[ i ].instance_material;

                        node.geometries.push( inst_geom );
                        skinned = true;
                        skinController = node.controllers[ i ];

                    } else if ( controllers[ controller.skin.source ] ) {

                        // urgh: controller can be chained
                        // handle the most basic case...

                        var second = controllers[ controller.skin.source ];
                        morphController = second;
                    //	skinController = node.controllers[i];

                        if ( second.morph && geometries[ second.morph.source ] ) {

                            var inst_geom = new InstanceGeometry();

                            inst_geom.url = second.morph.source;
                            inst_geom.instance_material = node.controllers[ i ].instance_material;

                            node.geometries.push( inst_geom );

                        }

                    }

                    break;

                case 'morph':

                    if ( geometries[ controller.morph.source ] ) {

                        var inst_geom = new InstanceGeometry();

                        inst_geom.url = controller.morph.source;
                        inst_geom.instance_material = node.controllers[ i ].instance_material;

                        node.geometries.push( inst_geom );
                        morphController = node.controllers[ i ];

                    }

                    console.log( 'ColladaLoader: Morph-controller partially supported.' );

                default:
                    break;

            }

        }

        // geometries

        var double_sided_materials = {};

        for ( i = 0; i < node.geometries.length; i ++ ) {

            var instance_geometry = node.geometries[i];
            var instance_materials = instance_geometry.instance_material;
            var geometry = geometries[ instance_geometry.url ];
            var used_materials = {};
            var used_materials_array = [];
            var num_materials = 0;
            var first_material;

            if ( geometry ) {

                if ( !geometry.mesh || !geometry.mesh.primitives )
                    continue;

                if ( obj.name.length === 0 ) {

                    obj.name = geometry.id;

                }

                // collect used fx for this geometry-instance

                if ( instance_materials ) {

                    for ( j = 0; j < instance_materials.length; j ++ ) {

                        var instance_material = instance_materials[ j ];
                        var mat = materials[ instance_material.target ];
                        var effect_id = mat.instance_effect.url;
                        var shader = effects[ effect_id ].shader;
                        var material3js = shader.material;

                        if ( geometry.doubleSided ) {

                            if ( !( instance_material.symbol in double_sided_materials ) ) {

                                var _copied_material = material3js.clone();
                                _copied_material.side = THREE.DoubleSide;
                                double_sided_materials[ instance_material.symbol ] = _copied_material;

                            }

                            material3js = double_sided_materials[ instance_material.symbol ];

                        }

                        material3js.opacity = !material3js.opacity ? 1 : material3js.opacity;
                        used_materials[ instance_material.symbol ] = num_materials;
                        used_materials_array.push( material3js );
                        first_material = material3js;
                        first_material.name = mat.name === null || mat.name === '' ? mat.id : mat.name;
                        num_materials ++;

                    }

                }

                var mesh;
                var material = first_material || new THREE.MeshLambertMaterial( { color: 0xdddddd, side: geometry.doubleSided ? THREE.DoubleSide : THREE.FrontSide } );
                var geom = geometry.mesh.geometry3js;

                if ( num_materials > 1 ) {

                    material = new THREE.MultiMaterial( used_materials_array );

                }

                if ( skinController !== undefined ) {


                    applySkin( geom, skinController );

                    if ( geom.morphTargets.length > 0 ) {

                        material.morphTargets = true;
                        material.skinning = false;

                    } else {

                        material.morphTargets = false;
                        material.skinning = true;

                    }


                    mesh = new THREE.SkinnedMesh( geom, material, false );


                    //mesh.skeleton = skinController.skeleton;
                    //mesh.skinController = controllers[ skinController.url ];
                    //mesh.skinInstanceController = skinController;
                    mesh.name = 'skin_' + skins.length;



                    //mesh.animationHandle.setKey(0);
                    skins.push( mesh );

                } else if ( morphController !== undefined ) {

                    createMorph( geom, morphController );

                    material.morphTargets = true;

                    mesh = new THREE.Mesh( geom, material );
                    mesh.name = 'morph_' + morphs.length;

                    morphs.push( mesh );

                } else {

                    if ( geom.isLineStrip === true ) {

                        mesh = new THREE.Line( geom );

                    } else {

                        mesh = new THREE.Mesh( geom, material );

                    }

                }

                obj.add(mesh);

            }

        }

        for ( i = 0; i < node.cameras.length; i ++ ) {

            var instance_camera = node.cameras[i];
            var cparams = cameras[instance_camera.url];

            var cam = new THREE.PerspectiveCamera(cparams.yfov, parseFloat(cparams.aspect_ratio),
                    parseFloat(cparams.znear), parseFloat(cparams.zfar));

            obj.add(cam);
        }

        for ( i = 0; i < node.lights.length; i ++ ) {

            var light = null;
            var instance_light = node.lights[i];
            var lparams = lights[instance_light.url];

            if ( lparams && lparams.technique ) {

                var color = lparams.color.getHex();
                var intensity = lparams.intensity;
                var distance = lparams.distance;
                var angle = lparams.falloff_angle;

                switch ( lparams.technique ) {

                    case 'directional':

                        light = new THREE.DirectionalLight( color, intensity, distance );
                        light.position.set(0, 0, 1);
                        break;

                    case 'point':

                        light = new THREE.PointLight( color, intensity, distance );
                        break;

                    case 'spot':

                        light = new THREE.SpotLight( color, intensity, distance, angle );
                        light.position.set(0, 0, 1);
                        break;

                    case 'ambient':

                        light = new THREE.AmbientLight( color );
                        break;

                }

            }

            if (light) {
                obj.add(light);
            }
        }

        obj.name = node.name || node.id || "";
        obj.colladaId = node.id || "";
        obj.layer = node.layer || "";
        obj.matrix = node.matrix;
        obj.matrix.decompose( obj.position, obj.quaternion, obj.scale );

        if ( options.centerGeometry && obj.geometry ) {

            var delta = obj.geometry.center();
            delta.multiply( obj.scale );
            delta.applyQuaternion( obj.quaternion );

            obj.position.sub( delta );

        }

        for ( i = 0; i < node.nodes.length; i ++ ) {

            obj.add( createSceneGraph( node.nodes[i], node ) );

        }

        return obj;

    }

    function getJointId( skin, id ) {

        for ( var i = 0; i < skin.joints.length; i ++ ) {

            if ( skin.joints[ i ] === id ) {

                return i;

            }

        }

    }

    function getLibraryNode( id ) {

        var nodes = COLLADA.querySelectorAll('library_nodes node');

        for ( var i = 0; i < nodes.length; i++ ) {

            var attObj = nodes[i].attributes.getNamedItem('id');

            if ( attObj && attObj.value === id ) {

                return nodes[i];

            }

        }

        return undefined;

    }

    function getChannelsForNode ( node ) {

        var channels = [];
        var startTime = 1000000;
        var endTime = -1000000;

        for ( var id in animations ) {

            var animation = animations[id];

            for ( var i = 0; i < animation.channel.length; i ++ ) {

                var channel = animation.channel[i];
                var sampler = animation.sampler[i];
                var id = channel.target.split('/')[0];

                if ( id == node.id ) {

                    sampler.create();
                    channel.sampler = sampler;
                    startTime = Math.min(startTime, sampler.startTime);
                    endTime = Math.max(endTime, sampler.endTime);
                    channels.push(channel);

                }

            }

        }

        if ( channels.length ) {

            node.startTime = startTime;
            node.endTime = endTime;

        }

        return channels;

    }

    function calcFrameDuration( node ) {

        var minT = 10000000;

        for ( var i = 0; i < node.channels.length; i ++ ) {

            var sampler = node.channels[i].sampler;

            for ( var j = 0; j < sampler.input.length - 1; j ++ ) {

                var t0 = sampler.input[ j ];
                var t1 = sampler.input[ j + 1 ];
                minT = Math.min( minT, t1 - t0 );

            }
        }

        return minT;

    }

    function calcMatrixAt( node, t ) {

        var animated = {};

        var i, j;

        for ( i = 0; i < node.channels.length; i ++ ) {

            var channel = node.channels[ i ];
            animated[ channel.sid ] = channel;

        }

        var matrix = new THREE.Matrix4();

        for ( i = 0; i < node.transforms.length; i ++ ) {

            var transform = node.transforms[ i ];
            var channel = animated[ transform.sid ];

            if ( channel !== undefined ) {

                var sampler = channel.sampler;
                var value;

                for ( j = 0; j < sampler.input.length - 1; j ++ ) {

                    if ( sampler.input[ j + 1 ] > t ) {

                        value = sampler.output[ j ];
                        //console.log(value.flatten)
                        break;

                    }

                }

                if ( value !== undefined ) {

                    if ( value instanceof THREE.Matrix4 ) {

                        matrix.multiplyMatrices( matrix, value );

                    } else {

                        // FIXME: handle other types

                        matrix.multiplyMatrices( matrix, transform.matrix );

                    }

                } else {

                    matrix.multiplyMatrices( matrix, transform.matrix );

                }

            } else {

                matrix.multiplyMatrices( matrix, transform.matrix );

            }

        }

        return matrix;

    }

    function bakeAnimations ( node ) {

        if ( node.channels && node.channels.length ) {

            var keys = [],
                sids = [];

            for ( var i = 0, il = node.channels.length; i < il; i ++ ) {

                var channel = node.channels[i],
                    fullSid = channel.fullSid,
                    sampler = channel.sampler,
                    input = sampler.input,
                    transform = node.getTransformBySid( channel.sid ),
                    member;

                if ( channel.arrIndices ) {

                    member = [];

                    for ( var j = 0, jl = channel.arrIndices.length; j < jl; j ++ ) {

                        member[ j ] = getConvertedIndex( channel.arrIndices[ j ] );

                    }

                } else {

                    member = getConvertedMember( channel.member );

                }

                if ( transform ) {

                    if ( sids.indexOf( fullSid ) === -1 ) {

                        sids.push( fullSid );

                    }

                    for ( var j = 0, jl = input.length; j < jl; j ++ ) {

                        var time = input[j],
                            data = sampler.getData( transform.type, j, member ),
                            key = findKey( keys, time );

                        if ( !key ) {

                            key = new Key( time );
                            var timeNdx = findTimeNdx( keys, time );
                            keys.splice( timeNdx === -1 ? keys.length : timeNdx, 0, key );

                        }

                        key.addTarget( fullSid, transform, member, data );

                    }

                } else {

                    console.log( 'Could not find transform "' + channel.sid + '" in node ' + node.id );

                }

            }

            // post process
            for ( var i = 0; i < sids.length; i ++ ) {

                var sid = sids[ i ];

                for ( var j = 0; j < keys.length; j ++ ) {

                    var key = keys[ j ];

                    if ( !key.hasTarget( sid ) ) {

                        interpolateKeys( keys, key, j, sid );

                    }

                }

            }

            node.keys = keys;
            node.sids = sids;

        }

    }

    function findKey ( keys, time) {

        var retVal = null;

        for ( var i = 0, il = keys.length; i < il && retVal === null; i ++ ) {

            var key = keys[i];

            if ( key.time === time ) {

                retVal = key;

            } else if ( key.time > time ) {

                break;

            }

        }

        return retVal;

    }

    function findTimeNdx ( keys, time) {

        var ndx = -1;

        for ( var i = 0, il = keys.length; i < il && ndx === -1; i ++ ) {

            var key = keys[i];

            if ( key.time >= time ) {

                ndx = i;

            }

        }

        return ndx;

    }

    function interpolateKeys ( keys, key, ndx, fullSid ) {

        var prevKey = getPrevKeyWith( keys, fullSid, ndx ? ndx - 1 : 0 ),
            nextKey = getNextKeyWith( keys, fullSid, ndx + 1 );

        if ( prevKey && nextKey ) {

            var scale = (key.time - prevKey.time) / (nextKey.time - prevKey.time),
                prevTarget = prevKey.getTarget( fullSid ),
                nextData = nextKey.getTarget( fullSid ).data,
                prevData = prevTarget.data,
                data;

            if ( prevTarget.type === 'matrix' ) {

                data = prevData;

            } else if ( prevData.length ) {

                data = [];

                for ( var i = 0; i < prevData.length; ++ i ) {

                    data[ i ] = prevData[ i ] + ( nextData[ i ] - prevData[ i ] ) * scale;

                }

            } else {

                data = prevData + ( nextData - prevData ) * scale;

            }

            key.addTarget( fullSid, prevTarget.transform, prevTarget.member, data );

        }

    }

    // Get next key with given sid

    function getNextKeyWith( keys, fullSid, ndx ) {

        for ( ; ndx < keys.length; ndx ++ ) {

            var key = keys[ ndx ];

            if ( key.hasTarget( fullSid ) ) {

                return key;

            }

        }

        return null;

    }

    // Get previous key with given sid

    function getPrevKeyWith( keys, fullSid, ndx ) {

        ndx = ndx >= 0 ? ndx : ndx + keys.length;

        for ( ; ndx >= 0; ndx -- ) {

            var key = keys[ ndx ];

            if ( key.hasTarget( fullSid ) ) {

                return key;

            }

        }

        return null;

    }

    function _Image() {

        this.id = "";
        this.init_from = "";

    }

    _Image.prototype.parse = function(element) {

        this.id = element.getAttribute('id');

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            if ( child.nodeName === 'init_from' ) {

                this.init_from = child.textContent;

            }

        }

        return this;

    };

    function Controller() {

        this.id = "";
        this.name = "";
        this.type = "";
        this.skin = null;
        this.morph = null;

    }

    Controller.prototype.parse = function( element ) {

        this.id = element.getAttribute('id');
        this.name = element.getAttribute('name');
        this.type = "none";

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            switch ( child.nodeName ) {

                case 'skin':

                    this.skin = (new Skin()).parse(child);
                    this.type = child.nodeName;
                    break;

                case 'morph':

                    this.morph = (new Morph()).parse(child);
                    this.type = child.nodeName;
                    break;

                default:
                    break;

            }
        }

        return this;

    };

    function Morph() {

        this.method = null;
        this.source = null;
        this.targets = null;
        this.weights = null;

    }

    Morph.prototype.parse = function( element ) {

        var sources = {};
        var inputs = [];
        var i;

        this.method = element.getAttribute( 'method' );
        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );

        for ( i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'source':

                    var source = ( new Source() ).parse( child );
                    sources[ source.id ] = source;
                    break;

                case 'targets':

                    inputs = this.parseInputs( child );
                    break;

                default:

                    console.log( child.nodeName );
                    break;

            }

        }

        for ( i = 0; i < inputs.length; i ++ ) {

            var input = inputs[ i ];
            var source = sources[ input.source ];

            switch ( input.semantic ) {

                case 'MORPH_TARGET':

                    this.targets = source.read();
                    break;

                case 'MORPH_WEIGHT':

                    this.weights = source.read();
                    break;

                default:
                    break;

            }
        }

        return this;

    };

    Morph.prototype.parseInputs = function(element) {

        var inputs = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1) continue;

            switch ( child.nodeName ) {

                case 'input':

                    inputs.push( (new Input()).parse(child) );
                    break;

                default:
                    break;
            }
        }

        return inputs;

    };

    function Skin() {

        this.source = "";
        this.bindShapeMatrix = null;
        this.invBindMatrices = [];
        this.joints = [];
        this.weights = [];

    }

    Skin.prototype.parse = function( element ) {

        var sources = {};
        var joints, weights;

        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );
        this.invBindMatrices = [];
        this.joints = [];
        this.weights = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'bind_shape_matrix':

                    var f = _floats(child.textContent);
                    this.bindShapeMatrix = getConvertedMat4( f );
                    break;

                case 'source':

                    var src = new Source().parse(child);
                    sources[ src.id ] = src;
                    break;

                case 'joints':

                    joints = child;
                    break;

                case 'vertex_weights':

                    weights = child;
                    break;

                default:

                    console.log( child.nodeName );
                    break;

            }
        }

        this.parseJoints( joints, sources );
        this.parseWeights( weights, sources );

        return this;

    };

    Skin.prototype.parseJoints = function ( element, sources ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'input':

                    var input = ( new Input() ).parse( child );
                    var source = sources[ input.source ];

                    if ( input.semantic === 'JOINT' ) {

                        this.joints = source.read();

                    } else if ( input.semantic === 'INV_BIND_MATRIX' ) {

                        this.invBindMatrices = source.read();

                    }

                    break;

                default:
                    break;
            }

        }

    };

    Skin.prototype.parseWeights = function ( element, sources ) {

        var v, vcount, inputs = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'input':

                    inputs.push( ( new Input() ).parse( child ) );
                    break;

                case 'v':

                    v = _ints( child.textContent );
                    break;

                case 'vcount':

                    vcount = _ints( child.textContent );
                    break;

                default:
                    break;

            }

        }

        var index = 0;

        for ( var i = 0; i < vcount.length; i ++ ) {

            var numBones = vcount[i];
            var vertex_weights = [];

            for ( var j = 0; j < numBones; j ++ ) {

                var influence = {};

                for ( var k = 0; k < inputs.length; k ++ ) {

                    var input = inputs[ k ];
                    var value = v[ index + input.offset ];

                    switch ( input.semantic ) {

                        case 'JOINT':

                            influence.joint = value;//this.joints[value];
                            break;

                        case 'WEIGHT':

                            influence.weight = sources[ input.source ].data[ value ];
                            break;

                        default:
                            break;

                    }

                }

                vertex_weights.push( influence );
                index += inputs.length;
            }

            for ( var j = 0; j < vertex_weights.length; j ++ ) {

                vertex_weights[ j ].index = i;

            }

            this.weights.push( vertex_weights );

        }

    };

    function VisualScene () {

        this.id = "";
        this.name = "";
        this.nodes = [];
        this.scene = new THREE.Group();

    }

    VisualScene.prototype.getChildById = function( id, recursive ) {

        for ( var i = 0; i < this.nodes.length; i ++ ) {

            var node = this.nodes[ i ].getChildById( id, recursive );

            if ( node ) {

                return node;

            }

        }

        return null;

    };

    VisualScene.prototype.getChildBySid = function( sid, recursive ) {

        for ( var i = 0; i < this.nodes.length; i ++ ) {

            var node = this.nodes[ i ].getChildBySid( sid, recursive );

            if ( node ) {

                return node;

            }

        }

        return null;

    };

    VisualScene.prototype.parse = function( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );
        this.nodes = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'node':

                    this.nodes.push( ( new Node() ).parse( child ) );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    function Node() {

        this.id = "";
        this.name = "";
        this.sid = "";
        this.nodes = [];
        this.controllers = [];
        this.transforms = [];
        this.geometries = [];
        this.channels = [];
        this.matrix = new THREE.Matrix4();

    }

    Node.prototype.getChannelForTransform = function( transformSid ) {

        for ( var i = 0; i < this.channels.length; i ++ ) {

            var channel = this.channels[i];
            var parts = channel.target.split('/');
            var id = parts.shift();
            var sid = parts.shift();
            var dotSyntax = (sid.indexOf(".") >= 0);
            var arrSyntax = (sid.indexOf("(") >= 0);
            var arrIndices;
            var member;

            if ( dotSyntax ) {

                parts = sid.split(".");
                sid = parts.shift();
                member = parts.shift();

            } else if ( arrSyntax ) {

                arrIndices = sid.split("(");
                sid = arrIndices.shift();

                for ( var j = 0; j < arrIndices.length; j ++ ) {

                    arrIndices[ j ] = parseInt( arrIndices[ j ].replace( /\)/, '' ) );

                }

            }

            if ( sid === transformSid ) {

                channel.info = { sid: sid, dotSyntax: dotSyntax, arrSyntax: arrSyntax, arrIndices: arrIndices };
                return channel;

            }

        }

        return null;

    };

    Node.prototype.getChildById = function ( id, recursive ) {

        if ( this.id === id ) {

            return this;

        }

        if ( recursive ) {

            for ( var i = 0; i < this.nodes.length; i ++ ) {

                var n = this.nodes[ i ].getChildById( id, recursive );

                if ( n ) {

                    return n;

                }

            }

        }

        return null;

    };

    Node.prototype.getChildBySid = function ( sid, recursive ) {

        if ( this.sid === sid ) {

            return this;

        }

        if ( recursive ) {

            for ( var i = 0; i < this.nodes.length; i ++ ) {

                var n = this.nodes[ i ].getChildBySid( sid, recursive );

                if ( n ) {

                    return n;

                }

            }
        }

        return null;

    };

    Node.prototype.getTransformBySid = function ( sid ) {

        for ( var i = 0; i < this.transforms.length; i ++ ) {

            if ( this.transforms[ i ].sid === sid ) return this.transforms[ i ];

        }

        return null;

    };

    Node.prototype.parse = function( element ) {

        var url;

        this.id = element.getAttribute('id');
        this.sid = element.getAttribute('sid');
        this.name = element.getAttribute('name');
        this.type = element.getAttribute('type');
        this.layer = element.getAttribute('layer');

        this.type = this.type === 'JOINT' ? this.type : 'NODE';

        this.nodes = [];
        this.transforms = [];
        this.geometries = [];
        this.cameras = [];
        this.lights = [];
        this.controllers = [];
        this.matrix = new THREE.Matrix4();

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'node':

                    this.nodes.push( ( new Node() ).parse( child ) );
                    break;

                case 'instance_camera':

                    this.cameras.push( ( new InstanceCamera() ).parse( child ) );
                    break;

                case 'instance_controller':

                    this.controllers.push( ( new InstanceController() ).parse( child ) );
                    break;

                case 'instance_geometry':

                    this.geometries.push( ( new InstanceGeometry() ).parse( child ) );
                    break;

                case 'instance_light':

                    this.lights.push( ( new InstanceLight() ).parse( child ) );
                    break;

                case 'instance_node':

                    url = child.getAttribute( 'url' ).replace( /^#/, '' );
                    var iNode = getLibraryNode( url );

                    if ( iNode ) {

                        this.nodes.push( ( new Node() ).parse( iNode )) ;

                    }

                    break;

                case 'rotate':
                case 'translate':
                case 'scale':
                case 'matrix':
                case 'lookat':
                case 'skew':

                    this.transforms.push( ( new Transform() ).parse( child ) );
                    break;

                case 'extra':
                    break;

                default:

                    console.log( child.nodeName );
                    break;

            }

        }

        this.channels = getChannelsForNode( this );
        bakeAnimations( this );

        this.updateMatrix();

        return this;

    };

    Node.prototype.updateMatrix = function () {

        this.matrix.identity();

        for ( var i = 0; i < this.transforms.length; i ++ ) {

            this.transforms[ i ].apply( this.matrix );

        }

    };

    function Transform () {

        this.sid = "";
        this.type = "";
        this.data = [];
        this.obj = null;

    }

    Transform.prototype.parse = function ( element ) {

        this.sid = element.getAttribute( 'sid' );
        this.type = element.nodeName;
        this.data = _floats( element.textContent );
        this.convert();

        return this;

    };

    Transform.prototype.convert = function () {

        switch ( this.type ) {

            case 'matrix':

                this.obj = getConvertedMat4( this.data );
                break;

            case 'rotate':

                this.angle = THREE.Math.degToRad( this.data[3] );

            case 'translate':

                fixCoords( this.data, -1 );
                this.obj = new THREE.Vector3( this.data[ 0 ], this.data[ 1 ], this.data[ 2 ] );
                break;

            case 'scale':

                fixCoords( this.data, 1 );
                this.obj = new THREE.Vector3( this.data[ 0 ], this.data[ 1 ], this.data[ 2 ] );
                break;

            default:
                console.log( 'Can not convert Transform of type ' + this.type );
                break;

        }

    };

    Transform.prototype.apply = function () {

        var m1 = new THREE.Matrix4();

        return function ( matrix ) {

            switch ( this.type ) {

                case 'matrix':

                    matrix.multiply( this.obj );

                    break;

                case 'translate':

                    matrix.multiply( m1.makeTranslation( this.obj.x, this.obj.y, this.obj.z ) );

                    break;

                case 'rotate':

                    matrix.multiply( m1.makeRotationAxis( this.obj, this.angle ) );

                    break;

                case 'scale':

                    matrix.scale( this.obj );

                    break;

            }

        };

    }();

    Transform.prototype.update = function ( data, member ) {

        var members = [ 'X', 'Y', 'Z', 'ANGLE' ];

        switch ( this.type ) {

            case 'matrix':

                if ( ! member ) {

                    this.obj.copy( data );

                } else if ( member.length === 1 ) {

                    switch ( member[ 0 ] ) {

                        case 0:

                            this.obj.n11 = data[ 0 ];
                            this.obj.n21 = data[ 1 ];
                            this.obj.n31 = data[ 2 ];
                            this.obj.n41 = data[ 3 ];

                            break;

                        case 1:

                            this.obj.n12 = data[ 0 ];
                            this.obj.n22 = data[ 1 ];
                            this.obj.n32 = data[ 2 ];
                            this.obj.n42 = data[ 3 ];

                            break;

                        case 2:

                            this.obj.n13 = data[ 0 ];
                            this.obj.n23 = data[ 1 ];
                            this.obj.n33 = data[ 2 ];
                            this.obj.n43 = data[ 3 ];

                            break;

                        case 3:

                            this.obj.n14 = data[ 0 ];
                            this.obj.n24 = data[ 1 ];
                            this.obj.n34 = data[ 2 ];
                            this.obj.n44 = data[ 3 ];

                            break;

                    }

                } else if ( member.length === 2 ) {

                    var propName = 'n' + ( member[ 0 ] + 1 ) + ( member[ 1 ] + 1 );
                    this.obj[ propName ] = data;

                } else {

                    console.log('Incorrect addressing of matrix in transform.');

                }

                break;

            case 'translate':
            case 'scale':

                if ( Object.prototype.toString.call( member ) === '[object Array]' ) {

                    member = members[ member[ 0 ] ];

                }

                switch ( member ) {

                    case 'X':

                        this.obj.x = data;
                        break;

                    case 'Y':

                        this.obj.y = data;
                        break;

                    case 'Z':

                        this.obj.z = data;
                        break;

                    default:

                        this.obj.x = data[ 0 ];
                        this.obj.y = data[ 1 ];
                        this.obj.z = data[ 2 ];
                        break;

                }

                break;

            case 'rotate':

                if ( Object.prototype.toString.call( member ) === '[object Array]' ) {

                    member = members[ member[ 0 ] ];

                }

                switch ( member ) {

                    case 'X':

                        this.obj.x = data;
                        break;

                    case 'Y':

                        this.obj.y = data;
                        break;

                    case 'Z':

                        this.obj.z = data;
                        break;

                    case 'ANGLE':

                        this.angle = THREE.Math.degToRad( data );
                        break;

                    default:

                        this.obj.x = data[ 0 ];
                        this.obj.y = data[ 1 ];
                        this.obj.z = data[ 2 ];
                        this.angle = THREE.Math.degToRad( data[ 3 ] );
                        break;

                }
                break;

        }

    };

    function InstanceController() {

        this.url = "";
        this.skeleton = [];
        this.instance_material = [];

    }

    InstanceController.prototype.parse = function ( element ) {

        this.url = element.getAttribute('url').replace(/^#/, '');
        this.skeleton = [];
        this.instance_material = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType !== 1 ) continue;

            switch ( child.nodeName ) {

                case 'skeleton':

                    this.skeleton.push( child.textContent.replace(/^#/, '') );
                    break;

                case 'bind_material':

                    var instances = child.querySelectorAll('instance_material');

                    for ( var j = 0; j < instances.length; j ++ ) {

                        var instance = instances[j];
                        this.instance_material.push( (new InstanceMaterial()).parse(instance) );

                    }


                    break;

                case 'extra':
                    break;

                default:
                    break;

            }
        }

        return this;

    };

    function InstanceMaterial () {

        this.symbol = "";
        this.target = "";

    }

    InstanceMaterial.prototype.parse = function ( element ) {

        this.symbol = element.getAttribute('symbol');
        this.target = element.getAttribute('target').replace(/^#/, '');
        return this;

    };

    function InstanceGeometry() {

        this.url = "";
        this.instance_material = [];

    }

    InstanceGeometry.prototype.parse = function ( element ) {

        this.url = element.getAttribute('url').replace(/^#/, '');
        this.instance_material = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1 ) continue;

            if ( child.nodeName === 'bind_material' ) {

                var instances = child.querySelectorAll('instance_material');

                for ( var j = 0; j < instances.length; j ++ ) {

                    var instance = instances[j];
                    this.instance_material.push( (new InstanceMaterial()).parse(instance) );

                }

                break;

            }

        }

        return this;

    };

    function Geometry() {

        this.id = "";
        this.mesh = null;

    }

    Geometry.prototype.parse = function ( element ) {

        this.id = element.getAttribute('id');

        extractDoubleSided( this, element );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];

            switch ( child.nodeName ) {

                case 'mesh':

                    this.mesh = (new Mesh(this)).parse(child);
                    break;

                case 'extra':

                    // console.log( child );
                    break;

                default:
                    break;
            }
        }

        return this;

    };

    function Mesh( geometry ) {

        this.geometry = geometry.id;
        this.primitives = [];
        this.vertices = null;
        this.geometry3js = null;

    }

    Mesh.prototype.parse = function ( element ) {

        this.primitives = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            switch ( child.nodeName ) {

                case 'source':

                    _source( child );
                    break;

                case 'vertices':

                    this.vertices = ( new Vertices() ).parse( child );
                    break;

                case 'linestrips':

                    this.primitives.push( ( new LineStrips().parse( child ) ) );
                    break;

                case 'triangles':

                    this.primitives.push( ( new Triangles().parse( child ) ) );
                    break;

                case 'polygons':

                    this.primitives.push( ( new Polygons().parse( child ) ) );
                    break;

                case 'polylist':

                    this.primitives.push( ( new Polylist().parse( child ) ) );
                    break;

                default:
                    break;

            }

        }

        this.geometry3js = new THREE.Geometry();

        if ( this.vertices === null ) {

            // TODO (mrdoob): Study case when this is null (carrier.dae)

            return this;

        }

        var vertexData = sources[ this.vertices.input['POSITION'].source ].data;

        for ( var i = 0; i < vertexData.length; i += 3 ) {

            this.geometry3js.vertices.push( getConvertedVec3( vertexData, i ).clone() );

        }

        for ( var i = 0; i < this.primitives.length; i ++ ) {

            var primitive = this.primitives[ i ];
            primitive.setVertices( this.vertices );
            this.handlePrimitive( primitive, this.geometry3js );

        }

        if ( this.geometry3js.calcNormals ) {

            this.geometry3js.computeVertexNormals();
            delete this.geometry3js.calcNormals;

        }

        return this;

    };

    Mesh.prototype.handlePrimitive = function ( primitive, geom ) {

        if ( primitive instanceof LineStrips ) {

            // TODO: Handle indices. Maybe easier with BufferGeometry?

            geom.isLineStrip = true;
            return;

        }

        var j, k, pList = primitive.p, inputs = primitive.inputs;
        var input, index, idx32;
        var source, numParams;
        var vcIndex = 0, vcount = 3, maxOffset = 0;
        var texture_sets = [];

        for ( j = 0; j < inputs.length; j ++ ) {

            input = inputs[ j ];

            var offset = input.offset + 1;
            maxOffset = (maxOffset < offset) ? offset : maxOffset;

            switch ( input.semantic ) {

                case 'TEXCOORD':
                    texture_sets.push( input.set );
                    break;

            }

        }

        for ( var pCount = 0; pCount < pList.length; ++ pCount ) {

            var p = pList[ pCount ], i = 0;

            while ( i < p.length ) {

                var vs = [];
                var ns = [];
                var ts = null;
                var cs = [];

                if ( primitive.vcount ) {

                    vcount = primitive.vcount.length ? primitive.vcount[ vcIndex ++ ] : primitive.vcount;

                } else {

                    vcount = p.length / maxOffset;

                }


                for ( j = 0; j < vcount; j ++ ) {

                    for ( k = 0; k < inputs.length; k ++ ) {

                        input = inputs[ k ];
                        source = sources[ input.source ];

                        index = p[ i + ( j * maxOffset ) + input.offset ];
                        numParams = source.accessor.params.length;
                        idx32 = index * numParams;

                        switch ( input.semantic ) {

                            case 'VERTEX':

                                vs.push( index );

                                break;

                            case 'NORMAL':

                                ns.push( getConvertedVec3( source.data, idx32 ) );

                                break;

                            case 'TEXCOORD':

                                ts = ts || { };
                                if ( ts[ input.set ] === undefined ) ts[ input.set ] = [];
                                // invert the V
                                ts[ input.set ].push( new THREE.Vector2( source.data[ idx32 ], source.data[ idx32 + 1 ] ) );

                                break;

                            case 'COLOR':

                                cs.push( new THREE.Color().setRGB( source.data[ idx32 ], source.data[ idx32 + 1 ], source.data[ idx32 + 2 ] ) );

                                break;

                            default:

                                break;

                        }

                    }

                }

                if ( ns.length === 0 ) {

                    // check the vertices inputs
                    input = this.vertices.input.NORMAL;

                    if ( input ) {

                        source = sources[ input.source ];
                        numParams = source.accessor.params.length;

                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {

                            ns.push( getConvertedVec3( source.data, vs[ ndx ] * numParams ) );

                        }

                    } else {

                        geom.calcNormals = true;

                    }

                }

                if ( !ts ) {

                    ts = { };
                    // check the vertices inputs
                    input = this.vertices.input.TEXCOORD;

                    if ( input ) {

                        texture_sets.push( input.set );
                        source = sources[ input.source ];
                        numParams = source.accessor.params.length;

                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {

                            idx32 = vs[ ndx ] * numParams;
                            if ( ts[ input.set ] === undefined ) ts[ input.set ] = [ ];
                            // invert the V
                            ts[ input.set ].push( new THREE.Vector2( source.data[ idx32 ], 1.0 - source.data[ idx32 + 1 ] ) );

                        }

                    }

                }

                if ( cs.length === 0 ) {

                    // check the vertices inputs
                    input = this.vertices.input.COLOR;

                    if ( input ) {

                        source = sources[ input.source ];
                        numParams = source.accessor.params.length;

                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {

                            idx32 = vs[ ndx ] * numParams;
                            cs.push( new THREE.Color().setRGB( source.data[ idx32 ], source.data[ idx32 + 1 ], source.data[ idx32 + 2 ] ) );

                        }

                    }

                }

                var face = null, faces = [], uv, uvArr;

                if ( vcount === 3 ) {

                    faces.push( new THREE.Face3( vs[0], vs[1], vs[2], ns, cs.length ? cs : new THREE.Color() ) );

                } else if ( vcount === 4 ) {

                    faces.push( new THREE.Face3( vs[0], vs[1], vs[3], ns.length ? [ ns[0].clone(), ns[1].clone(), ns[3].clone() ] : [], cs.length ? [ cs[0], cs[1], cs[3] ] : new THREE.Color() ) );

                    faces.push( new THREE.Face3( vs[1], vs[2], vs[3], ns.length ? [ ns[1].clone(), ns[2].clone(), ns[3].clone() ] : [], cs.length ? [ cs[1], cs[2], cs[3] ] : new THREE.Color() ) );

                } else if ( vcount > 4 && options.subdivideFaces ) {

                    var clr = cs.length ? cs : new THREE.Color(),
                        vec1, vec2, vec3, v1, v2, norm;

                    // subdivide into multiple Face3s

                    for ( k = 1; k < vcount - 1; ) {

                        faces.push( new THREE.Face3( vs[0], vs[k], vs[k + 1], ns.length ? [ ns[0].clone(), ns[k ++].clone(), ns[k].clone() ] : [], clr ) );

                    }

                }

                if ( faces.length ) {

                    for ( var ndx = 0, len = faces.length; ndx < len; ndx ++ ) {

                        face = faces[ndx];
                        face.daeMaterial = primitive.material;
                        geom.faces.push( face );

                        for ( k = 0; k < texture_sets.length; k ++ ) {

                            uv = ts[ texture_sets[k] ];

                            if ( vcount > 4 ) {

                                // Grab the right UVs for the vertices in this face
                                uvArr = [ uv[0], uv[ndx + 1], uv[ndx + 2] ];

                            } else if ( vcount === 4 ) {

                                if ( ndx === 0 ) {

                                    uvArr = [ uv[0], uv[1], uv[3] ];

                                } else {

                                    uvArr = [ uv[1].clone(), uv[2], uv[3].clone() ];

                                }

                            } else {

                                uvArr = [ uv[0], uv[1], uv[2] ];

                            }

                            if ( geom.faceVertexUvs[k] === undefined ) {

                                geom.faceVertexUvs[k] = [];

                            }

                            geom.faceVertexUvs[k].push( uvArr );

                        }

                    }

                } else {

                    console.log( 'dropped face with vcount ' + vcount + ' for geometry with id: ' + geom.id );

                }

                i += maxOffset * vcount;

            }

        }

    };

    function Polygons () {

        this.material = "";
        this.count = 0;
        this.inputs = [];
        this.vcount = null;
        this.p = [];
        this.geometry = new THREE.Geometry();

    }

    Polygons.prototype.setVertices = function ( vertices ) {

        for ( var i = 0; i < this.inputs.length; i ++ ) {

            if ( this.inputs[ i ].source === vertices.id ) {

                this.inputs[ i ].source = vertices.input[ 'POSITION' ].source;

            }

        }

    };

    Polygons.prototype.parse = function ( element ) {

        this.material = element.getAttribute( 'material' );
        this.count = _attr_as_int( element, 'count', 0 );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            switch ( child.nodeName ) {

                case 'input':

                    this.inputs.push( ( new Input() ).parse( element.childNodes[ i ] ) );
                    break;

                case 'vcount':

                    this.vcount = _ints( child.textContent );
                    break;

                case 'p':

                    this.p.push( _ints( child.textContent ) );
                    break;

                case 'ph':

                    console.warn( 'polygon holes not yet supported!' );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    function Polylist () {

        Polygons.call( this );

        this.vcount = [];

    }

    Polylist.prototype = Object.create( Polygons.prototype );
    Polylist.prototype.constructor = Polylist;

    function LineStrips() {

        Polygons.call( this );

        this.vcount = 1;

    }

    LineStrips.prototype = Object.create( Polygons.prototype );
    LineStrips.prototype.constructor = LineStrips;

    function Triangles () {

        Polygons.call( this );

        this.vcount = 3;

    }

    Triangles.prototype = Object.create( Polygons.prototype );
    Triangles.prototype.constructor = Triangles;

    function Accessor() {

        this.source = "";
        this.count = 0;
        this.stride = 0;
        this.params = [];

    }

    Accessor.prototype.parse = function ( element ) {

        this.params = [];
        this.source = element.getAttribute( 'source' );
        this.count = _attr_as_int( element, 'count', 0 );
        this.stride = _attr_as_int( element, 'stride', 0 );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            if ( child.nodeName === 'param' ) {

                var param = {};
                param[ 'name' ] = child.getAttribute( 'name' );
                param[ 'type' ] = child.getAttribute( 'type' );
                this.params.push( param );

            }

        }

        return this;

    };

    function Vertices() {

        this.input = {};

    }

    Vertices.prototype.parse = function ( element ) {

        this.id = element.getAttribute('id');

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            if ( element.childNodes[i].nodeName === 'input' ) {

                var input = ( new Input() ).parse( element.childNodes[ i ] );
                this.input[ input.semantic ] = input;

            }

        }

        return this;

    };

    function Input () {

        this.semantic = "";
        this.offset = 0;
        this.source = "";
        this.set = 0;

    }

    Input.prototype.parse = function ( element ) {

        this.semantic = element.getAttribute('semantic');
        this.source = element.getAttribute('source').replace(/^#/, '');
        this.set = _attr_as_int(element, 'set', -1);
        this.offset = _attr_as_int(element, 'offset', 0);

        if ( this.semantic === 'TEXCOORD' && this.set < 0 ) {

            this.set = 0;

        }

        return this;

    };

    function Source ( id ) {

        this.id = id;
        this.type = null;

    }

    Source.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];

            switch ( child.nodeName ) {

                case 'bool_array':

                    this.data = _bools( child.textContent );
                    this.type = child.nodeName;
                    break;

                case 'float_array':

                    this.data = _floats( child.textContent );
                    this.type = child.nodeName;
                    break;

                case 'int_array':

                    this.data = _ints( child.textContent );
                    this.type = child.nodeName;
                    break;

                case 'IDREF_array':
                case 'Name_array':

                    this.data = _strings( child.textContent );
                    this.type = child.nodeName;
                    break;

                case 'technique_common':

                    for ( var j = 0; j < child.childNodes.length; j ++ ) {

                        if ( child.childNodes[ j ].nodeName === 'accessor' ) {

                            this.accessor = ( new Accessor() ).parse( child.childNodes[ j ] );
                            break;

                        }
                    }
                    break;

                default:
                    // console.log(child.nodeName);
                    break;

            }

        }

        return this;

    };

    Source.prototype.read = function () {

        var result = [];

        //for (var i = 0; i < this.accessor.params.length; i++) {

        var param = this.accessor.params[ 0 ];

            //console.log(param.name + " " + param.type);

        switch ( param.type ) {

            case 'IDREF':
            case 'Name': case 'name':
            case 'float':

                return this.data;

            case 'float4x4':

                for ( var j = 0; j < this.data.length; j += 16 ) {

                    var s = this.data.slice( j, j + 16 );
                    var m = getConvertedMat4( s );
                    result.push( m );
                }

                break;

            default:

                console.log( 'ColladaLoader: Source: Read dont know how to read ' + param.type + '.' );
                break;

        }

        //}

        return result;

    };

    function Material () {

        this.id = "";
        this.name = "";
        this.instance_effect = null;

    }

    Material.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            if ( element.childNodes[ i ].nodeName === 'instance_effect' ) {

                this.instance_effect = ( new InstanceEffect() ).parse( element.childNodes[ i ] );
                break;

            }

        }

        return this;

    };

    function ColorOrTexture () {

        this.color = new THREE.Color();
        this.color.setRGB( Math.random(), Math.random(), Math.random() );
        this.color.a = 1.0;

        this.texture = null;
        this.texcoord = null;
        this.texOpts = null;

    }

    ColorOrTexture.prototype.isColor = function () {

        return ( this.texture === null );

    };

    ColorOrTexture.prototype.isTexture = function () {

        return ( this.texture != null );

    };

    ColorOrTexture.prototype.parse = function ( element ) {

        if (element.nodeName === 'transparent') {

            this.opaque = element.getAttribute('opaque');

        }

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'color':

                    var rgba = _floats( child.textContent );
                    this.color = new THREE.Color();
                    this.color.setRGB( rgba[0], rgba[1], rgba[2] );
                    this.color.a = rgba[3];
                    break;

                case 'texture':

                    this.texture = child.getAttribute('texture');
                    this.texcoord = child.getAttribute('texcoord');
                    // Defaults from:
                    // https://collada.org/mediawiki/index.php/Maya_texture_placement_MAYA_extension
                    this.texOpts = {
                        offsetU: 0,
                        offsetV: 0,
                        repeatU: 1,
                        repeatV: 1,
                        wrapU: 1,
                        wrapV: 1
                    };
                    this.parseTexture( child );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    ColorOrTexture.prototype.parseTexture = function ( element ) {

        if ( ! element.childNodes ) return this;

        // This should be supported by Maya, 3dsMax, and MotionBuilder

        if ( element.childNodes[1] && element.childNodes[1].nodeName === 'extra' ) {

            element = element.childNodes[1];

            if ( element.childNodes[1] && element.childNodes[1].nodeName === 'technique' ) {

                element = element.childNodes[1];

            }

        }

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            switch ( child.nodeName ) {

                case 'offsetU':
                case 'offsetV':
                case 'repeatU':
                case 'repeatV':

                    this.texOpts[ child.nodeName ] = parseFloat( child.textContent );

                    break;

                case 'wrapU':
                case 'wrapV':

                    // some dae have a value of true which becomes NaN via parseInt

                    if ( child.textContent.toUpperCase() === 'TRUE' ) {

                        this.texOpts[ child.nodeName ] = 1;

                    } else {

                        this.texOpts[ child.nodeName ] = parseInt( child.textContent );

                    }
                    break;

                default:

                    this.texOpts[ child.nodeName ] = child.textContent;

                    break;

            }

        }

        return this;

    };

    function Shader ( type, effect ) {

        this.type = type;
        this.effect = effect;
        this.material = null;

    }

    Shader.prototype.parse = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'emission':
                case 'diffuse':
                case 'specular':
                case 'transparent':

                    this[ child.nodeName ] = ( new ColorOrTexture() ).parse( child );
                    break;

                case 'bump':

                    // If 'bumptype' is 'heightfield', create a 'bump' property
                    // Else if 'bumptype' is 'normalmap', create a 'normal' property
                    // (Default to 'bump')
                    var bumpType = child.getAttribute( 'bumptype' );
                    if ( bumpType ) {
                        if ( bumpType.toLowerCase() === "heightfield" ) {
                            this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );
                        } else if ( bumpType.toLowerCase() === "normalmap" ) {
                            this[ 'normal' ] = ( new ColorOrTexture() ).parse( child );
                        } else {
                            console.error( "Shader.prototype.parse: Invalid value for attribute 'bumptype' (" + bumpType + ") - valid bumptypes are 'HEIGHTFIELD' and 'NORMALMAP' - defaulting to 'HEIGHTFIELD'" );
                            this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );
                        }
                    } else {
                        console.warn( "Shader.prototype.parse: Attribute 'bumptype' missing from bump node - defaulting to 'HEIGHTFIELD'" );
                        this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );
                    }

                    break;

                case 'shininess':
                case 'reflectivity':
                case 'index_of_refraction':
                case 'transparency':

                    var f = child.querySelectorAll('float');

                    if ( f.length > 0 )
                        this[ child.nodeName ] = parseFloat( f[ 0 ].textContent );

                    break;

                default:
                    break;

            }

        }

        this.create();
        return this;

    };

    Shader.prototype.create = function() {

        var props = {};

        var transparent = false;

        if (this['transparency'] !== undefined && this['transparent'] !== undefined) {
            // convert transparent color RBG to average value
            var transparentColor = this['transparent'];
            var transparencyLevel = (this.transparent.color.r + this.transparent.color.g + this.transparent.color.b) / 3 * this.transparency;

            if (transparencyLevel > 0) {
                transparent = true;
                props[ 'transparent' ] = true;
                props[ 'opacity' ] = 1 - transparencyLevel;

            }

        }

        var keys = {
            'diffuse':'map',
            'ambient':'lightMap',
            'specular':'specularMap',
            'emission':'emissionMap',
            'bump':'bumpMap',
            'normal':'normalMap'
            };

        for ( var prop in this ) {

            switch ( prop ) {

                case 'ambient':
                case 'emission':
                case 'diffuse':
                case 'specular':
                case 'bump':
                case 'normal':

                    var cot = this[ prop ];

                    if ( cot instanceof ColorOrTexture ) {

                        if ( cot.isTexture() ) {

                            var samplerId = cot.texture;
                            var surfaceId = this.effect.sampler[samplerId];

                            if ( surfaceId !== undefined && surfaceId.source !== undefined ) {

                                var surface = this.effect.surface[surfaceId.source];

                                if ( surface !== undefined ) {

                                    var image = images[ surface.init_from ];

                                    if ( image ) {

                                        var url = baseUrl + image.init_from;

                                        var texture;
                                        var loader = THREE.Loader.Handlers.get( url );

                                        if ( loader !== null ) {

                                            texture = loader.load( url );

                                        } else {

                                            texture = new THREE.Texture();

                                            loadTextureImage( texture, url );

                                        }

                                        texture.wrapS = cot.texOpts.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                        texture.wrapT = cot.texOpts.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                        texture.offset.x = cot.texOpts.offsetU;
                                        texture.offset.y = cot.texOpts.offsetV;
                                        texture.repeat.x = cot.texOpts.repeatU;
                                        texture.repeat.y = cot.texOpts.repeatV;
                                        props[keys[prop]] = texture;

                                        // Texture with baked lighting?
                                        if (prop === 'emission') props['emissive'] = 0xffffff;

                                    }

                                }

                            }

                        } else if ( prop === 'diffuse' || !transparent ) {

                            if ( prop === 'emission' ) {

                                props[ 'emissive' ] = cot.color.getHex();

                            } else {

                                props[ prop ] = cot.color.getHex();

                            }

                        }

                    }

                    break;

                case 'shininess':

                    props[ prop ] = this[ prop ];
                    break;

                case 'reflectivity':

                    props[ prop ] = this[ prop ];
                    if ( props[ prop ] > 0.0 ) props['envMap'] = options.defaultEnvMap;
                    props['combine'] = THREE.MixOperation;	//mix regular shading with reflective component
                    break;

                case 'index_of_refraction':

                    props[ 'refractionRatio' ] = this[ prop ]; //TODO: "index_of_refraction" becomes "refractionRatio" in shader, but I'm not sure if the two are actually comparable
                    if ( this[ prop ] !== 1.0 ) props['envMap'] = options.defaultEnvMap;
                    break;

                case 'transparency':
                    // gets figured out up top
                    break;

                default:
                    break;

            }

        }

        props[ 'shading' ] = preferredShading;
        props[ 'side' ] = this.effect.doubleSided ? THREE.DoubleSide : THREE.FrontSide;

        if ( props.diffuse !== undefined ) {

            props.color = props.diffuse;
            delete props.diffuse;

        }

        switch ( this.type ) {

            case 'constant':

                if (props.emissive != undefined) props.color = props.emissive;
                this.material = new THREE.MeshBasicMaterial( props );
                break;

            case 'phong':
            case 'blinn':

                this.material = new THREE.MeshPhongMaterial( props );
                break;

            case 'lambert':
            default:

                this.material = new THREE.MeshLambertMaterial( props );
                break;

        }

        return this.material;

    };

    function Surface ( effect ) {

        this.effect = effect;
        this.init_from = null;
        this.format = null;

    }

    Surface.prototype.parse = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'init_from':

                    this.init_from = child.textContent;
                    break;

                case 'format':

                    this.format = child.textContent;
                    break;

                default:

                    console.log( "unhandled Surface prop: " + child.nodeName );
                    break;

            }

        }

        return this;

    };

    function Sampler2D ( effect ) {

        this.effect = effect;
        this.source = null;
        this.wrap_s = null;
        this.wrap_t = null;
        this.minfilter = null;
        this.magfilter = null;
        this.mipfilter = null;

    }

    Sampler2D.prototype.parse = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'source':

                    this.source = child.textContent;
                    break;

                case 'minfilter':

                    this.minfilter = child.textContent;
                    break;

                case 'magfilter':

                    this.magfilter = child.textContent;
                    break;

                case 'mipfilter':

                    this.mipfilter = child.textContent;
                    break;

                case 'wrap_s':

                    this.wrap_s = child.textContent;
                    break;

                case 'wrap_t':

                    this.wrap_t = child.textContent;
                    break;

                default:

                    console.log( "unhandled Sampler2D prop: " + child.nodeName );
                    break;

            }

        }

        return this;

    };

    function Effect () {

        this.id = "";
        this.name = "";
        this.shader = null;
        this.surface = {};
        this.sampler = {};

    }

    Effect.prototype.create = function () {

        if ( this.shader === null ) {

            return null;

        }

    };

    Effect.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );

        extractDoubleSided( this, element );

        this.shader = null;

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'profile_COMMON':

                    this.parseTechnique( this.parseProfileCOMMON( child ) );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    Effect.prototype.parseNewparam = function ( element ) {

        var sid = element.getAttribute( 'sid' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'surface':

                    this.surface[sid] = ( new Surface( this ) ).parse( child );
                    break;

                case 'sampler2D':

                    this.sampler[sid] = ( new Sampler2D( this ) ).parse( child );
                    break;

                case 'extra':

                    break;

                default:

                    console.log( child.nodeName );
                    break;

            }

        }

    };

    Effect.prototype.parseProfileCOMMON = function ( element ) {

        var technique;

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'profile_COMMON':

                    this.parseProfileCOMMON( child );
                    break;

                case 'technique':

                    technique = child;
                    break;

                case 'newparam':

                    this.parseNewparam( child );
                    break;

                case 'image':

                    var _image = ( new _Image() ).parse( child );
                    images[ _image.id ] = _image;
                    break;

                case 'extra':
                    break;

                default:

                    console.log( child.nodeName );
                    break;

            }

        }

        return technique;

    };

    Effect.prototype.parseTechnique = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'constant':
                case 'lambert':
                case 'blinn':
                case 'phong':

                    this.shader = ( new Shader( child.nodeName, this ) ).parse( child );
                    break;
                case 'extra':
                    this.parseExtra(child);
                    break;
                default:
                    break;

            }

        }

    };

    Effect.prototype.parseExtra = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'technique':
                    this.parseExtraTechnique( child );
                    break;
                default:
                    break;

            }

        }

    };

    Effect.prototype.parseExtraTechnique = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[i];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'bump':
                    this.shader.parse( element );
                    break;
                default:
                    break;

            }

        }

    };

    function InstanceEffect () {

        this.url = "";

    }

    InstanceEffect.prototype.parse = function ( element ) {

        this.url = element.getAttribute( 'url' ).replace( /^#/, '' );
        return this;

    };

    function Animation() {

        this.id = "";
        this.name = "";
        this.source = {};
        this.sampler = [];
        this.channel = [];

    }

    Animation.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );
        this.source = {};

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'animation':

                    var anim = ( new Animation() ).parse( child );

                    for ( var src in anim.source ) {

                        this.source[ src ] = anim.source[ src ];

                    }

                    for ( var j = 0; j < anim.channel.length; j ++ ) {

                        this.channel.push( anim.channel[ j ] );
                        this.sampler.push( anim.sampler[ j ] );

                    }

                    break;

                case 'source':

                    var src = ( new Source() ).parse( child );
                    this.source[ src.id ] = src;
                    break;

                case 'sampler':

                    this.sampler.push( ( new Sampler( this ) ).parse( child ) );
                    break;

                case 'channel':

                    this.channel.push( ( new Channel( this ) ).parse( child ) );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    function Channel( animation ) {

        this.animation = animation;
        this.source = "";
        this.target = "";
        this.fullSid = null;
        this.sid = null;
        this.dotSyntax = null;
        this.arrSyntax = null;
        this.arrIndices = null;
        this.member = null;

    }

    Channel.prototype.parse = function ( element ) {

        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );
        this.target = element.getAttribute( 'target' );

        var parts = this.target.split( '/' );

        var id = parts.shift();
        var sid = parts.shift();

        var dotSyntax = ( sid.indexOf(".") >= 0 );
        var arrSyntax = ( sid.indexOf("(") >= 0 );

        if ( dotSyntax ) {

            parts = sid.split(".");
            this.sid = parts.shift();
            this.member = parts.shift();

        } else if ( arrSyntax ) {

            var arrIndices = sid.split("(");
            this.sid = arrIndices.shift();

            for (var j = 0; j < arrIndices.length; j ++ ) {

                arrIndices[j] = parseInt( arrIndices[j].replace(/\)/, '') );

            }

            this.arrIndices = arrIndices;

        } else {

            this.sid = sid;

        }

        this.fullSid = sid;
        this.dotSyntax = dotSyntax;
        this.arrSyntax = arrSyntax;

        return this;

    };

    function Sampler ( animation ) {

        this.id = "";
        this.animation = animation;
        this.inputs = [];
        this.input = null;
        this.output = null;
        this.strideOut = null;
        this.interpolation = null;
        this.startTime = null;
        this.endTime = null;
        this.duration = 0;

    }

    Sampler.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.inputs = [];

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'input':

                    this.inputs.push( (new Input()).parse( child ) );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    Sampler.prototype.create = function () {

        for ( var i = 0; i < this.inputs.length; i ++ ) {

            var input = this.inputs[ i ];
            var source = this.animation.source[ input.source ];

            switch ( input.semantic ) {

                case 'INPUT':

                    this.input = source.read();
                    break;

                case 'OUTPUT':

                    this.output = source.read();
                    this.strideOut = source.accessor.stride;
                    break;

                case 'INTERPOLATION':

                    this.interpolation = source.read();
                    break;

                case 'IN_TANGENT':

                    break;

                case 'OUT_TANGENT':

                    break;

                default:

                    console.log(input.semantic);
                    break;

            }

        }

        this.startTime = 0;
        this.endTime = 0;
        this.duration = 0;

        if ( this.input.length ) {

            this.startTime = 100000000;
            this.endTime = -100000000;

            for ( var i = 0; i < this.input.length; i ++ ) {

                this.startTime = Math.min( this.startTime, this.input[ i ] );
                this.endTime = Math.max( this.endTime, this.input[ i ] );

            }

            this.duration = this.endTime - this.startTime;

        }

    };

    Sampler.prototype.getData = function ( type, ndx, member ) {

        var data;

        if ( type === 'matrix' && this.strideOut === 16 ) {

            data = this.output[ ndx ];

        } else if ( this.strideOut > 1 ) {

            data = [];
            ndx *= this.strideOut;

            for ( var i = 0; i < this.strideOut; ++ i ) {

                data[ i ] = this.output[ ndx + i ];

            }

            if ( this.strideOut === 3 ) {

                switch ( type ) {

                    case 'rotate':
                    case 'translate':

                        fixCoords( data, -1 );
                        break;

                    case 'scale':

                        fixCoords( data, 1 );
                        break;

                }

            } else if ( this.strideOut === 4 && type === 'matrix' ) {

                fixCoords( data, -1 );

            }

        } else {

            data = this.output[ ndx ];

            if ( member && type === 'translate' ) {
                data = getConvertedTranslation( member, data );
            }

        }

        return data;

    };

    function Key ( time ) {

        this.targets = [];
        this.time = time;

    }

    Key.prototype.addTarget = function ( fullSid, transform, member, data ) {

        this.targets.push( {
            sid: fullSid,
            member: member,
            transform: transform,
            data: data
        } );

    };

    Key.prototype.apply = function ( opt_sid ) {

        for ( var i = 0; i < this.targets.length; ++ i ) {

            var target = this.targets[ i ];

            if ( !opt_sid || target.sid === opt_sid ) {

                target.transform.update( target.data, target.member );

            }

        }

    };

    Key.prototype.getTarget = function ( fullSid ) {

        for ( var i = 0; i < this.targets.length; ++ i ) {

            if ( this.targets[ i ].sid === fullSid ) {

                return this.targets[ i ];

            }

        }

        return null;

    };

    Key.prototype.hasTarget = function ( fullSid ) {

        for ( var i = 0; i < this.targets.length; ++ i ) {

            if ( this.targets[ i ].sid === fullSid ) {

                return true;

            }

        }

        return false;

    };

    // TODO: Currently only doing linear interpolation. Should support full COLLADA spec.
    Key.prototype.interpolate = function ( nextKey, time ) {

        for ( var i = 0, l = this.targets.length; i < l; i ++ ) {

            var target = this.targets[ i ],
                nextTarget = nextKey.getTarget( target.sid ),
                data;

            if ( target.transform.type !== 'matrix' && nextTarget ) {

                var scale = ( time - this.time ) / ( nextKey.time - this.time ),
                    nextData = nextTarget.data,
                    prevData = target.data;

                if ( scale < 0 ) scale = 0;
                if ( scale > 1 ) scale = 1;

                if ( prevData.length ) {

                    data = [];

                    for ( var j = 0; j < prevData.length; ++ j ) {

                        data[ j ] = prevData[ j ] + ( nextData[ j ] - prevData[ j ] ) * scale;

                    }

                } else {

                    data = prevData + ( nextData - prevData ) * scale;

                }

            } else {

                data = target.data;

            }

            target.transform.update( data, target.member );

        }

    };

    // Camera
    function Camera() {

        this.id = "";
        this.name = "";
        this.technique = "";

    }

    Camera.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'optics':

                    this.parseOptics( child );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    Camera.prototype.parseOptics = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            if ( element.childNodes[ i ].nodeName === 'technique_common' ) {

                var technique = element.childNodes[ i ];

                for ( var j = 0; j < technique.childNodes.length; j ++ ) {

                    this.technique = technique.childNodes[ j ].nodeName;

                    if ( this.technique === 'perspective' ) {

                        var perspective = technique.childNodes[ j ];

                        for ( var k = 0; k < perspective.childNodes.length; k ++ ) {

                            var param = perspective.childNodes[ k ];

                            switch ( param.nodeName ) {

                                case 'yfov':
                                    this.yfov = param.textContent;
                                    break;
                                case 'xfov':
                                    this.xfov = param.textContent;
                                    break;
                                case 'znear':
                                    this.znear = param.textContent;
                                    break;
                                case 'zfar':
                                    this.zfar = param.textContent;
                                    break;
                                case 'aspect_ratio':
                                    this.aspect_ratio = param.textContent;
                                    break;

                            }

                        }

                    } else if ( this.technique === 'orthographic' ) {

                        var orthographic = technique.childNodes[ j ];

                        for ( var k = 0; k < orthographic.childNodes.length; k ++ ) {

                            var param = orthographic.childNodes[ k ];

                            switch ( param.nodeName ) {

                                case 'xmag':
                                    this.xmag = param.textContent;
                                    break;
                                case 'ymag':
                                    this.ymag = param.textContent;
                                    break;
                                case 'znear':
                                    this.znear = param.textContent;
                                    break;
                                case 'zfar':
                                    this.zfar = param.textContent;
                                    break;
                                case 'aspect_ratio':
                                    this.aspect_ratio = param.textContent;
                                    break;

                            }

                        }

                    }

                }

            }

        }

        return this;

    };

    function InstanceCamera() {

        this.url = "";

    }

    InstanceCamera.prototype.parse = function ( element ) {

        this.url = element.getAttribute('url').replace(/^#/, '');

        return this;

    };

    // Light

    function Light() {

        this.id = "";
        this.name = "";
        this.technique = "";

    }

    Light.prototype.parse = function ( element ) {

        this.id = element.getAttribute( 'id' );
        this.name = element.getAttribute( 'name' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'technique_common':

                    this.parseCommon( child );
                    break;

                case 'technique':

                    this.parseTechnique( child );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    Light.prototype.parseCommon = function ( element ) {

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            switch ( element.childNodes[ i ].nodeName ) {

                case 'directional':
                case 'point':
                case 'spot':
                case 'ambient':

                    this.technique = element.childNodes[ i ].nodeName;

                    var light = element.childNodes[ i ];

                    for ( var j = 0; j < light.childNodes.length; j ++ ) {

                        var child = light.childNodes[j];

                        switch ( child.nodeName ) {

                            case 'color':

                                var rgba = _floats( child.textContent );
                                this.color = new THREE.Color(0);
                                this.color.setRGB( rgba[0], rgba[1], rgba[2] );
                                this.color.a = rgba[3];
                                break;

                            case 'falloff_angle':

                                this.falloff_angle = parseFloat( child.textContent );
                                break;

                            case 'quadratic_attenuation':
                                var f = parseFloat( child.textContent );
                                this.distance = f ? Math.sqrt( 1 / f ) : 0;
                        }

                    }

            }

        }

        return this;

    };

    Light.prototype.parseTechnique = function ( element ) {

        this.profile = element.getAttribute( 'profile' );

        for ( var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];

            switch ( child.nodeName ) {

                case 'intensity':

                    this.intensity = parseFloat(child.textContent);
                    break;

            }

        }

        return this;

    };

    function InstanceLight() {

        this.url = "";

    }

    InstanceLight.prototype.parse = function ( element ) {

        this.url = element.getAttribute('url').replace(/^#/, '');

        return this;

    };

    function KinematicsModel( ) {

        this.id = '';
        this.name = '';
        this.joints = [];
        this.links = [];

    }

    KinematicsModel.prototype.parse = function( element ) {

        this.id = element.getAttribute('id');
        this.name = element.getAttribute('name');
        this.joints = [];
        this.links = [];

        for (var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'technique_common':

                    this.parseCommon(child);
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    KinematicsModel.prototype.parseCommon = function( element ) {

        for (var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( element.childNodes[ i ].nodeName ) {

                case 'joint':
                    this.joints.push( (new Joint()).parse(child) );
                    break;

                case 'link':
                    this.links.push( (new Link()).parse(child) );
                    break;

                default:
                    break;

            }

        }

        return this;

    };

    function Joint( ) {

        this.sid = '';
        this.name = '';
        this.axis = new THREE.Vector3();
        this.limits = {
            min: 0,
            max: 0
        };
        this.type = '';
        this.static = false;
        this.zeroPosition = 0.0;
        this.middlePosition = 0.0;

    }

    Joint.prototype.parse = function( element ) {

        this.sid = element.getAttribute('sid');
        this.name = element.getAttribute('name');
        this.axis = new THREE.Vector3();
        this.limits = {
            min: 0,
            max: 0
        };
        this.type = '';
        this.static = false;
        this.zeroPosition = 0.0;
        this.middlePosition = 0.0;

        var axisElement = element.querySelector('axis');
        var _axis = _floats(axisElement.textContent);
        this.axis = getConvertedVec3(_axis, 0);

        var min = element.querySelector('limits min') ? parseFloat(element.querySelector('limits min').textContent) : -360;
        var max = element.querySelector('limits max') ? parseFloat(element.querySelector('limits max').textContent) : 360;

        this.limits = {
            min: min,
            max: max
        };

        var jointTypes = [ 'prismatic', 'revolute' ];
        for (var i = 0; i < jointTypes.length; i ++ ) {

            var type = jointTypes[ i ];

            var jointElement = element.querySelector(type);

            if ( jointElement ) {

                this.type = type;

            }

        }

        // if the min is equal to or somehow greater than the max, consider the joint static
        if ( this.limits.min >= this.limits.max ) {

            this.static = true;

        }

        this.middlePosition = (this.limits.min + this.limits.max) / 2.0;
        return this;

    };

    function Link( ) {

        this.sid = '';
        this.name = '';
        this.transforms = [];
        this.attachments = [];

    }

    Link.prototype.parse = function( element ) {

        this.sid = element.getAttribute('sid');
        this.name = element.getAttribute('name');
        this.transforms = [];
        this.attachments = [];

        for (var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'attachment_full':
                    this.attachments.push( (new Attachment()).parse(child) );
                    break;

                case 'rotate':
                case 'translate':
                case 'matrix':

                    this.transforms.push( (new Transform()).parse(child) );
                    break;

                default:

                    break;

            }

        }

        return this;

    };

    function Attachment( ) {

        this.joint = '';
        this.transforms = [];
        this.links = [];

    }

    Attachment.prototype.parse = function( element ) {

        this.joint = element.getAttribute('joint').split('/').pop();
        this.links = [];

        for (var i = 0; i < element.childNodes.length; i ++ ) {

            var child = element.childNodes[ i ];
            if ( child.nodeType != 1 ) continue;

            switch ( child.nodeName ) {

                case 'link':
                    this.links.push( (new Link()).parse(child) );
                    break;

                case 'rotate':
                case 'translate':
                case 'matrix':

                    this.transforms.push( (new Transform()).parse(child) );
                    break;

                default:

                    break;

            }

        }

        return this;

    };

    function _source( element ) {

        var id = element.getAttribute( 'id' );

        if ( sources[ id ] != undefined ) {

            return sources[ id ];

        }

        sources[ id ] = ( new Source(id )).parse( element );
        return sources[ id ];

    }

    function _nsResolver( nsPrefix ) {

        if ( nsPrefix === "dae" ) {

            return "http://www.collada.org/2005/11/COLLADASchema";

        }

        return null;

    }

    function _bools( str ) {

        var raw = _strings( str );
        var data = [];

        for ( var i = 0, l = raw.length; i < l; i ++ ) {

            data.push( (raw[i] === 'true' || raw[i] === '1') ? true : false );

        }

        return data;

    }

    function _floats( str ) {

        var raw = _strings(str);
        var data = [];

        for ( var i = 0, l = raw.length; i < l; i ++ ) {

            data.push( parseFloat( raw[ i ] ) );

        }

        return data;

    }

    function _ints( str ) {

        var raw = _strings( str );
        var data = [];

        for ( var i = 0, l = raw.length; i < l; i ++ ) {

            data.push( parseInt( raw[ i ], 10 ) );

        }

        return data;

    }

    function _strings( str ) {

        return ( str.length > 0 ) ? _trimString( str ).split( /\s+/ ) : [];

    }

    function _trimString( str ) {

        return str.replace( /^\s+/, "" ).replace( /\s+$/, "" );

    }

    function _attr_as_float( element, name, defaultValue ) {

        if ( element.hasAttribute( name ) ) {

            return parseFloat( element.getAttribute( name ) );

        } else {

            return defaultValue;

        }

    }

    function _attr_as_int( element, name, defaultValue ) {

        if ( element.hasAttribute( name ) ) {

            return parseInt( element.getAttribute( name ), 10) ;

        } else {

            return defaultValue;

        }

    }

    function _attr_as_string( element, name, defaultValue ) {

        if ( element.hasAttribute( name ) ) {

            return element.getAttribute( name );

        } else {

            return defaultValue;

        }

    }

    function _format_float( f, num ) {

        if ( f === undefined ) {

            var s = '0.';

            while ( s.length < num + 2 ) {

                s += '0';

            }

            return s;

        }

        num = num || 2;

        var parts = f.toString().split( '.' );
        parts[ 1 ] = parts.length > 1 ? parts[ 1 ].substr( 0, num ) : "0";

        while ( parts[ 1 ].length < num ) {

            parts[ 1 ] += '0';

        }

        return parts.join( '.' );

    }

    function loadTextureImage ( texture, url ) {

        var loader = new THREE.ImageLoader();

        loader.load( url, function ( image ) {

            texture.image = image;
            texture.needsUpdate = true;

        } );

    }

    function extractDoubleSided( obj, element ) {

        obj.doubleSided = false;

        var node = element.querySelectorAll('extra double_sided')[0];

        if ( node ) {

            if ( node && parseInt( node.textContent, 10 ) === 1 ) {

                obj.doubleSided = true;

            }

        }

    }

    // Up axis conversion

    function setUpConversion() {

        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {

            upConversion = null;

        } else {

            switch ( colladaUp ) {

                case 'X':

                    upConversion = options.upAxis === 'Y' ? 'XtoY' : 'XtoZ';
                    break;

                case 'Y':

                    upConversion = options.upAxis === 'X' ? 'YtoX' : 'YtoZ';
                    break;

                case 'Z':

                    upConversion = options.upAxis === 'X' ? 'ZtoX' : 'ZtoY';
                    break;

            }

        }

    }

    function fixCoords( data, sign ) {

        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {

            return;

        }

        switch ( upConversion ) {

            case 'XtoY':

                var tmp = data[ 0 ];
                data[ 0 ] = sign * data[ 1 ];
                data[ 1 ] = tmp;
                break;

            case 'XtoZ':

                var tmp = data[ 2 ];
                data[ 2 ] = data[ 1 ];
                data[ 1 ] = data[ 0 ];
                data[ 0 ] = tmp;
                break;

            case 'YtoX':

                var tmp = data[ 0 ];
                data[ 0 ] = data[ 1 ];
                data[ 1 ] = sign * tmp;
                break;

            case 'YtoZ':

                var tmp = data[ 1 ];
                data[ 1 ] = sign * data[ 2 ];
                data[ 2 ] = tmp;
                break;

            case 'ZtoX':

                var tmp = data[ 0 ];
                data[ 0 ] = data[ 1 ];
                data[ 1 ] = data[ 2 ];
                data[ 2 ] = tmp;
                break;

            case 'ZtoY':

                var tmp = data[ 1 ];
                data[ 1 ] = data[ 2 ];
                data[ 2 ] = sign * tmp;
                break;

        }

    }

    function getConvertedTranslation( axis, data ) {

        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {

            return data;

        }

        switch ( axis ) {
            case 'X':
                data = upConversion === 'XtoY' ? data * -1 : data;
                break;
            case 'Y':
                data = upConversion === 'YtoZ' || upConversion === 'YtoX' ? data * -1 : data;
                break;
            case 'Z':
                data = upConversion === 'ZtoY' ? data * -1 : data ;
                break;
            default:
                break;
        }

        return data;
    }

    function getConvertedVec3( data, offset ) {

        var arr = [ data[ offset ], data[ offset + 1 ], data[ offset + 2 ] ];
        fixCoords( arr, -1 );
        return new THREE.Vector3( arr[ 0 ], arr[ 1 ], arr[ 2 ] );

    }

    function getConvertedMat4( data ) {

        if ( options.convertUpAxis ) {

            // First fix rotation and scale

            // Columns first
            var arr = [ data[ 0 ], data[ 4 ], data[ 8 ] ];
            fixCoords( arr, -1 );
            data[ 0 ] = arr[ 0 ];
            data[ 4 ] = arr[ 1 ];
            data[ 8 ] = arr[ 2 ];
            arr = [ data[ 1 ], data[ 5 ], data[ 9 ] ];
            fixCoords( arr, -1 );
            data[ 1 ] = arr[ 0 ];
            data[ 5 ] = arr[ 1 ];
            data[ 9 ] = arr[ 2 ];
            arr = [ data[ 2 ], data[ 6 ], data[ 10 ] ];
            fixCoords( arr, -1 );
            data[ 2 ] = arr[ 0 ];
            data[ 6 ] = arr[ 1 ];
            data[ 10 ] = arr[ 2 ];
            // Rows second
            arr = [ data[ 0 ], data[ 1 ], data[ 2 ] ];
            fixCoords( arr, -1 );
            data[ 0 ] = arr[ 0 ];
            data[ 1 ] = arr[ 1 ];
            data[ 2 ] = arr[ 2 ];
            arr = [ data[ 4 ], data[ 5 ], data[ 6 ] ];
            fixCoords( arr, -1 );
            data[ 4 ] = arr[ 0 ];
            data[ 5 ] = arr[ 1 ];
            data[ 6 ] = arr[ 2 ];
            arr = [ data[ 8 ], data[ 9 ], data[ 10 ] ];
            fixCoords( arr, -1 );
            data[ 8 ] = arr[ 0 ];
            data[ 9 ] = arr[ 1 ];
            data[ 10 ] = arr[ 2 ];

            // Now fix translation
            arr = [ data[ 3 ], data[ 7 ], data[ 11 ] ];
            fixCoords( arr, -1 );
            data[ 3 ] = arr[ 0 ];
            data[ 7 ] = arr[ 1 ];
            data[ 11 ] = arr[ 2 ];

        }

        return new THREE.Matrix4().set(
            data[0], data[1], data[2], data[3],
            data[4], data[5], data[6], data[7],
            data[8], data[9], data[10], data[11],
            data[12], data[13], data[14], data[15]
            );

    }

    function getConvertedIndex( index ) {

        if ( index > -1 && index < 3 ) {

            var members = [ 'X', 'Y', 'Z' ],
                indices = { X: 0, Y: 1, Z: 2 };

            index = getConvertedMember( members[ index ] );
            index = indices[ index ];

        }

        return index;

    }

    function getConvertedMember( member ) {

        if ( options.convertUpAxis ) {

            switch ( member ) {

                case 'X':

                    switch ( upConversion ) {

                        case 'XtoY':
                        case 'XtoZ':
                        case 'YtoX':

                            member = 'Y';
                            break;

                        case 'ZtoX':

                            member = 'Z';
                            break;

                    }

                    break;

                case 'Y':

                    switch ( upConversion ) {

                        case 'XtoY':
                        case 'YtoX':
                        case 'ZtoX':

                            member = 'X';
                            break;

                        case 'XtoZ':
                        case 'YtoZ':
                        case 'ZtoY':

                            member = 'Z';
                            break;

                    }

                    break;

                case 'Z':

                    switch ( upConversion ) {

                        case 'XtoZ':

                            member = 'X';
                            break;

                        case 'YtoZ':
                        case 'ZtoX':
                        case 'ZtoY':

                            member = 'Y';
                            break;

                    }

                    break;

            }

        }

        return member;

    }

    return {

        load: load,
        parse: parse,
        setPreferredShading: setPreferredShading,
        applySkin: applySkin,
        geometries : geometries,
        options: options

    };

};

module.exports = ColladaLoader;
  })();
});

require.register("three/build/three.js", function(exports, require, module) {
  require = __makeRelativeRequire(require, {}, "three");
  (function() {
    /**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));
}(this, (function (exports) { 'use strict';

	const REVISION = '128';
	const MOUSE = {
		LEFT: 0,
		MIDDLE: 1,
		RIGHT: 2,
		ROTATE: 0,
		DOLLY: 1,
		PAN: 2
	};
	const TOUCH = {
		ROTATE: 0,
		PAN: 1,
		DOLLY_PAN: 2,
		DOLLY_ROTATE: 3
	};
	const CullFaceNone = 0;
	const CullFaceBack = 1;
	const CullFaceFront = 2;
	const CullFaceFrontBack = 3;
	const BasicShadowMap = 0;
	const PCFShadowMap = 1;
	const PCFSoftShadowMap = 2;
	const VSMShadowMap = 3;
	const FrontSide = 0;
	const BackSide = 1;
	const DoubleSide = 2;
	const FlatShading = 1;
	const SmoothShading = 2;
	const NoBlending = 0;
	const NormalBlending = 1;
	const AdditiveBlending = 2;
	const SubtractiveBlending = 3;
	const MultiplyBlending = 4;
	const CustomBlending = 5;
	const AddEquation = 100;
	const SubtractEquation = 101;
	const ReverseSubtractEquation = 102;
	const MinEquation = 103;
	const MaxEquation = 104;
	const ZeroFactor = 200;
	const OneFactor = 201;
	const SrcColorFactor = 202;
	const OneMinusSrcColorFactor = 203;
	const SrcAlphaFactor = 204;
	const OneMinusSrcAlphaFactor = 205;
	const DstAlphaFactor = 206;
	const OneMinusDstAlphaFactor = 207;
	const DstColorFactor = 208;
	const OneMinusDstColorFactor = 209;
	const SrcAlphaSaturateFactor = 210;
	const NeverDepth = 0;
	const AlwaysDepth = 1;
	const LessDepth = 2;
	const LessEqualDepth = 3;
	const EqualDepth = 4;
	const GreaterEqualDepth = 5;
	const GreaterDepth = 6;
	const NotEqualDepth = 7;
	const MultiplyOperation = 0;
	const MixOperation = 1;
	const AddOperation = 2;
	const NoToneMapping = 0;
	const LinearToneMapping = 1;
	const ReinhardToneMapping = 2;
	const CineonToneMapping = 3;
	const ACESFilmicToneMapping = 4;
	const CustomToneMapping = 5;
	const UVMapping = 300;
	const CubeReflectionMapping = 301;
	const CubeRefractionMapping = 302;
	const EquirectangularReflectionMapping = 303;
	const EquirectangularRefractionMapping = 304;
	const CubeUVReflectionMapping = 306;
	const CubeUVRefractionMapping = 307;
	const RepeatWrapping = 1000;
	const ClampToEdgeWrapping = 1001;
	const MirroredRepeatWrapping = 1002;
	const NearestFilter = 1003;
	const NearestMipmapNearestFilter = 1004;
	const NearestMipMapNearestFilter = 1004;
	const NearestMipmapLinearFilter = 1005;
	const NearestMipMapLinearFilter = 1005;
	const LinearFilter = 1006;
	const LinearMipmapNearestFilter = 1007;
	const LinearMipMapNearestFilter = 1007;
	const LinearMipmapLinearFilter = 1008;
	const LinearMipMapLinearFilter = 1008;
	const UnsignedByteType = 1009;
	const ByteType = 1010;
	const ShortType = 1011;
	const UnsignedShortType = 1012;
	const IntType = 1013;
	const UnsignedIntType = 1014;
	const FloatType = 1015;
	const HalfFloatType = 1016;
	const UnsignedShort4444Type = 1017;
	const UnsignedShort5551Type = 1018;
	const UnsignedShort565Type = 1019;
	const UnsignedInt248Type = 1020;
	const AlphaFormat = 1021;
	const RGBFormat = 1022;
	const RGBAFormat = 1023;
	const LuminanceFormat = 1024;
	const LuminanceAlphaFormat = 1025;
	const RGBEFormat = RGBAFormat;
	const DepthFormat = 1026;
	const DepthStencilFormat = 1027;
	const RedFormat = 1028;
	const RedIntegerFormat = 1029;
	const RGFormat = 1030;
	const RGIntegerFormat = 1031;
	const RGBIntegerFormat = 1032;
	const RGBAIntegerFormat = 1033;
	const RGB_S3TC_DXT1_Format = 33776;
	const RGBA_S3TC_DXT1_Format = 33777;
	const RGBA_S3TC_DXT3_Format = 33778;
	const RGBA_S3TC_DXT5_Format = 33779;
	const RGB_PVRTC_4BPPV1_Format = 35840;
	const RGB_PVRTC_2BPPV1_Format = 35841;
	const RGBA_PVRTC_4BPPV1_Format = 35842;
	const RGBA_PVRTC_2BPPV1_Format = 35843;
	const RGB_ETC1_Format = 36196;
	const RGB_ETC2_Format = 37492;
	const RGBA_ETC2_EAC_Format = 37496;
	const RGBA_ASTC_4x4_Format = 37808;
	const RGBA_ASTC_5x4_Format = 37809;
	const RGBA_ASTC_5x5_Format = 37810;
	const RGBA_ASTC_6x5_Format = 37811;
	const RGBA_ASTC_6x6_Format = 37812;
	const RGBA_ASTC_8x5_Format = 37813;
	const RGBA_ASTC_8x6_Format = 37814;
	const RGBA_ASTC_8x8_Format = 37815;
	const RGBA_ASTC_10x5_Format = 37816;
	const RGBA_ASTC_10x6_Format = 37817;
	const RGBA_ASTC_10x8_Format = 37818;
	const RGBA_ASTC_10x10_Format = 37819;
	const RGBA_ASTC_12x10_Format = 37820;
	const RGBA_ASTC_12x12_Format = 37821;
	const RGBA_BPTC_Format = 36492;
	const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
	const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
	const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
	const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
	const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
	const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
	const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
	const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
	const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
	const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
	const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
	const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
	const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
	const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
	const LoopOnce = 2200;
	const LoopRepeat = 2201;
	const LoopPingPong = 2202;
	const InterpolateDiscrete = 2300;
	const InterpolateLinear = 2301;
	const InterpolateSmooth = 2302;
	const ZeroCurvatureEnding = 2400;
	const ZeroSlopeEnding = 2401;
	const WrapAroundEnding = 2402;
	const NormalAnimationBlendMode = 2500;
	const AdditiveAnimationBlendMode = 2501;
	const TrianglesDrawMode = 0;
	const TriangleStripDrawMode = 1;
	const TriangleFanDrawMode = 2;
	const LinearEncoding = 3000;
	const sRGBEncoding = 3001;
	const GammaEncoding = 3007;
	const RGBEEncoding = 3002;
	const LogLuvEncoding = 3003;
	const RGBM7Encoding = 3004;
	const RGBM16Encoding = 3005;
	const RGBDEncoding = 3006;
	const BasicDepthPacking = 3200;
	const RGBADepthPacking = 3201;
	const TangentSpaceNormalMap = 0;
	const ObjectSpaceNormalMap = 1;
	const ZeroStencilOp = 0;
	const KeepStencilOp = 7680;
	const ReplaceStencilOp = 7681;
	const IncrementStencilOp = 7682;
	const DecrementStencilOp = 7683;
	const IncrementWrapStencilOp = 34055;
	const DecrementWrapStencilOp = 34056;
	const InvertStencilOp = 5386;
	const NeverStencilFunc = 512;
	const LessStencilFunc = 513;
	const EqualStencilFunc = 514;
	const LessEqualStencilFunc = 515;
	const GreaterStencilFunc = 516;
	const NotEqualStencilFunc = 517;
	const GreaterEqualStencilFunc = 518;
	const AlwaysStencilFunc = 519;
	const StaticDrawUsage = 35044;
	const DynamicDrawUsage = 35048;
	const StreamDrawUsage = 35040;
	const StaticReadUsage = 35045;
	const DynamicReadUsage = 35049;
	const StreamReadUsage = 35041;
	const StaticCopyUsage = 35046;
	const DynamicCopyUsage = 35050;
	const StreamCopyUsage = 35042;
	const GLSL1 = '100';
	const GLSL3 = '300 es';

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */
	class EventDispatcher {
		addEventListener(type, listener) {
			if (this._listeners === undefined) this._listeners = {};
			const listeners = this._listeners;

			if (listeners[type] === undefined) {
				listeners[type] = [];
			}

			if (listeners[type].indexOf(listener) === -1) {
				listeners[type].push(listener);
			}
		}

		hasEventListener(type, listener) {
			if (this._listeners === undefined) return false;
			const listeners = this._listeners;
			return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
		}

		removeEventListener(type, listener) {
			if (this._listeners === undefined) return;
			const listeners = this._listeners;
			const listenerArray = listeners[type];

			if (listenerArray !== undefined) {
				const index = listenerArray.indexOf(listener);

				if (index !== -1) {
					listenerArray.splice(index, 1);
				}
			}
		}

		dispatchEvent(event) {
			if (this._listeners === undefined) return;
			const listeners = this._listeners;
			const listenerArray = listeners[event.type];

			if (listenerArray !== undefined) {
				event.target = this; // Make a copy, in case listeners are removed while iterating.

				const array = listenerArray.slice(0);

				for (let i = 0, l = array.length; i < l; i++) {
					array[i].call(this, event);
				}

				event.target = null;
			}
		}

	}

	const _lut = [];

	for (let i = 0; i < 256; i++) {
		_lut[i] = (i < 16 ? '0' : '') + i.toString(16);
	}

	let _seed = 1234567;
	const DEG2RAD = Math.PI / 180;
	const RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

	function generateUUID() {
		const d0 = Math.random() * 0xffffffff | 0;
		const d1 = Math.random() * 0xffffffff | 0;
		const d2 = Math.random() * 0xffffffff | 0;
		const d3 = Math.random() * 0xffffffff | 0;
		const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.

		return uuid.toUpperCase();
	}

	function clamp(value, min, max) {
		return Math.max(min, Math.min(max, value));
	} // compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation


	function euclideanModulo(n, m) {
		return (n % m + m) % m;
	} // Linear mapping from range <a1, a2> to range <b1, b2>


	function mapLinear(x, a1, a2, b1, b2) {
		return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
	} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/


	function inverseLerp(x, y, value) {
		if (x !== y) {
			return (value - x) / (y - x);
		} else {
			return 0;
		}
	} // https://en.wikipedia.org/wiki/Linear_interpolation


	function lerp(x, y, t) {
		return (1 - t) * x + t * y;
	} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/


	function damp(x, y, lambda, dt) {
		return lerp(x, y, 1 - Math.exp(-lambda * dt));
	} // https://www.desmos.com/calculator/vcsjnyz7x4


	function pingpong(x, length = 1) {
		return length - Math.abs(euclideanModulo(x, length * 2) - length);
	} // http://en.wikipedia.org/wiki/Smoothstep


	function smoothstep(x, min, max) {
		if (x <= min) return 0;
		if (x >= max) return 1;
		x = (x - min) / (max - min);
		return x * x * (3 - 2 * x);
	}

	function smootherstep(x, min, max) {
		if (x <= min) return 0;
		if (x >= max) return 1;
		x = (x - min) / (max - min);
		return x * x * x * (x * (x * 6 - 15) + 10);
	} // Random integer from <low, high> interval


	function randInt(low, high) {
		return low + Math.floor(Math.random() * (high - low + 1));
	} // Random float from <low, high> interval


	function randFloat(low, high) {
		return low + Math.random() * (high - low);
	} // Random float from <-range/2, range/2> interval


	function randFloatSpread(range) {
		return range * (0.5 - Math.random());
	} // Deterministic pseudo-random float in the interval [ 0, 1 ]


	function seededRandom(s) {
		if (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm

		_seed = _seed * 16807 % 2147483647;
		return (_seed - 1) / 2147483646;
	}

	function degToRad(degrees) {
		return degrees * DEG2RAD;
	}

	function radToDeg(radians) {
		return radians * RAD2DEG;
	}

	function isPowerOfTwo(value) {
		return (value & value - 1) === 0 && value !== 0;
	}

	function ceilPowerOfTwo(value) {
		return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
	}

	function floorPowerOfTwo(value) {
		return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
	}

	function setQuaternionFromProperEuler(q, a, b, c, order) {
		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
		// rotations are applied to the axes in the order specified by 'order'
		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
		// angles are in radians
		const cos = Math.cos;
		const sin = Math.sin;
		const c2 = cos(b / 2);
		const s2 = sin(b / 2);
		const c13 = cos((a + c) / 2);
		const s13 = sin((a + c) / 2);
		const c1_3 = cos((a - c) / 2);
		const s1_3 = sin((a - c) / 2);
		const c3_1 = cos((c - a) / 2);
		const s3_1 = sin((c - a) / 2);

		switch (order) {
			case 'XYX':
				q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
				break;

			case 'YZY':
				q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
				break;

			case 'ZXZ':
				q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
				break;

			case 'XZX':
				q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
				break;

			case 'YXY':
				q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
				break;

			case 'ZYZ':
				q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
				break;

			default:
				console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
		}
	}

	var MathUtils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DEG2RAD: DEG2RAD,
		RAD2DEG: RAD2DEG,
		generateUUID: generateUUID,
		clamp: clamp,
		euclideanModulo: euclideanModulo,
		mapLinear: mapLinear,
		inverseLerp: inverseLerp,
		lerp: lerp,
		damp: damp,
		pingpong: pingpong,
		smoothstep: smoothstep,
		smootherstep: smootherstep,
		randInt: randInt,
		randFloat: randFloat,
		randFloatSpread: randFloatSpread,
		seededRandom: seededRandom,
		degToRad: degToRad,
		radToDeg: radToDeg,
		isPowerOfTwo: isPowerOfTwo,
		ceilPowerOfTwo: ceilPowerOfTwo,
		floorPowerOfTwo: floorPowerOfTwo,
		setQuaternionFromProperEuler: setQuaternionFromProperEuler
	});

	class Vector2 {
		constructor(x = 0, y = 0) {
			this.x = x;
			this.y = y;
		}

		get width() {
			return this.x;
		}

		set width(value) {
			this.x = value;
		}

		get height() {
			return this.y;
		}

		set height(value) {
			this.y = value;
		}

		set(x, y) {
			this.x = x;
			this.y = y;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			return this;
		}

		multiply(v) {
			this.x *= v.x;
			this.y *= v.y;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			return this;
		}

		divide(v) {
			this.x /= v.x;
			this.y /= v.y;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		applyMatrix3(m) {
			const x = this.x,
						y = this.y;
			const e = m.elements;
			this.x = e[0] * x + e[3] * y + e[6];
			this.y = e[1] * x + e[4] * y + e[7];
			return this;
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y;
		}

		cross(v) {
			return this.x * v.y - this.y * v.x;
		}

		lengthSq() {
			return this.x * this.x + this.y * this.y;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		angle() {
			// computes the angle in radians with respect to the positive x-axis
			const angle = Math.atan2(-this.y, -this.x) + Math.PI;
			return angle;
		}

		distanceTo(v) {
			return Math.sqrt(this.distanceToSquared(v));
		}

		distanceToSquared(v) {
			const dx = this.x - v.x,
						dy = this.y - v.y;
			return dx * dx + dy * dy;
		}

		manhattanDistanceTo(v) {
			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			return this;
		}

		equals(v) {
			return v.x === this.x && v.y === this.y;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			return this;
		}

		rotateAround(center, angle) {
			const c = Math.cos(angle),
						s = Math.sin(angle);
			const x = this.x - center.x;
			const y = this.y - center.y;
			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			return this;
		}

	}

	Vector2.prototype.isVector2 = true;

	class Matrix3 {
		constructor() {
			this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];

			if (arguments.length > 0) {
				console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
			}
		}

		set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
			const te = this.elements;
			te[0] = n11;
			te[1] = n21;
			te[2] = n31;
			te[3] = n12;
			te[4] = n22;
			te[5] = n32;
			te[6] = n13;
			te[7] = n23;
			te[8] = n33;
			return this;
		}

		identity() {
			this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
			return this;
		}

		copy(m) {
			const te = this.elements;
			const me = m.elements;
			te[0] = me[0];
			te[1] = me[1];
			te[2] = me[2];
			te[3] = me[3];
			te[4] = me[4];
			te[5] = me[5];
			te[6] = me[6];
			te[7] = me[7];
			te[8] = me[8];
			return this;
		}

		extractBasis(xAxis, yAxis, zAxis) {
			xAxis.setFromMatrix3Column(this, 0);
			yAxis.setFromMatrix3Column(this, 1);
			zAxis.setFromMatrix3Column(this, 2);
			return this;
		}

		setFromMatrix4(m) {
			const me = m.elements;
			this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
			return this;
		}

		multiply(m) {
			return this.multiplyMatrices(this, m);
		}

		premultiply(m) {
			return this.multiplyMatrices(m, this);
		}

		multiplyMatrices(a, b) {
			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;
			const a11 = ae[0],
						a12 = ae[3],
						a13 = ae[6];
			const a21 = ae[1],
						a22 = ae[4],
						a23 = ae[7];
			const a31 = ae[2],
						a32 = ae[5],
						a33 = ae[8];
			const b11 = be[0],
						b12 = be[3],
						b13 = be[6];
			const b21 = be[1],
						b22 = be[4],
						b23 = be[7];
			const b31 = be[2],
						b32 = be[5],
						b33 = be[8];
			te[0] = a11 * b11 + a12 * b21 + a13 * b31;
			te[3] = a11 * b12 + a12 * b22 + a13 * b32;
			te[6] = a11 * b13 + a12 * b23 + a13 * b33;
			te[1] = a21 * b11 + a22 * b21 + a23 * b31;
			te[4] = a21 * b12 + a22 * b22 + a23 * b32;
			te[7] = a21 * b13 + a22 * b23 + a23 * b33;
			te[2] = a31 * b11 + a32 * b21 + a33 * b31;
			te[5] = a31 * b12 + a32 * b22 + a33 * b32;
			te[8] = a31 * b13 + a32 * b23 + a33 * b33;
			return this;
		}

		multiplyScalar(s) {
			const te = this.elements;
			te[0] *= s;
			te[3] *= s;
			te[6] *= s;
			te[1] *= s;
			te[4] *= s;
			te[7] *= s;
			te[2] *= s;
			te[5] *= s;
			te[8] *= s;
			return this;
		}

		determinant() {
			const te = this.elements;
			const a = te[0],
						b = te[1],
						c = te[2],
						d = te[3],
						e = te[4],
						f = te[5],
						g = te[6],
						h = te[7],
						i = te[8];
			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
		}

		invert() {
			const te = this.elements,
						n11 = te[0],
						n21 = te[1],
						n31 = te[2],
						n12 = te[3],
						n22 = te[4],
						n32 = te[5],
						n13 = te[6],
						n23 = te[7],
						n33 = te[8],
						t11 = n33 * n22 - n32 * n23,
						t12 = n32 * n13 - n33 * n12,
						t13 = n23 * n12 - n22 * n13,
						det = n11 * t11 + n21 * t12 + n31 * t13;
			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
			const detInv = 1 / det;
			te[0] = t11 * detInv;
			te[1] = (n31 * n23 - n33 * n21) * detInv;
			te[2] = (n32 * n21 - n31 * n22) * detInv;
			te[3] = t12 * detInv;
			te[4] = (n33 * n11 - n31 * n13) * detInv;
			te[5] = (n31 * n12 - n32 * n11) * detInv;
			te[6] = t13 * detInv;
			te[7] = (n21 * n13 - n23 * n11) * detInv;
			te[8] = (n22 * n11 - n21 * n12) * detInv;
			return this;
		}

		transpose() {
			let tmp;
			const m = this.elements;
			tmp = m[1];
			m[1] = m[3];
			m[3] = tmp;
			tmp = m[2];
			m[2] = m[6];
			m[6] = tmp;
			tmp = m[5];
			m[5] = m[7];
			m[7] = tmp;
			return this;
		}

		getNormalMatrix(matrix4) {
			return this.setFromMatrix4(matrix4).invert().transpose();
		}

		transposeIntoArray(r) {
			const m = this.elements;
			r[0] = m[0];
			r[1] = m[3];
			r[2] = m[6];
			r[3] = m[1];
			r[4] = m[4];
			r[5] = m[7];
			r[6] = m[2];
			r[7] = m[5];
			r[8] = m[8];
			return this;
		}

		setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
			const c = Math.cos(rotation);
			const s = Math.sin(rotation);
			this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
			return this;
		}

		scale(sx, sy) {
			const te = this.elements;
			te[0] *= sx;
			te[3] *= sx;
			te[6] *= sx;
			te[1] *= sy;
			te[4] *= sy;
			te[7] *= sy;
			return this;
		}

		rotate(theta) {
			const c = Math.cos(theta);
			const s = Math.sin(theta);
			const te = this.elements;
			const a11 = te[0],
						a12 = te[3],
						a13 = te[6];
			const a21 = te[1],
						a22 = te[4],
						a23 = te[7];
			te[0] = c * a11 + s * a21;
			te[3] = c * a12 + s * a22;
			te[6] = c * a13 + s * a23;
			te[1] = -s * a11 + c * a21;
			te[4] = -s * a12 + c * a22;
			te[7] = -s * a13 + c * a23;
			return this;
		}

		translate(tx, ty) {
			const te = this.elements;
			te[0] += tx * te[2];
			te[3] += tx * te[5];
			te[6] += tx * te[8];
			te[1] += ty * te[2];
			te[4] += ty * te[5];
			te[7] += ty * te[8];
			return this;
		}

		equals(matrix) {
			const te = this.elements;
			const me = matrix.elements;

			for (let i = 0; i < 9; i++) {
				if (te[i] !== me[i]) return false;
			}

			return true;
		}

		fromArray(array, offset = 0) {
			for (let i = 0; i < 9; i++) {
				this.elements[i] = array[i + offset];
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const te = this.elements;
			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];
			array[offset + 3] = te[3];
			array[offset + 4] = te[4];
			array[offset + 5] = te[5];
			array[offset + 6] = te[6];
			array[offset + 7] = te[7];
			array[offset + 8] = te[8];
			return array;
		}

		clone() {
			return new this.constructor().fromArray(this.elements);
		}

	}

	Matrix3.prototype.isMatrix3 = true;

	let _canvas;

	class ImageUtils {
		static getDataURL(image) {
			if (/^data:/i.test(image.src)) {
				return image.src;
			}

			if (typeof HTMLCanvasElement == 'undefined') {
				return image.src;
			}

			let canvas;

			if (image instanceof HTMLCanvasElement) {
				canvas = image;
			} else {
				if (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
				_canvas.width = image.width;
				_canvas.height = image.height;

				const context = _canvas.getContext('2d');

				if (image instanceof ImageData) {
					context.putImageData(image, 0, 0);
				} else {
					context.drawImage(image, 0, 0, image.width, image.height);
				}

				canvas = _canvas;
			}

			if (canvas.width > 2048 || canvas.height > 2048) {
				console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
				return canvas.toDataURL('image/jpeg', 0.6);
			} else {
				return canvas.toDataURL('image/png');
			}
		}

	}

	let textureId = 0;

	class Texture extends EventDispatcher {
		constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
			super();
			Object.defineProperty(this, 'id', {
				value: textureId++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.image = image;
			this.mipmaps = [];
			this.mapping = mapping;
			this.wrapS = wrapS;
			this.wrapT = wrapT;
			this.magFilter = magFilter;
			this.minFilter = minFilter;
			this.anisotropy = anisotropy;
			this.format = format;
			this.internalFormat = null;
			this.type = type;
			this.offset = new Vector2(0, 0);
			this.repeat = new Vector2(1, 1);
			this.center = new Vector2(0, 0);
			this.rotation = 0;
			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();
			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.

			this.encoding = encoding;
			this.version = 0;
			this.onUpdate = null;
		}

		updateMatrix() {
			this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.name = source.name;
			this.image = source.image;
			this.mipmaps = source.mipmaps.slice(0);
			this.mapping = source.mapping;
			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;
			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;
			this.anisotropy = source.anisotropy;
			this.format = source.format;
			this.internalFormat = source.internalFormat;
			this.type = source.type;
			this.offset.copy(source.offset);
			this.repeat.copy(source.repeat);
			this.center.copy(source.center);
			this.rotation = source.rotation;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy(source.matrix);
			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;
			return this;
		}

		toJSON(meta) {
			const isRootObject = meta === undefined || typeof meta === 'string';

			if (!isRootObject && meta.textures[this.uuid] !== undefined) {
				return meta.textures[this.uuid];
			}

			const output = {
				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},
				uuid: this.uuid,
				name: this.name,
				mapping: this.mapping,
				repeat: [this.repeat.x, this.repeat.y],
				offset: [this.offset.x, this.offset.y],
				center: [this.center.x, this.center.y],
				rotation: this.rotation,
				wrap: [this.wrapS, this.wrapT],
				format: this.format,
				type: this.type,
				encoding: this.encoding,
				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,
				flipY: this.flipY,
				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment
			};

			if (this.image !== undefined) {
				// TODO: Move to THREE.Image
				const image = this.image;

				if (image.uuid === undefined) {
					image.uuid = generateUUID(); // UGH
				}

				if (!isRootObject && meta.images[image.uuid] === undefined) {
					let url;

					if (Array.isArray(image)) {
						// process array of images e.g. CubeTexture
						url = [];

						for (let i = 0, l = image.length; i < l; i++) {
							// check cube texture with data textures
							if (image[i].isDataTexture) {
								url.push(serializeImage(image[i].image));
							} else {
								url.push(serializeImage(image[i]));
							}
						}
					} else {
						// process single image
						url = serializeImage(image);
					}

					meta.images[image.uuid] = {
						uuid: image.uuid,
						url: url
					};
				}

				output.image = image.uuid;
			}

			if (!isRootObject) {
				meta.textures[this.uuid] = output;
			}

			return output;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

		transformUv(uv) {
			if (this.mapping !== UVMapping) return uv;
			uv.applyMatrix3(this.matrix);

			if (uv.x < 0 || uv.x > 1) {
				switch (this.wrapS) {
					case RepeatWrapping:
						uv.x = uv.x - Math.floor(uv.x);
						break;

					case ClampToEdgeWrapping:
						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:
						if (Math.abs(Math.floor(uv.x) % 2) === 1) {
							uv.x = Math.ceil(uv.x) - uv.x;
						} else {
							uv.x = uv.x - Math.floor(uv.x);
						}

						break;
				}
			}

			if (uv.y < 0 || uv.y > 1) {
				switch (this.wrapT) {
					case RepeatWrapping:
						uv.y = uv.y - Math.floor(uv.y);
						break;

					case ClampToEdgeWrapping:
						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:
						if (Math.abs(Math.floor(uv.y) % 2) === 1) {
							uv.y = Math.ceil(uv.y) - uv.y;
						} else {
							uv.y = uv.y - Math.floor(uv.y);
						}

						break;
				}
			}

			if (this.flipY) {
				uv.y = 1 - uv.y;
			}

			return uv;
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;
	Texture.prototype.isTexture = true;

	function serializeImage(image) {
		if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
			// default images
			return ImageUtils.getDataURL(image);
		} else {
			if (image.data) {
				// images of DataTexture
				return {
					data: Array.prototype.slice.call(image.data),
					width: image.width,
					height: image.height,
					type: image.data.constructor.name
				};
			} else {
				console.warn('THREE.Texture: Unable to serialize Texture.');
				return {};
			}
		}
	}

	class Vector4 {
		constructor(x = 0, y = 0, z = 0, w = 1) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
		}

		get width() {
			return this.z;
		}

		set width(value) {
			this.z = value;
		}

		get height() {
			return this.w;
		}

		set height(value) {
			this.w = value;
		}

		set(x, y, z, w) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setZ(z) {
			this.z = z;
			return this;
		}

		setW(w) {
			this.w = w;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				case 2:
					this.z = value;
					break;

				case 3:
					this.w = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				case 2:
					return this.z;

				case 3:
					return this.w;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y, this.z, this.w);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = v.w !== undefined ? v.w : 1;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;
			return this;
		}

		multiply(v) {
			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			this.w *= v.w;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;
			return this;
		}

		applyMatrix4(m) {
			const x = this.x,
						y = this.y,
						z = this.z,
						w = this.w;
			const e = m.elements;
			this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
			this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
			this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
			this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		setAxisAngleFromQuaternion(q) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
			// q is assumed to be normalized
			this.w = 2 * Math.acos(q.w);
			const s = Math.sqrt(1 - q.w * q.w);

			if (s < 0.0001) {
				this.x = 1;
				this.y = 0;
				this.z = 0;
			} else {
				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;
			}

			return this;
		}

		setAxisAngleFromRotationMatrix(m) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			let angle, x, y, z; // variables for result

			const epsilon = 0.01,
						// margin to allow for rounding errors
			epsilon2 = 0.1,
						// margin to distinguish between 0 and 180 degrees
			te = m.elements,
						m11 = te[0],
						m12 = te[4],
						m13 = te[8],
						m21 = te[1],
						m22 = te[5],
						m23 = te[9],
						m31 = te[2],
						m32 = te[6],
						m33 = te[10];

			if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms
				if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
					// this singularity is identity matrix so angle = 0
					this.set(1, 0, 0, 0);
					return this; // zero angle, arbitrary axis
				} // otherwise this singularity is angle = 180


				angle = Math.PI;
				const xx = (m11 + 1) / 2;
				const yy = (m22 + 1) / 2;
				const zz = (m33 + 1) / 2;
				const xy = (m12 + m21) / 4;
				const xz = (m13 + m31) / 4;
				const yz = (m23 + m32) / 4;

				if (xx > yy && xx > zz) {
					// m11 is the largest diagonal term
					if (xx < epsilon) {
						x = 0;
						y = 0.707106781;
						z = 0.707106781;
					} else {
						x = Math.sqrt(xx);
						y = xy / x;
						z = xz / x;
					}
				} else if (yy > zz) {
					// m22 is the largest diagonal term
					if (yy < epsilon) {
						x = 0.707106781;
						y = 0;
						z = 0.707106781;
					} else {
						y = Math.sqrt(yy);
						x = xy / y;
						z = yz / y;
					}
				} else {
					// m33 is the largest diagonal term so base result on this
					if (zz < epsilon) {
						x = 0.707106781;
						y = 0.707106781;
						z = 0;
					} else {
						z = Math.sqrt(zz);
						x = xz / z;
						y = yz / z;
					}
				}

				this.set(x, y, z, angle);
				return this; // return 180 deg rotation
			} // as we have reached here there are no singularities so we can handle normally


			let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize

			if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = (m32 - m23) / s;
			this.y = (m13 - m31) / s;
			this.z = (m21 - m12) / s;
			this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
			return this;
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			this.z = Math.min(this.z, v.z);
			this.w = Math.min(this.w, v.w);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			this.z = Math.max(this.z, v.z);
			this.w = Math.max(this.w, v.w);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			this.z = Math.max(min.z, Math.min(max.z, this.z));
			this.w = Math.max(min.w, Math.min(max.w, this.w));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			this.z = Math.max(minVal, Math.min(maxVal, this.z));
			this.w = Math.max(minVal, Math.min(maxVal, this.w));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			this.z = Math.floor(this.z);
			this.w = Math.floor(this.w);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			this.z = Math.ceil(this.z);
			this.w = Math.ceil(this.w);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			this.z = Math.round(this.z);
			this.w = Math.round(this.w);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
			this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;
			this.w = -this.w;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
		}

		lengthSq() {
			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			this.z += (v.z - this.z) * alpha;
			this.w += (v.w - this.w) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			this.z = v1.z + (v2.z - v1.z) * alpha;
			this.w = v1.w + (v2.w - v1.w) * alpha;
			return this;
		}

		equals(v) {
			return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			this.z = array[offset + 2];
			this.w = array[offset + 3];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			array[offset + 2] = this.z;
			array[offset + 3] = this.w;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			this.z = attribute.getZ(index);
			this.w = attribute.getW(index);
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			this.w = Math.random();
			return this;
		}

	}

	Vector4.prototype.isVector4 = true;

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/

	class WebGLRenderTarget extends EventDispatcher {
		constructor(width, height, options) {
			super();
			this.width = width;
			this.height = height;
			this.depth = 1;
			this.scissor = new Vector4(0, 0, width, height);
			this.scissorTest = false;
			this.viewport = new Vector4(0, 0, width, height);
			options = options || {};
			this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
			this.texture.image = {};
			this.texture.image.width = width;
			this.texture.image.height = height;
			this.texture.image.depth = 1;
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
		}

		setTexture(texture) {
			texture.image = {
				width: this.width,
				height: this.height,
				depth: this.depth
			};
			this.texture = texture;
		}

		setSize(width, height, depth = 1) {
			if (this.width !== width || this.height !== height || this.depth !== depth) {
				this.width = width;
				this.height = height;
				this.depth = depth;
				this.texture.image.width = width;
				this.texture.image.height = height;
				this.texture.image.depth = depth;
				this.dispose();
			}

			this.viewport.set(0, 0, width, height);
			this.scissor.set(0, 0, width, height);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.width = source.width;
			this.height = source.height;
			this.depth = source.depth;
			this.viewport.copy(source.viewport);
			this.texture = source.texture.clone();
			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;
			return this;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	WebGLRenderTarget.prototype.isWebGLRenderTarget = true;

	class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
		constructor(width, height, options) {
			super(width, height, options);
			this.samples = 4;
		}

		copy(source) {
			super.copy.call(this, source);
			this.samples = source.samples;
			return this;
		}

	}

	WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;

	class Quaternion {
		constructor(x = 0, y = 0, z = 0, w = 1) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;
		}

		static slerp(qa, qb, qm, t) {
			console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
			return qm.slerpQuaternions(qa, qb, t);
		}

		static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
			// fuzz-free, array-based Quaternion SLERP operation
			let x0 = src0[srcOffset0 + 0],
					y0 = src0[srcOffset0 + 1],
					z0 = src0[srcOffset0 + 2],
					w0 = src0[srcOffset0 + 3];
			const x1 = src1[srcOffset1 + 0],
						y1 = src1[srcOffset1 + 1],
						z1 = src1[srcOffset1 + 2],
						w1 = src1[srcOffset1 + 3];

			if (t === 0) {
				dst[dstOffset + 0] = x0;
				dst[dstOffset + 1] = y0;
				dst[dstOffset + 2] = z0;
				dst[dstOffset + 3] = w0;
				return;
			}

			if (t === 1) {
				dst[dstOffset + 0] = x1;
				dst[dstOffset + 1] = y1;
				dst[dstOffset + 2] = z1;
				dst[dstOffset + 3] = w1;
				return;
			}

			if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
				let s = 1 - t;
				const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
							dir = cos >= 0 ? 1 : -1,
							sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:

				if (sqrSin > Number.EPSILON) {
					const sin = Math.sqrt(sqrSin),
								len = Math.atan2(sin, cos * dir);
					s = Math.sin(s * len) / sin;
					t = Math.sin(t * len) / sin;
				}

				const tDir = t * dir;
				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:

				if (s === 1 - t) {
					const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;
				}
			}

			dst[dstOffset] = x0;
			dst[dstOffset + 1] = y0;
			dst[dstOffset + 2] = z0;
			dst[dstOffset + 3] = w0;
		}

		static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
			const x0 = src0[srcOffset0];
			const y0 = src0[srcOffset0 + 1];
			const z0 = src0[srcOffset0 + 2];
			const w0 = src0[srcOffset0 + 3];
			const x1 = src1[srcOffset1];
			const y1 = src1[srcOffset1 + 1];
			const z1 = src1[srcOffset1 + 2];
			const w1 = src1[srcOffset1 + 3];
			dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
			dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
			dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
			dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
			return dst;
		}

		get x() {
			return this._x;
		}

		set x(value) {
			this._x = value;

			this._onChangeCallback();
		}

		get y() {
			return this._y;
		}

		set y(value) {
			this._y = value;

			this._onChangeCallback();
		}

		get z() {
			return this._z;
		}

		set z(value) {
			this._z = value;

			this._onChangeCallback();
		}

		get w() {
			return this._w;
		}

		set w(value) {
			this._w = value;

			this._onChangeCallback();
		}

		set(x, y, z, w) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;
		}

		clone() {
			return new this.constructor(this._x, this._y, this._z, this._w);
		}

		copy(quaternion) {
			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;
		}

		setFromEuler(euler, update) {
			if (!(euler && euler.isEuler)) {
				throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
			}

			const x = euler._x,
						y = euler._y,
						z = euler._z,
						order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			const cos = Math.cos;
			const sin = Math.sin;
			const c1 = cos(x / 2);
			const c2 = cos(y / 2);
			const c3 = cos(z / 2);
			const s1 = sin(x / 2);
			const s2 = sin(y / 2);
			const s3 = sin(z / 2);

			switch (order) {
				case 'XYZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'YXZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'ZXY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'ZYX':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'YZX':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'XZY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				default:
					console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
			}

			if (update !== false) this._onChangeCallback();
			return this;
		}

		setFromAxisAngle(axis, angle) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
			// assumes axis is normalized
			const halfAngle = angle / 2,
						s = Math.sin(halfAngle);
			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos(halfAngle);

			this._onChangeCallback();

			return this;
		}

		setFromRotationMatrix(m) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			const te = m.elements,
						m11 = te[0],
						m12 = te[4],
						m13 = te[8],
						m21 = te[1],
						m22 = te[5],
						m23 = te[9],
						m31 = te[2],
						m32 = te[6],
						m33 = te[10],
						trace = m11 + m22 + m33;

			if (trace > 0) {
				const s = 0.5 / Math.sqrt(trace + 1.0);
				this._w = 0.25 / s;
				this._x = (m32 - m23) * s;
				this._y = (m13 - m31) * s;
				this._z = (m21 - m12) * s;
			} else if (m11 > m22 && m11 > m33) {
				const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
				this._w = (m32 - m23) / s;
				this._x = 0.25 * s;
				this._y = (m12 + m21) / s;
				this._z = (m13 + m31) / s;
			} else if (m22 > m33) {
				const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
				this._w = (m13 - m31) / s;
				this._x = (m12 + m21) / s;
				this._y = 0.25 * s;
				this._z = (m23 + m32) / s;
			} else {
				const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
				this._w = (m21 - m12) / s;
				this._x = (m13 + m31) / s;
				this._y = (m23 + m32) / s;
				this._z = 0.25 * s;
			}

			this._onChangeCallback();

			return this;
		}

		setFromUnitVectors(vFrom, vTo) {
			// assumes direction vectors vFrom and vTo are normalized
			let r = vFrom.dot(vTo) + 1;

			if (r < Number.EPSILON) {
				// vFrom and vTo point in opposite directions
				r = 0;

				if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
					this._x = -vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;
				} else {
					this._x = 0;
					this._y = -vFrom.z;
					this._z = vFrom.y;
					this._w = r;
				}
			} else {
				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;
			}

			return this.normalize();
		}

		angleTo(q) {
			return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
		}

		rotateTowards(q, step) {
			const angle = this.angleTo(q);
			if (angle === 0) return this;
			const t = Math.min(1, step / angle);
			this.slerp(q, t);
			return this;
		}

		identity() {
			return this.set(0, 0, 0, 1);
		}

		invert() {
			// quaternion is assumed to have unit length
			return this.conjugate();
		}

		conjugate() {
			this._x *= -1;
			this._y *= -1;
			this._z *= -1;

			this._onChangeCallback();

			return this;
		}

		dot(v) {
			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
		}

		lengthSq() {
			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
		}

		length() {
			return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
		}

		normalize() {
			let l = this.length();

			if (l === 0) {
				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;
			} else {
				l = 1 / l;
				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;
			}

			this._onChangeCallback();

			return this;
		}

		multiply(q, p) {
			if (p !== undefined) {
				console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
				return this.multiplyQuaternions(q, p);
			}

			return this.multiplyQuaternions(this, q);
		}

		premultiply(q) {
			return this.multiplyQuaternions(q, this);
		}

		multiplyQuaternions(a, b) {
			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
			const qax = a._x,
						qay = a._y,
						qaz = a._z,
						qaw = a._w;
			const qbx = b._x,
						qby = b._y,
						qbz = b._z,
						qbw = b._w;
			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;
		}

		slerp(qb, t) {
			if (t === 0) return this;
			if (t === 1) return this.copy(qb);
			const x = this._x,
						y = this._y,
						z = this._z,
						w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if (cosHalfTheta < 0) {
				this._w = -qb._w;
				this._x = -qb._x;
				this._y = -qb._y;
				this._z = -qb._z;
				cosHalfTheta = -cosHalfTheta;
			} else {
				this.copy(qb);
			}

			if (cosHalfTheta >= 1.0) {
				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;
				return this;
			}

			const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if (sqrSinHalfTheta <= Number.EPSILON) {
				const s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;
				this.normalize();

				this._onChangeCallback();

				return this;
			}

			const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
			const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
			const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
						ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
			this._w = w * ratioA + this._w * ratioB;
			this._x = x * ratioA + this._x * ratioB;
			this._y = y * ratioA + this._y * ratioB;
			this._z = z * ratioA + this._z * ratioB;

			this._onChangeCallback();

			return this;
		}

		slerpQuaternions(qa, qb, t) {
			this.copy(qa).slerp(qb, t);
		}

		equals(quaternion) {
			return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
		}

		fromArray(array, offset = 0) {
			this._x = array[offset];
			this._y = array[offset + 1];
			this._z = array[offset + 2];
			this._w = array[offset + 3];

			this._onChangeCallback();

			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this._x;
			array[offset + 1] = this._y;
			array[offset + 2] = this._z;
			array[offset + 3] = this._w;
			return array;
		}

		fromBufferAttribute(attribute, index) {
			this._x = attribute.getX(index);
			this._y = attribute.getY(index);
			this._z = attribute.getZ(index);
			this._w = attribute.getW(index);
			return this;
		}

		_onChange(callback) {
			this._onChangeCallback = callback;
			return this;
		}

		_onChangeCallback() {}

	}

	Quaternion.prototype.isQuaternion = true;

	class Vector3 {
		constructor(x = 0, y = 0, z = 0) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		set(x, y, z) {
			if (z === undefined) z = this.z; // sprite.scale.set(x,y)

			this.x = x;
			this.y = y;
			this.z = z;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setZ(z) {
			this.z = z;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				case 2:
					this.z = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				case 2:
					return this.z;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y, this.z);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			this.z += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			return this;
		}

		multiply(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
				return this.multiplyVectors(v, w);
			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			return this;
		}

		multiplyVectors(a, b) {
			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;
			return this;
		}

		applyEuler(euler) {
			if (!(euler && euler.isEuler)) {
				console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
			}

			return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
		}

		applyAxisAngle(axis, angle) {
			return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
		}

		applyMatrix3(m) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			this.x = e[0] * x + e[3] * y + e[6] * z;
			this.y = e[1] * x + e[4] * y + e[7] * z;
			this.z = e[2] * x + e[5] * y + e[8] * z;
			return this;
		}

		applyNormalMatrix(m) {
			return this.applyMatrix3(m).normalize();
		}

		applyMatrix4(m) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
			this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
			this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
			this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
			return this;
		}

		applyQuaternion(q) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const qx = q.x,
						qy = q.y,
						qz = q.z,
						qw = q.w; // calculate quat * vector

			const ix = qw * x + qy * z - qz * y;
			const iy = qw * y + qz * x - qx * z;
			const iz = qw * z + qx * y - qy * x;
			const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

			this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
			this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
			this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
			return this;
		}

		project(camera) {
			return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
		}

		unproject(camera) {
			return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
		}

		transformDirection(m) {
			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			this.x = e[0] * x + e[4] * y + e[8] * z;
			this.y = e[1] * x + e[5] * y + e[9] * z;
			this.z = e[2] * x + e[6] * y + e[10] * z;
			return this.normalize();
		}

		divide(v) {
			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			this.z = Math.min(this.z, v.z);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			this.z = Math.max(this.z, v.z);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			this.z = Math.max(min.z, Math.min(max.z, this.z));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			this.z = Math.max(minVal, Math.min(maxVal, this.z));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			this.z = Math.floor(this.z);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			this.z = Math.ceil(this.z);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			this.z = Math.round(this.z);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y + this.z * v.z;
		} // TODO lengthSquared?


		lengthSq() {
			return this.x * this.x + this.y * this.y + this.z * this.z;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			this.z += (v.z - this.z) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			this.z = v1.z + (v2.z - v1.z) * alpha;
			return this;
		}

		cross(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
				return this.crossVectors(v, w);
			}

			return this.crossVectors(this, v);
		}

		crossVectors(a, b) {
			const ax = a.x,
						ay = a.y,
						az = a.z;
			const bx = b.x,
						by = b.y,
						bz = b.z;
			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;
			return this;
		}

		projectOnVector(v) {
			const denominator = v.lengthSq();
			if (denominator === 0) return this.set(0, 0, 0);
			const scalar = v.dot(this) / denominator;
			return this.copy(v).multiplyScalar(scalar);
		}

		projectOnPlane(planeNormal) {
			_vector$c.copy(this).projectOnVector(planeNormal);

			return this.sub(_vector$c);
		}

		reflect(normal) {
			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length
			return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
		}

		angleTo(v) {
			const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
			if (denominator === 0) return Math.PI / 2;
			const theta = this.dot(v) / denominator; // clamp, to handle numerical problems

			return Math.acos(clamp(theta, -1, 1));
		}

		distanceTo(v) {
			return Math.sqrt(this.distanceToSquared(v));
		}

		distanceToSquared(v) {
			const dx = this.x - v.x,
						dy = this.y - v.y,
						dz = this.z - v.z;
			return dx * dx + dy * dy + dz * dz;
		}

		manhattanDistanceTo(v) {
			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
		}

		setFromSpherical(s) {
			return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
		}

		setFromSphericalCoords(radius, phi, theta) {
			const sinPhiRadius = Math.sin(phi) * radius;
			this.x = sinPhiRadius * Math.sin(theta);
			this.y = Math.cos(phi) * radius;
			this.z = sinPhiRadius * Math.cos(theta);
			return this;
		}

		setFromCylindrical(c) {
			return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
		}

		setFromCylindricalCoords(radius, theta, y) {
			this.x = radius * Math.sin(theta);
			this.y = y;
			this.z = radius * Math.cos(theta);
			return this;
		}

		setFromMatrixPosition(m) {
			const e = m.elements;
			this.x = e[12];
			this.y = e[13];
			this.z = e[14];
			return this;
		}

		setFromMatrixScale(m) {
			const sx = this.setFromMatrixColumn(m, 0).length();
			const sy = this.setFromMatrixColumn(m, 1).length();
			const sz = this.setFromMatrixColumn(m, 2).length();
			this.x = sx;
			this.y = sy;
			this.z = sz;
			return this;
		}

		setFromMatrixColumn(m, index) {
			return this.fromArray(m.elements, index * 4);
		}

		setFromMatrix3Column(m, index) {
			return this.fromArray(m.elements, index * 3);
		}

		equals(v) {
			return v.x === this.x && v.y === this.y && v.z === this.z;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			this.z = array[offset + 2];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			array[offset + 2] = this.z;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			this.z = attribute.getZ(index);
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			return this;
		}

	}

	Vector3.prototype.isVector3 = true;

	const _vector$c = /*@__PURE__*/new Vector3();

	const _quaternion$4 = /*@__PURE__*/new Quaternion();

	class Box3 {
		constructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
			this.min = min;
			this.max = max;
		}

		set(min, max) {
			this.min.copy(min);
			this.max.copy(max);
			return this;
		}

		setFromArray(array) {
			let minX = +Infinity;
			let minY = +Infinity;
			let minZ = +Infinity;
			let maxX = -Infinity;
			let maxY = -Infinity;
			let maxZ = -Infinity;

			for (let i = 0, l = array.length; i < l; i += 3) {
				const x = array[i];
				const y = array[i + 1];
				const z = array[i + 2];
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (z < minZ) minZ = z;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
				if (z > maxZ) maxZ = z;
			}

			this.min.set(minX, minY, minZ);
			this.max.set(maxX, maxY, maxZ);
			return this;
		}

		setFromBufferAttribute(attribute) {
			let minX = +Infinity;
			let minY = +Infinity;
			let minZ = +Infinity;
			let maxX = -Infinity;
			let maxY = -Infinity;
			let maxZ = -Infinity;

			for (let i = 0, l = attribute.count; i < l; i++) {
				const x = attribute.getX(i);
				const y = attribute.getY(i);
				const z = attribute.getZ(i);
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (z < minZ) minZ = z;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
				if (z > maxZ) maxZ = z;
			}

			this.min.set(minX, minY, minZ);
			this.max.set(maxX, maxY, maxZ);
			return this;
		}

		setFromPoints(points) {
			this.makeEmpty();

			for (let i = 0, il = points.length; i < il; i++) {
				this.expandByPoint(points[i]);
			}

			return this;
		}

		setFromCenterAndSize(center, size) {
			const halfSize = _vector$b.copy(size).multiplyScalar(0.5);

			this.min.copy(center).sub(halfSize);
			this.max.copy(center).add(halfSize);
			return this;
		}

		setFromObject(object) {
			this.makeEmpty();
			return this.expandByObject(object);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(box) {
			this.min.copy(box.min);
			this.max.copy(box.max);
			return this;
		}

		makeEmpty() {
			this.min.x = this.min.y = this.min.z = +Infinity;
			this.max.x = this.max.y = this.max.z = -Infinity;
			return this;
		}

		isEmpty() {
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
			return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
		}

		getCenter(target) {
			if (target === undefined) {
				console.warn('THREE.Box3: .getCenter() target is now required');
				target = new Vector3();
			}

			return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
		}

		getSize(target) {
			if (target === undefined) {
				console.warn('THREE.Box3: .getSize() target is now required');
				target = new Vector3();
			}

			return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
		}

		expandByPoint(point) {
			this.min.min(point);
			this.max.max(point);
			return this;
		}

		expandByVector(vector) {
			this.min.sub(vector);
			this.max.add(vector);
			return this;
		}

		expandByScalar(scalar) {
			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);
			return this;
		}

		expandByObject(object) {
			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms
			object.updateWorldMatrix(false, false);
			const geometry = object.geometry;

			if (geometry !== undefined) {
				if (geometry.boundingBox === null) {
					geometry.computeBoundingBox();
				}

				_box$3.copy(geometry.boundingBox);

				_box$3.applyMatrix4(object.matrixWorld);

				this.union(_box$3);
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				this.expandByObject(children[i]);
			}

			return this;
		}

		containsPoint(point) {
			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
		}

		containsBox(box) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
		}

		getParameter(point, target) {
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
			if (target === undefined) {
				console.warn('THREE.Box3: .getParameter() target is now required');
				target = new Vector3();
			}

			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
		}

		intersectsBox(box) {
			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
		}

		intersectsSphere(sphere) {
			// Find the point on the AABB closest to the sphere center.
			this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.

			return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
		}

		intersectsPlane(plane) {
			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.
			let min, max;

			if (plane.normal.x > 0) {
				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;
			} else {
				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;
			}

			if (plane.normal.y > 0) {
				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;
			} else {
				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;
			}

			if (plane.normal.z > 0) {
				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;
			} else {
				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;
			}

			return min <= -plane.constant && max >= -plane.constant;
		}

		intersectsTriangle(triangle) {
			if (this.isEmpty()) {
				return false;
			} // compute box center and extents


			this.getCenter(_center);

			_extents.subVectors(this.max, _center); // translate triangle to aabb origin


			_v0$2.subVectors(triangle.a, _center);

			_v1$7.subVectors(triangle.b, _center);

			_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle


			_f0.subVectors(_v1$7, _v0$2);

			_f1.subVectors(_v2$3, _v1$7);

			_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)


			let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];

			if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
				return false;
			} // test 3 face normals from the aabb


			axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];

			if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
				return false;
			} // finally testing the face normal of the triangle
			// use already existing triangle edge vectors here


			_triangleNormal.crossVectors(_f0, _f1);

			axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
			return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);
		}

		clampPoint(point, target) {
			if (target === undefined) {
				console.warn('THREE.Box3: .clampPoint() target is now required');
				target = new Vector3();
			}

			return target.copy(point).clamp(this.min, this.max);
		}

		distanceToPoint(point) {
			const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);

			return clampedPoint.sub(point).length();
		}

		getBoundingSphere(target) {
			if (target === undefined) {
				console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency
			}

			this.getCenter(target.center);
			target.radius = this.getSize(_vector$b).length() * 0.5;
			return target;
		}

		intersect(box) {
			this.min.max(box.min);
			this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.

			if (this.isEmpty()) this.makeEmpty();
			return this;
		}

		union(box) {
			this.min.min(box.min);
			this.max.max(box.max);
			return this;
		}

		applyMatrix4(matrix) {
			// transform of empty box is an empty box.
			if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below

			_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000


			_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001


			_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010


			_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011


			_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100


			_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101


			_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110


			_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111


			this.setFromPoints(_points);
			return this;
		}

		translate(offset) {
			this.min.add(offset);
			this.max.add(offset);
			return this;
		}

		equals(box) {
			return box.min.equals(this.min) && box.max.equals(this.max);
		}

	}

	Box3.prototype.isBox3 = true;
	const _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];

	const _vector$b = /*@__PURE__*/new Vector3();

	const _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices


	const _v0$2 = /*@__PURE__*/new Vector3();

	const _v1$7 = /*@__PURE__*/new Vector3();

	const _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors


	const _f0 = /*@__PURE__*/new Vector3();

	const _f1 = /*@__PURE__*/new Vector3();

	const _f2 = /*@__PURE__*/new Vector3();

	const _center = /*@__PURE__*/new Vector3();

	const _extents = /*@__PURE__*/new Vector3();

	const _triangleNormal = /*@__PURE__*/new Vector3();

	const _testAxis = /*@__PURE__*/new Vector3();

	function satForAxes(axes, v0, v1, v2, extents) {
		for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
			_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis


			const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis

			const p0 = v0.dot(_testAxis);
			const p1 = v1.dot(_testAxis);
			const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r

			if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is seperating and we can exit
				return false;
			}
		}

		return true;
	}

	const _box$2 = /*@__PURE__*/new Box3();

	const _v1$6 = /*@__PURE__*/new Vector3();

	const _toFarthestPoint = /*@__PURE__*/new Vector3();

	const _toPoint = /*@__PURE__*/new Vector3();

	class Sphere {
		constructor(center = new Vector3(), radius = -1) {
			this.center = center;
			this.radius = radius;
		}

		set(center, radius) {
			this.center.copy(center);
			this.radius = radius;
			return this;
		}

		setFromPoints(points, optionalCenter) {
			const center = this.center;

			if (optionalCenter !== undefined) {
				center.copy(optionalCenter);
			} else {
				_box$2.setFromPoints(points).getCenter(center);
			}

			let maxRadiusSq = 0;

			for (let i = 0, il = points.length; i < il; i++) {
				maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
			}

			this.radius = Math.sqrt(maxRadiusSq);
			return this;
		}

		copy(sphere) {
			this.center.copy(sphere.center);
			this.radius = sphere.radius;
			return this;
		}

		isEmpty() {
			return this.radius < 0;
		}

		makeEmpty() {
			this.center.set(0, 0, 0);
			this.radius = -1;
			return this;
		}

		containsPoint(point) {
			return point.distanceToSquared(this.center) <= this.radius * this.radius;
		}

		distanceToPoint(point) {
			return point.distanceTo(this.center) - this.radius;
		}

		intersectsSphere(sphere) {
			const radiusSum = this.radius + sphere.radius;
			return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
		}

		intersectsBox(box) {
			return box.intersectsSphere(this);
		}

		intersectsPlane(plane) {
			return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
		}

		clampPoint(point, target) {
			const deltaLengthSq = this.center.distanceToSquared(point);

			if (target === undefined) {
				console.warn('THREE.Sphere: .clampPoint() target is now required');
				target = new Vector3();
			}

			target.copy(point);

			if (deltaLengthSq > this.radius * this.radius) {
				target.sub(this.center).normalize();
				target.multiplyScalar(this.radius).add(this.center);
			}

			return target;
		}

		getBoundingBox(target) {
			if (target === undefined) {
				console.warn('THREE.Sphere: .getBoundingBox() target is now required');
				target = new Box3();
			}

			if (this.isEmpty()) {
				// Empty sphere produces empty bounding box
				target.makeEmpty();
				return target;
			}

			target.set(this.center, this.center);
			target.expandByScalar(this.radius);
			return target;
		}

		applyMatrix4(matrix) {
			this.center.applyMatrix4(matrix);
			this.radius = this.radius * matrix.getMaxScaleOnAxis();
			return this;
		}

		translate(offset) {
			this.center.add(offset);
			return this;
		}

		expandByPoint(point) {
			// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
			_toPoint.subVectors(point, this.center);

			const lengthSq = _toPoint.lengthSq();

			if (lengthSq > this.radius * this.radius) {
				const length = Math.sqrt(lengthSq);
				const missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,
				// and the other half to position. This gives a tighter enclosure, instead of if
				// the whole missing distance were just added to radius.

				this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));
				this.radius += missingRadiusHalf;
			}

			return this;
		}

		union(sphere) {
			// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
			// To enclose another sphere into this sphere, we only need to enclose two points:
			// 1) Enclose the farthest point on the other sphere into this sphere.
			// 2) Enclose the opposite point of the farthest point into this sphere.
			_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);

			this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));
			this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));
			return this;
		}

		equals(sphere) {
			return sphere.center.equals(this.center) && sphere.radius === this.radius;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	const _vector$a = /*@__PURE__*/new Vector3();

	const _segCenter = /*@__PURE__*/new Vector3();

	const _segDir = /*@__PURE__*/new Vector3();

	const _diff = /*@__PURE__*/new Vector3();

	const _edge1 = /*@__PURE__*/new Vector3();

	const _edge2 = /*@__PURE__*/new Vector3();

	const _normal$1 = /*@__PURE__*/new Vector3();

	class Ray {
		constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
			this.origin = origin;
			this.direction = direction;
		}

		set(origin, direction) {
			this.origin.copy(origin);
			this.direction.copy(direction);
			return this;
		}

		copy(ray) {
			this.origin.copy(ray.origin);
			this.direction.copy(ray.direction);
			return this;
		}

		at(t, target) {
			if (target === undefined) {
				console.warn('THREE.Ray: .at() target is now required');
				target = new Vector3();
			}

			return target.copy(this.direction).multiplyScalar(t).add(this.origin);
		}

		lookAt(v) {
			this.direction.copy(v).sub(this.origin).normalize();
			return this;
		}

		recast(t) {
			this.origin.copy(this.at(t, _vector$a));
			return this;
		}

		closestPointToPoint(point, target) {
			if (target === undefined) {
				console.warn('THREE.Ray: .closestPointToPoint() target is now required');
				target = new Vector3();
			}

			target.subVectors(point, this.origin);
			const directionDistance = target.dot(this.direction);

			if (directionDistance < 0) {
				return target.copy(this.origin);
			}

			return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
		}

		distanceToPoint(point) {
			return Math.sqrt(this.distanceSqToPoint(point));
		}

		distanceSqToPoint(point) {
			const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray


			if (directionDistance < 0) {
				return this.origin.distanceToSquared(point);
			}

			_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

			return _vector$a.distanceToSquared(point);
		}

		distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment
			_segCenter.copy(v0).add(v1).multiplyScalar(0.5);

			_segDir.copy(v1).sub(v0).normalize();

			_diff.copy(this.origin).sub(_segCenter);

			const segExtent = v0.distanceTo(v1) * 0.5;
			const a01 = -this.direction.dot(_segDir);

			const b0 = _diff.dot(this.direction);

			const b1 = -_diff.dot(_segDir);

			const c = _diff.lengthSq();

			const det = Math.abs(1 - a01 * a01);
			let s0, s1, sqrDist, extDet;

			if (det > 0) {
				// The ray and segment are not parallel.
				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if (s0 >= 0) {
					if (s1 >= -extDet) {
						if (s1 <= extDet) {
							// region 0
							// Minimum at interior points of ray and segment.
							const invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
						} else {
							// region 1
							s1 = segExtent;
							s0 = Math.max(0, -(a01 * s1 + b0));
							sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
						}
					} else {
						// region 5
						s1 = -segExtent;
						s0 = Math.max(0, -(a01 * s1 + b0));
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					}
				} else {
					if (s1 <= -extDet) {
						// region 4
						s0 = Math.max(0, -(-a01 * segExtent + b0));
						s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					} else if (s1 <= extDet) {
						// region 3
						s0 = 0;
						s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = s1 * (s1 + 2 * b1) + c;
					} else {
						// region 2
						s0 = Math.max(0, -(a01 * segExtent + b0));
						s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					}
				}
			} else {
				// Ray and segment are parallel.
				s1 = a01 > 0 ? -segExtent : segExtent;
				s0 = Math.max(0, -(a01 * s1 + b0));
				sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
			}

			if (optionalPointOnRay) {
				optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
			}

			if (optionalPointOnSegment) {
				optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
			}

			return sqrDist;
		}

		intersectSphere(sphere, target) {
			_vector$a.subVectors(sphere.center, this.origin);

			const tca = _vector$a.dot(this.direction);

			const d2 = _vector$a.dot(_vector$a) - tca * tca;
			const radius2 = sphere.radius * sphere.radius;
			if (d2 > radius2) return null;
			const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere

			const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere

			const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null

			if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.

			if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0

			return this.at(t0, target);
		}

		intersectsSphere(sphere) {
			return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
		}

		distanceToPlane(plane) {
			const denominator = plane.normal.dot(this.direction);

			if (denominator === 0) {
				// line is coplanar, return origin
				if (plane.distanceToPoint(this.origin) === 0) {
					return 0;
				} // Null is preferable to undefined since undefined means.... it is undefined


				return null;
			}

			const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane

			return t >= 0 ? t : null;
		}

		intersectPlane(plane, target) {
			const t = this.distanceToPlane(plane);

			if (t === null) {
				return null;
			}

			return this.at(t, target);
		}

		intersectsPlane(plane) {
			// check if the ray lies on the plane first
			const distToPoint = plane.distanceToPoint(this.origin);

			if (distToPoint === 0) {
				return true;
			}

			const denominator = plane.normal.dot(this.direction);

			if (denominator * distToPoint < 0) {
				return true;
			} // ray origin is behind the plane (and is pointing behind it)


			return false;
		}

		intersectBox(box, target) {
			let tmin, tmax, tymin, tymax, tzmin, tzmax;
			const invdirx = 1 / this.direction.x,
						invdiry = 1 / this.direction.y,
						invdirz = 1 / this.direction.z;
			const origin = this.origin;

			if (invdirx >= 0) {
				tmin = (box.min.x - origin.x) * invdirx;
				tmax = (box.max.x - origin.x) * invdirx;
			} else {
				tmin = (box.max.x - origin.x) * invdirx;
				tmax = (box.min.x - origin.x) * invdirx;
			}

			if (invdiry >= 0) {
				tymin = (box.min.y - origin.y) * invdiry;
				tymax = (box.max.y - origin.y) * invdiry;
			} else {
				tymin = (box.max.y - origin.y) * invdiry;
				tymax = (box.min.y - origin.y) * invdiry;
			}

			if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if (tymin > tmin || tmin !== tmin) tmin = tymin;
			if (tymax < tmax || tmax !== tmax) tmax = tymax;

			if (invdirz >= 0) {
				tzmin = (box.min.z - origin.z) * invdirz;
				tzmax = (box.max.z - origin.z) * invdirz;
			} else {
				tzmin = (box.max.z - origin.z) * invdirz;
				tzmax = (box.min.z - origin.z) * invdirz;
			}

			if (tmin > tzmax || tzmin > tmax) return null;
			if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
			if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)

			if (tmax < 0) return null;
			return this.at(tmin >= 0 ? tmin : tmax, target);
		}

		intersectsBox(box) {
			return this.intersectBox(box, _vector$a) !== null;
		}

		intersectTriangle(a, b, c, backfaceCulling, target) {
			// Compute the offset origin, edges, and normal.
			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
			_edge1.subVectors(b, a);

			_edge2.subVectors(c, a);

			_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//	 |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//	 |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//	 |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)


			let DdN = this.direction.dot(_normal$1);
			let sign;

			if (DdN > 0) {
				if (backfaceCulling) return null;
				sign = 1;
			} else if (DdN < 0) {
				sign = -1;
				DdN = -DdN;
			} else {
				return null;
			}

			_diff.subVectors(this.origin, a);

			const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection

			if (DdQxE2 < 0) {
				return null;
			}

			const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection

			if (DdE1xQ < 0) {
				return null;
			} // b1+b2 > 1, no intersection


			if (DdQxE2 + DdE1xQ > DdN) {
				return null;
			} // Line intersects triangle, check if ray does.


			const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection


			if (QdN < 0) {
				return null;
			} // Ray intersects triangle.


			return this.at(QdN / DdN, target);
		}

		applyMatrix4(matrix4) {
			this.origin.applyMatrix4(matrix4);
			this.direction.transformDirection(matrix4);
			return this;
		}

		equals(ray) {
			return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	class Matrix4 {
		constructor() {
			this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

			if (arguments.length > 0) {
				console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
			}
		}

		set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
			const te = this.elements;
			te[0] = n11;
			te[4] = n12;
			te[8] = n13;
			te[12] = n14;
			te[1] = n21;
			te[5] = n22;
			te[9] = n23;
			te[13] = n24;
			te[2] = n31;
			te[6] = n32;
			te[10] = n33;
			te[14] = n34;
			te[3] = n41;
			te[7] = n42;
			te[11] = n43;
			te[15] = n44;
			return this;
		}

		identity() {
			this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
			return this;
		}

		clone() {
			return new Matrix4().fromArray(this.elements);
		}

		copy(m) {
			const te = this.elements;
			const me = m.elements;
			te[0] = me[0];
			te[1] = me[1];
			te[2] = me[2];
			te[3] = me[3];
			te[4] = me[4];
			te[5] = me[5];
			te[6] = me[6];
			te[7] = me[7];
			te[8] = me[8];
			te[9] = me[9];
			te[10] = me[10];
			te[11] = me[11];
			te[12] = me[12];
			te[13] = me[13];
			te[14] = me[14];
			te[15] = me[15];
			return this;
		}

		copyPosition(m) {
			const te = this.elements,
						me = m.elements;
			te[12] = me[12];
			te[13] = me[13];
			te[14] = me[14];
			return this;
		}

		setFromMatrix3(m) {
			const me = m.elements;
			this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
			return this;
		}

		extractBasis(xAxis, yAxis, zAxis) {
			xAxis.setFromMatrixColumn(this, 0);
			yAxis.setFromMatrixColumn(this, 1);
			zAxis.setFromMatrixColumn(this, 2);
			return this;
		}

		makeBasis(xAxis, yAxis, zAxis) {
			this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
			return this;
		}

		extractRotation(m) {
			// this method does not support reflection matrices
			const te = this.elements;
			const me = m.elements;

			const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();

			const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();

			const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();

			te[0] = me[0] * scaleX;
			te[1] = me[1] * scaleX;
			te[2] = me[2] * scaleX;
			te[3] = 0;
			te[4] = me[4] * scaleY;
			te[5] = me[5] * scaleY;
			te[6] = me[6] * scaleY;
			te[7] = 0;
			te[8] = me[8] * scaleZ;
			te[9] = me[9] * scaleZ;
			te[10] = me[10] * scaleZ;
			te[11] = 0;
			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;
			return this;
		}

		makeRotationFromEuler(euler) {
			if (!(euler && euler.isEuler)) {
				console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
			}

			const te = this.elements;
			const x = euler.x,
						y = euler.y,
						z = euler.z;
			const a = Math.cos(x),
						b = Math.sin(x);
			const c = Math.cos(y),
						d = Math.sin(y);
			const e = Math.cos(z),
						f = Math.sin(z);

			if (euler.order === 'XYZ') {
				const ae = a * e,
							af = a * f,
							be = b * e,
							bf = b * f;
				te[0] = c * e;
				te[4] = -c * f;
				te[8] = d;
				te[1] = af + be * d;
				te[5] = ae - bf * d;
				te[9] = -b * c;
				te[2] = bf - ae * d;
				te[6] = be + af * d;
				te[10] = a * c;
			} else if (euler.order === 'YXZ') {
				const ce = c * e,
							cf = c * f,
							de = d * e,
							df = d * f;
				te[0] = ce + df * b;
				te[4] = de * b - cf;
				te[8] = a * d;
				te[1] = a * f;
				te[5] = a * e;
				te[9] = -b;
				te[2] = cf * b - de;
				te[6] = df + ce * b;
				te[10] = a * c;
			} else if (euler.order === 'ZXY') {
				const ce = c * e,
							cf = c * f,
							de = d * e,
							df = d * f;
				te[0] = ce - df * b;
				te[4] = -a * f;
				te[8] = de + cf * b;
				te[1] = cf + de * b;
				te[5] = a * e;
				te[9] = df - ce * b;
				te[2] = -a * d;
				te[6] = b;
				te[10] = a * c;
			} else if (euler.order === 'ZYX') {
				const ae = a * e,
							af = a * f,
							be = b * e,
							bf = b * f;
				te[0] = c * e;
				te[4] = be * d - af;
				te[8] = ae * d + bf;
				te[1] = c * f;
				te[5] = bf * d + ae;
				te[9] = af * d - be;
				te[2] = -d;
				te[6] = b * c;
				te[10] = a * c;
			} else if (euler.order === 'YZX') {
				const ac = a * c,
							ad = a * d,
							bc = b * c,
							bd = b * d;
				te[0] = c * e;
				te[4] = bd - ac * f;
				te[8] = bc * f + ad;
				te[1] = f;
				te[5] = a * e;
				te[9] = -b * e;
				te[2] = -d * e;
				te[6] = ad * f + bc;
				te[10] = ac - bd * f;
			} else if (euler.order === 'XZY') {
				const ac = a * c,
							ad = a * d,
							bc = b * c,
							bd = b * d;
				te[0] = c * e;
				te[4] = -f;
				te[8] = d * e;
				te[1] = ac * f + bd;
				te[5] = a * e;
				te[9] = ad * f - bc;
				te[2] = bc * f - ad;
				te[6] = b * e;
				te[10] = bd * f + ac;
			} // bottom row


			te[3] = 0;
			te[7] = 0;
			te[11] = 0; // last column

			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;
			return this;
		}

		makeRotationFromQuaternion(q) {
			return this.compose(_zero, q, _one);
		}

		lookAt(eye, target, up) {
			const te = this.elements;

			_z.subVectors(eye, target);

			if (_z.lengthSq() === 0) {
				// eye and target are in the same position
				_z.z = 1;
			}

			_z.normalize();

			_x.crossVectors(up, _z);

			if (_x.lengthSq() === 0) {
				// up and z are parallel
				if (Math.abs(up.z) === 1) {
					_z.x += 0.0001;
				} else {
					_z.z += 0.0001;
				}

				_z.normalize();

				_x.crossVectors(up, _z);
			}

			_x.normalize();

			_y.crossVectors(_z, _x);

			te[0] = _x.x;
			te[4] = _y.x;
			te[8] = _z.x;
			te[1] = _x.y;
			te[5] = _y.y;
			te[9] = _z.y;
			te[2] = _x.z;
			te[6] = _y.z;
			te[10] = _z.z;
			return this;
		}

		multiply(m, n) {
			if (n !== undefined) {
				console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
				return this.multiplyMatrices(m, n);
			}

			return this.multiplyMatrices(this, m);
		}

		premultiply(m) {
			return this.multiplyMatrices(m, this);
		}

		multiplyMatrices(a, b) {
			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;
			const a11 = ae[0],
						a12 = ae[4],
						a13 = ae[8],
						a14 = ae[12];
			const a21 = ae[1],
						a22 = ae[5],
						a23 = ae[9],
						a24 = ae[13];
			const a31 = ae[2],
						a32 = ae[6],
						a33 = ae[10],
						a34 = ae[14];
			const a41 = ae[3],
						a42 = ae[7],
						a43 = ae[11],
						a44 = ae[15];
			const b11 = be[0],
						b12 = be[4],
						b13 = be[8],
						b14 = be[12];
			const b21 = be[1],
						b22 = be[5],
						b23 = be[9],
						b24 = be[13];
			const b31 = be[2],
						b32 = be[6],
						b33 = be[10],
						b34 = be[14];
			const b41 = be[3],
						b42 = be[7],
						b43 = be[11],
						b44 = be[15];
			te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
			te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
			te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
			te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
			return this;
		}

		multiplyScalar(s) {
			const te = this.elements;
			te[0] *= s;
			te[4] *= s;
			te[8] *= s;
			te[12] *= s;
			te[1] *= s;
			te[5] *= s;
			te[9] *= s;
			te[13] *= s;
			te[2] *= s;
			te[6] *= s;
			te[10] *= s;
			te[14] *= s;
			te[3] *= s;
			te[7] *= s;
			te[11] *= s;
			te[15] *= s;
			return this;
		}

		determinant() {
			const te = this.elements;
			const n11 = te[0],
						n12 = te[4],
						n13 = te[8],
						n14 = te[12];
			const n21 = te[1],
						n22 = te[5],
						n23 = te[9],
						n24 = te[13];
			const n31 = te[2],
						n32 = te[6],
						n33 = te[10],
						n34 = te[14];
			const n41 = te[3],
						n42 = te[7],
						n43 = te[11],
						n44 = te[15]; //TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
		}

		transpose() {
			const te = this.elements;
			let tmp;
			tmp = te[1];
			te[1] = te[4];
			te[4] = tmp;
			tmp = te[2];
			te[2] = te[8];
			te[8] = tmp;
			tmp = te[6];
			te[6] = te[9];
			te[9] = tmp;
			tmp = te[3];
			te[3] = te[12];
			te[12] = tmp;
			tmp = te[7];
			te[7] = te[13];
			te[13] = tmp;
			tmp = te[11];
			te[11] = te[14];
			te[14] = tmp;
			return this;
		}

		setPosition(x, y, z) {
			const te = this.elements;

			if (x.isVector3) {
				te[12] = x.x;
				te[13] = x.y;
				te[14] = x.z;
			} else {
				te[12] = x;
				te[13] = y;
				te[14] = z;
			}

			return this;
		}

		invert() {
			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			const te = this.elements,
						n11 = te[0],
						n21 = te[1],
						n31 = te[2],
						n41 = te[3],
						n12 = te[4],
						n22 = te[5],
						n32 = te[6],
						n42 = te[7],
						n13 = te[8],
						n23 = te[9],
						n33 = te[10],
						n43 = te[11],
						n14 = te[12],
						n24 = te[13],
						n34 = te[14],
						n44 = te[15],
						t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
						t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
						t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
						t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			const detInv = 1 / det;
			te[0] = t11 * detInv;
			te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
			te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
			te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
			te[4] = t12 * detInv;
			te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
			te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
			te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
			te[8] = t13 * detInv;
			te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
			te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
			te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
			te[12] = t14 * detInv;
			te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
			te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
			te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
			return this;
		}

		scale(v) {
			const te = this.elements;
			const x = v.x,
						y = v.y,
						z = v.z;
			te[0] *= x;
			te[4] *= y;
			te[8] *= z;
			te[1] *= x;
			te[5] *= y;
			te[9] *= z;
			te[2] *= x;
			te[6] *= y;
			te[10] *= z;
			te[3] *= x;
			te[7] *= y;
			te[11] *= z;
			return this;
		}

		getMaxScaleOnAxis() {
			const te = this.elements;
			const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
			const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
			const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
			return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
		}

		makeTranslation(x, y, z) {
			this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
			return this;
		}

		makeRotationX(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationY(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationZ(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationAxis(axis, angle) {
			// Based on http://www.gamedev.net/reference/articles/article1199.asp
			const c = Math.cos(angle);
			const s = Math.sin(angle);
			const t = 1 - c;
			const x = axis.x,
						y = axis.y,
						z = axis.z;
			const tx = t * x,
						ty = t * y;
			this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
			return this;
		}

		makeScale(x, y, z) {
			this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
			return this;
		}

		makeShear(x, y, z) {
			this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
			return this;
		}

		compose(position, quaternion, scale) {
			const te = this.elements;
			const x = quaternion._x,
						y = quaternion._y,
						z = quaternion._z,
						w = quaternion._w;
			const x2 = x + x,
						y2 = y + y,
						z2 = z + z;
			const xx = x * x2,
						xy = x * y2,
						xz = x * z2;
			const yy = y * y2,
						yz = y * z2,
						zz = z * z2;
			const wx = w * x2,
						wy = w * y2,
						wz = w * z2;
			const sx = scale.x,
						sy = scale.y,
						sz = scale.z;
			te[0] = (1 - (yy + zz)) * sx;
			te[1] = (xy + wz) * sx;
			te[2] = (xz - wy) * sx;
			te[3] = 0;
			te[4] = (xy - wz) * sy;
			te[5] = (1 - (xx + zz)) * sy;
			te[6] = (yz + wx) * sy;
			te[7] = 0;
			te[8] = (xz + wy) * sz;
			te[9] = (yz - wx) * sz;
			te[10] = (1 - (xx + yy)) * sz;
			te[11] = 0;
			te[12] = position.x;
			te[13] = position.y;
			te[14] = position.z;
			te[15] = 1;
			return this;
		}

		decompose(position, quaternion, scale) {
			const te = this.elements;

			let sx = _v1$5.set(te[0], te[1], te[2]).length();

			const sy = _v1$5.set(te[4], te[5], te[6]).length();

			const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale


			const det = this.determinant();
			if (det < 0) sx = -sx;
			position.x = te[12];
			position.y = te[13];
			position.z = te[14]; // scale the rotation part

			_m1$2.copy(this);

			const invSX = 1 / sx;
			const invSY = 1 / sy;
			const invSZ = 1 / sz;
			_m1$2.elements[0] *= invSX;
			_m1$2.elements[1] *= invSX;
			_m1$2.elements[2] *= invSX;
			_m1$2.elements[4] *= invSY;
			_m1$2.elements[5] *= invSY;
			_m1$2.elements[6] *= invSY;
			_m1$2.elements[8] *= invSZ;
			_m1$2.elements[9] *= invSZ;
			_m1$2.elements[10] *= invSZ;
			quaternion.setFromRotationMatrix(_m1$2);
			scale.x = sx;
			scale.y = sy;
			scale.z = sz;
			return this;
		}

		makePerspective(left, right, top, bottom, near, far) {
			if (far === undefined) {
				console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
			}

			const te = this.elements;
			const x = 2 * near / (right - left);
			const y = 2 * near / (top - bottom);
			const a = (right + left) / (right - left);
			const b = (top + bottom) / (top - bottom);
			const c = -(far + near) / (far - near);
			const d = -2 * far * near / (far - near);
			te[0] = x;
			te[4] = 0;
			te[8] = a;
			te[12] = 0;
			te[1] = 0;
			te[5] = y;
			te[9] = b;
			te[13] = 0;
			te[2] = 0;
			te[6] = 0;
			te[10] = c;
			te[14] = d;
			te[3] = 0;
			te[7] = 0;
			te[11] = -1;
			te[15] = 0;
			return this;
		}

		makeOrthographic(left, right, top, bottom, near, far) {
			const te = this.elements;
			const w = 1.0 / (right - left);
			const h = 1.0 / (top - bottom);
			const p = 1.0 / (far - near);
			const x = (right + left) * w;
			const y = (top + bottom) * h;
			const z = (far + near) * p;
			te[0] = 2 * w;
			te[4] = 0;
			te[8] = 0;
			te[12] = -x;
			te[1] = 0;
			te[5] = 2 * h;
			te[9] = 0;
			te[13] = -y;
			te[2] = 0;
			te[6] = 0;
			te[10] = -2 * p;
			te[14] = -z;
			te[3] = 0;
			te[7] = 0;
			te[11] = 0;
			te[15] = 1;
			return this;
		}

		equals(matrix) {
			const te = this.elements;
			const me = matrix.elements;

			for (let i = 0; i < 16; i++) {
				if (te[i] !== me[i]) return false;
			}

			return true;
		}

		fromArray(array, offset = 0) {
			for (let i = 0; i < 16; i++) {
				this.elements[i] = array[i + offset];
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const te = this.elements;
			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];
			array[offset + 3] = te[3];
			array[offset + 4] = te[4];
			array[offset + 5] = te[5];
			array[offset + 6] = te[6];
			array[offset + 7] = te[7];
			array[offset + 8] = te[8];
			array[offset + 9] = te[9];
			array[offset + 10] = te[10];
			array[offset + 11] = te[11];
			array[offset + 12] = te[12];
			array[offset + 13] = te[13];
			array[offset + 14] = te[14];
			array[offset + 15] = te[15];
			return array;
		}

	}

	Matrix4.prototype.isMatrix4 = true;

	const _v1$5 = /*@__PURE__*/new Vector3();

	const _m1$2 = /*@__PURE__*/new Matrix4();

	const _zero = /*@__PURE__*/new Vector3(0, 0, 0);

	const _one = /*@__PURE__*/new Vector3(1, 1, 1);

	const _x = /*@__PURE__*/new Vector3();

	const _y = /*@__PURE__*/new Vector3();

	const _z = /*@__PURE__*/new Vector3();

	const _matrix$1 = /*@__PURE__*/new Matrix4();

	const _quaternion$3 = /*@__PURE__*/new Quaternion();

	class Euler {
		constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;
		}

		get x() {
			return this._x;
		}

		set x(value) {
			this._x = value;

			this._onChangeCallback();
		}

		get y() {
			return this._y;
		}

		set y(value) {
			this._y = value;

			this._onChangeCallback();
		}

		get z() {
			return this._z;
		}

		set z(value) {
			this._z = value;

			this._onChangeCallback();
		}

		get order() {
			return this._order;
		}

		set order(value) {
			this._order = value;

			this._onChangeCallback();
		}

		set(x, y, z, order) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this._onChangeCallback();

			return this;
		}

		clone() {
			return new this.constructor(this._x, this._y, this._z, this._order);
		}

		copy(euler) {
			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;
		}

		setFromRotationMatrix(m, order, update) {
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			const te = m.elements;
			const m11 = te[0],
						m12 = te[4],
						m13 = te[8];
			const m21 = te[1],
						m22 = te[5],
						m23 = te[9];
			const m31 = te[2],
						m32 = te[6],
						m33 = te[10];
			order = order || this._order;

			switch (order) {
				case 'XYZ':
					this._y = Math.asin(clamp(m13, -1, 1));

					if (Math.abs(m13) < 0.9999999) {
						this._x = Math.atan2(-m23, m33);
						this._z = Math.atan2(-m12, m11);
					} else {
						this._x = Math.atan2(m32, m22);
						this._z = 0;
					}

					break;

				case 'YXZ':
					this._x = Math.asin(-clamp(m23, -1, 1));

					if (Math.abs(m23) < 0.9999999) {
						this._y = Math.atan2(m13, m33);
						this._z = Math.atan2(m21, m22);
					} else {
						this._y = Math.atan2(-m31, m11);
						this._z = 0;
					}

					break;

				case 'ZXY':
					this._x = Math.asin(clamp(m32, -1, 1));

					if (Math.abs(m32) < 0.9999999) {
						this._y = Math.atan2(-m31, m33);
						this._z = Math.atan2(-m12, m22);
					} else {
						this._y = 0;
						this._z = Math.atan2(m21, m11);
					}

					break;

				case 'ZYX':
					this._y = Math.asin(-clamp(m31, -1, 1));

					if (Math.abs(m31) < 0.9999999) {
						this._x = Math.atan2(m32, m33);
						this._z = Math.atan2(m21, m11);
					} else {
						this._x = 0;
						this._z = Math.atan2(-m12, m22);
					}

					break;

				case 'YZX':
					this._z = Math.asin(clamp(m21, -1, 1));

					if (Math.abs(m21) < 0.9999999) {
						this._x = Math.atan2(-m23, m22);
						this._y = Math.atan2(-m31, m11);
					} else {
						this._x = 0;
						this._y = Math.atan2(m13, m33);
					}

					break;

				case 'XZY':
					this._z = Math.asin(-clamp(m12, -1, 1));

					if (Math.abs(m12) < 0.9999999) {
						this._x = Math.atan2(m32, m22);
						this._y = Math.atan2(m13, m11);
					} else {
						this._x = Math.atan2(-m23, m33);
						this._y = 0;
					}

					break;

				default:
					console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
			}

			this._order = order;
			if (update !== false) this._onChangeCallback();
			return this;
		}

		setFromQuaternion(q, order, update) {
			_matrix$1.makeRotationFromQuaternion(q);

			return this.setFromRotationMatrix(_matrix$1, order, update);
		}

		setFromVector3(v, order) {
			return this.set(v.x, v.y, v.z, order || this._order);
		}

		reorder(newOrder) {
			// WARNING: this discards revolution information -bhouston
			_quaternion$3.setFromEuler(this);

			return this.setFromQuaternion(_quaternion$3, newOrder);
		}

		equals(euler) {
			return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
		}

		fromArray(array) {
			this._x = array[0];
			this._y = array[1];
			this._z = array[2];
			if (array[3] !== undefined) this._order = array[3];

			this._onChangeCallback();

			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this._x;
			array[offset + 1] = this._y;
			array[offset + 2] = this._z;
			array[offset + 3] = this._order;
			return array;
		}

		toVector3(optionalResult) {
			if (optionalResult) {
				return optionalResult.set(this._x, this._y, this._z);
			} else {
				return new Vector3(this._x, this._y, this._z);
			}
		}

		_onChange(callback) {
			this._onChangeCallback = callback;
			return this;
		}

		_onChangeCallback() {}

	}

	Euler.prototype.isEuler = true;
	Euler.DefaultOrder = 'XYZ';
	Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];

	class Layers {
		constructor() {
			this.mask = 1 | 0;
		}

		set(channel) {
			this.mask = 1 << channel | 0;
		}

		enable(channel) {
			this.mask |= 1 << channel | 0;
		}

		enableAll() {
			this.mask = 0xffffffff | 0;
		}

		toggle(channel) {
			this.mask ^= 1 << channel | 0;
		}

		disable(channel) {
			this.mask &= ~(1 << channel | 0);
		}

		disableAll() {
			this.mask = 0;
		}

		test(layers) {
			return (this.mask & layers.mask) !== 0;
		}

	}

	let _object3DId = 0;

	const _v1$4 = new /*@__PURE__*/Vector3();

	const _q1 = new /*@__PURE__*/Quaternion();

	const _m1$1 = new /*@__PURE__*/Matrix4();

	const _target = new /*@__PURE__*/Vector3();

	const _position$3 = new /*@__PURE__*/Vector3();

	const _scale$2 = new /*@__PURE__*/Vector3();

	const _quaternion$2 = new /*@__PURE__*/Quaternion();

	const _xAxis = new /*@__PURE__*/Vector3(1, 0, 0);

	const _yAxis = new /*@__PURE__*/Vector3(0, 1, 0);

	const _zAxis = new /*@__PURE__*/Vector3(0, 0, 1);

	const _addedEvent = {
		type: 'added'
	};
	const _removedEvent = {
		type: 'removed'
	};

	class Object3D extends EventDispatcher {
		constructor() {
			super();
			Object.defineProperty(this, 'id', {
				value: _object3DId++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.type = 'Object3D';
			this.parent = null;
			this.children = [];
			this.up = Object3D.DefaultUp.clone();
			const position = new Vector3();
			const rotation = new Euler();
			const quaternion = new Quaternion();
			const scale = new Vector3(1, 1, 1);

			function onRotationChange() {
				quaternion.setFromEuler(rotation, false);
			}

			function onQuaternionChange() {
				rotation.setFromQuaternion(quaternion, undefined, false);
			}

			rotation._onChange(onRotationChange);

			quaternion._onChange(onQuaternionChange);

			Object.defineProperties(this, {
				position: {
					configurable: true,
					enumerable: true,
					value: position
				},
				rotation: {
					configurable: true,
					enumerable: true,
					value: rotation
				},
				quaternion: {
					configurable: true,
					enumerable: true,
					value: quaternion
				},
				scale: {
					configurable: true,
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			});
			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();
			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;
			this.layers = new Layers();
			this.visible = true;
			this.castShadow = false;
			this.receiveShadow = false;
			this.frustumCulled = true;
			this.renderOrder = 0;
			this.animations = [];
			this.userData = {};
		}

		onBeforeRender() {}

		onAfterRender() {}

		applyMatrix4(matrix) {
			if (this.matrixAutoUpdate) this.updateMatrix();
			this.matrix.premultiply(matrix);
			this.matrix.decompose(this.position, this.quaternion, this.scale);
		}

		applyQuaternion(q) {
			this.quaternion.premultiply(q);
			return this;
		}

		setRotationFromAxisAngle(axis, angle) {
			// assumes axis is normalized
			this.quaternion.setFromAxisAngle(axis, angle);
		}

		setRotationFromEuler(euler) {
			this.quaternion.setFromEuler(euler, true);
		}

		setRotationFromMatrix(m) {
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			this.quaternion.setFromRotationMatrix(m);
		}

		setRotationFromQuaternion(q) {
			// assumes q is normalized
			this.quaternion.copy(q);
		}

		rotateOnAxis(axis, angle) {
			// rotate object on axis in object space
			// axis is assumed to be normalized
			_q1.setFromAxisAngle(axis, angle);

			this.quaternion.multiply(_q1);
			return this;
		}

		rotateOnWorldAxis(axis, angle) {
			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent
			_q1.setFromAxisAngle(axis, angle);

			this.quaternion.premultiply(_q1);
			return this;
		}

		rotateX(angle) {
			return this.rotateOnAxis(_xAxis, angle);
		}

		rotateY(angle) {
			return this.rotateOnAxis(_yAxis, angle);
		}

		rotateZ(angle) {
			return this.rotateOnAxis(_zAxis, angle);
		}

		translateOnAxis(axis, distance) {
			// translate object by distance along axis in object space
			// axis is assumed to be normalized
			_v1$4.copy(axis).applyQuaternion(this.quaternion);

			this.position.add(_v1$4.multiplyScalar(distance));
			return this;
		}

		translateX(distance) {
			return this.translateOnAxis(_xAxis, distance);
		}

		translateY(distance) {
			return this.translateOnAxis(_yAxis, distance);
		}

		translateZ(distance) {
			return this.translateOnAxis(_zAxis, distance);
		}

		localToWorld(vector) {
			return vector.applyMatrix4(this.matrixWorld);
		}

		worldToLocal(vector) {
			return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
		}

		lookAt(x, y, z) {
			// This method does not support objects having non-uniformly-scaled parent(s)
			if (x.isVector3) {
				_target.copy(x);
			} else {
				_target.set(x, y, z);
			}

			const parent = this.parent;
			this.updateWorldMatrix(true, false);

			_position$3.setFromMatrixPosition(this.matrixWorld);

			if (this.isCamera || this.isLight) {
				_m1$1.lookAt(_position$3, _target, this.up);
			} else {
				_m1$1.lookAt(_target, _position$3, this.up);
			}

			this.quaternion.setFromRotationMatrix(_m1$1);

			if (parent) {
				_m1$1.extractRotation(parent.matrixWorld);

				_q1.setFromRotationMatrix(_m1$1);

				this.quaternion.premultiply(_q1.invert());
			}
		}

		add(object) {
			if (arguments.length > 1) {
				for (let i = 0; i < arguments.length; i++) {
					this.add(arguments[i]);
				}

				return this;
			}

			if (object === this) {
				console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
				return this;
			}

			if (object && object.isObject3D) {
				if (object.parent !== null) {
					object.parent.remove(object);
				}

				object.parent = this;
				this.children.push(object);
				object.dispatchEvent(_addedEvent);
			} else {
				console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
			}

			return this;
		}

		remove(object) {
			if (arguments.length > 1) {
				for (let i = 0; i < arguments.length; i++) {
					this.remove(arguments[i]);
				}

				return this;
			}

			const index = this.children.indexOf(object);

			if (index !== -1) {
				object.parent = null;
				this.children.splice(index, 1);
				object.dispatchEvent(_removedEvent);
			}

			return this;
		}

		clear() {
			for (let i = 0; i < this.children.length; i++) {
				const object = this.children[i];
				object.parent = null;
				object.dispatchEvent(_removedEvent);
			}

			this.children.length = 0;
			return this;
		}

		attach(object) {
			// adds object as a child of this, while maintaining the object's world transform
			this.updateWorldMatrix(true, false);

			_m1$1.copy(this.matrixWorld).invert();

			if (object.parent !== null) {
				object.parent.updateWorldMatrix(true, false);

				_m1$1.multiply(object.parent.matrixWorld);
			}

			object.applyMatrix4(_m1$1);
			this.add(object);
			object.updateWorldMatrix(false, true);
			return this;
		}

		getObjectById(id) {
			return this.getObjectByProperty('id', id);
		}

		getObjectByName(name) {
			return this.getObjectByProperty('name', name);
		}

		getObjectByProperty(name, value) {
			if (this[name] === value) return this;

			for (let i = 0, l = this.children.length; i < l; i++) {
				const child = this.children[i];
				const object = child.getObjectByProperty(name, value);

				if (object !== undefined) {
					return object;
				}
			}

			return undefined;
		}

		getWorldPosition(target) {
			if (target === undefined) {
				console.warn('THREE.Object3D: .getWorldPosition() target is now required');
				target = new Vector3();
			}

			this.updateWorldMatrix(true, false);
			return target.setFromMatrixPosition(this.matrixWorld);
		}

		getWorldQuaternion(target) {
			if (target === undefined) {
				console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');
				target = new Quaternion();
			}

			this.updateWorldMatrix(true, false);
			this.matrixWorld.decompose(_position$3, target, _scale$2);
			return target;
		}

		getWorldScale(target) {
			if (target === undefined) {
				console.warn('THREE.Object3D: .getWorldScale() target is now required');
				target = new Vector3();
			}

			this.updateWorldMatrix(true, false);
			this.matrixWorld.decompose(_position$3, _quaternion$2, target);
			return target;
		}

		getWorldDirection(target) {
			if (target === undefined) {
				console.warn('THREE.Object3D: .getWorldDirection() target is now required');
				target = new Vector3();
			}

			this.updateWorldMatrix(true, false);
			const e = this.matrixWorld.elements;
			return target.set(e[8], e[9], e[10]).normalize();
		}

		raycast() {}

		traverse(callback) {
			callback(this);
			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].traverse(callback);
			}
		}

		traverseVisible(callback) {
			if (this.visible === false) return;
			callback(this);
			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].traverseVisible(callback);
			}
		}

		traverseAncestors(callback) {
			const parent = this.parent;

			if (parent !== null) {
				callback(parent);
				parent.traverseAncestors(callback);
			}
		}

		updateMatrix() {
			this.matrix.compose(this.position, this.quaternion, this.scale);
			this.matrixWorldNeedsUpdate = true;
		}

		updateMatrixWorld(force) {
			if (this.matrixAutoUpdate) this.updateMatrix();

			if (this.matrixWorldNeedsUpdate || force) {
				if (this.parent === null) {
					this.matrixWorld.copy(this.matrix);
				} else {
					this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
				}

				this.matrixWorldNeedsUpdate = false;
				force = true;
			} // update children


			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].updateMatrixWorld(force);
			}
		}

		updateWorldMatrix(updateParents, updateChildren) {
			const parent = this.parent;

			if (updateParents === true && parent !== null) {
				parent.updateWorldMatrix(true, false);
			}

			if (this.matrixAutoUpdate) this.updateMatrix();

			if (this.parent === null) {
				this.matrixWorld.copy(this.matrix);
			} else {
				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
			} // update children


			if (updateChildren === true) {
				const children = this.children;

				for (let i = 0, l = children.length; i < l; i++) {
					children[i].updateWorldMatrix(false, true);
				}
			}
		}

		toJSON(meta) {
			// meta is a string when called from JSON.stringify
			const isRootObject = meta === undefined || typeof meta === 'string';
			const output = {}; // meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.

			if (isRootObject) {
				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {},
					skeletons: {},
					animations: {}
				};
				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};
			} // standard Object3D serialization


			const object = {};
			object.uuid = this.uuid;
			object.type = this.type;
			if (this.name !== '') object.name = this.name;
			if (this.castShadow === true) object.castShadow = true;
			if (this.receiveShadow === true) object.receiveShadow = true;
			if (this.visible === false) object.visible = false;
			if (this.frustumCulled === false) object.frustumCulled = false;
			if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
			if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();
			if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties

			if (this.isInstancedMesh) {
				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();
				if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
			} //


			function serialize(library, element) {
				if (library[element.uuid] === undefined) {
					library[element.uuid] = element.toJSON(meta);
				}

				return element.uuid;
			}

			if (this.isMesh || this.isLine || this.isPoints) {
				object.geometry = serialize(meta.geometries, this.geometry);
				const parameters = this.geometry.parameters;

				if (parameters !== undefined && parameters.shapes !== undefined) {
					const shapes = parameters.shapes;

					if (Array.isArray(shapes)) {
						for (let i = 0, l = shapes.length; i < l; i++) {
							const shape = shapes[i];
							serialize(meta.shapes, shape);
						}
					} else {
						serialize(meta.shapes, shapes);
					}
				}
			}

			if (this.isSkinnedMesh) {
				object.bindMode = this.bindMode;
				object.bindMatrix = this.bindMatrix.toArray();

				if (this.skeleton !== undefined) {
					serialize(meta.skeletons, this.skeleton);
					object.skeleton = this.skeleton.uuid;
				}
			}

			if (this.material !== undefined) {
				if (Array.isArray(this.material)) {
					const uuids = [];

					for (let i = 0, l = this.material.length; i < l; i++) {
						uuids.push(serialize(meta.materials, this.material[i]));
					}

					object.material = uuids;
				} else {
					object.material = serialize(meta.materials, this.material);
				}
			} //


			if (this.children.length > 0) {
				object.children = [];

				for (let i = 0; i < this.children.length; i++) {
					object.children.push(this.children[i].toJSON(meta).object);
				}
			} //


			if (this.animations.length > 0) {
				object.animations = [];

				for (let i = 0; i < this.animations.length; i++) {
					const animation = this.animations[i];
					object.animations.push(serialize(meta.animations, animation));
				}
			}

			if (isRootObject) {
				const geometries = extractFromCache(meta.geometries);
				const materials = extractFromCache(meta.materials);
				const textures = extractFromCache(meta.textures);
				const images = extractFromCache(meta.images);
				const shapes = extractFromCache(meta.shapes);
				const skeletons = extractFromCache(meta.skeletons);
				const animations = extractFromCache(meta.animations);
				if (geometries.length > 0) output.geometries = geometries;
				if (materials.length > 0) output.materials = materials;
				if (textures.length > 0) output.textures = textures;
				if (images.length > 0) output.images = images;
				if (shapes.length > 0) output.shapes = shapes;
				if (skeletons.length > 0) output.skeletons = skeletons;
				if (animations.length > 0) output.animations = animations;
			}

			output.object = object;
			return output; // extract data from the cache hash
			// remove metadata on each item
			// and return as array

			function extractFromCache(cache) {
				const values = [];

				for (const key in cache) {
					const data = cache[key];
					delete data.metadata;
					values.push(data);
				}

				return values;
			}
		}

		clone(recursive) {
			return new this.constructor().copy(this, recursive);
		}

		copy(source, recursive = true) {
			this.name = source.name;
			this.up.copy(source.up);
			this.position.copy(source.position);
			this.rotation.order = source.rotation.order;
			this.quaternion.copy(source.quaternion);
			this.scale.copy(source.scale);
			this.matrix.copy(source.matrix);
			this.matrixWorld.copy(source.matrixWorld);
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
			this.layers.mask = source.layers.mask;
			this.visible = source.visible;
			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;
			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;
			this.userData = JSON.parse(JSON.stringify(source.userData));

			if (recursive === true) {
				for (let i = 0; i < source.children.length; i++) {
					const child = source.children[i];
					this.add(child.clone());
				}
			}

			return this;
		}

	}

	Object3D.DefaultUp = new Vector3(0, 1, 0);
	Object3D.DefaultMatrixAutoUpdate = true;
	Object3D.prototype.isObject3D = true;

	const _vector1 = /*@__PURE__*/new Vector3();

	const _vector2$1 = /*@__PURE__*/new Vector3();

	const _normalMatrix = /*@__PURE__*/new Matrix3();

	class Plane {
		constructor(normal = new Vector3(1, 0, 0), constant = 0) {
			// normal is assumed to be normalized
			this.normal = normal;
			this.constant = constant;
		}

		set(normal, constant) {
			this.normal.copy(normal);
			this.constant = constant;
			return this;
		}

		setComponents(x, y, z, w) {
			this.normal.set(x, y, z);
			this.constant = w;
			return this;
		}

		setFromNormalAndCoplanarPoint(normal, point) {
			this.normal.copy(normal);
			this.constant = -point.dot(this.normal);
			return this;
		}

		setFromCoplanarPoints(a, b, c) {
			const normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?


			this.setFromNormalAndCoplanarPoint(normal, a);
			return this;
		}

		copy(plane) {
			this.normal.copy(plane.normal);
			this.constant = plane.constant;
			return this;
		}

		normalize() {
			// Note: will lead to a divide by zero if the plane is invalid.
			const inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar(inverseNormalLength);
			this.constant *= inverseNormalLength;
			return this;
		}

		negate() {
			this.constant *= -1;
			this.normal.negate();
			return this;
		}

		distanceToPoint(point) {
			return this.normal.dot(point) + this.constant;
		}

		distanceToSphere(sphere) {
			return this.distanceToPoint(sphere.center) - sphere.radius;
		}

		projectPoint(point, target) {
			if (target === undefined) {
				console.warn('THREE.Plane: .projectPoint() target is now required');
				target = new Vector3();
			}

			return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
		}

		intersectLine(line, target) {
			if (target === undefined) {
				console.warn('THREE.Plane: .intersectLine() target is now required');
				target = new Vector3();
			}

			const direction = line.delta(_vector1);
			const denominator = this.normal.dot(direction);

			if (denominator === 0) {
				// line is coplanar, return origin
				if (this.distanceToPoint(line.start) === 0) {
					return target.copy(line.start);
				} // Unsure if this is the correct method to handle this case.


				return null;
			}

			const t = -(line.start.dot(this.normal) + this.constant) / denominator;

			if (t < 0 || t > 1) {
				return null;
			}

			return target.copy(direction).multiplyScalar(t).add(line.start);
		}

		intersectsLine(line) {
			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
			const startSign = this.distanceToPoint(line.start);
			const endSign = this.distanceToPoint(line.end);
			return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
		}

		intersectsBox(box) {
			return box.intersectsPlane(this);
		}

		intersectsSphere(sphere) {
			return sphere.intersectsPlane(this);
		}

		coplanarPoint(target) {
			if (target === undefined) {
				console.warn('THREE.Plane: .coplanarPoint() target is now required');
				target = new Vector3();
			}

			return target.copy(this.normal).multiplyScalar(-this.constant);
		}

		applyMatrix4(matrix, optionalNormalMatrix) {
			const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);

			const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
			const normal = this.normal.applyMatrix3(normalMatrix).normalize();
			this.constant = -referencePoint.dot(normal);
			return this;
		}

		translate(offset) {
			this.constant -= offset.dot(this.normal);
			return this;
		}

		equals(plane) {
			return plane.normal.equals(this.normal) && plane.constant === this.constant;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	Plane.prototype.isPlane = true;

	const _v0$1 = /*@__PURE__*/new Vector3();

	const _v1$3 = /*@__PURE__*/new Vector3();

	const _v2$2 = /*@__PURE__*/new Vector3();

	const _v3$1 = /*@__PURE__*/new Vector3();

	const _vab = /*@__PURE__*/new Vector3();

	const _vac = /*@__PURE__*/new Vector3();

	const _vbc = /*@__PURE__*/new Vector3();

	const _vap = /*@__PURE__*/new Vector3();

	const _vbp = /*@__PURE__*/new Vector3();

	const _vcp = /*@__PURE__*/new Vector3();

	class Triangle {
		constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
			this.a = a;
			this.b = b;
			this.c = c;
		}

		static getNormal(a, b, c, target) {
			if (target === undefined) {
				console.warn('THREE.Triangle: .getNormal() target is now required');
				target = new Vector3();
			}

			target.subVectors(c, b);

			_v0$1.subVectors(a, b);

			target.cross(_v0$1);
			const targetLengthSq = target.lengthSq();

			if (targetLengthSq > 0) {
				return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
			}

			return target.set(0, 0, 0);
		} // static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html


		static getBarycoord(point, a, b, c, target) {
			_v0$1.subVectors(c, a);

			_v1$3.subVectors(b, a);

			_v2$2.subVectors(point, a);

			const dot00 = _v0$1.dot(_v0$1);

			const dot01 = _v0$1.dot(_v1$3);

			const dot02 = _v0$1.dot(_v2$2);

			const dot11 = _v1$3.dot(_v1$3);

			const dot12 = _v1$3.dot(_v2$2);

			const denom = dot00 * dot11 - dot01 * dot01;

			if (target === undefined) {
				console.warn('THREE.Triangle: .getBarycoord() target is now required');
				target = new Vector3();
			} // collinear or singular triangle


			if (denom === 0) {
				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set(-2, -1, -1);
			}

			const invDenom = 1 / denom;
			const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
			const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1

			return target.set(1 - u - v, v, u);
		}

		static containsPoint(point, a, b, c) {
			this.getBarycoord(point, a, b, c, _v3$1);
			return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
		}

		static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
			this.getBarycoord(point, p1, p2, p3, _v3$1);
			target.set(0, 0);
			target.addScaledVector(uv1, _v3$1.x);
			target.addScaledVector(uv2, _v3$1.y);
			target.addScaledVector(uv3, _v3$1.z);
			return target;
		}

		static isFrontFacing(a, b, c, direction) {
			_v0$1.subVectors(c, b);

			_v1$3.subVectors(a, b); // strictly front facing


			return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
		}

		set(a, b, c) {
			this.a.copy(a);
			this.b.copy(b);
			this.c.copy(c);
			return this;
		}

		setFromPointsAndIndices(points, i0, i1, i2) {
			this.a.copy(points[i0]);
			this.b.copy(points[i1]);
			this.c.copy(points[i2]);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(triangle) {
			this.a.copy(triangle.a);
			this.b.copy(triangle.b);
			this.c.copy(triangle.c);
			return this;
		}

		getArea() {
			_v0$1.subVectors(this.c, this.b);

			_v1$3.subVectors(this.a, this.b);

			return _v0$1.cross(_v1$3).length() * 0.5;
		}

		getMidpoint(target) {
			if (target === undefined) {
				console.warn('THREE.Triangle: .getMidpoint() target is now required');
				target = new Vector3();
			}

			return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
		}

		getNormal(target) {
			return Triangle.getNormal(this.a, this.b, this.c, target);
		}

		getPlane(target) {
			if (target === undefined) {
				console.warn('THREE.Triangle: .getPlane() target is now required');
				target = new Plane();
			}

			return target.setFromCoplanarPoints(this.a, this.b, this.c);
		}

		getBarycoord(point, target) {
			return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
		}

		getUV(point, uv1, uv2, uv3, target) {
			return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
		}

		containsPoint(point) {
			return Triangle.containsPoint(point, this.a, this.b, this.c);
		}

		isFrontFacing(direction) {
			return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
		}

		intersectsBox(box) {
			return box.intersectsTriangle(this);
		}

		closestPointToPoint(p, target) {
			if (target === undefined) {
				console.warn('THREE.Triangle: .closestPointToPoint() target is now required');
				target = new Vector3();
			}

			const a = this.a,
						b = this.b,
						c = this.c;
			let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors(b, a);

			_vac.subVectors(c, a);

			_vap.subVectors(p, a);

			const d1 = _vab.dot(_vap);

			const d2 = _vac.dot(_vap);

			if (d1 <= 0 && d2 <= 0) {
				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy(a);
			}

			_vbp.subVectors(p, b);

			const d3 = _vab.dot(_vbp);

			const d4 = _vac.dot(_vbp);

			if (d3 >= 0 && d4 <= d3) {
				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy(b);
			}

			const vc = d1 * d4 - d3 * d2;

			if (vc <= 0 && d1 >= 0 && d3 <= 0) {
				v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)

				return target.copy(a).addScaledVector(_vab, v);
			}

			_vcp.subVectors(p, c);

			const d5 = _vab.dot(_vcp);

			const d6 = _vac.dot(_vcp);

			if (d6 >= 0 && d5 <= d6) {
				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy(c);
			}

			const vb = d5 * d2 - d1 * d6;

			if (vb <= 0 && d2 >= 0 && d6 <= 0) {
				w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)

				return target.copy(a).addScaledVector(_vac, w);
			}

			const va = d3 * d6 - d5 * d4;

			if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
				_vbc.subVectors(c, b);

				w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)

				return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
			} // face region


			const denom = 1 / (va + vb + vc); // u = va * denom

			v = vb * denom;
			w = vc * denom;
			return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
		}

		equals(triangle) {
			return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
		}

	}

	let materialId = 0;

	function Material() {
		Object.defineProperty(this, 'id', {
			value: materialId++
		});
		this.uuid = generateUUID();
		this.name = '';
		this.type = 'Material';
		this.fog = true;
		this.blending = NormalBlending;
		this.side = FrontSide;
		this.vertexColors = false;
		this.opacity = 1;
		this.transparent = false;
		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;
		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;
		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;
		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;
		this.shadowSide = null;
		this.colorWrite = true;
		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;
		this.dithering = false;
		this.alphaTest = 0;
		this.alphaToCoverage = false;
		this.premultipliedAlpha = false;
		this.visible = true;
		this.toneMapped = true;
		this.userData = {};
		this.version = 0;
	}

	Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
		constructor: Material,
		isMaterial: true,
		onBuild: function ()
		/* shaderobject, renderer */
		{},
		onBeforeCompile: function ()
		/* shaderobject, renderer */
		{},
		customProgramCacheKey: function () {
			return this.onBeforeCompile.toString();
		},
		setValues: function (values) {
			if (values === undefined) return;

			for (const key in values) {
				const newValue = values[key];

				if (newValue === undefined) {
					console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
					continue;
				} // for backward compatability if shading is set in the constructor


				if (key === 'shading') {
					console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
					this.flatShading = newValue === FlatShading ? true : false;
					continue;
				}

				const currentValue = this[key];

				if (currentValue === undefined) {
					console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
					continue;
				}

				if (currentValue && currentValue.isColor) {
					currentValue.set(newValue);
				} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
					currentValue.copy(newValue);
				} else {
					this[key] = newValue;
				}
			}
		},
		toJSON: function (meta) {
			const isRoot = meta === undefined || typeof meta === 'string';

			if (isRoot) {
				meta = {
					textures: {},
					images: {}
				};
			}

			const data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			}; // standard Material serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if (this.name !== '') data.name = this.name;
			if (this.color && this.color.isColor) data.color = this.color.getHex();
			if (this.roughness !== undefined) data.roughness = this.roughness;
			if (this.metalness !== undefined) data.metalness = this.metalness;
			if (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();
			if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
			if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
			if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
			if (this.shininess !== undefined) data.shininess = this.shininess;
			if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
			if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;

			if (this.clearcoatMap && this.clearcoatMap.isTexture) {
				data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
			}

			if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
				data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
			}

			if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
			}

			if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
			if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
			if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;

			if (this.lightMap && this.lightMap.isTexture) {
				data.lightMap = this.lightMap.toJSON(meta).uuid;
				data.lightMapIntensity = this.lightMapIntensity;
			}

			if (this.aoMap && this.aoMap.isTexture) {
				data.aoMap = this.aoMap.toJSON(meta).uuid;
				data.aoMapIntensity = this.aoMapIntensity;
			}

			if (this.bumpMap && this.bumpMap.isTexture) {
				data.bumpMap = this.bumpMap.toJSON(meta).uuid;
				data.bumpScale = this.bumpScale;
			}

			if (this.normalMap && this.normalMap.isTexture) {
				data.normalMap = this.normalMap.toJSON(meta).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();
			}

			if (this.displacementMap && this.displacementMap.isTexture) {
				data.displacementMap = this.displacementMap.toJSON(meta).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;
			}

			if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
			if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
			if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
			if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;

			if (this.envMap && this.envMap.isTexture) {
				data.envMap = this.envMap.toJSON(meta).uuid;
				if (this.combine !== undefined) data.combine = this.combine;
			}

			if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
			if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
			if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;

			if (this.gradientMap && this.gradientMap.isTexture) {
				data.gradientMap = this.gradientMap.toJSON(meta).uuid;
			}

			if (this.size !== undefined) data.size = this.size;
			if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
			if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
			if (this.blending !== NormalBlending) data.blending = this.blending;
			if (this.side !== FrontSide) data.side = this.side;
			if (this.vertexColors) data.vertexColors = true;
			if (this.opacity < 1) data.opacity = this.opacity;
			if (this.transparent === true) data.transparent = this.transparent;
			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;
			data.colorWrite = this.colorWrite;
			data.stencilWrite = this.stencilWrite;
			data.stencilWriteMask = this.stencilWriteMask;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilFuncMask = this.stencilFuncMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)

			if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;
			if (this.polygonOffset === true) data.polygonOffset = true;
			if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
			if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
			if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;
			if (this.dashSize !== undefined) data.dashSize = this.dashSize;
			if (this.gapSize !== undefined) data.gapSize = this.gapSize;
			if (this.scale !== undefined) data.scale = this.scale;
			if (this.dithering === true) data.dithering = true;
			if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
			if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
			if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
			if (this.wireframe === true) data.wireframe = this.wireframe;
			if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
			if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
			if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;
			if (this.morphTargets === true) data.morphTargets = true;
			if (this.morphNormals === true) data.morphNormals = true;
			if (this.skinning === true) data.skinning = true;
			if (this.flatShading === true) data.flatShading = this.flatShading;
			if (this.visible === false) data.visible = false;
			if (this.toneMapped === false) data.toneMapped = false;
			if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON

			function extractFromCache(cache) {
				const values = [];

				for (const key in cache) {
					const data = cache[key];
					delete data.metadata;
					values.push(data);
				}

				return values;
			}

			if (isRoot) {
				const textures = extractFromCache(meta.textures);
				const images = extractFromCache(meta.images);
				if (textures.length > 0) data.textures = textures;
				if (images.length > 0) data.images = images;
			}

			return data;
		},
		clone: function () {
			return new this.constructor().copy(this);
		},
		copy: function (source) {
			this.name = source.name;
			this.fog = source.fog;
			this.blending = source.blending;
			this.side = source.side;
			this.vertexColors = source.vertexColors;
			this.opacity = source.opacity;
			this.transparent = source.transparent;
			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;
			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;
			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;
			const srcPlanes = source.clippingPlanes;
			let dstPlanes = null;

			if (srcPlanes !== null) {
				const n = srcPlanes.length;
				dstPlanes = new Array(n);

				for (let i = 0; i !== n; ++i) {
					dstPlanes[i] = srcPlanes[i].clone();
				}
			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;
			this.shadowSide = source.shadowSide;
			this.colorWrite = source.colorWrite;
			this.precision = source.precision;
			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;
			this.dithering = source.dithering;
			this.alphaTest = source.alphaTest;
			this.alphaToCoverage = source.alphaToCoverage;
			this.premultipliedAlpha = source.premultipliedAlpha;
			this.visible = source.visible;
			this.toneMapped = source.toneMapped;
			this.userData = JSON.parse(JSON.stringify(source.userData));
			return this;
		},
		dispose: function () {
			this.dispatchEvent({
				type: 'dispose'
			});
		}
	});
	Object.defineProperty(Material.prototype, 'needsUpdate', {
		set: function (value) {
			if (value === true) this.version++;
		}
	});

	const _colorKeywords = {
		'aliceblue': 0xF0F8FF,
		'antiquewhite': 0xFAEBD7,
		'aqua': 0x00FFFF,
		'aquamarine': 0x7FFFD4,
		'azure': 0xF0FFFF,
		'beige': 0xF5F5DC,
		'bisque': 0xFFE4C4,
		'black': 0x000000,
		'blanchedalmond': 0xFFEBCD,
		'blue': 0x0000FF,
		'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A,
		'burlywood': 0xDEB887,
		'cadetblue': 0x5F9EA0,
		'chartreuse': 0x7FFF00,
		'chocolate': 0xD2691E,
		'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED,
		'cornsilk': 0xFFF8DC,
		'crimson': 0xDC143C,
		'cyan': 0x00FFFF,
		'darkblue': 0x00008B,
		'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B,
		'darkgray': 0xA9A9A9,
		'darkgreen': 0x006400,
		'darkgrey': 0xA9A9A9,
		'darkkhaki': 0xBDB76B,
		'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F,
		'darkorange': 0xFF8C00,
		'darkorchid': 0x9932CC,
		'darkred': 0x8B0000,
		'darksalmon': 0xE9967A,
		'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B,
		'darkslategray': 0x2F4F4F,
		'darkslategrey': 0x2F4F4F,
		'darkturquoise': 0x00CED1,
		'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493,
		'deepskyblue': 0x00BFFF,
		'dimgray': 0x696969,
		'dimgrey': 0x696969,
		'dodgerblue': 0x1E90FF,
		'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0,
		'forestgreen': 0x228B22,
		'fuchsia': 0xFF00FF,
		'gainsboro': 0xDCDCDC,
		'ghostwhite': 0xF8F8FF,
		'gold': 0xFFD700,
		'goldenrod': 0xDAA520,
		'gray': 0x808080,
		'green': 0x008000,
		'greenyellow': 0xADFF2F,
		'grey': 0x808080,
		'honeydew': 0xF0FFF0,
		'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C,
		'indigo': 0x4B0082,
		'ivory': 0xFFFFF0,
		'khaki': 0xF0E68C,
		'lavender': 0xE6E6FA,
		'lavenderblush': 0xFFF0F5,
		'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD,
		'lightblue': 0xADD8E6,
		'lightcoral': 0xF08080,
		'lightcyan': 0xE0FFFF,
		'lightgoldenrodyellow': 0xFAFAD2,
		'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90,
		'lightgrey': 0xD3D3D3,
		'lightpink': 0xFFB6C1,
		'lightsalmon': 0xFFA07A,
		'lightseagreen': 0x20B2AA,
		'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899,
		'lightslategrey': 0x778899,
		'lightsteelblue': 0xB0C4DE,
		'lightyellow': 0xFFFFE0,
		'lime': 0x00FF00,
		'limegreen': 0x32CD32,
		'linen': 0xFAF0E6,
		'magenta': 0xFF00FF,
		'maroon': 0x800000,
		'mediumaquamarine': 0x66CDAA,
		'mediumblue': 0x0000CD,
		'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB,
		'mediumseagreen': 0x3CB371,
		'mediumslateblue': 0x7B68EE,
		'mediumspringgreen': 0x00FA9A,
		'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585,
		'midnightblue': 0x191970,
		'mintcream': 0xF5FFFA,
		'mistyrose': 0xFFE4E1,
		'moccasin': 0xFFE4B5,
		'navajowhite': 0xFFDEAD,
		'navy': 0x000080,
		'oldlace': 0xFDF5E6,
		'olive': 0x808000,
		'olivedrab': 0x6B8E23,
		'orange': 0xFFA500,
		'orangered': 0xFF4500,
		'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA,
		'palegreen': 0x98FB98,
		'paleturquoise': 0xAFEEEE,
		'palevioletred': 0xDB7093,
		'papayawhip': 0xFFEFD5,
		'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F,
		'pink': 0xFFC0CB,
		'plum': 0xDDA0DD,
		'powderblue': 0xB0E0E6,
		'purple': 0x800080,
		'rebeccapurple': 0x663399,
		'red': 0xFF0000,
		'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1,
		'saddlebrown': 0x8B4513,
		'salmon': 0xFA8072,
		'sandybrown': 0xF4A460,
		'seagreen': 0x2E8B57,
		'seashell': 0xFFF5EE,
		'sienna': 0xA0522D,
		'silver': 0xC0C0C0,
		'skyblue': 0x87CEEB,
		'slateblue': 0x6A5ACD,
		'slategray': 0x708090,
		'slategrey': 0x708090,
		'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F,
		'steelblue': 0x4682B4,
		'tan': 0xD2B48C,
		'teal': 0x008080,
		'thistle': 0xD8BFD8,
		'tomato': 0xFF6347,
		'turquoise': 0x40E0D0,
		'violet': 0xEE82EE,
		'wheat': 0xF5DEB3,
		'white': 0xFFFFFF,
		'whitesmoke': 0xF5F5F5,
		'yellow': 0xFFFF00,
		'yellowgreen': 0x9ACD32
	};
	const _hslA = {
		h: 0,
		s: 0,
		l: 0
	};
	const _hslB = {
		h: 0,
		s: 0,
		l: 0
	};

	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1 / 6) return p + (q - p) * 6 * t;
		if (t < 1 / 2) return q;
		if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
		return p;
	}

	function SRGBToLinear(c) {
		return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
	}

	function LinearToSRGB(c) {
		return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
	}

	class Color {
		constructor(r, g, b) {
			if (g === undefined && b === undefined) {
				// r is THREE.Color, hex or string
				return this.set(r);
			}

			return this.setRGB(r, g, b);
		}

		set(value) {
			if (value && value.isColor) {
				this.copy(value);
			} else if (typeof value === 'number') {
				this.setHex(value);
			} else if (typeof value === 'string') {
				this.setStyle(value);
			}

			return this;
		}

		setScalar(scalar) {
			this.r = scalar;
			this.g = scalar;
			this.b = scalar;
			return this;
		}

		setHex(hex) {
			hex = Math.floor(hex);
			this.r = (hex >> 16 & 255) / 255;
			this.g = (hex >> 8 & 255) / 255;
			this.b = (hex & 255) / 255;
			return this;
		}

		setRGB(r, g, b) {
			this.r = r;
			this.g = g;
			this.b = b;
			return this;
		}

		setHSL(h, s, l) {
			// h,s,l ranges are in 0.0 - 1.0
			h = euclideanModulo(h, 1);
			s = clamp(s, 0, 1);
			l = clamp(l, 0, 1);

			if (s === 0) {
				this.r = this.g = this.b = l;
			} else {
				const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
				const q = 2 * l - p;
				this.r = hue2rgb(q, p, h + 1 / 3);
				this.g = hue2rgb(q, p, h);
				this.b = hue2rgb(q, p, h - 1 / 3);
			}

			return this;
		}

		setStyle(style) {
			function handleAlpha(string) {
				if (string === undefined) return;

				if (parseFloat(string) < 1) {
					console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
				}
			}

			let m;

			if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
				// rgb / hsl
				let color;
				const name = m[1];
				const components = m[2];

				switch (name) {
					case 'rgb':
					case 'rgba':
						if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min(255, parseInt(color[1], 10)) / 255;
							this.g = Math.min(255, parseInt(color[2], 10)) / 255;
							this.b = Math.min(255, parseInt(color[3], 10)) / 255;
							handleAlpha(color[4]);
							return this;
						}

						if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min(100, parseInt(color[1], 10)) / 100;
							this.g = Math.min(100, parseInt(color[2], 10)) / 100;
							this.b = Math.min(100, parseInt(color[3], 10)) / 100;
							handleAlpha(color[4]);
							return this;
						}

						break;

					case 'hsl':
					case 'hsla':
						if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							const h = parseFloat(color[1]) / 360;
							const s = parseInt(color[2], 10) / 100;
							const l = parseInt(color[3], 10) / 100;
							handleAlpha(color[4]);
							return this.setHSL(h, s, l);
						}

						break;
				}
			} else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
				// hex color
				const hex = m[1];
				const size = hex.length;

				if (size === 3) {
					// #ff0
					this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
					this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
					this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
					return this;
				} else if (size === 6) {
					// #ff0000
					this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
					this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
					this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
					return this;
				}
			}

			if (style && style.length > 0) {
				return this.setColorName(style);
			}

			return this;
		}

		setColorName(style) {
			// color keywords
			const hex = _colorKeywords[style.toLowerCase()];

			if (hex !== undefined) {
				// red
				this.setHex(hex);
			} else {
				// unknown color
				console.warn('THREE.Color: Unknown color ' + style);
			}

			return this;
		}

		clone() {
			return new this.constructor(this.r, this.g, this.b);
		}

		copy(color) {
			this.r = color.r;
			this.g = color.g;
			this.b = color.b;
			return this;
		}

		copyGammaToLinear(color, gammaFactor = 2.0) {
			this.r = Math.pow(color.r, gammaFactor);
			this.g = Math.pow(color.g, gammaFactor);
			this.b = Math.pow(color.b, gammaFactor);
			return this;
		}

		copyLinearToGamma(color, gammaFactor = 2.0) {
			const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;
			this.r = Math.pow(color.r, safeInverse);
			this.g = Math.pow(color.g, safeInverse);
			this.b = Math.pow(color.b, safeInverse);
			return this;
		}

		convertGammaToLinear(gammaFactor) {
			this.copyGammaToLinear(this, gammaFactor);
			return this;
		}

		convertLinearToGamma(gammaFactor) {
			this.copyLinearToGamma(this, gammaFactor);
			return this;
		}

		copySRGBToLinear(color) {
			this.r = SRGBToLinear(color.r);
			this.g = SRGBToLinear(color.g);
			this.b = SRGBToLinear(color.b);
			return this;
		}

		copyLinearToSRGB(color) {
			this.r = LinearToSRGB(color.r);
			this.g = LinearToSRGB(color.g);
			this.b = LinearToSRGB(color.b);
			return this;
		}

		convertSRGBToLinear() {
			this.copySRGBToLinear(this);
			return this;
		}

		convertLinearToSRGB() {
			this.copyLinearToSRGB(this);
			return this;
		}

		getHex() {
			return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
		}

		getHexString() {
			return ('000000' + this.getHex().toString(16)).slice(-6);
		}

		getHSL(target) {
			// h,s,l ranges are in 0.0 - 1.0
			if (target === undefined) {
				console.warn('THREE.Color: .getHSL() target is now required');
				target = {
					h: 0,
					s: 0,
					l: 0
				};
			}

			const r = this.r,
						g = this.g,
						b = this.b;
			const max = Math.max(r, g, b);
			const min = Math.min(r, g, b);
			let hue, saturation;
			const lightness = (min + max) / 2.0;

			if (min === max) {
				hue = 0;
				saturation = 0;
			} else {
				const delta = max - min;
				saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

				switch (max) {
					case r:
						hue = (g - b) / delta + (g < b ? 6 : 0);
						break;

					case g:
						hue = (b - r) / delta + 2;
						break;

					case b:
						hue = (r - g) / delta + 4;
						break;
				}

				hue /= 6;
			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;
			return target;
		}

		getStyle() {
			return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
		}

		offsetHSL(h, s, l) {
			this.getHSL(_hslA);
			_hslA.h += h;
			_hslA.s += s;
			_hslA.l += l;
			this.setHSL(_hslA.h, _hslA.s, _hslA.l);
			return this;
		}

		add(color) {
			this.r += color.r;
			this.g += color.g;
			this.b += color.b;
			return this;
		}

		addColors(color1, color2) {
			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;
			return this;
		}

		addScalar(s) {
			this.r += s;
			this.g += s;
			this.b += s;
			return this;
		}

		sub(color) {
			this.r = Math.max(0, this.r - color.r);
			this.g = Math.max(0, this.g - color.g);
			this.b = Math.max(0, this.b - color.b);
			return this;
		}

		multiply(color) {
			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;
			return this;
		}

		multiplyScalar(s) {
			this.r *= s;
			this.g *= s;
			this.b *= s;
			return this;
		}

		lerp(color, alpha) {
			this.r += (color.r - this.r) * alpha;
			this.g += (color.g - this.g) * alpha;
			this.b += (color.b - this.b) * alpha;
			return this;
		}

		lerpColors(color1, color2, alpha) {
			this.r = color1.r + (color2.r - color1.r) * alpha;
			this.g = color1.g + (color2.g - color1.g) * alpha;
			this.b = color1.b + (color2.b - color1.b) * alpha;
			return this;
		}

		lerpHSL(color, alpha) {
			this.getHSL(_hslA);
			color.getHSL(_hslB);
			const h = lerp(_hslA.h, _hslB.h, alpha);
			const s = lerp(_hslA.s, _hslB.s, alpha);
			const l = lerp(_hslA.l, _hslB.l, alpha);
			this.setHSL(h, s, l);
			return this;
		}

		equals(c) {
			return c.r === this.r && c.g === this.g && c.b === this.b;
		}

		fromArray(array, offset = 0) {
			this.r = array[offset];
			this.g = array[offset + 1];
			this.b = array[offset + 2];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.r;
			array[offset + 1] = this.g;
			array[offset + 2] = this.b;
			return array;
		}

		fromBufferAttribute(attribute, index) {
			this.r = attribute.getX(index);
			this.g = attribute.getY(index);
			this.b = attribute.getZ(index);

			if (attribute.normalized === true) {
				// assuming Uint8Array
				this.r /= 255;
				this.g /= 255;
				this.b /= 255;
			}

			return this;
		}

		toJSON() {
			return this.getHex();
		}

	}

	Color.NAMES = _colorKeywords;
	Color.prototype.isColor = true;
	Color.prototype.r = 1;
	Color.prototype.g = 1;
	Color.prototype.b = 1;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.Multiply,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	depthTest: <bool>,
	 *	depthWrite: <bool>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>
	 * }
	 */

	class MeshBasicMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshBasicMaterial';
			this.color = new Color(0xffffff); // emissive

			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.skinning = false;
			this.morphTargets = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			return this;
		}

	}

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	const _vector$9 = new /*@__PURE__*/Vector3();

	const _vector2 = new /*@__PURE__*/Vector2();

	class BufferAttribute {
		constructor(array, itemSize, normalized) {
			if (Array.isArray(array)) {
				throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
			}

			this.name = '';
			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;
			this.usage = StaticDrawUsage;
			this.updateRange = {
				offset: 0,
				count: -1
			};
			this.version = 0;

			this.onUploadCallback = function () {};
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setUsage(value) {
			this.usage = value;
			return this;
		}

		copy(source) {
			this.name = source.name;
			this.array = new source.array.constructor(source.array);
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;
			this.usage = source.usage;
			return this;
		}

		copyAt(index1, attribute, index2) {
			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for (let i = 0, l = this.itemSize; i < l; i++) {
				this.array[index1 + i] = attribute.array[index2 + i];
			}

			return this;
		}

		copyArray(array) {
			this.array.set(array);
			return this;
		}

		copyColorsArray(colors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = colors.length; i < l; i++) {
				let color = colors[i];

				if (color === undefined) {
					console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
					color = new Color();
				}

				array[offset++] = color.r;
				array[offset++] = color.g;
				array[offset++] = color.b;
			}

			return this;
		}

		copyVector2sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
					vector = new Vector2();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
			}

			return this;
		}

		copyVector3sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
					vector = new Vector3();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
				array[offset++] = vector.z;
			}

			return this;
		}

		copyVector4sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
					vector = new Vector4();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
				array[offset++] = vector.z;
				array[offset++] = vector.w;
			}

			return this;
		}

		applyMatrix3(m) {
			if (this.itemSize === 2) {
				for (let i = 0, l = this.count; i < l; i++) {
					_vector2.fromBufferAttribute(this, i);

					_vector2.applyMatrix3(m);

					this.setXY(i, _vector2.x, _vector2.y);
				}
			} else if (this.itemSize === 3) {
				for (let i = 0, l = this.count; i < l; i++) {
					_vector$9.fromBufferAttribute(this, i);

					_vector$9.applyMatrix3(m);

					this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
				}
			}

			return this;
		}

		applyMatrix4(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.applyMatrix4(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		applyNormalMatrix(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.applyNormalMatrix(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		transformDirection(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.transformDirection(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		set(value, offset = 0) {
			this.array.set(value, offset);
			return this;
		}

		getX(index) {
			return this.array[index * this.itemSize];
		}

		setX(index, x) {
			this.array[index * this.itemSize] = x;
			return this;
		}

		getY(index) {
			return this.array[index * this.itemSize + 1];
		}

		setY(index, y) {
			this.array[index * this.itemSize + 1] = y;
			return this;
		}

		getZ(index) {
			return this.array[index * this.itemSize + 2];
		}

		setZ(index, z) {
			this.array[index * this.itemSize + 2] = z;
			return this;
		}

		getW(index) {
			return this.array[index * this.itemSize + 3];
		}

		setW(index, w) {
			this.array[index * this.itemSize + 3] = w;
			return this;
		}

		setXY(index, x, y) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			return this;
		}

		setXYZ(index, x, y, z) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			this.array[index + 2] = z;
			return this;
		}

		setXYZW(index, x, y, z, w) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			this.array[index + 2] = z;
			this.array[index + 3] = w;
			return this;
		}

		onUpload(callback) {
			this.onUploadCallback = callback;
			return this;
		}

		clone() {
			return new this.constructor(this.array, this.itemSize).copy(this);
		}

		toJSON() {
			const data = {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.prototype.slice.call(this.array),
				normalized: this.normalized
			};
			if (this.name !== '') data.name = this.name;
			if (this.usage !== StaticDrawUsage) data.usage = this.usage;
			if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
			return data;
		}

	}

	BufferAttribute.prototype.isBufferAttribute = true; //

	class Int8BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int8Array(array), itemSize, normalized);
		}

	}

	class Uint8BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint8Array(array), itemSize, normalized);
		}

	}

	class Uint8ClampedBufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint8ClampedArray(array), itemSize, normalized);
		}

	}

	class Int16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int16Array(array), itemSize, normalized);
		}

	}

	class Uint16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint16Array(array), itemSize, normalized);
		}

	}

	class Int32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int32Array(array), itemSize, normalized);
		}

	}

	class Uint32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint32Array(array), itemSize, normalized);
		}

	}

	class Float16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint16Array(array), itemSize, normalized);
		}

	}

	Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;

	class Float32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Float32Array(array), itemSize, normalized);
		}

	}

	class Float64BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Float64Array(array), itemSize, normalized);
		}

	} //

	function arrayMax(array) {
		if (array.length === 0) return -Infinity;
		let max = array[0];

		for (let i = 1, l = array.length; i < l; ++i) {
			if (array[i] > max) max = array[i];
		}

		return max;
	}

	const TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		Uint8ClampedArray: Uint8ClampedArray,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	function getTypedArray(type, buffer) {
		return new TYPED_ARRAYS[type](buffer);
	}

	let _id = 0;

	const _m1 = new /*@__PURE__*/Matrix4();

	const _obj = new /*@__PURE__*/Object3D();

	const _offset = new /*@__PURE__*/Vector3();

	const _box$1 = new /*@__PURE__*/Box3();

	const _boxMorphTargets = new /*@__PURE__*/Box3();

	const _vector$8 = new /*@__PURE__*/Vector3();

	class BufferGeometry extends EventDispatcher {
		constructor() {
			super();
			Object.defineProperty(this, 'id', {
				value: _id++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.type = 'BufferGeometry';
			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.morphTargetsRelative = false;
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;
			this.drawRange = {
				start: 0,
				count: Infinity
			};
			this.userData = {};
		}

		getIndex() {
			return this.index;
		}

		setIndex(index) {
			if (Array.isArray(index)) {
				this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
			} else {
				this.index = index;
			}

			return this;
		}

		getAttribute(name) {
			return this.attributes[name];
		}

		setAttribute(name, attribute) {
			this.attributes[name] = attribute;
			return this;
		}

		deleteAttribute(name) {
			delete this.attributes[name];
			return this;
		}

		hasAttribute(name) {
			return this.attributes[name] !== undefined;
		}

		addGroup(start, count, materialIndex = 0) {
			this.groups.push({
				start: start,
				count: count,
				materialIndex: materialIndex
			});
		}

		clearGroups() {
			this.groups = [];
		}

		setDrawRange(start, count) {
			this.drawRange.start = start;
			this.drawRange.count = count;
		}

		applyMatrix4(matrix) {
			const position = this.attributes.position;

			if (position !== undefined) {
				position.applyMatrix4(matrix);
				position.needsUpdate = true;
			}

			const normal = this.attributes.normal;

			if (normal !== undefined) {
				const normalMatrix = new Matrix3().getNormalMatrix(matrix);
				normal.applyNormalMatrix(normalMatrix);
				normal.needsUpdate = true;
			}

			const tangent = this.attributes.tangent;

			if (tangent !== undefined) {
				tangent.transformDirection(matrix);
				tangent.needsUpdate = true;
			}

			if (this.boundingBox !== null) {
				this.computeBoundingBox();
			}

			if (this.boundingSphere !== null) {
				this.computeBoundingSphere();
			}

			return this;
		}

		rotateX(angle) {
			// rotate geometry around world x-axis
			_m1.makeRotationX(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		rotateY(angle) {
			// rotate geometry around world y-axis
			_m1.makeRotationY(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		rotateZ(angle) {
			// rotate geometry around world z-axis
			_m1.makeRotationZ(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		translate(x, y, z) {
			// translate geometry
			_m1.makeTranslation(x, y, z);

			this.applyMatrix4(_m1);
			return this;
		}

		scale(x, y, z) {
			// scale geometry
			_m1.makeScale(x, y, z);

			this.applyMatrix4(_m1);
			return this;
		}

		lookAt(vector) {
			_obj.lookAt(vector);

			_obj.updateMatrix();

			this.applyMatrix4(_obj.matrix);
			return this;
		}

		center() {
			this.computeBoundingBox();
			this.boundingBox.getCenter(_offset).negate();
			this.translate(_offset.x, _offset.y, _offset.z);
			return this;
		}

		setFromPoints(points) {
			const position = [];

			for (let i = 0, l = points.length; i < l; i++) {
				const point = points[i];
				position.push(point.x, point.y, point.z || 0);
			}

			this.setAttribute('position', new Float32BufferAttribute(position, 3));
			return this;
		}

		computeBoundingBox() {
			if (this.boundingBox === null) {
				this.boundingBox = new Box3();
			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if (position && position.isGLBufferAttribute) {
				console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
				this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));
				return;
			}

			if (position !== undefined) {
				this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present

				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];

						_box$1.setFromBufferAttribute(morphAttribute);

						if (this.morphTargetsRelative) {
							_vector$8.addVectors(this.boundingBox.min, _box$1.min);

							this.boundingBox.expandByPoint(_vector$8);

							_vector$8.addVectors(this.boundingBox.max, _box$1.max);

							this.boundingBox.expandByPoint(_vector$8);
						} else {
							this.boundingBox.expandByPoint(_box$1.min);
							this.boundingBox.expandByPoint(_box$1.max);
						}
					}
				}
			} else {
				this.boundingBox.makeEmpty();
			}

			if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
				console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
			}
		}

		computeBoundingSphere() {
			if (this.boundingSphere === null) {
				this.boundingSphere = new Sphere();
			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if (position && position.isGLBufferAttribute) {
				console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
				this.boundingSphere.set(new Vector3(), Infinity);
				return;
			}

			if (position) {
				// first, find the center of the bounding sphere
				const center = this.boundingSphere.center;

				_box$1.setFromBufferAttribute(position); // process morph attributes if present


				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];

						_boxMorphTargets.setFromBufferAttribute(morphAttribute);

						if (this.morphTargetsRelative) {
							_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);

							_box$1.expandByPoint(_vector$8);

							_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);

							_box$1.expandByPoint(_vector$8);
						} else {
							_box$1.expandByPoint(_boxMorphTargets.min);

							_box$1.expandByPoint(_boxMorphTargets.max);
						}
					}
				}

				_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case


				let maxRadiusSq = 0;

				for (let i = 0, il = position.count; i < il; i++) {
					_vector$8.fromBufferAttribute(position, i);

					maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
				} // process morph attributes if present


				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];
						const morphTargetsRelative = this.morphTargetsRelative;

						for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
							_vector$8.fromBufferAttribute(morphAttribute, j);

							if (morphTargetsRelative) {
								_offset.fromBufferAttribute(position, j);

								_vector$8.add(_offset);
							}

							maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
						}
					}
				}

				this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

				if (isNaN(this.boundingSphere.radius)) {
					console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
				}
			}
		}

		computeFaceNormals() {// backwards compatibility
		}

		computeTangents() {
			const index = this.index;
			const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html
			// (per vertex tangents)

			if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
				console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
				return;
			}

			const indices = index.array;
			const positions = attributes.position.array;
			const normals = attributes.normal.array;
			const uvs = attributes.uv.array;
			const nVertices = positions.length / 3;

			if (attributes.tangent === undefined) {
				this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
			}

			const tangents = attributes.tangent.array;
			const tan1 = [],
						tan2 = [];

			for (let i = 0; i < nVertices; i++) {
				tan1[i] = new Vector3();
				tan2[i] = new Vector3();
			}

			const vA = new Vector3(),
						vB = new Vector3(),
						vC = new Vector3(),
						uvA = new Vector2(),
						uvB = new Vector2(),
						uvC = new Vector2(),
						sdir = new Vector3(),
						tdir = new Vector3();

			function handleTriangle(a, b, c) {
				vA.fromArray(positions, a * 3);
				vB.fromArray(positions, b * 3);
				vC.fromArray(positions, c * 3);
				uvA.fromArray(uvs, a * 2);
				uvB.fromArray(uvs, b * 2);
				uvC.fromArray(uvs, c * 2);
				vB.sub(vA);
				vC.sub(vA);
				uvB.sub(uvA);
				uvC.sub(uvA);
				const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices

				if (!isFinite(r)) return;
				sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
				tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
				tan1[a].add(sdir);
				tan1[b].add(sdir);
				tan1[c].add(sdir);
				tan2[a].add(tdir);
				tan2[b].add(tdir);
				tan2[c].add(tdir);
			}

			let groups = this.groups;

			if (groups.length === 0) {
				groups = [{
					start: 0,
					count: indices.length
				}];
			}

			for (let i = 0, il = groups.length; i < il; ++i) {
				const group = groups[i];
				const start = group.start;
				const count = group.count;

				for (let j = start, jl = start + count; j < jl; j += 3) {
					handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
				}
			}

			const tmp = new Vector3(),
						tmp2 = new Vector3();
			const n = new Vector3(),
						n2 = new Vector3();

			function handleVertex(v) {
				n.fromArray(normals, v * 3);
				n2.copy(n);
				const t = tan1[v]; // Gram-Schmidt orthogonalize

				tmp.copy(t);
				tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness

				tmp2.crossVectors(n2, t);
				const test = tmp2.dot(tan2[v]);
				const w = test < 0.0 ? -1.0 : 1.0;
				tangents[v * 4] = tmp.x;
				tangents[v * 4 + 1] = tmp.y;
				tangents[v * 4 + 2] = tmp.z;
				tangents[v * 4 + 3] = w;
			}

			for (let i = 0, il = groups.length; i < il; ++i) {
				const group = groups[i];
				const start = group.start;
				const count = group.count;

				for (let j = start, jl = start + count; j < jl; j += 3) {
					handleVertex(indices[j + 0]);
					handleVertex(indices[j + 1]);
					handleVertex(indices[j + 2]);
				}
			}
		}

		computeVertexNormals() {
			const index = this.index;
			const positionAttribute = this.getAttribute('position');

			if (positionAttribute !== undefined) {
				let normalAttribute = this.getAttribute('normal');

				if (normalAttribute === undefined) {
					normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
					this.setAttribute('normal', normalAttribute);
				} else {
					// reset existing normals to zero
					for (let i = 0, il = normalAttribute.count; i < il; i++) {
						normalAttribute.setXYZ(i, 0, 0, 0);
					}
				}

				const pA = new Vector3(),
							pB = new Vector3(),
							pC = new Vector3();
				const nA = new Vector3(),
							nB = new Vector3(),
							nC = new Vector3();
				const cb = new Vector3(),
							ab = new Vector3(); // indexed elements

				if (index) {
					for (let i = 0, il = index.count; i < il; i += 3) {
						const vA = index.getX(i + 0);
						const vB = index.getX(i + 1);
						const vC = index.getX(i + 2);
						pA.fromBufferAttribute(positionAttribute, vA);
						pB.fromBufferAttribute(positionAttribute, vB);
						pC.fromBufferAttribute(positionAttribute, vC);
						cb.subVectors(pC, pB);
						ab.subVectors(pA, pB);
						cb.cross(ab);
						nA.fromBufferAttribute(normalAttribute, vA);
						nB.fromBufferAttribute(normalAttribute, vB);
						nC.fromBufferAttribute(normalAttribute, vC);
						nA.add(cb);
						nB.add(cb);
						nC.add(cb);
						normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
						normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
						normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
					}
				} else {
					// non-indexed elements (unconnected triangle soup)
					for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
						pA.fromBufferAttribute(positionAttribute, i + 0);
						pB.fromBufferAttribute(positionAttribute, i + 1);
						pC.fromBufferAttribute(positionAttribute, i + 2);
						cb.subVectors(pC, pB);
						ab.subVectors(pA, pB);
						cb.cross(ab);
						normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
						normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
						normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
					}
				}

				this.normalizeNormals();
				normalAttribute.needsUpdate = true;
			}
		}

		merge(geometry, offset) {
			if (!(geometry && geometry.isBufferGeometry)) {
				console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
				return;
			}

			if (offset === undefined) {
				offset = 0;
				console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');
			}

			const attributes = this.attributes;

			for (const key in attributes) {
				if (geometry.attributes[key] === undefined) continue;
				const attribute1 = attributes[key];
				const attributeArray1 = attribute1.array;
				const attribute2 = geometry.attributes[key];
				const attributeArray2 = attribute2.array;
				const attributeOffset = attribute2.itemSize * offset;
				const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);

				for (let i = 0, j = attributeOffset; i < length; i++, j++) {
					attributeArray1[j] = attributeArray2[i];
				}
			}

			return this;
		}

		normalizeNormals() {
			const normals = this.attributes.normal;

			for (let i = 0, il = normals.count; i < il; i++) {
				_vector$8.fromBufferAttribute(normals, i);

				_vector$8.normalize();

				normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
			}
		}

		toNonIndexed() {
			function convertBufferAttribute(attribute, indices) {
				const array = attribute.array;
				const itemSize = attribute.itemSize;
				const normalized = attribute.normalized;
				const array2 = new array.constructor(indices.length * itemSize);
				let index = 0,
						index2 = 0;

				for (let i = 0, l = indices.length; i < l; i++) {
					index = indices[i] * itemSize;

					for (let j = 0; j < itemSize; j++) {
						array2[index2++] = array[index++];
					}
				}

				return new BufferAttribute(array2, itemSize, normalized);
			} //


			if (this.index === null) {
				console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
				return this;
			}

			const geometry2 = new BufferGeometry();
			const indices = this.index.array;
			const attributes = this.attributes; // attributes

			for (const name in attributes) {
				const attribute = attributes[name];
				const newAttribute = convertBufferAttribute(attribute, indices);
				geometry2.setAttribute(name, newAttribute);
			} // morph attributes


			const morphAttributes = this.morphAttributes;

			for (const name in morphAttributes) {
				const morphArray = [];
				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

				for (let i = 0, il = morphAttribute.length; i < il; i++) {
					const attribute = morphAttribute[i];
					const newAttribute = convertBufferAttribute(attribute, indices);
					morphArray.push(newAttribute);
				}

				geometry2.morphAttributes[name] = morphArray;
			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups

			const groups = this.groups;

			for (let i = 0, l = groups.length; i < l; i++) {
				const group = groups[i];
				geometry2.addGroup(group.start, group.count, group.materialIndex);
			}

			return geometry2;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			}; // standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if (this.name !== '') data.name = this.name;
			if (Object.keys(this.userData).length > 0) data.userData = this.userData;

			if (this.parameters !== undefined) {
				const parameters = this.parameters;

				for (const key in parameters) {
					if (parameters[key] !== undefined) data[key] = parameters[key];
				}

				return data;
			} // for simplicity the code assumes attributes are not shared across geometries, see #15811


			data.data = {
				attributes: {}
			};
			const index = this.index;

			if (index !== null) {
				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call(index.array)
				};
			}

			const attributes = this.attributes;

			for (const key in attributes) {
				const attribute = attributes[key];
				data.data.attributes[key] = attribute.toJSON(data.data);
			}

			const morphAttributes = {};
			let hasMorphAttributes = false;

			for (const key in this.morphAttributes) {
				const attributeArray = this.morphAttributes[key];
				const array = [];

				for (let i = 0, il = attributeArray.length; i < il; i++) {
					const attribute = attributeArray[i];
					array.push(attribute.toJSON(data.data));
				}

				if (array.length > 0) {
					morphAttributes[key] = array;
					hasMorphAttributes = true;
				}
			}

			if (hasMorphAttributes) {
				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;
			}

			const groups = this.groups;

			if (groups.length > 0) {
				data.data.groups = JSON.parse(JSON.stringify(groups));
			}

			const boundingSphere = this.boundingSphere;

			if (boundingSphere !== null) {
				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};
			}

			return data;
		}

		clone() {
			/*
			 // Handle primitives
				 const parameters = this.parameters;
				 if ( parameters !== undefined ) {
				 const values = [];
				 for ( const key in parameters ) {
				 values.push( parameters[ key ] );
				 }
				 const geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;
				 }
				 return new this.constructor().copy( this );
			 */
			return new BufferGeometry().copy(this);
		}

		copy(source) {
			// reset
			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null; // used for storing cloned, shared data

			const data = {}; // name

			this.name = source.name; // index

			const index = source.index;

			if (index !== null) {
				this.setIndex(index.clone(data));
			} // attributes


			const attributes = source.attributes;

			for (const name in attributes) {
				const attribute = attributes[name];
				this.setAttribute(name, attribute.clone(data));
			} // morph attributes


			const morphAttributes = source.morphAttributes;

			for (const name in morphAttributes) {
				const array = [];
				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

				for (let i = 0, l = morphAttribute.length; i < l; i++) {
					array.push(morphAttribute[i].clone(data));
				}

				this.morphAttributes[name] = array;
			}

			this.morphTargetsRelative = source.morphTargetsRelative; // groups

			const groups = source.groups;

			for (let i = 0, l = groups.length; i < l; i++) {
				const group = groups[i];
				this.addGroup(group.start, group.count, group.materialIndex);
			} // bounding box


			const boundingBox = source.boundingBox;

			if (boundingBox !== null) {
				this.boundingBox = boundingBox.clone();
			} // bounding sphere


			const boundingSphere = source.boundingSphere;

			if (boundingSphere !== null) {
				this.boundingSphere = boundingSphere.clone();
			} // draw range


			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count; // user data

			this.userData = source.userData;
			return this;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	BufferGeometry.prototype.isBufferGeometry = true;

	const _inverseMatrix$2 = /*@__PURE__*/new Matrix4();

	const _ray$2 = /*@__PURE__*/new Ray();

	const _sphere$3 = /*@__PURE__*/new Sphere();

	const _vA$1 = /*@__PURE__*/new Vector3();

	const _vB$1 = /*@__PURE__*/new Vector3();

	const _vC$1 = /*@__PURE__*/new Vector3();

	const _tempA = /*@__PURE__*/new Vector3();

	const _tempB = /*@__PURE__*/new Vector3();

	const _tempC = /*@__PURE__*/new Vector3();

	const _morphA = /*@__PURE__*/new Vector3();

	const _morphB = /*@__PURE__*/new Vector3();

	const _morphC = /*@__PURE__*/new Vector3();

	const _uvA$1 = /*@__PURE__*/new Vector2();

	const _uvB$1 = /*@__PURE__*/new Vector2();

	const _uvC$1 = /*@__PURE__*/new Vector2();

	const _intersectionPoint = /*@__PURE__*/new Vector3();

	const _intersectionPointWorld = /*@__PURE__*/new Vector3();

	class Mesh extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
			super();
			this.type = 'Mesh';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);

			if (source.morphTargetInfluences !== undefined) {
				this.morphTargetInfluences = source.morphTargetInfluences.slice();
			}

			if (source.morphTargetDictionary !== undefined) {
				this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
			}

			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const material = this.material;
			const matrixWorld = this.matrixWorld;
			if (material === undefined) return; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$3.copy(geometry.boundingSphere);

			_sphere$3.applyMatrix4(matrixWorld);

			if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //

			_inverseMatrix$2.copy(matrixWorld).invert();

			_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing


			if (geometry.boundingBox !== null) {
				if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
			}

			let intersection;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const position = geometry.attributes.position;
				const morphPosition = geometry.morphAttributes.position;
				const morphTargetsRelative = geometry.morphTargetsRelative;
				const uv = geometry.attributes.uv;
				const uv2 = geometry.attributes.uv2;
				const groups = geometry.groups;
				const drawRange = geometry.drawRange;

				if (index !== null) {
					// indexed buffer geometry
					if (Array.isArray(material)) {
						for (let i = 0, il = groups.length; i < il; i++) {
							const group = groups[i];
							const groupMaterial = material[group.materialIndex];
							const start = Math.max(group.start, drawRange.start);
							const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

							for (let j = start, jl = end; j < jl; j += 3) {
								const a = index.getX(j);
								const b = index.getX(j + 1);
								const c = index.getX(j + 2);
								intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

								if (intersection) {
									intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics

									intersection.face.materialIndex = group.materialIndex;
									intersects.push(intersection);
								}
							}
						}
					} else {
						const start = Math.max(0, drawRange.start);
						const end = Math.min(index.count, drawRange.start + drawRange.count);

						for (let i = start, il = end; i < il; i += 3) {
							const a = index.getX(i);
							const b = index.getX(i + 1);
							const c = index.getX(i + 2);
							intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

							if (intersection) {
								intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics

								intersects.push(intersection);
							}
						}
					}
				} else if (position !== undefined) {
					// non-indexed buffer geometry
					if (Array.isArray(material)) {
						for (let i = 0, il = groups.length; i < il; i++) {
							const group = groups[i];
							const groupMaterial = material[group.materialIndex];
							const start = Math.max(group.start, drawRange.start);
							const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

							for (let j = start, jl = end; j < jl; j += 3) {
								const a = j;
								const b = j + 1;
								const c = j + 2;
								intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

								if (intersection) {
									intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics

									intersection.face.materialIndex = group.materialIndex;
									intersects.push(intersection);
								}
							}
						}
					} else {
						const start = Math.max(0, drawRange.start);
						const end = Math.min(position.count, drawRange.start + drawRange.count);

						for (let i = start, il = end; i < il; i += 3) {
							const a = i;
							const b = i + 1;
							const c = i + 2;
							intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

							if (intersection) {
								intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics

								intersects.push(intersection);
							}
						}
					}
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

	}

	Mesh.prototype.isMesh = true;

	function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
		let intersect;

		if (material.side === BackSide) {
			intersect = ray.intersectTriangle(pC, pB, pA, true, point);
		} else {
			intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
		}

		if (intersect === null) return null;

		_intersectionPointWorld.copy(point);

		_intersectionPointWorld.applyMatrix4(object.matrixWorld);

		const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
		if (distance < raycaster.near || distance > raycaster.far) return null;
		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};
	}

	function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
		_vA$1.fromBufferAttribute(position, a);

		_vB$1.fromBufferAttribute(position, b);

		_vC$1.fromBufferAttribute(position, c);

		const morphInfluences = object.morphTargetInfluences;

		if (material.morphTargets && morphPosition && morphInfluences) {
			_morphA.set(0, 0, 0);

			_morphB.set(0, 0, 0);

			_morphC.set(0, 0, 0);

			for (let i = 0, il = morphPosition.length; i < il; i++) {
				const influence = morphInfluences[i];
				const morphAttribute = morphPosition[i];
				if (influence === 0) continue;

				_tempA.fromBufferAttribute(morphAttribute, a);

				_tempB.fromBufferAttribute(morphAttribute, b);

				_tempC.fromBufferAttribute(morphAttribute, c);

				if (morphTargetsRelative) {
					_morphA.addScaledVector(_tempA, influence);

					_morphB.addScaledVector(_tempB, influence);

					_morphC.addScaledVector(_tempC, influence);
				} else {
					_morphA.addScaledVector(_tempA.sub(_vA$1), influence);

					_morphB.addScaledVector(_tempB.sub(_vB$1), influence);

					_morphC.addScaledVector(_tempC.sub(_vC$1), influence);
				}
			}

			_vA$1.add(_morphA);

			_vB$1.add(_morphB);

			_vC$1.add(_morphC);
		}

		if (object.isSkinnedMesh && material.skinning) {
			object.boneTransform(a, _vA$1);
			object.boneTransform(b, _vB$1);
			object.boneTransform(c, _vC$1);
		}

		const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);

		if (intersection) {
			if (uv) {
				_uvA$1.fromBufferAttribute(uv, a);

				_uvB$1.fromBufferAttribute(uv, b);

				_uvC$1.fromBufferAttribute(uv, c);

				intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
			}

			if (uv2) {
				_uvA$1.fromBufferAttribute(uv2, a);

				_uvB$1.fromBufferAttribute(uv2, b);

				_uvC$1.fromBufferAttribute(uv2, c);

				intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
			}

			const face = {
				a: a,
				b: b,
				c: c,
				normal: new Vector3(),
				materialIndex: 0
			};
			Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
			intersection.face = face;
		}

		return intersection;
	}

	class BoxGeometry extends BufferGeometry {
		constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
			super();
			this.type = 'BoxGeometry';
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
			const scope = this; // segments

			widthSegments = Math.floor(widthSegments);
			heightSegments = Math.floor(heightSegments);
			depthSegments = Math.floor(depthSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let numberOfVertices = 0;
			let groupStart = 0; // build each side of the box geometry

			buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px

			buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx

			buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py

			buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny

			buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz

			buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
			// build geometry

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

			function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
				const segmentWidth = width / gridX;
				const segmentHeight = height / gridY;
				const widthHalf = width / 2;
				const heightHalf = height / 2;
				const depthHalf = depth / 2;
				const gridX1 = gridX + 1;
				const gridY1 = gridY + 1;
				let vertexCounter = 0;
				let groupCount = 0;
				const vector = new Vector3(); // generate vertices, normals and uvs

				for (let iy = 0; iy < gridY1; iy++) {
					const y = iy * segmentHeight - heightHalf;

					for (let ix = 0; ix < gridX1; ix++) {
						const x = ix * segmentWidth - widthHalf; // set values to correct vector component

						vector[u] = x * udir;
						vector[v] = y * vdir;
						vector[w] = depthHalf; // now apply vector to vertex buffer

						vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component

						vector[u] = 0;
						vector[v] = 0;
						vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer

						normals.push(vector.x, vector.y, vector.z); // uvs

						uvs.push(ix / gridX);
						uvs.push(1 - iy / gridY); // counters

						vertexCounter += 1;
					}
				} // indices
				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment


				for (let iy = 0; iy < gridY; iy++) {
					for (let ix = 0; ix < gridX; ix++) {
						const a = numberOfVertices + ix + gridX1 * iy;
						const b = numberOfVertices + ix + gridX1 * (iy + 1);
						const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
						const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces

						indices.push(a, b, d);
						indices.push(b, c, d); // increase counter

						groupCount += 6;
					}
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups

				groupStart += groupCount; // update total number of vertices

				numberOfVertices += vertexCounter;
			}
		}

	}

	/**
	 * Uniform Utilities
	 */
	function cloneUniforms(src) {
		const dst = {};

		for (const u in src) {
			dst[u] = {};

			for (const p in src[u]) {
				const property = src[u][p];

				if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
					dst[u][p] = property.clone();
				} else if (Array.isArray(property)) {
					dst[u][p] = property.slice();
				} else {
					dst[u][p] = property;
				}
			}
		}

		return dst;
	}
	function mergeUniforms(uniforms) {
		const merged = {};

		for (let u = 0; u < uniforms.length; u++) {
			const tmp = cloneUniforms(uniforms[u]);

			for (const p in tmp) {
				merged[p] = tmp[p];
			}
		}

		return merged;
	} // Legacy

	const UniformsUtils = {
		clone: cloneUniforms,
		merge: mergeUniforms
	};

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	/**
	 * parameters = {
	 *	defines: { "label" : "value" },
	 *	uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *	fragmentShader: <string>,
	 *	vertexShader: <string>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	lights: <bool>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>
	 * }
	 */

	class ShaderMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'ShaderMaterial';
			this.defines = {};
			this.uniforms = {};
			this.vertexShader = default_vertex;
			this.fragmentShader = default_fragment;
			this.linewidth = 1;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false; // set to use scene fog

			this.lights = false; // set to use scene lights

			this.clipping = false; // set to use user-defined clipping planes

			this.skinning = false; // set to use skinning attribute streams

			this.morphTargets = false; // set to use morph targets

			this.morphNormals = false; // set to use morph normals

			this.extensions = {
				derivatives: false,
				// set to use derivatives
				fragDepth: false,
				// set to use fragment depth values
				drawBuffers: false,
				// set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD

			}; // When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.

			this.defaultAttributeValues = {
				'color': [1, 1, 1],
				'uv': [0, 0],
				'uv2': [0, 0]
			};
			this.index0AttributeName = undefined;
			this.uniformsNeedUpdate = false;
			this.glslVersion = null;

			if (parameters !== undefined) {
				if (parameters.attributes !== undefined) {
					console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
				}

				this.setValues(parameters);
			}
		}

		copy(source) {
			super.copy(source);
			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;
			this.uniforms = cloneUniforms(source.uniforms);
			this.defines = Object.assign({}, source.defines);
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.lights = source.lights;
			this.clipping = source.clipping;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			this.extensions = Object.assign({}, source.extensions);
			this.glslVersion = source.glslVersion;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.glslVersion = this.glslVersion;
			data.uniforms = {};

			for (const name in this.uniforms) {
				const uniform = this.uniforms[name];
				const value = uniform.value;

				if (value && value.isTexture) {
					data.uniforms[name] = {
						type: 't',
						value: value.toJSON(meta).uuid
					};
				} else if (value && value.isColor) {
					data.uniforms[name] = {
						type: 'c',
						value: value.getHex()
					};
				} else if (value && value.isVector2) {
					data.uniforms[name] = {
						type: 'v2',
						value: value.toArray()
					};
				} else if (value && value.isVector3) {
					data.uniforms[name] = {
						type: 'v3',
						value: value.toArray()
					};
				} else if (value && value.isVector4) {
					data.uniforms[name] = {
						type: 'v4',
						value: value.toArray()
					};
				} else if (value && value.isMatrix3) {
					data.uniforms[name] = {
						type: 'm3',
						value: value.toArray()
					};
				} else if (value && value.isMatrix4) {
					data.uniforms[name] = {
						type: 'm4',
						value: value.toArray()
					};
				} else {
					data.uniforms[name] = {
						value: value
					}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
				}
			}

			if (Object.keys(this.defines).length > 0) data.defines = this.defines;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;
			const extensions = {};

			for (const key in this.extensions) {
				if (this.extensions[key] === true) extensions[key] = true;
			}

			if (Object.keys(extensions).length > 0) data.extensions = extensions;
			return data;
		}

	}

	ShaderMaterial.prototype.isShaderMaterial = true;

	class Camera extends Object3D {
		constructor() {
			super();
			this.type = 'Camera';
			this.matrixWorldInverse = new Matrix4();
			this.projectionMatrix = new Matrix4();
			this.projectionMatrixInverse = new Matrix4();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.matrixWorldInverse.copy(source.matrixWorldInverse);
			this.projectionMatrix.copy(source.projectionMatrix);
			this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
			return this;
		}

		getWorldDirection(target) {
			if (target === undefined) {
				console.warn('THREE.Camera: .getWorldDirection() target is now required');
				target = new Vector3();
			}

			this.updateWorldMatrix(true, false);
			const e = this.matrixWorld.elements;
			return target.set(-e[8], -e[9], -e[10]).normalize();
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			this.matrixWorldInverse.copy(this.matrixWorld).invert();
		}

		updateWorldMatrix(updateParents, updateChildren) {
			super.updateWorldMatrix(updateParents, updateChildren);
			this.matrixWorldInverse.copy(this.matrixWorld).invert();
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	Camera.prototype.isCamera = true;

	class PerspectiveCamera extends Camera {
		constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {
			super();
			this.type = 'PerspectiveCamera';
			this.fov = fov;
			this.zoom = 1;
			this.near = near;
			this.far = far;
			this.focus = 10;
			this.aspect = aspect;
			this.view = null;
			this.filmGauge = 35; // width of the film (default in millimeters)

			this.filmOffset = 0; // horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.fov = source.fov;
			this.zoom = source.zoom;
			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;
			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign({}, source.view);
			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;
			return this;
		}
		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */


		setFocalLength(focalLength) {
			/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
			const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
			this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
			this.updateProjectionMatrix();
		}
		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */


		getFocalLength() {
			const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
			return 0.5 * this.getFilmHeight() / vExtentSlope;
		}

		getEffectiveFOV() {
			return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
		}

		getFilmWidth() {
			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min(this.aspect, 1);
		}

		getFilmHeight() {
			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max(this.aspect, 1);
		}
		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *	 +---+---+---+
		 *	 | A | B | C |
		 *	 +---+---+---+
		 *	 | D | E | F |
		 *	 +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *	 const w = 1920;
		 *	 const h = 1080;
		 *	 const fullWidth = w * 3;
		 *	 const fullHeight = h * 2;
		 *
		 *	 --A--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *	 --B--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *	 --C--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *	 --D--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *	 --E--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *	 --F--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *	 Note there is no reason monitors have to be the same size or in a grid.
		 */


		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
			this.aspect = fullWidth / fullHeight;

			if (this.view === null) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		}

		clearViewOffset() {
			if (this.view !== null) {
				this.view.enabled = false;
			}

			this.updateProjectionMatrix();
		}

		updateProjectionMatrix() {
			const near = this.near;
			let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
			let height = 2 * top;
			let width = this.aspect * height;
			let left = -0.5 * width;
			const view = this.view;

			if (this.view !== null && this.view.enabled) {
				const fullWidth = view.fullWidth,
							fullHeight = view.fullHeight;
				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;
			}

			const skew = this.filmOffset;
			if (skew !== 0) left += near * skew / this.getFilmWidth();
			this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.fov = this.fov;
			data.object.zoom = this.zoom;
			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;
			data.object.aspect = this.aspect;
			if (this.view !== null) data.object.view = Object.assign({}, this.view);
			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;
			return data;
		}

	}

	PerspectiveCamera.prototype.isPerspectiveCamera = true;

	const fov = 90,
				aspect = 1;

	class CubeCamera extends Object3D {
		constructor(near, far, renderTarget) {
			super();
			this.type = 'CubeCamera';

			if (renderTarget.isWebGLCubeRenderTarget !== true) {
				console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
				return;
			}

			this.renderTarget = renderTarget;
			const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
			cameraPX.layers = this.layers;
			cameraPX.up.set(0, -1, 0);
			cameraPX.lookAt(new Vector3(1, 0, 0));
			this.add(cameraPX);
			const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
			cameraNX.layers = this.layers;
			cameraNX.up.set(0, -1, 0);
			cameraNX.lookAt(new Vector3(-1, 0, 0));
			this.add(cameraNX);
			const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
			cameraPY.layers = this.layers;
			cameraPY.up.set(0, 0, 1);
			cameraPY.lookAt(new Vector3(0, 1, 0));
			this.add(cameraPY);
			const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
			cameraNY.layers = this.layers;
			cameraNY.up.set(0, 0, -1);
			cameraNY.lookAt(new Vector3(0, -1, 0));
			this.add(cameraNY);
			const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
			cameraPZ.layers = this.layers;
			cameraPZ.up.set(0, -1, 0);
			cameraPZ.lookAt(new Vector3(0, 0, 1));
			this.add(cameraPZ);
			const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
			cameraNZ.layers = this.layers;
			cameraNZ.up.set(0, -1, 0);
			cameraNZ.lookAt(new Vector3(0, 0, -1));
			this.add(cameraNZ);
		}

		update(renderer, scene) {
			if (this.parent === null) this.updateMatrixWorld();
			const renderTarget = this.renderTarget;
			const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
			const currentXrEnabled = renderer.xr.enabled;
			const currentRenderTarget = renderer.getRenderTarget();
			renderer.xr.enabled = false;
			const generateMipmaps = renderTarget.texture.generateMipmaps;
			renderTarget.texture.generateMipmaps = false;
			renderer.setRenderTarget(renderTarget, 0);
			renderer.render(scene, cameraPX);
			renderer.setRenderTarget(renderTarget, 1);
			renderer.render(scene, cameraNX);
			renderer.setRenderTarget(renderTarget, 2);
			renderer.render(scene, cameraPY);
			renderer.setRenderTarget(renderTarget, 3);
			renderer.render(scene, cameraNY);
			renderer.setRenderTarget(renderTarget, 4);
			renderer.render(scene, cameraPZ);
			renderTarget.texture.generateMipmaps = generateMipmaps;
			renderer.setRenderTarget(renderTarget, 5);
			renderer.render(scene, cameraNZ);
			renderer.setRenderTarget(currentRenderTarget);
			renderer.xr.enabled = currentXrEnabled;
		}

	}

	class CubeTexture extends Texture {
		constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
			format = format !== undefined ? format : RGBFormat;
			super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding); // Why CubeTexture._needsFlipEnvMap is necessary:
			//
			// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
			// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
			// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
			// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
			// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)
			// when using WebGLCubeRenderTarget.texture as a cube texture.

			this._needsFlipEnvMap = true;
			this.flipY = false;
		}

		get images() {
			return this.image;
		}

		set images(value) {
			this.image = value;
		}

	}

	CubeTexture.prototype.isCubeTexture = true;

	class WebGLCubeRenderTarget extends WebGLRenderTarget {
		constructor(size, options, dummy) {
			if (Number.isInteger(options)) {
				console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');
				options = dummy;
			}

			super(size, size, options);
			options = options || {};
			this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
			this.texture._needsFlipEnvMap = false;
		}

		fromEquirectangularTexture(renderer, texture) {
			this.texture.type = texture.type;
			this.texture.format = RGBAFormat; // see #18859

			this.texture.encoding = texture.encoding;
			this.texture.generateMipmaps = texture.generateMipmaps;
			this.texture.minFilter = texture.minFilter;
			this.texture.magFilter = texture.magFilter;
			const shader = {
				uniforms: {
					tEquirect: {
						value: null
					}
				},
				vertexShader:
				/* glsl */
				`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
				fragmentShader:
				/* glsl */
				`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
			};
			const geometry = new BoxGeometry(5, 5, 5);
			const material = new ShaderMaterial({
				name: 'CubemapFromEquirect',
				uniforms: cloneUniforms(shader.uniforms),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader,
				side: BackSide,
				blending: NoBlending
			});
			material.uniforms.tEquirect.value = texture;
			const mesh = new Mesh(geometry, material);
			const currentMinFilter = texture.minFilter; // Avoid blurred poles

			if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
			const camera = new CubeCamera(1, 10, this);
			camera.update(renderer, mesh);
			texture.minFilter = currentMinFilter;
			mesh.geometry.dispose();
			mesh.material.dispose();
			return this;
		}

		clear(renderer, color, depth, stencil) {
			const currentRenderTarget = renderer.getRenderTarget();

			for (let i = 0; i < 6; i++) {
				renderer.setRenderTarget(this, i);
				renderer.clear(color, depth, stencil);
			}

			renderer.setRenderTarget(currentRenderTarget);
		}

	}

	WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

	class DataTexture extends Texture {
		constructor(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
			this.image = {
				data: data || null,
				width: width || 1,
				height: height || 1
			};
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
			this.needsUpdate = true;
		}

	}

	DataTexture.prototype.isDataTexture = true;

	const _sphere$2 = /*@__PURE__*/new Sphere();

	const _vector$7 = /*@__PURE__*/new Vector3();

	class Frustum {
		constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
			this.planes = [p0, p1, p2, p3, p4, p5];
		}

		set(p0, p1, p2, p3, p4, p5) {
			const planes = this.planes;
			planes[0].copy(p0);
			planes[1].copy(p1);
			planes[2].copy(p2);
			planes[3].copy(p3);
			planes[4].copy(p4);
			planes[5].copy(p5);
			return this;
		}

		copy(frustum) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				planes[i].copy(frustum.planes[i]);
			}

			return this;
		}

		setFromProjectionMatrix(m) {
			const planes = this.planes;
			const me = m.elements;
			const me0 = me[0],
						me1 = me[1],
						me2 = me[2],
						me3 = me[3];
			const me4 = me[4],
						me5 = me[5],
						me6 = me[6],
						me7 = me[7];
			const me8 = me[8],
						me9 = me[9],
						me10 = me[10],
						me11 = me[11];
			const me12 = me[12],
						me13 = me[13],
						me14 = me[14],
						me15 = me[15];
			planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
			planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
			planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
			planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
			planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
			planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
			return this;
		}

		intersectsObject(object) {
			const geometry = object.geometry;
			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);

			return this.intersectsSphere(_sphere$2);
		}

		intersectsSprite(sprite) {
			_sphere$2.center.set(0, 0, 0);

			_sphere$2.radius = 0.7071067811865476;

			_sphere$2.applyMatrix4(sprite.matrixWorld);

			return this.intersectsSphere(_sphere$2);
		}

		intersectsSphere(sphere) {
			const planes = this.planes;
			const center = sphere.center;
			const negRadius = -sphere.radius;

			for (let i = 0; i < 6; i++) {
				const distance = planes[i].distanceToPoint(center);

				if (distance < negRadius) {
					return false;
				}
			}

			return true;
		}

		intersectsBox(box) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				const plane = planes[i]; // corner at max distance

				_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if (plane.distanceToPoint(_vector$7) < 0) {
					return false;
				}
			}

			return true;
		}

		containsPoint(point) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				if (planes[i].distanceToPoint(point) < 0) {
					return false;
				}
			}

			return true;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	function WebGLAnimation() {
		let context = null;
		let isAnimating = false;
		let animationLoop = null;
		let requestId = null;

		function onAnimationFrame(time, frame) {
			animationLoop(time, frame);
			requestId = context.requestAnimationFrame(onAnimationFrame);
		}

		return {
			start: function () {
				if (isAnimating === true) return;
				if (animationLoop === null) return;
				requestId = context.requestAnimationFrame(onAnimationFrame);
				isAnimating = true;
			},
			stop: function () {
				context.cancelAnimationFrame(requestId);
				isAnimating = false;
			},
			setAnimationLoop: function (callback) {
				animationLoop = callback;
			},
			setContext: function (value) {
				context = value;
			}
		};
	}

	function WebGLAttributes(gl, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		const buffers = new WeakMap();

		function createBuffer(attribute, bufferType) {
			const array = attribute.array;
			const usage = attribute.usage;
			const buffer = gl.createBuffer();
			gl.bindBuffer(bufferType, buffer);
			gl.bufferData(bufferType, array, usage);
			attribute.onUploadCallback();
			let type = gl.FLOAT;

			if (array instanceof Float32Array) {
				type = gl.FLOAT;
			} else if (array instanceof Float64Array) {
				console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');
			} else if (array instanceof Uint16Array) {
				if (attribute.isFloat16BufferAttribute) {
					if (isWebGL2) {
						type = gl.HALF_FLOAT;
					} else {
						console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
					}
				} else {
					type = gl.UNSIGNED_SHORT;
				}
			} else if (array instanceof Int16Array) {
				type = gl.SHORT;
			} else if (array instanceof Uint32Array) {
				type = gl.UNSIGNED_INT;
			} else if (array instanceof Int32Array) {
				type = gl.INT;
			} else if (array instanceof Int8Array) {
				type = gl.BYTE;
			} else if (array instanceof Uint8Array) {
				type = gl.UNSIGNED_BYTE;
			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};
		}

		function updateBuffer(buffer, attribute, bufferType) {
			const array = attribute.array;
			const updateRange = attribute.updateRange;
			gl.bindBuffer(bufferType, buffer);

			if (updateRange.count === -1) {
				// Not using update ranges
				gl.bufferSubData(bufferType, 0, array);
			} else {
				if (isWebGL2) {
					gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
				} else {
					gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
				}

				updateRange.count = -1; // reset range
			}
		} //


		function get(attribute) {
			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			return buffers.get(attribute);
		}

		function remove(attribute) {
			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			const data = buffers.get(attribute);

			if (data) {
				gl.deleteBuffer(data.buffer);
				buffers.delete(attribute);
			}
		}

		function update(attribute, bufferType) {
			if (attribute.isGLBufferAttribute) {
				const cached = buffers.get(attribute);

				if (!cached || cached.version < attribute.version) {
					buffers.set(attribute, {
						buffer: attribute.buffer,
						type: attribute.type,
						bytesPerElement: attribute.elementSize,
						version: attribute.version
					});
				}

				return;
			}

			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			const data = buffers.get(attribute);

			if (data === undefined) {
				buffers.set(attribute, createBuffer(attribute, bufferType));
			} else if (data.version < attribute.version) {
				updateBuffer(data.buffer, attribute, bufferType);
				data.version = attribute.version;
			}
		}

		return {
			get: get,
			remove: remove,
			update: update
		};
	}

	class PlaneGeometry extends BufferGeometry {
		constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
			super();
			this.type = 'PlaneGeometry';
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
			const width_half = width / 2;
			const height_half = height / 2;
			const gridX = Math.floor(widthSegments);
			const gridY = Math.floor(heightSegments);
			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;
			const segment_width = width / gridX;
			const segment_height = height / gridY; //

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			for (let iy = 0; iy < gridY1; iy++) {
				const y = iy * segment_height - height_half;

				for (let ix = 0; ix < gridX1; ix++) {
					const x = ix * segment_width - width_half;
					vertices.push(x, -y, 0);
					normals.push(0, 0, 1);
					uvs.push(ix / gridX);
					uvs.push(1 - iy / gridY);
				}
			}

			for (let iy = 0; iy < gridY; iy++) {
				for (let ix = 0; ix < gridX; ix++) {
					const a = ix + gridX1 * iy;
					const b = ix + gridX1 * (iy + 1);
					const c = ix + 1 + gridX1 * (iy + 1);
					const d = ix + 1 + gridX1 * iy;
					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			}

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

	var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

	var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

	var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(		0, 1,		0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

	var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

	var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";

	var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(	1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,	1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,	1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

	var transmissionmap_fragment = "#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";

	var transmissionmap_pars_fragment = "#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif";

	var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

	var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

	var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

	var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	const ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_toon_fragment: lights_toon_fragment,
		lights_toon_pars_fragment: lights_toon_pars_fragment,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_pars_fragment: clearcoat_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		transmissionmap_fragment: transmissionmap_fragment,
		transmissionmap_pars_fragment: transmissionmap_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,
		background_frag: background_frag,
		background_vert: background_vert,
		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshmatcap_frag: meshmatcap_frag,
		meshmatcap_vert: meshmatcap_vert,
		meshtoon_frag: meshtoon_frag,
		meshtoon_vert: meshtoon_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert,
		sprite_frag: sprite_frag,
		sprite_vert: sprite_vert
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	const UniformsLib = {
		common: {
			diffuse: {
				value: new Color(0xeeeeee)
			},
			opacity: {
				value: 1.0
			},
			map: {
				value: null
			},
			uvTransform: {
				value: new Matrix3()
			},
			uv2Transform: {
				value: new Matrix3()
			},
			alphaMap: {
				value: null
			}
		},
		specularmap: {
			specularMap: {
				value: null
			}
		},
		envmap: {
			envMap: {
				value: null
			},
			flipEnvMap: {
				value: -1
			},
			reflectivity: {
				value: 1.0
			},
			refractionRatio: {
				value: 0.98
			},
			maxMipLevel: {
				value: 0
			}
		},
		aomap: {
			aoMap: {
				value: null
			},
			aoMapIntensity: {
				value: 1
			}
		},
		lightmap: {
			lightMap: {
				value: null
			},
			lightMapIntensity: {
				value: 1
			}
		},
		emissivemap: {
			emissiveMap: {
				value: null
			}
		},
		bumpmap: {
			bumpMap: {
				value: null
			},
			bumpScale: {
				value: 1
			}
		},
		normalmap: {
			normalMap: {
				value: null
			},
			normalScale: {
				value: new Vector2(1, 1)
			}
		},
		displacementmap: {
			displacementMap: {
				value: null
			},
			displacementScale: {
				value: 1
			},
			displacementBias: {
				value: 0
			}
		},
		roughnessmap: {
			roughnessMap: {
				value: null
			}
		},
		metalnessmap: {
			metalnessMap: {
				value: null
			}
		},
		gradientmap: {
			gradientMap: {
				value: null
			}
		},
		fog: {
			fogDensity: {
				value: 0.00025
			},
			fogNear: {
				value: 1
			},
			fogFar: {
				value: 2000
			},
			fogColor: {
				value: new Color(0xffffff)
			}
		},
		lights: {
			ambientLightColor: {
				value: []
			},
			lightProbe: {
				value: []
			},
			directionalLights: {
				value: [],
				properties: {
					direction: {},
					color: {}
				}
			},
			directionalLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				}
			},
			directionalShadowMap: {
				value: []
			},
			directionalShadowMatrix: {
				value: []
			},
			spotLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {}
				}
			},
			spotLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				}
			},
			spotShadowMap: {
				value: []
			},
			spotShadowMatrix: {
				value: []
			},
			pointLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					decay: {},
					distance: {}
				}
			},
			pointLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {},
					shadowCameraNear: {},
					shadowCameraFar: {}
				}
			},
			pointShadowMap: {
				value: []
			},
			pointShadowMatrix: {
				value: []
			},
			hemisphereLights: {
				value: [],
				properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				}
			},
			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					width: {},
					height: {}
				}
			},
			ltc_1: {
				value: null
			},
			ltc_2: {
				value: null
			}
		},
		points: {
			diffuse: {
				value: new Color(0xeeeeee)
			},
			opacity: {
				value: 1.0
			},
			size: {
				value: 1.0
			},
			scale: {
				value: 1.0
			},
			map: {
				value: null
			},
			alphaMap: {
				value: null
			},
			uvTransform: {
				value: new Matrix3()
			}
		},
		sprite: {
			diffuse: {
				value: new Color(0xeeeeee)
			},
			opacity: {
				value: 1.0
			},
			center: {
				value: new Vector2(0.5, 0.5)
			},
			rotation: {
				value: 0.0
			},
			map: {
				value: null
			},
			alphaMap: {
				value: null
			},
			uvTransform: {
				value: new Matrix3()
			}
		}
	};

	const ShaderLib = {
		basic: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),
			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag
		},
		lambert: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				}
			}]),
			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag
		},
		phong: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				},
				specular: {
					value: new Color(0x111111)
				},
				shininess: {
					value: 30
				}
			}]),
			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag
		},
		standard: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				},
				roughness: {
					value: 1.0
				},
				metalness: {
					value: 0.0
				},
				envMapIntensity: {
					value: 1
				} // temporary

			}]),
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
		},
		toon: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				}
			}]),
			vertexShader: ShaderChunk.meshtoon_vert,
			fragmentShader: ShaderChunk.meshtoon_frag
		},
		matcap: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {
				matcap: {
					value: null
				}
			}]),
			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag
		},
		points: {
			uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),
			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag
		},
		dashed: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {
				scale: {
					value: 1
				},
				dashSize: {
					value: 1
				},
				totalSize: {
					value: 2
				}
			}]),
			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag
		},
		depth: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),
			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag
		},
		normal: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag
		},
		sprite: {
			uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),
			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag
		},
		background: {
			uniforms: {
				uvTransform: {
					value: new Matrix3()
				},
				t2D: {
					value: null
				}
			},
			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag
		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */
		cube: {
			uniforms: mergeUniforms([UniformsLib.envmap, {
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag
		},
		equirect: {
			uniforms: {
				tEquirect: {
					value: null
				}
			},
			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag
		},
		distanceRGBA: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {
				referencePosition: {
					value: new Vector3()
				},
				nearDistance: {
					value: 1
				},
				farDistance: {
					value: 1000
				}
			}]),
			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag
		},
		shadow: {
			uniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {
				color: {
					value: new Color(0x00000)
				},
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag
		}
	};
	ShaderLib.physical = {
		uniforms: mergeUniforms([ShaderLib.standard.uniforms, {
			clearcoat: {
				value: 0
			},
			clearcoatMap: {
				value: null
			},
			clearcoatRoughness: {
				value: 0
			},
			clearcoatRoughnessMap: {
				value: null
			},
			clearcoatNormalScale: {
				value: new Vector2(1, 1)
			},
			clearcoatNormalMap: {
				value: null
			},
			sheen: {
				value: new Color(0x000000)
			},
			transmission: {
				value: 0
			},
			transmissionMap: {
				value: null
			}
		}]),
		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag
	};

	function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
		const clearColor = new Color(0x000000);
		let clearAlpha = 0;
		let planeMesh;
		let boxMesh;
		let currentBackground = null;
		let currentBackgroundVersion = 0;
		let currentTonemapping = null;

		function render(renderList, scene, camera, forceClear) {
			let background = scene.isScene === true ? scene.background : null;

			if (background && background.isTexture) {
				background = cubemaps.get(background);
			} // Ignore background in AR
			// TODO: Reconsider this.


			const xr = renderer.xr;
			const session = xr.getSession && xr.getSession();

			if (session && session.environmentBlendMode === 'additive') {
				background = null;
			}

			if (background === null) {
				setClear(clearColor, clearAlpha);
			} else if (background && background.isColor) {
				setClear(background, 1);
				forceClear = true;
			}

			if (renderer.autoClear || forceClear) {
				renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
			}

			if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
				if (boxMesh === undefined) {
					boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
						name: 'BackgroundCubeMaterial',
						uniforms: cloneUniforms(ShaderLib.cube.uniforms),
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					}));
					boxMesh.geometry.deleteAttribute('normal');
					boxMesh.geometry.deleteAttribute('uv');

					boxMesh.onBeforeRender = function (renderer, scene, camera) {
						this.matrixWorld.copyPosition(camera.matrixWorld);
					}; // enable code injection for non-built-in material


					Object.defineProperty(boxMesh.material, 'envMap', {
						get: function () {
							return this.uniforms.envMap.value;
						}
					});
					objects.update(boxMesh);
				}

				boxMesh.material.uniforms.envMap.value = background;
				boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;

				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
					boxMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;
				} // push to the pre-sorted opaque render list


				renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
			} else if (background && background.isTexture) {
				if (planeMesh === undefined) {
					planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
						name: 'BackgroundMaterial',
						uniforms: cloneUniforms(ShaderLib.background.uniforms),
						vertexShader: ShaderLib.background.vertexShader,
						fragmentShader: ShaderLib.background.fragmentShader,
						side: FrontSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					}));
					planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material

					Object.defineProperty(planeMesh.material, 'map', {
						get: function () {
							return this.uniforms.t2D.value;
						}
					});
					objects.update(planeMesh);
				}

				planeMesh.material.uniforms.t2D.value = background;

				if (background.matrixAutoUpdate === true) {
					background.updateMatrix();
				}

				planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);

				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
					planeMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;
				} // push to the pre-sorted opaque render list


				renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
			}
		}

		function setClear(color, alpha) {
			state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
		}

		return {
			getClearColor: function () {
				return clearColor;
			},
			setClearColor: function (color, alpha = 1) {
				clearColor.set(color);
				clearAlpha = alpha;
				setClear(clearColor, clearAlpha);
			},
			getClearAlpha: function () {
				return clearAlpha;
			},
			setClearAlpha: function (alpha) {
				clearAlpha = alpha;
				setClear(clearColor, clearAlpha);
			},
			render: render
		};
	}

	function WebGLBindingStates(gl, extensions, attributes, capabilities) {
		const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
		const extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
		const vaoAvailable = capabilities.isWebGL2 || extension !== null;
		const bindingStates = {};
		const defaultState = createBindingState(null);
		let currentState = defaultState;

		function setup(object, material, program, geometry, index) {
			let updateBuffers = false;

			if (vaoAvailable) {
				const state = getBindingState(geometry, program, material);

				if (currentState !== state) {
					currentState = state;
					bindVertexArrayObject(currentState.object);
				}

				updateBuffers = needsUpdate(geometry, index);
				if (updateBuffers) saveCache(geometry, index);
			} else {
				const wireframe = material.wireframe === true;

				if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
					currentState.geometry = geometry.id;
					currentState.program = program.id;
					currentState.wireframe = wireframe;
					updateBuffers = true;
				}
			}

			if (object.isInstancedMesh === true) {
				updateBuffers = true;
			}

			if (index !== null) {
				attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
			}

			if (updateBuffers) {
				setupVertexAttributes(object, material, program, geometry);

				if (index !== null) {
					gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
				}
			}
		}

		function createVertexArrayObject() {
			if (capabilities.isWebGL2) return gl.createVertexArray();
			return extension.createVertexArrayOES();
		}

		function bindVertexArrayObject(vao) {
			if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
			return extension.bindVertexArrayOES(vao);
		}

		function deleteVertexArrayObject(vao) {
			if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
			return extension.deleteVertexArrayOES(vao);
		}

		function getBindingState(geometry, program, material) {
			const wireframe = material.wireframe === true;
			let programMap = bindingStates[geometry.id];

			if (programMap === undefined) {
				programMap = {};
				bindingStates[geometry.id] = programMap;
			}

			let stateMap = programMap[program.id];

			if (stateMap === undefined) {
				stateMap = {};
				programMap[program.id] = stateMap;
			}

			let state = stateMap[wireframe];

			if (state === undefined) {
				state = createBindingState(createVertexArrayObject());
				stateMap[wireframe] = state;
			}

			return state;
		}

		function createBindingState(vao) {
			const newAttributes = [];
			const enabledAttributes = [];
			const attributeDivisors = [];

			for (let i = 0; i < maxVertexAttributes; i++) {
				newAttributes[i] = 0;
				enabledAttributes[i] = 0;
				attributeDivisors[i] = 0;
			}

			return {
				// for backward compatibility on non-VAO support browser
				geometry: null,
				program: null,
				wireframe: false,
				newAttributes: newAttributes,
				enabledAttributes: enabledAttributes,
				attributeDivisors: attributeDivisors,
				object: vao,
				attributes: {},
				index: null
			};
		}

		function needsUpdate(geometry, index) {
			const cachedAttributes = currentState.attributes;
			const geometryAttributes = geometry.attributes;
			let attributesNum = 0;

			for (const key in geometryAttributes) {
				const cachedAttribute = cachedAttributes[key];
				const geometryAttribute = geometryAttributes[key];
				if (cachedAttribute === undefined) return true;
				if (cachedAttribute.attribute !== geometryAttribute) return true;
				if (cachedAttribute.data !== geometryAttribute.data) return true;
				attributesNum++;
			}

			if (currentState.attributesNum !== attributesNum) return true;
			if (currentState.index !== index) return true;
			return false;
		}

		function saveCache(geometry, index) {
			const cache = {};
			const attributes = geometry.attributes;
			let attributesNum = 0;

			for (const key in attributes) {
				const attribute = attributes[key];
				const data = {};
				data.attribute = attribute;

				if (attribute.data) {
					data.data = attribute.data;
				}

				cache[key] = data;
				attributesNum++;
			}

			currentState.attributes = cache;
			currentState.attributesNum = attributesNum;
			currentState.index = index;
		}

		function initAttributes() {
			const newAttributes = currentState.newAttributes;

			for (let i = 0, il = newAttributes.length; i < il; i++) {
				newAttributes[i] = 0;
			}
		}

		function enableAttribute(attribute) {
			enableAttributeAndDivisor(attribute, 0);
		}

		function enableAttributeAndDivisor(attribute, meshPerAttribute) {
			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;
			const attributeDivisors = currentState.attributeDivisors;
			newAttributes[attribute] = 1;

			if (enabledAttributes[attribute] === 0) {
				gl.enableVertexAttribArray(attribute);
				enabledAttributes[attribute] = 1;
			}

			if (attributeDivisors[attribute] !== meshPerAttribute) {
				const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
				extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
				attributeDivisors[attribute] = meshPerAttribute;
			}
		}

		function disableUnusedAttributes() {
			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;

			for (let i = 0, il = enabledAttributes.length; i < il; i++) {
				if (enabledAttributes[i] !== newAttributes[i]) {
					gl.disableVertexAttribArray(i);
					enabledAttributes[i] = 0;
				}
			}
		}

		function vertexAttribPointer(index, size, type, normalized, stride, offset) {
			if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {
				gl.vertexAttribIPointer(index, size, type, stride, offset);
			} else {
				gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
			}
		}

		function setupVertexAttributes(object, material, program, geometry) {
			if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
				if (extensions.get('ANGLE_instanced_arrays') === null) return;
			}

			initAttributes();
			const geometryAttributes = geometry.attributes;
			const programAttributes = program.getAttributes();
			const materialDefaultAttributeValues = material.defaultAttributeValues;

			for (const name in programAttributes) {
				const programAttribute = programAttributes[name];

				if (programAttribute >= 0) {
					const geometryAttribute = geometryAttributes[name];

					if (geometryAttribute !== undefined) {
						const normalized = geometryAttribute.normalized;
						const size = geometryAttribute.itemSize;
						const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore

						if (attribute === undefined) continue;
						const buffer = attribute.buffer;
						const type = attribute.type;
						const bytesPerElement = attribute.bytesPerElement;

						if (geometryAttribute.isInterleavedBufferAttribute) {
							const data = geometryAttribute.data;
							const stride = data.stride;
							const offset = geometryAttribute.offset;

							if (data && data.isInstancedInterleavedBuffer) {
								enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);

								if (geometry._maxInstanceCount === undefined) {
									geometry._maxInstanceCount = data.meshPerAttribute * data.count;
								}
							} else {
								enableAttribute(programAttribute);
							}

							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
							vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
						} else {
							if (geometryAttribute.isInstancedBufferAttribute) {
								enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);

								if (geometry._maxInstanceCount === undefined) {
									geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
								}
							} else {
								enableAttribute(programAttribute);
							}

							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
							vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
						}
					} else if (name === 'instanceMatrix') {
						const attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore

						if (attribute === undefined) continue;
						const buffer = attribute.buffer;
						const type = attribute.type;
						enableAttributeAndDivisor(programAttribute + 0, 1);
						enableAttributeAndDivisor(programAttribute + 1, 1);
						enableAttributeAndDivisor(programAttribute + 2, 1);
						enableAttributeAndDivisor(programAttribute + 3, 1);
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
						gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);
						gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);
						gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);
						gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);
					} else if (name === 'instanceColor') {
						const attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore

						if (attribute === undefined) continue;
						const buffer = attribute.buffer;
						const type = attribute.type;
						enableAttributeAndDivisor(programAttribute, 1);
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
						gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);
					} else if (materialDefaultAttributeValues !== undefined) {
						const value = materialDefaultAttributeValues[name];

						if (value !== undefined) {
							switch (value.length) {
								case 2:
									gl.vertexAttrib2fv(programAttribute, value);
									break;

								case 3:
									gl.vertexAttrib3fv(programAttribute, value);
									break;

								case 4:
									gl.vertexAttrib4fv(programAttribute, value);
									break;

								default:
									gl.vertexAttrib1fv(programAttribute, value);
							}
						}
					}
				}
			}

			disableUnusedAttributes();
		}

		function dispose() {
			reset();

			for (const geometryId in bindingStates) {
				const programMap = bindingStates[geometryId];

				for (const programId in programMap) {
					const stateMap = programMap[programId];

					for (const wireframe in stateMap) {
						deleteVertexArrayObject(stateMap[wireframe].object);
						delete stateMap[wireframe];
					}

					delete programMap[programId];
				}

				delete bindingStates[geometryId];
			}
		}

		function releaseStatesOfGeometry(geometry) {
			if (bindingStates[geometry.id] === undefined) return;
			const programMap = bindingStates[geometry.id];

			for (const programId in programMap) {
				const stateMap = programMap[programId];

				for (const wireframe in stateMap) {
					deleteVertexArrayObject(stateMap[wireframe].object);
					delete stateMap[wireframe];
				}

				delete programMap[programId];
			}

			delete bindingStates[geometry.id];
		}

		function releaseStatesOfProgram(program) {
			for (const geometryId in bindingStates) {
				const programMap = bindingStates[geometryId];
				if (programMap[program.id] === undefined) continue;
				const stateMap = programMap[program.id];

				for (const wireframe in stateMap) {
					deleteVertexArrayObject(stateMap[wireframe].object);
					delete stateMap[wireframe];
				}

				delete programMap[program.id];
			}
		}

		function reset() {
			resetDefaultState();
			if (currentState === defaultState) return;
			currentState = defaultState;
			bindVertexArrayObject(currentState.object);
		} // for backward-compatilibity


		function resetDefaultState() {
			defaultState.geometry = null;
			defaultState.program = null;
			defaultState.wireframe = false;
		}

		return {
			setup: setup,
			reset: reset,
			resetDefaultState: resetDefaultState,
			dispose: dispose,
			releaseStatesOfGeometry: releaseStatesOfGeometry,
			releaseStatesOfProgram: releaseStatesOfProgram,
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			disableUnusedAttributes: disableUnusedAttributes
		};
	}

	function WebGLBufferRenderer(gl, extensions, info, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		let mode;

		function setMode(value) {
			mode = value;
		}

		function render(start, count) {
			gl.drawArrays(mode, start, count);
			info.update(count, mode, 1);
		}

		function renderInstances(start, count, primcount) {
			if (primcount === 0) return;
			let extension, methodName;

			if (isWebGL2) {
				extension = gl;
				methodName = 'drawArraysInstanced';
			} else {
				extension = extensions.get('ANGLE_instanced_arrays');
				methodName = 'drawArraysInstancedANGLE';

				if (extension === null) {
					console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
					return;
				}
			}

			extension[methodName](mode, start, count, primcount);
			info.update(count, mode, primcount);
		} //


		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;
	}

	function WebGLCapabilities(gl, extensions, parameters) {
		let maxAnisotropy;

		function getMaxAnisotropy() {
			if (maxAnisotropy !== undefined) return maxAnisotropy;

			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
				const extension = extensions.get('EXT_texture_filter_anisotropic');
				maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
			} else {
				maxAnisotropy = 0;
			}

			return maxAnisotropy;
		}

		function getMaxPrecision(precision) {
			if (precision === 'highp') {
				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
					return 'highp';
				}

				precision = 'mediump';
			}

			if (precision === 'mediump') {
				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
					return 'mediump';
				}
			}

			return 'lowp';
		}
		/* eslint-disable no-undef */


		const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
		/* eslint-enable no-undef */

		let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		const maxPrecision = getMaxPrecision(precision);

		if (maxPrecision !== precision) {
			console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
			precision = maxPrecision;
		}

		const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
		const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
		const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
		const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
		const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
		const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
		const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
		const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
		const vertexTextures = maxVertexTextures > 0;
		const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
		const floatVertexTextures = vertexTextures && floatFragmentTextures;
		const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
		return {
			isWebGL2: isWebGL2,
			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,
			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,
			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,
			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,
			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,
			maxSamples: maxSamples
		};
	}

	function WebGLClipping(properties) {
		const scope = this;
		let globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false;
		const plane = new Plane(),
					viewNormalMatrix = new Matrix3(),
					uniform = {
			value: null,
			needsUpdate: false
		};
		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function (planes, enableLocalClipping, camera) {
			const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 || localClippingEnabled;
			localClippingEnabled = enableLocalClipping;
			globalState = projectPlanes(planes, camera, 0);
			numGlobalPlanes = planes.length;
			return enabled;
		};

		this.beginShadows = function () {
			renderingShadows = true;
			projectPlanes(null);
		};

		this.endShadows = function () {
			renderingShadows = false;
			resetGlobalState();
		};

		this.setState = function (material, camera, useCache) {
			const planes = material.clippingPlanes,
						clipIntersection = material.clipIntersection,
						clipShadows = material.clipShadows;
			const materialProperties = properties.get(material);

			if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
				// there's no local clipping
				if (renderingShadows) {
					// there's no global clipping
					projectPlanes(null);
				} else {
					resetGlobalState();
				}
			} else {
				const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
							lGlobal = nGlobal * 4;
				let dstArray = materialProperties.clippingState || null;
				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes(planes, camera, lGlobal, useCache);

				for (let i = 0; i !== lGlobal; ++i) {
					dstArray[i] = globalState[i];
				}

				materialProperties.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;
			}
		};

		function resetGlobalState() {
			if (uniform.value !== globalState) {
				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;
			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;
		}

		function projectPlanes(planes, camera, dstOffset, skipTransform) {
			const nPlanes = planes !== null ? planes.length : 0;
			let dstArray = null;

			if (nPlanes !== 0) {
				dstArray = uniform.value;

				if (skipTransform !== true || dstArray === null) {
					const flatSize = dstOffset + nPlanes * 4,
								viewMatrix = camera.matrixWorldInverse;
					viewNormalMatrix.getNormalMatrix(viewMatrix);

					if (dstArray === null || dstArray.length < flatSize) {
						dstArray = new Float32Array(flatSize);
					}

					for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
						plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
						plane.normal.toArray(dstArray, i4);
						dstArray[i4 + 3] = plane.constant;
					}
				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;
			}

			scope.numPlanes = nPlanes;
			scope.numIntersection = 0;
			return dstArray;
		}
	}

	function WebGLCubeMaps(renderer) {
		let cubemaps = new WeakMap();

		function mapTextureMapping(texture, mapping) {
			if (mapping === EquirectangularReflectionMapping) {
				texture.mapping = CubeReflectionMapping;
			} else if (mapping === EquirectangularRefractionMapping) {
				texture.mapping = CubeRefractionMapping;
			}

			return texture;
		}

		function get(texture) {
			if (texture && texture.isTexture) {
				const mapping = texture.mapping;

				if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
					if (cubemaps.has(texture)) {
						const cubemap = cubemaps.get(texture).texture;
						return mapTextureMapping(cubemap, texture.mapping);
					} else {
						const image = texture.image;

						if (image && image.height > 0) {
							const currentRenderTarget = renderer.getRenderTarget();
							const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
							renderTarget.fromEquirectangularTexture(renderer, texture);
							cubemaps.set(texture, renderTarget);
							renderer.setRenderTarget(currentRenderTarget);
							texture.addEventListener('dispose', onTextureDispose);
							return mapTextureMapping(renderTarget.texture, texture.mapping);
						} else {
							// image not yet ready. try the conversion next frame
							return null;
						}
					}
				}
			}

			return texture;
		}

		function onTextureDispose(event) {
			const texture = event.target;
			texture.removeEventListener('dispose', onTextureDispose);
			const cubemap = cubemaps.get(texture);

			if (cubemap !== undefined) {
				cubemaps.delete(texture);
				cubemap.dispose();
			}
		}

		function dispose() {
			cubemaps = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	function WebGLExtensions(gl) {
		const extensions = {};

		function getExtension(name) {
			if (extensions[name] !== undefined) {
				return extensions[name];
			}

			let extension;

			switch (name) {
				case 'WEBGL_depth_texture':
					extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
					break;

				default:
					extension = gl.getExtension(name);
			}

			extensions[name] = extension;
			return extension;
		}

		return {
			has: function (name) {
				return getExtension(name) !== null;
			},
			init: function (capabilities) {
				if (capabilities.isWebGL2) {
					getExtension('EXT_color_buffer_float');
				} else {
					getExtension('WEBGL_depth_texture');
					getExtension('OES_texture_float');
					getExtension('OES_texture_half_float');
					getExtension('OES_texture_half_float_linear');
					getExtension('OES_standard_derivatives');
					getExtension('OES_element_index_uint');
					getExtension('OES_vertex_array_object');
					getExtension('ANGLE_instanced_arrays');
				}

				getExtension('OES_texture_float_linear');
				getExtension('EXT_color_buffer_half_float');
			},
			get: function (name) {
				const extension = getExtension(name);

				if (extension === null) {
					console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
				}

				return extension;
			}
		};
	}

	function WebGLGeometries(gl, attributes, info, bindingStates) {
		const geometries = {};
		const wireframeAttributes = new WeakMap();

		function onGeometryDispose(event) {
			const geometry = event.target;

			if (geometry.index !== null) {
				attributes.remove(geometry.index);
			}

			for (const name in geometry.attributes) {
				attributes.remove(geometry.attributes[name]);
			}

			geometry.removeEventListener('dispose', onGeometryDispose);
			delete geometries[geometry.id];
			const attribute = wireframeAttributes.get(geometry);

			if (attribute) {
				attributes.remove(attribute);
				wireframeAttributes.delete(geometry);
			}

			bindingStates.releaseStatesOfGeometry(geometry);

			if (geometry.isInstancedBufferGeometry === true) {
				delete geometry._maxInstanceCount;
			} //


			info.memory.geometries--;
		}

		function get(object, geometry) {
			if (geometries[geometry.id] === true) return geometry;
			geometry.addEventListener('dispose', onGeometryDispose);
			geometries[geometry.id] = true;
			info.memory.geometries++;
			return geometry;
		}

		function update(geometry) {
			const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.

			for (const name in geometryAttributes) {
				attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
			} // morph targets


			const morphAttributes = geometry.morphAttributes;

			for (const name in morphAttributes) {
				const array = morphAttributes[name];

				for (let i = 0, l = array.length; i < l; i++) {
					attributes.update(array[i], gl.ARRAY_BUFFER);
				}
			}
		}

		function updateWireframeAttribute(geometry) {
			const indices = [];
			const geometryIndex = geometry.index;
			const geometryPosition = geometry.attributes.position;
			let version = 0;

			if (geometryIndex !== null) {
				const array = geometryIndex.array;
				version = geometryIndex.version;

				for (let i = 0, l = array.length; i < l; i += 3) {
					const a = array[i + 0];
					const b = array[i + 1];
					const c = array[i + 2];
					indices.push(a, b, b, c, c, a);
				}
			} else {
				const array = geometryPosition.array;
				version = geometryPosition.version;

				for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
					const a = i + 0;
					const b = i + 1;
					const c = i + 2;
					indices.push(a, b, b, c, c, a);
				}
			}

			const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
			attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates
			//

			const previousAttribute = wireframeAttributes.get(geometry);
			if (previousAttribute) attributes.remove(previousAttribute); //

			wireframeAttributes.set(geometry, attribute);
		}

		function getWireframeAttribute(geometry) {
			const currentAttribute = wireframeAttributes.get(geometry);

			if (currentAttribute) {
				const geometryIndex = geometry.index;

				if (geometryIndex !== null) {
					// if the attribute is obsolete, create a new one
					if (currentAttribute.version < geometryIndex.version) {
						updateWireframeAttribute(geometry);
					}
				}
			} else {
				updateWireframeAttribute(geometry);
			}

			return wireframeAttributes.get(geometry);
		}

		return {
			get: get,
			update: update,
			getWireframeAttribute: getWireframeAttribute
		};
	}

	function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		let mode;

		function setMode(value) {
			mode = value;
		}

		let type, bytesPerElement;

		function setIndex(value) {
			type = value.type;
			bytesPerElement = value.bytesPerElement;
		}

		function render(start, count) {
			gl.drawElements(mode, count, type, start * bytesPerElement);
			info.update(count, mode, 1);
		}

		function renderInstances(start, count, primcount) {
			if (primcount === 0) return;
			let extension, methodName;

			if (isWebGL2) {
				extension = gl;
				methodName = 'drawElementsInstanced';
			} else {
				extension = extensions.get('ANGLE_instanced_arrays');
				methodName = 'drawElementsInstancedANGLE';

				if (extension === null) {
					console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
					return;
				}
			}

			extension[methodName](mode, count, type, start * bytesPerElement, primcount);
			info.update(count, mode, primcount);
		} //


		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;
	}

	function WebGLInfo(gl) {
		const memory = {
			geometries: 0,
			textures: 0
		};
		const render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update(count, mode, instanceCount) {
			render.calls++;

			switch (mode) {
				case gl.TRIANGLES:
					render.triangles += instanceCount * (count / 3);
					break;

				case gl.LINES:
					render.lines += instanceCount * (count / 2);
					break;

				case gl.LINE_STRIP:
					render.lines += instanceCount * (count - 1);
					break;

				case gl.LINE_LOOP:
					render.lines += instanceCount * count;
					break;

				case gl.POINTS:
					render.points += instanceCount * count;
					break;

				default:
					console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
					break;
			}
		}

		function reset() {
			render.frame++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;
		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};
	}

	function numericalSort(a, b) {
		return a[0] - b[0];
	}

	function absNumericalSort(a, b) {
		return Math.abs(b[1]) - Math.abs(a[1]);
	}

	function WebGLMorphtargets(gl) {
		const influencesList = {};
		const morphInfluences = new Float32Array(8);
		const workInfluences = [];

		for (let i = 0; i < 8; i++) {
			workInfluences[i] = [i, 0];
		}

		function update(object, geometry, material, program) {
			const objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array
			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

			const length = objectInfluences === undefined ? 0 : objectInfluences.length;
			let influences = influencesList[geometry.id];

			if (influences === undefined) {
				// initialise list
				influences = [];

				for (let i = 0; i < length; i++) {
					influences[i] = [i, 0];
				}

				influencesList[geometry.id] = influences;
			} // Collect influences


			for (let i = 0; i < length; i++) {
				const influence = influences[i];
				influence[0] = i;
				influence[1] = objectInfluences[i];
			}

			influences.sort(absNumericalSort);

			for (let i = 0; i < 8; i++) {
				if (i < length && influences[i][1]) {
					workInfluences[i][0] = influences[i][0];
					workInfluences[i][1] = influences[i][1];
				} else {
					workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
					workInfluences[i][1] = 0;
				}
			}

			workInfluences.sort(numericalSort);
			const morphTargets = material.morphTargets && geometry.morphAttributes.position;
			const morphNormals = material.morphNormals && geometry.morphAttributes.normal;
			let morphInfluencesSum = 0;

			for (let i = 0; i < 8; i++) {
				const influence = workInfluences[i];
				const index = influence[0];
				const value = influence[1];

				if (index !== Number.MAX_SAFE_INTEGER && value) {
					if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {
						geometry.setAttribute('morphTarget' + i, morphTargets[index]);
					}

					if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {
						geometry.setAttribute('morphNormal' + i, morphNormals[index]);
					}

					morphInfluences[i] = value;
					morphInfluencesSum += value;
				} else {
					if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {
						geometry.deleteAttribute('morphTarget' + i);
					}

					if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {
						geometry.deleteAttribute('morphNormal' + i);
					}

					morphInfluences[i] = 0;
				}
			} // GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)


			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
			program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
			program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
		}

		return {
			update: update
		};
	}

	function WebGLObjects(gl, geometries, attributes, info) {
		let updateMap = new WeakMap();

		function update(object) {
			const frame = info.render.frame;
			const geometry = object.geometry;
			const buffergeometry = geometries.get(object, geometry); // Update once per frame

			if (updateMap.get(buffergeometry) !== frame) {
				geometries.update(buffergeometry);
				updateMap.set(buffergeometry, frame);
			}

			if (object.isInstancedMesh) {
				if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {
					object.addEventListener('dispose', onInstancedMeshDispose);
				}

				attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);

				if (object.instanceColor !== null) {
					attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
				}
			}

			return buffergeometry;
		}

		function dispose() {
			updateMap = new WeakMap();
		}

		function onInstancedMeshDispose(event) {
			const instancedMesh = event.target;
			instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
			attributes.remove(instancedMesh.instanceMatrix);
			if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
		}

		return {
			update: update,
			dispose: dispose
		};
	}

	class DataTexture2DArray extends Texture {
		constructor(data = null, width = 1, height = 1, depth = 1) {
			super(null);
			this.image = {
				data,
				width,
				height,
				depth
			};
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
			this.wrapR = ClampToEdgeWrapping;
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
			this.needsUpdate = true;
		}

	}

	DataTexture2DArray.prototype.isDataTexture2DArray = true;

	class DataTexture3D extends Texture {
		constructor(data = null, width = 1, height = 1, depth = 1) {
			// We're going to add .setXXX() methods for setting properties later.
			// Users can still set in DataTexture3D directly.
			//
			//	const texture = new THREE.DataTexture3D( data, width, height, depth );
			// 	texture.anisotropy = 16;
			//
			// See #14839
			super(null);
			this.image = {
				data,
				width,
				height,
				depth
			};
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
			this.wrapR = ClampToEdgeWrapping;
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
			this.needsUpdate = true;
		}

	}

	DataTexture3D.prototype.isDataTexture3D = true;

	/**
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *		the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with	name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */
	const emptyTexture = new Texture();
	const emptyTexture2dArray = new DataTexture2DArray();
	const emptyTexture3d = new DataTexture3D();
	const emptyCubeTexture = new CubeTexture(); // --- Utilities ---
	// Array Caches (provide typed arrays for temporary by size)

	const arrayCacheF32 = [];
	const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms

	const mat4array = new Float32Array(16);
	const mat3array = new Float32Array(9);
	const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices

	function flatten(array, nBlocks, blockSize) {
		const firstElem = array[0];
		if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		const n = nBlocks * blockSize;
		let r = arrayCacheF32[n];

		if (r === undefined) {
			r = new Float32Array(n);
			arrayCacheF32[n] = r;
		}

		if (nBlocks !== 0) {
			firstElem.toArray(r, 0);

			for (let i = 1, offset = 0; i !== nBlocks; ++i) {
				offset += blockSize;
				array[i].toArray(r, offset);
			}
		}

		return r;
	}

	function arraysEqual(a, b) {
		if (a.length !== b.length) return false;

		for (let i = 0, l = a.length; i < l; i++) {
			if (a[i] !== b[i]) return false;
		}

		return true;
	}

	function copyArray(a, b) {
		for (let i = 0, l = b.length; i < l; i++) {
			a[i] = b[i];
		}
	} // Texture unit allocation


	function allocTexUnits(textures, n) {
		let r = arrayCacheI32[n];

		if (r === undefined) {
			r = new Int32Array(n);
			arrayCacheI32[n] = r;
		}

		for (let i = 0; i !== n; ++i) {
			r[i] = textures.allocateTextureUnit();
		}

		return r;
	} // --- Setters ---
	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.
	// Single scalar


	function setValueV1f(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1f(this.addr, v);
		cache[0] = v;
	} // Single float vector (from flat array or THREE.VectorN)


	function setValueV2f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y) {
				gl.uniform2f(this.addr, v.x, v.y);
				cache[0] = v.x;
				cache[1] = v.y;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform2fv(this.addr, v);
			copyArray(cache, v);
		}
	}

	function setValueV3f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
				gl.uniform3f(this.addr, v.x, v.y, v.z);
				cache[0] = v.x;
				cache[1] = v.y;
				cache[2] = v.z;
			}
		} else if (v.r !== undefined) {
			if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
				gl.uniform3f(this.addr, v.r, v.g, v.b);
				cache[0] = v.r;
				cache[1] = v.g;
				cache[2] = v.b;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform3fv(this.addr, v);
			copyArray(cache, v);
		}
	}

	function setValueV4f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
				gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
				cache[0] = v.x;
				cache[1] = v.y;
				cache[2] = v.z;
				cache[3] = v.w;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform4fv(this.addr, v);
			copyArray(cache, v);
		}
	} // Single matrix (from flat array or THREE.MatrixN)


	function setValueM2(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix2fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat2array.set(elements);
			gl.uniformMatrix2fv(this.addr, false, mat2array);
			copyArray(cache, elements);
		}
	}

	function setValueM3(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix3fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat3array.set(elements);
			gl.uniformMatrix3fv(this.addr, false, mat3array);
			copyArray(cache, elements);
		}
	}

	function setValueM4(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix4fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat4array.set(elements);
			gl.uniformMatrix4fv(this.addr, false, mat4array);
			copyArray(cache, elements);
		}
	} // Single integer / boolean


	function setValueV1i(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1i(this.addr, v);
		cache[0] = v;
	} // Single integer / boolean vector (from flat array)


	function setValueV2i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform2iv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV3i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform3iv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV4i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform4iv(this.addr, v);
		copyArray(cache, v);
	} // Single unsigned integer


	function setValueV1ui(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1ui(this.addr, v);
		cache[0] = v;
	} // Single unsigned integer vector (from flat array)


	function setValueV2ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform2uiv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV3ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform3uiv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV4ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform4uiv(this.addr, v);
		copyArray(cache, v);
	} // Single texture (2D / Cube)


	function setValueT1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.safeSetTexture2D(v || emptyTexture, unit);
	}

	function setValueT3D1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTexture3D(v || emptyTexture3d, unit);
	}

	function setValueT6(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.safeSetTextureCube(v || emptyCubeTexture, unit);
	}

	function setValueT2DArray1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTexture2DArray(v || emptyTexture2dArray, unit);
	} // Helper to pick the right setter for the singular case


	function getSingularSetter(type) {
		switch (type) {
			case 0x1406:
				return setValueV1f;
			// FLOAT

			case 0x8b50:
				return setValueV2f;
			// _VEC2

			case 0x8b51:
				return setValueV3f;
			// _VEC3

			case 0x8b52:
				return setValueV4f;
			// _VEC4

			case 0x8b5a:
				return setValueM2;
			// _MAT2

			case 0x8b5b:
				return setValueM3;
			// _MAT3

			case 0x8b5c:
				return setValueM4;
			// _MAT4

			case 0x1404:
			case 0x8b56:
				return setValueV1i;
			// INT, BOOL

			case 0x8b53:
			case 0x8b57:
				return setValueV2i;
			// _VEC2

			case 0x8b54:
			case 0x8b58:
				return setValueV3i;
			// _VEC3

			case 0x8b55:
			case 0x8b59:
				return setValueV4i;
			// _VEC4

			case 0x1405:
				return setValueV1ui;
			// UINT

			case 0x8dc6:
				return setValueV2ui;
			// _VEC2

			case 0x8dc7:
				return setValueV3ui;
			// _VEC3

			case 0x8dc8:
				return setValueV4ui;
			// _VEC4

			case 0x8b5e: // SAMPLER_2D

			case 0x8d66: // SAMPLER_EXTERNAL_OES

			case 0x8dca: // INT_SAMPLER_2D

			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

			case 0x8b62:
				// SAMPLER_2D_SHADOW
				return setValueT1;

			case 0x8b5f: // SAMPLER_3D

			case 0x8dcb: // INT_SAMPLER_3D

			case 0x8dd3:
				// UNSIGNED_INT_SAMPLER_3D
				return setValueT3D1;

			case 0x8b60: // SAMPLER_CUBE

			case 0x8dcc: // INT_SAMPLER_CUBE

			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

			case 0x8dc5:
				// SAMPLER_CUBE_SHADOW
				return setValueT6;

			case 0x8dc1: // SAMPLER_2D_ARRAY

			case 0x8dcf: // INT_SAMPLER_2D_ARRAY

			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY

			case 0x8dc4:
				// SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArray1;
		}
	} // Array of scalars


	function setValueV1fArray(gl, v) {
		gl.uniform1fv(this.addr, v);
	} // Array of vectors (from flat array or array of THREE.VectorN)


	function setValueV2fArray(gl, v) {
		const data = flatten(v, this.size, 2);
		gl.uniform2fv(this.addr, data);
	}

	function setValueV3fArray(gl, v) {
		const data = flatten(v, this.size, 3);
		gl.uniform3fv(this.addr, data);
	}

	function setValueV4fArray(gl, v) {
		const data = flatten(v, this.size, 4);
		gl.uniform4fv(this.addr, data);
	} // Array of matrices (from flat array or array of THREE.MatrixN)


	function setValueM2Array(gl, v) {
		const data = flatten(v, this.size, 4);
		gl.uniformMatrix2fv(this.addr, false, data);
	}

	function setValueM3Array(gl, v) {
		const data = flatten(v, this.size, 9);
		gl.uniformMatrix3fv(this.addr, false, data);
	}

	function setValueM4Array(gl, v) {
		const data = flatten(v, this.size, 16);
		gl.uniformMatrix4fv(this.addr, false, data);
	} // Array of integer / boolean


	function setValueV1iArray(gl, v) {
		gl.uniform1iv(this.addr, v);
	} // Array of integer / boolean vectors (from flat array)


	function setValueV2iArray(gl, v) {
		gl.uniform2iv(this.addr, v);
	}

	function setValueV3iArray(gl, v) {
		gl.uniform3iv(this.addr, v);
	}

	function setValueV4iArray(gl, v) {
		gl.uniform4iv(this.addr, v);
	} // Array of unsigned integer


	function setValueV1uiArray(gl, v) {
		gl.uniform1uiv(this.addr, v);
	} // Array of unsigned integer vectors (from flat array)


	function setValueV2uiArray(gl, v) {
		gl.uniform2uiv(this.addr, v);
	}

	function setValueV3uiArray(gl, v) {
		gl.uniform3uiv(this.addr, v);
	}

	function setValueV4uiArray(gl, v) {
		gl.uniform4uiv(this.addr, v);
	} // Array of textures (2D / Cube)


	function setValueT1Array(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
		}
	}

	function setValueT6Array(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
		}
	} // Helper to pick the right setter for a pure (bottom-level) array


	function getPureArraySetter(type) {
		switch (type) {
			case 0x1406:
				return setValueV1fArray;
			// FLOAT

			case 0x8b50:
				return setValueV2fArray;
			// _VEC2

			case 0x8b51:
				return setValueV3fArray;
			// _VEC3

			case 0x8b52:
				return setValueV4fArray;
			// _VEC4

			case 0x8b5a:
				return setValueM2Array;
			// _MAT2

			case 0x8b5b:
				return setValueM3Array;
			// _MAT3

			case 0x8b5c:
				return setValueM4Array;
			// _MAT4

			case 0x1404:
			case 0x8b56:
				return setValueV1iArray;
			// INT, BOOL

			case 0x8b53:
			case 0x8b57:
				return setValueV2iArray;
			// _VEC2

			case 0x8b54:
			case 0x8b58:
				return setValueV3iArray;
			// _VEC3

			case 0x8b55:
			case 0x8b59:
				return setValueV4iArray;
			// _VEC4

			case 0x1405:
				return setValueV1uiArray;
			// UINT

			case 0x8dc6:
				return setValueV2uiArray;
			// _VEC2

			case 0x8dc7:
				return setValueV3uiArray;
			// _VEC3

			case 0x8dc8:
				return setValueV4uiArray;
			// _VEC4

			case 0x8b5e: // SAMPLER_2D

			case 0x8d66: // SAMPLER_EXTERNAL_OES

			case 0x8dca: // INT_SAMPLER_2D

			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

			case 0x8b62:
				// SAMPLER_2D_SHADOW
				return setValueT1Array;

			case 0x8b60: // SAMPLER_CUBE

			case 0x8dcc: // INT_SAMPLER_CUBE

			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

			case 0x8dc5:
				// SAMPLER_CUBE_SHADOW
				return setValueT6Array;
		}
	} // --- Uniform Classes ---


	function SingleUniform(id, activeInfo, addr) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
	}

	function PureArrayUniform(id, activeInfo, addr) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
	}

	PureArrayUniform.prototype.updateCache = function (data) {
		const cache = this.cache;

		if (data instanceof Float32Array && cache.length !== data.length) {
			this.cache = new Float32Array(data.length);
		}

		copyArray(cache, data);
	};

	function StructuredUniform(id) {
		this.id = id;
		this.seq = [];
		this.map = {};
	}

	StructuredUniform.prototype.setValue = function (gl, value, textures) {
		const seq = this.seq;

		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i];
			u.setValue(gl, value[u.id], textures);
		}
	}; // --- Top-level ---
	// Parser - builds up the property tree from the path strings


	const RePathPart = /(\w+)(\])?(\[|\.)?/g; // extracts
	// 	- the identifier (member name or array index)
	//	- followed by an optional right bracket (found when array index)
	//	- followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform(container, uniformObject) {
		container.seq.push(uniformObject);
		container.map[uniformObject.id] = uniformObject;
	}

	function parseUniform(activeInfo, addr, container) {
		const path = activeInfo.name,
					pathLength = path.length; // reset RegExp object, because of the early exit of a previous run

		RePathPart.lastIndex = 0;

		while (true) {
			const match = RePathPart.exec(path),
						matchEnd = RePathPart.lastIndex;
			let id = match[1];
			const idIsIndex = match[2] === ']',
						subscript = match[3];
			if (idIsIndex) id = id | 0; // convert to integer

			if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
				// bare name or "pure" bottom-level array "[0]" suffix
				addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
				break;
			} else {
				// step into inner node / create it in case it doesn't exist
				const map = container.map;
				let next = map[id];

				if (next === undefined) {
					next = new StructuredUniform(id);
					addUniform(container, next);
				}

				container = next;
			}
		}
	} // Root Container


	function WebGLUniforms(gl, program) {
		this.seq = [];
		this.map = {};
		const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

		for (let i = 0; i < n; ++i) {
			const info = gl.getActiveUniform(program, i),
						addr = gl.getUniformLocation(program, info.name);
			parseUniform(info, addr, this);
		}
	}

	WebGLUniforms.prototype.setValue = function (gl, name, value, textures) {
		const u = this.map[name];
		if (u !== undefined) u.setValue(gl, value, textures);
	};

	WebGLUniforms.prototype.setOptional = function (gl, object, name) {
		const v = object[name];
		if (v !== undefined) this.setValue(gl, name, v);
	}; // Static interface


	WebGLUniforms.upload = function (gl, seq, values, textures) {
		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i],
						v = values[u.id];

			if (v.needsUpdate !== false) {
				// note: always updating when .needsUpdate is undefined
				u.setValue(gl, v.value, textures);
			}
		}
	};

	WebGLUniforms.seqWithValue = function (seq, values) {
		const r = [];

		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i];
			if (u.id in values) r.push(u);
		}

		return r;
	};

	function WebGLShader(gl, type, string) {
		const shader = gl.createShader(type);
		gl.shaderSource(shader, string);
		gl.compileShader(shader);
		return shader;
	}

	let programIdCount = 0;

	function addLineNumbers(string) {
		const lines = string.split('\n');

		for (let i = 0; i < lines.length; i++) {
			lines[i] = i + 1 + ': ' + lines[i];
		}

		return lines.join('\n');
	}

	function getEncodingComponents(encoding) {
		switch (encoding) {
			case LinearEncoding:
				return ['Linear', '( value )'];

			case sRGBEncoding:
				return ['sRGB', '( value )'];

			case RGBEEncoding:
				return ['RGBE', '( value )'];

			case RGBM7Encoding:
				return ['RGBM', '( value, 7.0 )'];

			case RGBM16Encoding:
				return ['RGBM', '( value, 16.0 )'];

			case RGBDEncoding:
				return ['RGBD', '( value, 256.0 )'];

			case GammaEncoding:
				return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];

			case LogLuvEncoding:
				return ['LogLuv', '( value )'];

			default:
				console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
				return ['Linear', '( value )'];
		}
	}

	function getShaderErrors(gl, shader, type) {
		const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
		const log = gl.getShaderInfoLog(shader).trim();
		if (status && log === '') return ''; // --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		const source = gl.getShaderSource(shader);
		return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers(source);
	}

	function getTexelDecodingFunction(functionName, encoding) {
		const components = getEncodingComponents(encoding);
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';
	}

	function getTexelEncodingFunction(functionName, encoding) {
		const components = getEncodingComponents(encoding);
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
	}

	function getToneMappingFunction(functionName, toneMapping) {
		let toneMappingName;

		switch (toneMapping) {
			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			case CustomToneMapping:
				toneMappingName = 'Custom';
				break;

			default:
				console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
				toneMappingName = 'Linear';
		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
	}

	function generateExtensions(parameters) {
		const chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
		return chunks.filter(filterEmptyLine).join('\n');
	}

	function generateDefines(defines) {
		const chunks = [];

		for (const name in defines) {
			const value = defines[name];
			if (value === false) continue;
			chunks.push('#define ' + name + ' ' + value);
		}

		return chunks.join('\n');
	}

	function fetchAttributeLocations(gl, program) {
		const attributes = {};
		const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

		for (let i = 0; i < n; i++) {
			const info = gl.getActiveAttrib(program, i);
			const name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[name] = gl.getAttribLocation(program, name);
		}

		return attributes;
	}

	function filterEmptyLine(string) {
		return string !== '';
	}

	function replaceLightNums(string, parameters) {
		return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
	}

	function replaceClippingPlaneNums(string, parameters) {
		return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
	} // Resolve Includes


	const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes(string) {
		return string.replace(includePattern, includeReplacer);
	}

	function includeReplacer(match, include) {
		const string = ShaderChunk[include];

		if (string === undefined) {
			throw new Error('Can not resolve #include <' + include + '>');
		}

		return resolveIncludes(string);
	} // Unroll Loops


	const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
	const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

	function unrollLoops(string) {
		return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
	}

	function deprecatedLoopReplacer(match, start, end, snippet) {
		console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
		return loopReplacer(match, start, end, snippet);
	}

	function loopReplacer(match, start, end, snippet) {
		let string = '';

		for (let i = parseInt(start); i < parseInt(end); i++) {
			string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
		}

		return string;
	} //


	function generatePrecision(parameters) {
		let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

		if (parameters.precision === 'highp') {
			precisionstring += '\n#define HIGH_PRECISION';
		} else if (parameters.precision === 'mediump') {
			precisionstring += '\n#define MEDIUM_PRECISION';
		} else if (parameters.precision === 'lowp') {
			precisionstring += '\n#define LOW_PRECISION';
		}

		return precisionstring;
	}

	function generateShadowMapTypeDefine(parameters) {
		let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if (parameters.shadowMapType === PCFShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
		} else if (parameters.shadowMapType === PCFSoftShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
		} else if (parameters.shadowMapType === VSMShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
		}

		return shadowMapTypeDefine;
	}

	function generateEnvMapTypeDefine(parameters) {
		let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if (parameters.envMap) {
			switch (parameters.envMapMode) {
				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;
			}
		}

		return envMapTypeDefine;
	}

	function generateEnvMapModeDefine(parameters) {
		let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if (parameters.envMap) {
			switch (parameters.envMapMode) {
				case CubeRefractionMapping:
				case CubeUVRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;
			}
		}

		return envMapModeDefine;
	}

	function generateEnvMapBlendingDefine(parameters) {
		let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

		if (parameters.envMap) {
			switch (parameters.combine) {
				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;
			}
		}

		return envMapBlendingDefine;
	}

	function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
		const gl = renderer.getContext();
		const defines = parameters.defines;
		let vertexShader = parameters.vertexShader;
		let fragmentShader = parameters.fragmentShader;
		const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
		const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
		const envMapModeDefine = generateEnvMapModeDefine(parameters);
		const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
		const gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;
		const customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);
		const customDefines = generateDefines(defines);
		const program = gl.createProgram();
		let prefixVertex, prefixFragment;
		let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

		if (parameters.isRawShaderMaterial) {
			prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');

			if (prefixVertex.length > 0) {
				prefixVertex += '\n';
			}

			prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');

			if (prefixFragment.length > 0) {
				prefixFragment += '\n';
			}
		} else {
			prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '	attribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '	attribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '	attribute vec4 color;', '#elif defined( USE_COLOR )', '	attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
			prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer
			'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
			parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
		}

		vertexShader = resolveIncludes(vertexShader);
		vertexShader = replaceLightNums(vertexShader, parameters);
		vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
		fragmentShader = resolveIncludes(fragmentShader);
		fragmentShader = replaceLightNums(fragmentShader, parameters);
		fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
		vertexShader = unrollLoops(vertexShader);
		fragmentShader = unrollLoops(fragmentShader);

		if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
			// GLSL 3.0 conversion for built-in materials and ShaderMaterial
			versionString = '#version 300 es\n';
			prefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
			prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
		}

		const vertexGlsl = versionString + prefixVertex + vertexShader;
		const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
		const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
		gl.attachShader(program, glVertexShader);
		gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.

		if (parameters.index0AttributeName !== undefined) {
			gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
		} else if (parameters.morphTargets === true) {
			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation(program, 0, 'position');
		}

		gl.linkProgram(program); // check for link errors

		if (renderer.debug.checkShaderErrors) {
			const programLog = gl.getProgramInfoLog(program).trim();
			const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
			const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
			let runnable = true;
			let haveDiagnostics = true;

			if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
				runnable = false;
				const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
				const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');
				console.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);
			} else if (programLog !== '') {
				console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);
			} else if (vertexLog === '' || fragmentLog === '') {
				haveDiagnostics = false;
			}

			if (haveDiagnostics) {
				this.diagnostics = {
					runnable: runnable,
					programLog: programLog,
					vertexShader: {
						log: vertexLog,
						prefix: prefixVertex
					},
					fragmentShader: {
						log: fragmentLog,
						prefix: prefixFragment
					}
				};
			}
		} // Clean up
		// Crashes in iOS9 and iOS10. #18402
		// gl.detachShader( program, glVertexShader );
		// gl.detachShader( program, glFragmentShader );


		gl.deleteShader(glVertexShader);
		gl.deleteShader(glFragmentShader); // set up caching for uniform locations

		let cachedUniforms;

		this.getUniforms = function () {
			if (cachedUniforms === undefined) {
				cachedUniforms = new WebGLUniforms(gl, program);
			}

			return cachedUniforms;
		}; // set up caching for attribute locations


		let cachedAttributes;

		this.getAttributes = function () {
			if (cachedAttributes === undefined) {
				cachedAttributes = fetchAttributeLocations(gl, program);
			}

			return cachedAttributes;
		}; // free resource


		this.destroy = function () {
			bindingStates.releaseStatesOfProgram(this);
			gl.deleteProgram(program);
			this.program = undefined;
		}; //


		this.name = parameters.shaderName;
		this.id = programIdCount++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;
		return this;
	}

	function WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {
		const programs = [];
		const isWebGL2 = capabilities.isWebGL2;
		const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		const floatVertexTextures = capabilities.floatVertexTextures;
		const maxVertexUniforms = capabilities.maxVertexUniforms;
		const vertexTextures = capabilities.vertexTextures;
		let precision = capabilities.precision;
		const shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'toon',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};
		const parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];

		function getMaxBones(object) {
			const skeleton = object.skeleton;
			const bones = skeleton.bones;

			if (floatVertexTextures) {
				return 1024;
			} else {
				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//	- leave some extra space for other uniforms
				//	- limit here is ANGLE's 254 max uniform vectors
				//		(up to 54 should be safe)
				const nVertexUniforms = maxVertexUniforms;
				const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
				const maxBones = Math.min(nVertexMatrices, bones.length);

				if (maxBones < bones.length) {
					console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
					return 0;
				}

				return maxBones;
			}
		}

		function getTextureEncodingFromMap(map) {
			let encoding;

			if (map && map.isTexture) {
				encoding = map.encoding;
			} else if (map && map.isWebGLRenderTarget) {
				console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.');
				encoding = map.texture.encoding;
			} else {
				encoding = LinearEncoding;
			}

			return encoding;
		}

		function getParameters(material, lights, shadows, scene, object) {
			const fog = scene.fog;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;
			const envMap = cubemaps.get(material.envMap || environment);
			const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;

			if (material.precision !== null) {
				precision = capabilities.getMaxPrecision(material.precision);

				if (precision !== material.precision) {
					console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
				}
			}

			let vertexShader, fragmentShader;

			if (shaderID) {
				const shader = ShaderLib[shaderID];
				vertexShader = shader.vertexShader;
				fragmentShader = shader.fragmentShader;
			} else {
				vertexShader = material.vertexShader;
				fragmentShader = material.fragmentShader;
			}

			const currentRenderTarget = renderer.getRenderTarget();
			const parameters = {
				isWebGL2: isWebGL2,
				shaderID: shaderID,
				shaderName: material.type,
				vertexShader: vertexShader,
				fragmentShader: fragmentShader,
				defines: material.defines,
				isRawShaderMaterial: material.isRawShaderMaterial === true,
				glslVersion: material.glslVersion,
				precision: precision,
				instancing: object.isInstancedMesh === true,
				instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
				supportsVertexTextures: vertexTextures,
				outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
				map: !!material.map,
				mapEncoding: getTextureEncodingFromMap(material.map),
				matcap: !!material.matcap,
				matcapEncoding: getTextureEncodingFromMap(material.matcap),
				envMap: !!envMap,
				envMapMode: envMap && envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap(envMap),
				envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
				lightMap: !!material.lightMap,
				lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
				aoMap: !!material.aoMap,
				emissiveMap: !!material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
				bumpMap: !!material.bumpMap,
				normalMap: !!material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
				clearcoatMap: !!material.clearcoatMap,
				clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
				clearcoatNormalMap: !!material.clearcoatNormalMap,
				displacementMap: !!material.displacementMap,
				roughnessMap: !!material.roughnessMap,
				metalnessMap: !!material.metalnessMap,
				specularMap: !!material.specularMap,
				alphaMap: !!material.alphaMap,
				gradientMap: !!material.gradientMap,
				sheen: !!material.sheen,
				transmissionMap: !!material.transmissionMap,
				combine: material.combine,
				vertexTangents: material.normalMap && material.vertexTangents,
				vertexColors: material.vertexColors,
				vertexAlphas: material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
				vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
				uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,
				fog: !!fog,
				useFog: material.fog,
				fogExp2: fog && fog.isFogExp2,
				flatShading: !!material.flatShading,
				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: logarithmicDepthBuffer,
				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: floatVertexTextures,
				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,
				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,
				numClippingPlanes: clipping.numPlanes,
				numClipIntersection: clipping.numIntersection,
				dithering: material.dithering,
				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,
				toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,
				premultipliedAlpha: material.premultipliedAlpha,
				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,
				depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
				index0AttributeName: material.index0AttributeName,
				extensionDerivatives: material.extensions && material.extensions.derivatives,
				extensionFragDepth: material.extensions && material.extensions.fragDepth,
				extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
				extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
				rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
				rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
				rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
				customProgramCacheKey: material.customProgramCacheKey()
			};
			return parameters;
		}

		function getProgramCacheKey(parameters) {
			const array = [];

			if (parameters.shaderID) {
				array.push(parameters.shaderID);
			} else {
				array.push(parameters.fragmentShader);
				array.push(parameters.vertexShader);
			}

			if (parameters.defines !== undefined) {
				for (const name in parameters.defines) {
					array.push(name);
					array.push(parameters.defines[name]);
				}
			}

			if (parameters.isRawShaderMaterial === false) {
				for (let i = 0; i < parameterNames.length; i++) {
					array.push(parameters[parameterNames[i]]);
				}

				array.push(renderer.outputEncoding);
				array.push(renderer.gammaFactor);
			}

			array.push(parameters.customProgramCacheKey);
			return array.join();
		}

		function getUniforms(material) {
			const shaderID = shaderIDs[material.type];
			let uniforms;

			if (shaderID) {
				const shader = ShaderLib[shaderID];
				uniforms = UniformsUtils.clone(shader.uniforms);
			} else {
				uniforms = material.uniforms;
			}

			return uniforms;
		}

		function acquireProgram(parameters, cacheKey) {
			let program; // Check if code has been already compiled

			for (let p = 0, pl = programs.length; p < pl; p++) {
				const preexistingProgram = programs[p];

				if (preexistingProgram.cacheKey === cacheKey) {
					program = preexistingProgram;
					++program.usedTimes;
					break;
				}
			}

			if (program === undefined) {
				program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
				programs.push(program);
			}

			return program;
		}

		function releaseProgram(program) {
			if (--program.usedTimes === 0) {
				// Remove from unordered set
				const i = programs.indexOf(program);
				programs[i] = programs[programs.length - 1];
				programs.pop(); // Free WebGL resources

				program.destroy();
			}
		}

		return {
			getParameters: getParameters,
			getProgramCacheKey: getProgramCacheKey,
			getUniforms: getUniforms,
			acquireProgram: acquireProgram,
			releaseProgram: releaseProgram,
			// Exposed for resource monitoring & error feedback via renderer.info:
			programs: programs
		};
	}

	function WebGLProperties() {
		let properties = new WeakMap();

		function get(object) {
			let map = properties.get(object);

			if (map === undefined) {
				map = {};
				properties.set(object, map);
			}

			return map;
		}

		function remove(object) {
			properties.delete(object);
		}

		function update(object, key, value) {
			properties.get(object)[key] = value;
		}

		function dispose() {
			properties = new WeakMap();
		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};
	}

	function painterSortStable(a, b) {
		if (a.groupOrder !== b.groupOrder) {
			return a.groupOrder - b.groupOrder;
		} else if (a.renderOrder !== b.renderOrder) {
			return a.renderOrder - b.renderOrder;
		} else if (a.program !== b.program) {
			return a.program.id - b.program.id;
		} else if (a.material.id !== b.material.id) {
			return a.material.id - b.material.id;
		} else if (a.z !== b.z) {
			return a.z - b.z;
		} else {
			return a.id - b.id;
		}
	}

	function reversePainterSortStable(a, b) {
		if (a.groupOrder !== b.groupOrder) {
			return a.groupOrder - b.groupOrder;
		} else if (a.renderOrder !== b.renderOrder) {
			return a.renderOrder - b.renderOrder;
		} else if (a.z !== b.z) {
			return b.z - a.z;
		} else {
			return a.id - b.id;
		}
	}

	function WebGLRenderList(properties) {
		const renderItems = [];
		let renderItemsIndex = 0;
		const opaque = [];
		const transparent = [];
		const defaultProgram = {
			id: -1
		};

		function init() {
			renderItemsIndex = 0;
			opaque.length = 0;
			transparent.length = 0;
		}

		function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
			let renderItem = renderItems[renderItemsIndex];
			const materialProperties = properties.get(material);

			if (renderItem === undefined) {
				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: materialProperties.program || defaultProgram,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};
				renderItems[renderItemsIndex] = renderItem;
			} else {
				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = materialProperties.program || defaultProgram;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;
			}

			renderItemsIndex++;
			return renderItem;
		}

		function push(object, geometry, material, groupOrder, z, group) {
			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
			(material.transparent === true ? transparent : opaque).push(renderItem);
		}

		function unshift(object, geometry, material, groupOrder, z, group) {
			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
			(material.transparent === true ? transparent : opaque).unshift(renderItem);
		}

		function sort(customOpaqueSort, customTransparentSort) {
			if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
			if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
		}

		function finish() {
			// Clear references from inactive renderItems in the list
			for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
				const renderItem = renderItems[i];
				if (renderItem.id === null) break;
				renderItem.id = null;
				renderItem.object = null;
				renderItem.geometry = null;
				renderItem.material = null;
				renderItem.program = null;
				renderItem.group = null;
			}
		}

		return {
			opaque: opaque,
			transparent: transparent,
			init: init,
			push: push,
			unshift: unshift,
			finish: finish,
			sort: sort
		};
	}

	function WebGLRenderLists(properties) {
		let lists = new WeakMap();

		function get(scene, renderCallDepth) {
			let list;

			if (lists.has(scene) === false) {
				list = new WebGLRenderList(properties);
				lists.set(scene, [list]);
			} else {
				if (renderCallDepth >= lists.get(scene).length) {
					list = new WebGLRenderList(properties);
					lists.get(scene).push(list);
				} else {
					list = lists.get(scene)[renderCallDepth];
				}
			}

			return list;
		}

		function dispose() {
			lists = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	function UniformsCache() {
		const lights = {};
		return {
			get: function (light) {
				if (lights[light.id] !== undefined) {
					return lights[light.id];
				}

				let uniforms;

				switch (light.type) {
					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
						};
						break;
				}

				lights[light.id] = uniforms;
				return uniforms;
			}
		};
	}

	function ShadowUniformsCache() {
		const lights = {};
		return {
			get: function (light) {
				if (lights[light.id] !== undefined) {
					return lights[light.id];
				}

				let uniforms;

				switch (light.type) {
					case 'DirectionalLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;
					// TODO (abelnation): set RectAreaLight shadow uniforms
				}

				lights[light.id] = uniforms;
				return uniforms;
			}
		};
	}

	let nextVersion = 0;

	function shadowCastingLightsFirst(lightA, lightB) {
		return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
	}

	function WebGLLights(extensions, capabilities) {
		const cache = new UniformsCache();
		const shadowCache = ShadowUniformsCache();
		const state = {
			version: 0,
			hash: {
				directionalLength: -1,
				pointLength: -1,
				spotLength: -1,
				rectAreaLength: -1,
				hemiLength: -1,
				numDirectionalShadows: -1,
				numPointShadows: -1,
				numSpotShadows: -1
			},
			ambient: [0, 0, 0],
			probe: [],
			directional: [],
			directionalShadow: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadow: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			rectAreaLTC1: null,
			rectAreaLTC2: null,
			point: [],
			pointShadow: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: []
		};

		for (let i = 0; i < 9; i++) state.probe.push(new Vector3());

		const vector3 = new Vector3();
		const matrix4 = new Matrix4();
		const matrix42 = new Matrix4();

		function setup(lights) {
			let r = 0,
					g = 0,
					b = 0;

			for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;
			let numDirectionalShadows = 0;
			let numPointShadows = 0;
			let numSpotShadows = 0;
			lights.sort(shadowCastingLightsFirst);

			for (let i = 0, l = lights.length; i < l; i++) {
				const light = lights[i];
				const color = light.color;
				const intensity = light.intensity;
				const distance = light.distance;
				const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;

				if (light.isAmbientLight) {
					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;
				} else if (light.isLightProbe) {
					for (let j = 0; j < 9; j++) {
						state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
					}
				} else if (light.isDirectionalLight) {
					const uniforms = cache.get(light);
					uniforms.color.copy(light.color).multiplyScalar(light.intensity);

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						state.directionalShadow[directionalLength] = shadowUniforms;
						state.directionalShadowMap[directionalLength] = shadowMap;
						state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
						numDirectionalShadows++;
					}

					state.directional[directionalLength] = uniforms;
					directionalLength++;
				} else if (light.isSpotLight) {
					const uniforms = cache.get(light);
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.color.copy(color).multiplyScalar(intensity);
					uniforms.distance = distance;
					uniforms.coneCos = Math.cos(light.angle);
					uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
					uniforms.decay = light.decay;

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						state.spotShadow[spotLength] = shadowUniforms;
						state.spotShadowMap[spotLength] = shadowMap;
						state.spotShadowMatrix[spotLength] = light.shadow.matrix;
						numSpotShadows++;
					}

					state.spot[spotLength] = uniforms;
					spotLength++;
				} else if (light.isRectAreaLight) {
					const uniforms = cache.get(light); // (a) intensity is the total visible light emitted
					//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
					// (b) intensity is the brightness of the light

					uniforms.color.copy(color).multiplyScalar(intensity);
					uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
					uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
					state.rectArea[rectAreaLength] = uniforms;
					rectAreaLength++;
				} else if (light.isPointLight) {
					const uniforms = cache.get(light);
					uniforms.color.copy(light.color).multiplyScalar(light.intensity);
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						shadowUniforms.shadowCameraNear = shadow.camera.near;
						shadowUniforms.shadowCameraFar = shadow.camera.far;
						state.pointShadow[pointLength] = shadowUniforms;
						state.pointShadowMap[pointLength] = shadowMap;
						state.pointShadowMatrix[pointLength] = light.shadow.matrix;
						numPointShadows++;
					}

					state.point[pointLength] = uniforms;
					pointLength++;
				} else if (light.isHemisphereLight) {
					const uniforms = cache.get(light);
					uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
					uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
					state.hemi[hemiLength] = uniforms;
					hemiLength++;
				}
			}

			if (rectAreaLength > 0) {
				if (capabilities.isWebGL2) {
					// WebGL 2
					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
				} else {
					// WebGL 1
					if (extensions.has('OES_texture_float_linear') === true) {
						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
					} else if (extensions.has('OES_texture_half_float_linear') === true) {
						state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
						state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
					} else {
						console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');
					}
				}
			}

			state.ambient[0] = r;
			state.ambient[1] = g;
			state.ambient[2] = b;
			const hash = state.hash;

			if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;
				state.directionalShadow.length = numDirectionalShadows;
				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadow.length = numPointShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadow.length = numSpotShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotShadowMatrix.length = numSpotShadows;
				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;
				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;
				state.version = nextVersion++;
			}
		}

		function setupView(lights, camera) {
			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;
			const viewMatrix = camera.matrixWorldInverse;

			for (let i = 0, l = lights.length; i < l; i++) {
				const light = lights[i];

				if (light.isDirectionalLight) {
					const uniforms = state.directional[directionalLength];
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					vector3.setFromMatrixPosition(light.target.matrixWorld);
					uniforms.direction.sub(vector3);
					uniforms.direction.transformDirection(viewMatrix);
					directionalLength++;
				} else if (light.isSpotLight) {
					const uniforms = state.spot[spotLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix);
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					vector3.setFromMatrixPosition(light.target.matrixWorld);
					uniforms.direction.sub(vector3);
					uniforms.direction.transformDirection(viewMatrix);
					spotLength++;
				} else if (light.isRectAreaLight) {
					const uniforms = state.rectArea[rectAreaLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors

					matrix42.identity();
					matrix4.copy(light.matrixWorld);
					matrix4.premultiply(viewMatrix);
					matrix42.extractRotation(matrix4);
					uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
					uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
					uniforms.halfWidth.applyMatrix4(matrix42);
					uniforms.halfHeight.applyMatrix4(matrix42);
					rectAreaLength++;
				} else if (light.isPointLight) {
					const uniforms = state.point[pointLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix);
					pointLength++;
				} else if (light.isHemisphereLight) {
					const uniforms = state.hemi[hemiLength];
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					uniforms.direction.transformDirection(viewMatrix);
					uniforms.direction.normalize();
					hemiLength++;
				}
			}
		}

		return {
			setup: setup,
			setupView: setupView,
			state: state
		};
	}

	function WebGLRenderState(extensions, capabilities) {
		const lights = new WebGLLights(extensions, capabilities);
		const lightsArray = [];
		const shadowsArray = [];

		function init() {
			lightsArray.length = 0;
			shadowsArray.length = 0;
		}

		function pushLight(light) {
			lightsArray.push(light);
		}

		function pushShadow(shadowLight) {
			shadowsArray.push(shadowLight);
		}

		function setupLights() {
			lights.setup(lightsArray);
		}

		function setupLightsView(camera) {
			lights.setupView(lightsArray, camera);
		}

		const state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,
			lights: lights
		};
		return {
			init: init,
			state: state,
			setupLights: setupLights,
			setupLightsView: setupLightsView,
			pushLight: pushLight,
			pushShadow: pushShadow
		};
	}

	function WebGLRenderStates(extensions, capabilities) {
		let renderStates = new WeakMap();

		function get(scene, renderCallDepth = 0) {
			let renderState;

			if (renderStates.has(scene) === false) {
				renderState = new WebGLRenderState(extensions, capabilities);
				renderStates.set(scene, [renderState]);
			} else {
				if (renderCallDepth >= renderStates.get(scene).length) {
					renderState = new WebGLRenderState(extensions, capabilities);
					renderStates.get(scene).push(renderState);
				} else {
					renderState = renderStates.get(scene)[renderCallDepth];
				}
			}

			return renderState;
		}

		function dispose() {
			renderStates = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	/**
	 * parameters = {
	 *
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>
	 * }
	 */

	class MeshDepthMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshDepthMaterial';
			this.depthPacking = BasicDepthPacking;
			this.skinning = false;
			this.morphTargets = false;
			this.map = null;
			this.alphaMap = null;
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.depthPacking = source.depthPacking;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			return this;
		}

	}

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	/**
	 * parameters = {
	 *
	 *	referencePosition: <float>,
	 *	nearDistance: <float>,
	 *	farDistance: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>
	 *
	 * }
	 */

	class MeshDistanceMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshDistanceMaterial';
			this.referencePosition = new Vector3();
			this.nearDistance = 1;
			this.farDistance = 1000;
			this.skinning = false;
			this.morphTargets = false;
			this.map = null;
			this.alphaMap = null;
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.fog = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.referencePosition.copy(source.referencePosition);
			this.nearDistance = source.nearDistance;
			this.farDistance = source.farDistance;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			return this;
		}

	}

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

	function WebGLShadowMap(_renderer, _objects, _capabilities) {
		let _frustum = new Frustum();

		const _shadowMapSize = new Vector2(),
					_viewportSize = new Vector2(),
					_viewport = new Vector4(),
					_depthMaterials = [],
					_distanceMaterials = [],
					_materialCache = {},
					_maxTextureSize = _capabilities.maxTextureSize;

		const shadowSide = {
			0: BackSide,
			1: FrontSide,
			2: DoubleSide
		};
		const shadowMaterialVertical = new ShaderMaterial({
			defines: {
				SAMPLE_RATE: 2.0 / 8.0,
				HALF_SAMPLE_RATE: 1.0 / 8.0
			},
			uniforms: {
				shadow_pass: {
					value: null
				},
				resolution: {
					value: new Vector2()
				},
				radius: {
					value: 4.0
				}
			},
			vertexShader: vsm_vert,
			fragmentShader: vsm_frag
		});
		const shadowMaterialHorizontal = shadowMaterialVertical.clone();
		shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
		const fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
		const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
		const scope = this;
		this.enabled = false;
		this.autoUpdate = true;
		this.needsUpdate = false;
		this.type = PCFShadowMap;

		this.render = function (lights, scene, camera) {
			if (scope.enabled === false) return;
			if (scope.autoUpdate === false && scope.needsUpdate === false) return;
			if (lights.length === 0) return;

			const currentRenderTarget = _renderer.getRenderTarget();

			const activeCubeFace = _renderer.getActiveCubeFace();

			const activeMipmapLevel = _renderer.getActiveMipmapLevel();

			const _state = _renderer.state; // Set GL state for depth map.

			_state.setBlending(NoBlending);

			_state.buffers.color.setClear(1, 1, 1, 1);

			_state.buffers.depth.setTest(true);

			_state.setScissorTest(false); // render depth map


			for (let i = 0, il = lights.length; i < il; i++) {
				const light = lights[i];
				const shadow = light.shadow;

				if (shadow === undefined) {
					console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
					continue;
				}

				if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;

				_shadowMapSize.copy(shadow.mapSize);

				const shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply(shadowFrameExtents);

				_viewportSize.copy(shadow.mapSize);

				if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
					if (_shadowMapSize.x > _maxTextureSize) {
						_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;
					}

					if (_shadowMapSize.y > _maxTextureSize) {
						_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;
					}
				}

				if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
					const pars = {
						minFilter: LinearFilter,
						magFilter: LinearFilter,
						format: RGBAFormat
					};
					shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.map.texture.name = light.name + '.shadowMap';
					shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.camera.updateProjectionMatrix();
				}

				if (shadow.map === null) {
					const pars = {
						minFilter: NearestFilter,
						magFilter: NearestFilter,
						format: RGBAFormat
					};
					shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.map.texture.name = light.name + '.shadowMap';
					shadow.camera.updateProjectionMatrix();
				}

				_renderer.setRenderTarget(shadow.map);

				_renderer.clear();

				const viewportCount = shadow.getViewportCount();

				for (let vp = 0; vp < viewportCount; vp++) {
					const viewport = shadow.getViewport(vp);

					_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);

					_state.viewport(_viewport);

					shadow.updateMatrices(light, vp);
					_frustum = shadow.getFrustum();
					renderObject(scene, camera, shadow.camera, light, this.type);
				} // do blur pass for VSM


				if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
					VSMPass(shadow, camera);
				}

				shadow.needsUpdate = false;
			}

			scope.needsUpdate = false;

			_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
		};

		function VSMPass(shadow, camera) {
			const geometry = _objects.update(fullScreenMesh); // vertical pass


			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;

			_renderer.setRenderTarget(shadow.mapPass);

			_renderer.clear();

			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass


			shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;

			_renderer.setRenderTarget(shadow.map);

			_renderer.clear();

			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
		}

		function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
			const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
			let material = _depthMaterials[index];

			if (material === undefined) {
				material = new MeshDepthMaterial({
					depthPacking: RGBADepthPacking,
					morphTargets: useMorphing,
					skinning: useSkinning
				});
				_depthMaterials[index] = material;
			}

			return material;
		}

		function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
			const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
			let material = _distanceMaterials[index];

			if (material === undefined) {
				material = new MeshDistanceMaterial({
					morphTargets: useMorphing,
					skinning: useSkinning
				});
				_distanceMaterials[index] = material;
			}

			return material;
		}

		function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
			let result = null;
			let getMaterialVariant = getDepthMaterialVariant;
			let customMaterial = object.customDepthMaterial;

			if (light.isPointLight === true) {
				getMaterialVariant = getDistanceMaterialVariant;
				customMaterial = object.customDistanceMaterial;
			}

			if (customMaterial === undefined) {
				let useMorphing = false;

				if (material.morphTargets === true) {
					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
				}

				let useSkinning = false;

				if (object.isSkinnedMesh === true) {
					if (material.skinning === true) {
						useSkinning = true;
					} else {
						console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);
					}
				}

				const useInstancing = object.isInstancedMesh === true;
				result = getMaterialVariant(useMorphing, useSkinning, useInstancing);
			} else {
				result = customMaterial;
			}

			if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
				// in this case we need a unique material instance reflecting the
				// appropriate state
				const keyA = result.uuid,
							keyB = material.uuid;
				let materialsForVariant = _materialCache[keyA];

				if (materialsForVariant === undefined) {
					materialsForVariant = {};
					_materialCache[keyA] = materialsForVariant;
				}

				let cachedMaterial = materialsForVariant[keyB];

				if (cachedMaterial === undefined) {
					cachedMaterial = result.clone();
					materialsForVariant[keyB] = cachedMaterial;
				}

				result = cachedMaterial;
			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if (type === VSMShadowMap) {
				result.side = material.shadowSide !== null ? material.shadowSide : material.side;
			} else {
				result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
			}

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;
			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
				result.referencePosition.setFromMatrixPosition(light.matrixWorld);
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;
			}

			return result;
		}

		function renderObject(object, camera, shadowCamera, light, type) {
			if (object.visible === false) return;
			const visible = object.layers.test(camera.layers);

			if (visible && (object.isMesh || object.isLine || object.isPoints)) {
				if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
					object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);

					const geometry = _objects.update(object);

					const material = object.material;

					if (Array.isArray(material)) {
						const groups = geometry.groups;

						for (let k = 0, kl = groups.length; k < kl; k++) {
							const group = groups[k];
							const groupMaterial = material[group.materialIndex];

							if (groupMaterial && groupMaterial.visible) {
								const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);

								_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
							}
						}
					} else if (material.visible) {
						const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);

						_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
					}
				}
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				renderObject(children[i], camera, shadowCamera, light, type);
			}
		}
	}

	function WebGLState(gl, extensions, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {
			let locked = false;
			const color = new Vector4();
			let currentColorMask = null;
			const currentColorClear = new Vector4(0, 0, 0, 0);
			return {
				setMask: function (colorMask) {
					if (currentColorMask !== colorMask && !locked) {
						gl.colorMask(colorMask, colorMask, colorMask, colorMask);
						currentColorMask = colorMask;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (r, g, b, a, premultipliedAlpha) {
					if (premultipliedAlpha === true) {
						r *= a;
						g *= a;
						b *= a;
					}

					color.set(r, g, b, a);

					if (currentColorClear.equals(color) === false) {
						gl.clearColor(r, g, b, a);
						currentColorClear.copy(color);
					}
				},
				reset: function () {
					locked = false;
					currentColorMask = null;
					currentColorClear.set(-1, 0, 0, 0); // set to invalid state
				}
			};
		}

		function DepthBuffer() {
			let locked = false;
			let currentDepthMask = null;
			let currentDepthFunc = null;
			let currentDepthClear = null;
			return {
				setTest: function (depthTest) {
					if (depthTest) {
						enable(gl.DEPTH_TEST);
					} else {
						disable(gl.DEPTH_TEST);
					}
				},
				setMask: function (depthMask) {
					if (currentDepthMask !== depthMask && !locked) {
						gl.depthMask(depthMask);
						currentDepthMask = depthMask;
					}
				},
				setFunc: function (depthFunc) {
					if (currentDepthFunc !== depthFunc) {
						if (depthFunc) {
							switch (depthFunc) {
								case NeverDepth:
									gl.depthFunc(gl.NEVER);
									break;

								case AlwaysDepth:
									gl.depthFunc(gl.ALWAYS);
									break;

								case LessDepth:
									gl.depthFunc(gl.LESS);
									break;

								case LessEqualDepth:
									gl.depthFunc(gl.LEQUAL);
									break;

								case EqualDepth:
									gl.depthFunc(gl.EQUAL);
									break;

								case GreaterEqualDepth:
									gl.depthFunc(gl.GEQUAL);
									break;

								case GreaterDepth:
									gl.depthFunc(gl.GREATER);
									break;

								case NotEqualDepth:
									gl.depthFunc(gl.NOTEQUAL);
									break;

								default:
									gl.depthFunc(gl.LEQUAL);
							}
						} else {
							gl.depthFunc(gl.LEQUAL);
						}

						currentDepthFunc = depthFunc;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (depth) {
					if (currentDepthClear !== depth) {
						gl.clearDepth(depth);
						currentDepthClear = depth;
					}
				},
				reset: function () {
					locked = false;
					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;
				}
			};
		}

		function StencilBuffer() {
			let locked = false;
			let currentStencilMask = null;
			let currentStencilFunc = null;
			let currentStencilRef = null;
			let currentStencilFuncMask = null;
			let currentStencilFail = null;
			let currentStencilZFail = null;
			let currentStencilZPass = null;
			let currentStencilClear = null;
			return {
				setTest: function (stencilTest) {
					if (!locked) {
						if (stencilTest) {
							enable(gl.STENCIL_TEST);
						} else {
							disable(gl.STENCIL_TEST);
						}
					}
				},
				setMask: function (stencilMask) {
					if (currentStencilMask !== stencilMask && !locked) {
						gl.stencilMask(stencilMask);
						currentStencilMask = stencilMask;
					}
				},
				setFunc: function (stencilFunc, stencilRef, stencilMask) {
					if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
						gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;
					}
				},
				setOp: function (stencilFail, stencilZFail, stencilZPass) {
					if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
						gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (stencil) {
					if (currentStencilClear !== stencil) {
						gl.clearStencil(stencil);
						currentStencilClear = stencil;
					}
				},
				reset: function () {
					locked = false;
					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;
				}
			};
		} //


		const colorBuffer = new ColorBuffer();
		const depthBuffer = new DepthBuffer();
		const stencilBuffer = new StencilBuffer();
		let enabledCapabilities = {};
		let xrFramebuffer = null;
		let currentBoundFramebuffers = {};
		let currentProgram = null;
		let currentBlendingEnabled = false;
		let currentBlending = null;
		let currentBlendEquation = null;
		let currentBlendSrc = null;
		let currentBlendDst = null;
		let currentBlendEquationAlpha = null;
		let currentBlendSrcAlpha = null;
		let currentBlendDstAlpha = null;
		let currentPremultipledAlpha = false;
		let currentFlipSided = null;
		let currentCullFace = null;
		let currentLineWidth = null;
		let currentPolygonOffsetFactor = null;
		let currentPolygonOffsetUnits = null;
		const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
		let lineWidthAvailable = false;
		let version = 0;
		const glVersion = gl.getParameter(gl.VERSION);

		if (glVersion.indexOf('WebGL') !== -1) {
			version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
			lineWidthAvailable = version >= 1.0;
		} else if (glVersion.indexOf('OpenGL ES') !== -1) {
			version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
			lineWidthAvailable = version >= 2.0;
		}

		let currentTextureSlot = null;
		let currentBoundTextures = {};
		const currentScissor = new Vector4(0, 0, gl.canvas.width, gl.canvas.height);
		const currentViewport = new Vector4(0, 0, gl.canvas.width, gl.canvas.height);

		function createTexture(type, target, count) {
			const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.

			const texture = gl.createTexture();
			gl.bindTexture(type, texture);
			gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
			gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

			for (let i = 0; i < count; i++) {
				gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
			}

			return texture;
		}

		const emptyTextures = {};
		emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
		emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init

		colorBuffer.setClear(0, 0, 0, 1);
		depthBuffer.setClear(1);
		stencilBuffer.setClear(0);
		enable(gl.DEPTH_TEST);
		depthBuffer.setFunc(LessEqualDepth);
		setFlipSided(false);
		setCullFace(CullFaceBack);
		enable(gl.CULL_FACE);
		setBlending(NoBlending); //

		function enable(id) {
			if (enabledCapabilities[id] !== true) {
				gl.enable(id);
				enabledCapabilities[id] = true;
			}
		}

		function disable(id) {
			if (enabledCapabilities[id] !== false) {
				gl.disable(id);
				enabledCapabilities[id] = false;
			}
		}

		function bindXRFramebuffer(framebuffer) {
			if (framebuffer !== xrFramebuffer) {
				gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
				xrFramebuffer = framebuffer;
			}
		}

		function bindFramebuffer(target, framebuffer) {
			if (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available

			if (currentBoundFramebuffers[target] !== framebuffer) {
				gl.bindFramebuffer(target, framebuffer);
				currentBoundFramebuffers[target] = framebuffer;

				if (isWebGL2) {
					// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
					if (target === gl.DRAW_FRAMEBUFFER) {
						currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
					}

					if (target === gl.FRAMEBUFFER) {
						currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
					}
				}
			}
		}

		function useProgram(program) {
			if (currentProgram !== program) {
				gl.useProgram(program);
				currentProgram = program;
				return true;
			}

			return false;
		}

		const equationToGL = {
			[AddEquation]: gl.FUNC_ADD,
			[SubtractEquation]: gl.FUNC_SUBTRACT,
			[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
		};

		if (isWebGL2) {
			equationToGL[MinEquation] = gl.MIN;
			equationToGL[MaxEquation] = gl.MAX;
		} else {
			const extension = extensions.get('EXT_blend_minmax');

			if (extension !== null) {
				equationToGL[MinEquation] = extension.MIN_EXT;
				equationToGL[MaxEquation] = extension.MAX_EXT;
			}
		}

		const factorToGL = {
			[ZeroFactor]: gl.ZERO,
			[OneFactor]: gl.ONE,
			[SrcColorFactor]: gl.SRC_COLOR,
			[SrcAlphaFactor]: gl.SRC_ALPHA,
			[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
			[DstColorFactor]: gl.DST_COLOR,
			[DstAlphaFactor]: gl.DST_ALPHA,
			[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
			[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
			[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
			[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
		};

		function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
			if (blending === NoBlending) {
				if (currentBlendingEnabled === true) {
					disable(gl.BLEND);
					currentBlendingEnabled = false;
				}

				return;
			}

			if (currentBlendingEnabled === false) {
				enable(gl.BLEND);
				currentBlendingEnabled = true;
			}

			if (blending !== CustomBlending) {
				if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
					if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
						gl.blendEquation(gl.FUNC_ADD);
						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;
					}

					if (premultipliedAlpha) {
						switch (blending) {
							case NormalBlending:
								gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
								break;

							case AdditiveBlending:
								gl.blendFunc(gl.ONE, gl.ONE);
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
								break;

							default:
								console.error('THREE.WebGLState: Invalid blending: ', blending);
								break;
						}
					} else {
						switch (blending) {
							case NormalBlending:
								gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
								break;

							case AdditiveBlending:
								gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
								break;

							case SubtractiveBlending:
								gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);
								break;

							case MultiplyBlending:
								gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
								break;

							default:
								console.error('THREE.WebGLState: Invalid blending: ', blending);
								break;
						}
					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;
				}

				return;
			} // custom blending


			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
				gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;
			}

			if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
				gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;
			}

			currentBlending = blending;
			currentPremultipledAlpha = null;
		}

		function setMaterial(material, frontFaceCW) {
			material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
			let flipSided = material.side === BackSide;
			if (frontFaceCW) flipSided = !flipSided;
			setFlipSided(flipSided);
			material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
			depthBuffer.setFunc(material.depthFunc);
			depthBuffer.setTest(material.depthTest);
			depthBuffer.setMask(material.depthWrite);
			colorBuffer.setMask(material.colorWrite);
			const stencilWrite = material.stencilWrite;
			stencilBuffer.setTest(stencilWrite);

			if (stencilWrite) {
				stencilBuffer.setMask(material.stencilWriteMask);
				stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
				stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
			}

			setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
			material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
		} //


		function setFlipSided(flipSided) {
			if (currentFlipSided !== flipSided) {
				if (flipSided) {
					gl.frontFace(gl.CW);
				} else {
					gl.frontFace(gl.CCW);
				}

				currentFlipSided = flipSided;
			}
		}

		function setCullFace(cullFace) {
			if (cullFace !== CullFaceNone) {
				enable(gl.CULL_FACE);

				if (cullFace !== currentCullFace) {
					if (cullFace === CullFaceBack) {
						gl.cullFace(gl.BACK);
					} else if (cullFace === CullFaceFront) {
						gl.cullFace(gl.FRONT);
					} else {
						gl.cullFace(gl.FRONT_AND_BACK);
					}
				}
			} else {
				disable(gl.CULL_FACE);
			}

			currentCullFace = cullFace;
		}

		function setLineWidth(width) {
			if (width !== currentLineWidth) {
				if (lineWidthAvailable) gl.lineWidth(width);
				currentLineWidth = width;
			}
		}

		function setPolygonOffset(polygonOffset, factor, units) {
			if (polygonOffset) {
				enable(gl.POLYGON_OFFSET_FILL);

				if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
					gl.polygonOffset(factor, units);
					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;
				}
			} else {
				disable(gl.POLYGON_OFFSET_FILL);
			}
		}

		function setScissorTest(scissorTest) {
			if (scissorTest) {
				enable(gl.SCISSOR_TEST);
			} else {
				disable(gl.SCISSOR_TEST);
			}
		} // texture


		function activeTexture(webglSlot) {
			if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if (currentTextureSlot !== webglSlot) {
				gl.activeTexture(webglSlot);
				currentTextureSlot = webglSlot;
			}
		}

		function bindTexture(webglType, webglTexture) {
			if (currentTextureSlot === null) {
				activeTexture();
			}

			let boundTexture = currentBoundTextures[currentTextureSlot];

			if (boundTexture === undefined) {
				boundTexture = {
					type: undefined,
					texture: undefined
				};
				currentBoundTextures[currentTextureSlot] = boundTexture;
			}

			if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
				gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;
			}
		}

		function unbindTexture() {
			const boundTexture = currentBoundTextures[currentTextureSlot];

			if (boundTexture !== undefined && boundTexture.type !== undefined) {
				gl.bindTexture(boundTexture.type, null);
				boundTexture.type = undefined;
				boundTexture.texture = undefined;
			}
		}

		function compressedTexImage2D() {
			try {
				gl.compressedTexImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texImage2D() {
			try {
				gl.texImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texImage3D() {
			try {
				gl.texImage3D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		} //


		function scissor(scissor) {
			if (currentScissor.equals(scissor) === false) {
				gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
				currentScissor.copy(scissor);
			}
		}

		function viewport(viewport) {
			if (currentViewport.equals(viewport) === false) {
				gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
				currentViewport.copy(viewport);
			}
		} //


		function reset() {
			// reset state
			gl.disable(gl.BLEND);
			gl.disable(gl.CULL_FACE);
			gl.disable(gl.DEPTH_TEST);
			gl.disable(gl.POLYGON_OFFSET_FILL);
			gl.disable(gl.SCISSOR_TEST);
			gl.disable(gl.STENCIL_TEST);
			gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
			gl.blendEquation(gl.FUNC_ADD);
			gl.blendFunc(gl.ONE, gl.ZERO);
			gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
			gl.colorMask(true, true, true, true);
			gl.clearColor(0, 0, 0, 0);
			gl.depthMask(true);
			gl.depthFunc(gl.LESS);
			gl.clearDepth(1);
			gl.stencilMask(0xffffffff);
			gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);
			gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
			gl.clearStencil(0);
			gl.cullFace(gl.BACK);
			gl.frontFace(gl.CCW);
			gl.polygonOffset(0, 0);
			gl.activeTexture(gl.TEXTURE0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);

			if (isWebGL2 === true) {
				gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
				gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
			}

			gl.useProgram(null);
			gl.lineWidth(1);
			gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
			gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals

			enabledCapabilities = {};
			currentTextureSlot = null;
			currentBoundTextures = {};
			xrFramebuffer = null;
			currentBoundFramebuffers = {};
			currentProgram = null;
			currentBlendingEnabled = false;
			currentBlending = null;
			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;
			currentPremultipledAlpha = false;
			currentFlipSided = null;
			currentCullFace = null;
			currentLineWidth = null;
			currentPolygonOffsetFactor = null;
			currentPolygonOffsetUnits = null;
			currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
			currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();
		}

		return {
			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},
			enable: enable,
			disable: disable,
			bindFramebuffer: bindFramebuffer,
			bindXRFramebuffer: bindXRFramebuffer,
			useProgram: useProgram,
			setBlending: setBlending,
			setMaterial: setMaterial,
			setFlipSided: setFlipSided,
			setCullFace: setCullFace,
			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,
			setScissorTest: setScissorTest,
			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,
			scissor: scissor,
			viewport: viewport,
			reset: reset
		};
	}

	function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
		const isWebGL2 = capabilities.isWebGL2;
		const maxTextures = capabilities.maxTextures;
		const maxCubemapSize = capabilities.maxCubemapSize;
		const maxTextureSize = capabilities.maxTextureSize;
		const maxSamples = capabilities.maxSamples;

		const _videoTextures = new WeakMap();

		let _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
		// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).


		let useOffscreenCanvas = false;

		try {
			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;
		} catch (err) {// Ignore any errors
		}

		function createCanvas(width, height) {
			// Use OffscreenCanvas when available. Specially needed in web workers
			return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
		}

		function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
			let scale = 1; // handle case if texture exceeds max size

			if (image.width > maxSize || image.height > maxSize) {
				scale = maxSize / Math.max(image.width, image.height);
			} // only perform resize if necessary


			if (scale < 1 || needsPowerOfTwo === true) {
				// only perform resize for certain image types
				if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
					const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
					const width = floor(scale * image.width);
					const height = floor(scale * image.height);
					if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas

					const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
					canvas.width = width;
					canvas.height = height;
					const context = canvas.getContext('2d');
					context.drawImage(image, 0, 0, width, height);
					console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
					return canvas;
				} else {
					if ('data' in image) {
						console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
					}

					return image;
				}
			}

			return image;
		}

		function isPowerOfTwo$1(image) {
			return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
		}

		function textureNeedsPowerOfTwo(texture) {
			if (isWebGL2) return false;
			return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
		}

		function textureNeedsGenerateMipmaps(texture, supportsMips) {
			return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
		}

		function generateMipmap(target, texture, width, height) {
			_gl.generateMipmap(target);

			const textureProperties = properties.get(texture);
			textureProperties.__maxMipLevel = Math.log2(Math.max(width, height));
		}

		function getInternalFormat(internalFormatName, glFormat, glType) {
			if (isWebGL2 === false) return glFormat;

			if (internalFormatName !== null) {
				if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
				console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
			}

			let internalFormat = glFormat;

			if (glFormat === _gl.RED) {
				if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
			}

			if (glFormat === _gl.RGB) {
				if (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;
			}

			if (glFormat === _gl.RGBA) {
				if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;
			}

			if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
				extensions.get('EXT_color_buffer_float');
			}

			return internalFormat;
		} // Fallback filters for non-power-of-2 textures


		function filterFallback(f) {
			if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
				return _gl.NEAREST;
			}

			return _gl.LINEAR;
		} //


		function onTextureDispose(event) {
			const texture = event.target;
			texture.removeEventListener('dispose', onTextureDispose);
			deallocateTexture(texture);

			if (texture.isVideoTexture) {
				_videoTextures.delete(texture);
			}

			info.memory.textures--;
		}

		function onRenderTargetDispose(event) {
			const renderTarget = event.target;
			renderTarget.removeEventListener('dispose', onRenderTargetDispose);
			deallocateRenderTarget(renderTarget);
			info.memory.textures--;
		} //


		function deallocateTexture(texture) {
			const textureProperties = properties.get(texture);
			if (textureProperties.__webglInit === undefined) return;

			_gl.deleteTexture(textureProperties.__webglTexture);

			properties.remove(texture);
		}

		function deallocateRenderTarget(renderTarget) {
			const texture = renderTarget.texture;
			const renderTargetProperties = properties.get(renderTarget);
			const textureProperties = properties.get(texture);
			if (!renderTarget) return;

			if (textureProperties.__webglTexture !== undefined) {
				_gl.deleteTexture(textureProperties.__webglTexture);
			}

			if (renderTarget.depthTexture) {
				renderTarget.depthTexture.dispose();
			}

			if (renderTarget.isWebGLCubeRenderTarget) {
				for (let i = 0; i < 6; i++) {
					_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);

					if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
				}
			} else {
				_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);

				if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
				if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
				if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
				if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
			}

			properties.remove(texture);
			properties.remove(renderTarget);
		} //


		let textureUnits = 0;

		function resetTextureUnits() {
			textureUnits = 0;
		}

		function allocateTextureUnit() {
			const textureUnit = textureUnits;

			if (textureUnit >= maxTextures) {
				console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
			}

			textureUnits += 1;
			return textureUnit;
		} //


		function setTexture2D(texture, slot) {
			const textureProperties = properties.get(texture);
			if (texture.isVideoTexture) updateVideoTexture(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				const image = texture.image;

				if (image === undefined) {
					console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');
				} else if (image.complete === false) {
					console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
				} else {
					uploadTexture(textureProperties, texture, slot);
					return;
				}
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);
		}

		function setTexture2DArray(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);
		}

		function setTexture3D(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);
		}

		function setTextureCube(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadCubeTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
		}

		const wrappingToGL = {
			[RepeatWrapping]: _gl.REPEAT,
			[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
			[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
		};
		const filterToGL = {
			[NearestFilter]: _gl.NEAREST,
			[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
			[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
			[LinearFilter]: _gl.LINEAR,
			[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
			[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
		};

		function setTextureParameters(textureType, texture, supportsMips) {
			if (supportsMips) {
				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);

				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);

				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
				}

				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);

				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
			} else {
				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);

				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);

				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
				}

				if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
				}

				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));

				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));

				if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
				}
			}

			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
				const extension = extensions.get('EXT_texture_filter_anisotropic');
				if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2

				if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only

				if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
					_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));

					properties.get(texture).__currentAnisotropy = texture.anisotropy;
				}
			}
		}

		function initTexture(textureProperties, texture) {
			if (textureProperties.__webglInit === undefined) {
				textureProperties.__webglInit = true;
				texture.addEventListener('dispose', onTextureDispose);
				textureProperties.__webglTexture = _gl.createTexture();
				info.memory.textures++;
			}
		}

		function uploadTexture(textureProperties, texture, slot) {
			let textureType = _gl.TEXTURE_2D;
			if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;
			if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;
			initTexture(textureProperties, texture);
			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(textureType, textureProperties.__webglTexture);

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);

			_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);

			const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
			const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
			const supportsMips = isPowerOfTwo$1(image) || isWebGL2,
						glFormat = utils.convert(texture.format);
			let glType = utils.convert(texture.type),
					glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
			setTextureParameters(textureType, texture, supportsMips);
			let mipmap;
			const mipmaps = texture.mipmaps;

			if (texture.isDepthTexture) {
				// populate depth texture with dummy data
				glInternalFormat = _gl.DEPTH_COMPONENT;

				if (isWebGL2) {
					if (texture.type === FloatType) {
						glInternalFormat = _gl.DEPTH_COMPONENT32F;
					} else if (texture.type === UnsignedIntType) {
						glInternalFormat = _gl.DEPTH_COMPONENT24;
					} else if (texture.type === UnsignedInt248Type) {
						glInternalFormat = _gl.DEPTH24_STENCIL8;
					} else {
						glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D
					}
				} else {
					if (texture.type === FloatType) {
						console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
					}
				} // validation checks for WebGL 1


				if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
						console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
						texture.type = UnsignedShortType;
						glType = utils.convert(texture.type);
					}
				}

				if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)

					if (texture.type !== UnsignedInt248Type) {
						console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
						texture.type = UnsignedInt248Type;
						glType = utils.convert(texture.type);
					}
				} //


				state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
			} else if (texture.isDataTexture) {
				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels
				if (mipmaps.length > 0 && supportsMips) {
					for (let i = 0, il = mipmaps.length; i < il; i++) {
						mipmap = mipmaps[i];
						state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;
				} else {
					state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
					textureProperties.__maxMipLevel = 0;
				}
			} else if (texture.isCompressedTexture) {
				for (let i = 0, il = mipmaps.length; i < il; i++) {
					mipmap = mipmaps[i];

					if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
						if (glFormat !== null) {
							state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
						} else {
							console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
						}
					} else {
						state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
					}
				}

				textureProperties.__maxMipLevel = mipmaps.length - 1;
			} else if (texture.isDataTexture2DArray) {
				state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
				textureProperties.__maxMipLevel = 0;
			} else if (texture.isDataTexture3D) {
				state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
				textureProperties.__maxMipLevel = 0;
			} else {
				// regular Texture (image, video, canvas)
				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels
				if (mipmaps.length > 0 && supportsMips) {
					for (let i = 0, il = mipmaps.length; i < il; i++) {
						mipmap = mipmaps[i];
						state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;
				} else {
					state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
					textureProperties.__maxMipLevel = 0;
				}
			}

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
				generateMipmap(textureType, texture, image.width, image.height);
			}

			textureProperties.__version = texture.version;
			if (texture.onUpdate) texture.onUpdate(texture);
		}

		function uploadCubeTexture(textureProperties, texture, slot) {
			if (texture.image.length !== 6) return;
			initTexture(textureProperties, texture);
			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);

			_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);

			const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
			const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
			const cubeImage = [];

			for (let i = 0; i < 6; i++) {
				if (!isCompressed && !isDataTexture) {
					cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
				} else {
					cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
				}
			}

			const image = cubeImage[0],
						supportsMips = isPowerOfTwo$1(image) || isWebGL2,
						glFormat = utils.convert(texture.format),
						glType = utils.convert(texture.type),
						glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
			setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
			let mipmaps;

			if (isCompressed) {
				for (let i = 0; i < 6; i++) {
					mipmaps = cubeImage[i].mipmaps;

					for (let j = 0; j < mipmaps.length; j++) {
						const mipmap = mipmaps[j];

						if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
							if (glFormat !== null) {
								state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
							} else {
								console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
							}
						} else {
							state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
						}
					}
				}

				textureProperties.__maxMipLevel = mipmaps.length - 1;
			} else {
				mipmaps = texture.mipmaps;

				for (let i = 0; i < 6; i++) {
					if (isDataTexture) {
						state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);

						for (let j = 0; j < mipmaps.length; j++) {
							const mipmap = mipmaps[j];
							const mipmapImage = mipmap.image[i].image;
							state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
						}
					} else {
						state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);

						for (let j = 0; j < mipmaps.length; j++) {
							const mipmap = mipmaps[j];
							state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
						}
					}
				}

				textureProperties.__maxMipLevel = mipmaps.length;
			}

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
				// We assume images for cube map have the same size.
				generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);
			}

			textureProperties.__version = texture.version;
			if (texture.onUpdate) texture.onUpdate(texture);
		} // Render targets
		// Setup storage for target texture and bind it to correct framebuffer


		function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
			const texture = renderTarget.texture;
			const glFormat = utils.convert(texture.format);
			const glType = utils.convert(texture.type);
			const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);

			if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
				state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
			} else {
				state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

			_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);

			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
		} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer


		function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
			_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);

			if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
				let glInternalFormat = _gl.DEPTH_COMPONENT16;

				if (isMultisample) {
					const depthTexture = renderTarget.depthTexture;

					if (depthTexture && depthTexture.isDepthTexture) {
						if (depthTexture.type === FloatType) {
							glInternalFormat = _gl.DEPTH_COMPONENT32F;
						} else if (depthTexture.type === UnsignedIntType) {
							glInternalFormat = _gl.DEPTH_COMPONENT24;
						}
					}

					const samples = getRenderTargetSamples(renderTarget);

					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
				}

				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
			} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
				if (isMultisample) {
					const samples = getRenderTargetSamples(renderTarget);

					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
				}

				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
			} else {
				const texture = renderTarget.texture;
				const glFormat = utils.convert(texture.format);
				const glType = utils.convert(texture.type);
				const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);

				if (isMultisample) {
					const samples = getRenderTargetSamples(renderTarget);

					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
				}
			}

			_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
		} // Setup resources for a Depth Texture for a FBO (needs an extension)


		function setupDepthTexture(framebuffer, renderTarget) {
			const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
			if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

			if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
			} // upload an empty depth texture with framebuffer size


			if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D(renderTarget.depthTexture, 0);

			const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;

			if (renderTarget.depthTexture.format === DepthFormat) {
				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
			} else if (renderTarget.depthTexture.format === DepthStencilFormat) {
				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
			} else {
				throw new Error('Unknown depthTexture format');
			}
		} // Setup GL resources for a non-texture depth buffer


		function setupDepthRenderbuffer(renderTarget) {
			const renderTargetProperties = properties.get(renderTarget);
			const isCube = renderTarget.isWebGLCubeRenderTarget === true;

			if (renderTarget.depthTexture) {
				if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
				setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
			} else {
				if (isCube) {
					renderTargetProperties.__webglDepthbuffer = [];

					for (let i = 0; i < 6; i++) {
						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
						renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
						setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
					}
				} else {
					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
				}
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
		} // Set up GL resources for the render target


		function setupRenderTarget(renderTarget) {
			const texture = renderTarget.texture;
			const renderTargetProperties = properties.get(renderTarget);
			const textureProperties = properties.get(texture);
			renderTarget.addEventListener('dispose', onRenderTargetDispose);
			textureProperties.__webglTexture = _gl.createTexture();
			textureProperties.__version = texture.version;
			info.memory.textures++;
			const isCube = renderTarget.isWebGLCubeRenderTarget === true;
			const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
			const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858

			if (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {
				texture.format = RGBAFormat;
				console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');
			} // Setup framebuffer


			if (isCube) {
				renderTargetProperties.__webglFramebuffer = [];

				for (let i = 0; i < 6; i++) {
					renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
				}
			} else {
				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				if (isMultisample) {
					if (isWebGL2) {
						renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
						renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

						_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);

						const glFormat = utils.convert(texture.format);
						const glType = utils.convert(texture.type);
						const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
						const samples = getRenderTargetSamples(renderTarget);

						_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);

						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);

						_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);

						_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);

						if (renderTarget.depthBuffer) {
							renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
							setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
						}

						state.bindFramebuffer(_gl.FRAMEBUFFER, null);
					} else {
						console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
					}
				}
			} // Setup color buffer


			if (isCube) {
				state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
				setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);

				for (let i = 0; i < 6; i++) {
					setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
				}

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);
				}

				state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
			} else {
				let glTextureType = _gl.TEXTURE_2D;

				if (isRenderTarget3D) {
					// Render targets containing layers, i.e: Texture 3D and 2d arrays
					if (isWebGL2) {
						const isTexture3D = texture.isDataTexture3D;
						glTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
					} else {
						console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');
					}
				}

				state.bindTexture(glTextureType, textureProperties.__webglTexture);
				setTextureParameters(glTextureType, texture, supportsMips);
				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, glTextureType);

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					generateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);
				}

				state.bindTexture(_gl.TEXTURE_2D, null);
			} // Setup depth and stencil buffers


			if (renderTarget.depthBuffer) {
				setupDepthRenderbuffer(renderTarget);
			}
		}

		function updateRenderTargetMipmap(renderTarget) {
			const texture = renderTarget.texture;
			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
				const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;

				const webglTexture = properties.get(texture).__webglTexture;

				state.bindTexture(target, webglTexture);
				generateMipmap(target, texture, renderTarget.width, renderTarget.height);
				state.bindTexture(target, null);
			}
		}

		function updateMultisampleRenderTarget(renderTarget) {
			if (renderTarget.isWebGLMultisampleRenderTarget) {
				if (isWebGL2) {
					const width = renderTarget.width;
					const height = renderTarget.height;
					let mask = _gl.COLOR_BUFFER_BIT;
					if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
					if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
					const renderTargetProperties = properties.get(renderTarget);
					state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
					state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);

					_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);

					state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
					state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
				} else {
					console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
				}
			}
		}

		function getRenderTargetSamples(renderTarget) {
			return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
		}

		function updateVideoTexture(texture) {
			const frame = info.render.frame; // Check the last frame we updated the VideoTexture

			if (_videoTextures.get(texture) !== frame) {
				_videoTextures.set(texture, frame);

				texture.update();
			}
		} // backwards compatibility


		let warnedTexture2D = false;
		let warnedTextureCube = false;

		function safeSetTexture2D(texture, slot) {
			if (texture && texture.isWebGLRenderTarget) {
				if (warnedTexture2D === false) {
					console.warn('THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.');
					warnedTexture2D = true;
				}

				texture = texture.texture;
			}

			setTexture2D(texture, slot);
		}

		function safeSetTextureCube(texture, slot) {
			if (texture && texture.isWebGLCubeRenderTarget) {
				if (warnedTextureCube === false) {
					console.warn('THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.');
					warnedTextureCube = true;
				}

				texture = texture.texture;
			}

			setTextureCube(texture, slot);
		} //


		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;
		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
		this.safeSetTexture2D = safeSetTexture2D;
		this.safeSetTextureCube = safeSetTextureCube;
	}

	function WebGLUtils(gl, extensions, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;

		function convert(p) {
			let extension;
			if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
			if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
			if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
			if (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;
			if (p === ByteType) return gl.BYTE;
			if (p === ShortType) return gl.SHORT;
			if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
			if (p === IntType) return gl.INT;
			if (p === UnsignedIntType) return gl.UNSIGNED_INT;
			if (p === FloatType) return gl.FLOAT;

			if (p === HalfFloatType) {
				if (isWebGL2) return gl.HALF_FLOAT;
				extension = extensions.get('OES_texture_half_float');

				if (extension !== null) {
					return extension.HALF_FLOAT_OES;
				} else {
					return null;
				}
			}

			if (p === AlphaFormat) return gl.ALPHA;
			if (p === RGBFormat) return gl.RGB;
			if (p === RGBAFormat) return gl.RGBA;
			if (p === LuminanceFormat) return gl.LUMINANCE;
			if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
			if (p === DepthFormat) return gl.DEPTH_COMPONENT;
			if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
			if (p === RedFormat) return gl.RED; // WebGL2 formats.

			if (p === RedIntegerFormat) return gl.RED_INTEGER;
			if (p === RGFormat) return gl.RG;
			if (p === RGIntegerFormat) return gl.RG_INTEGER;
			if (p === RGBIntegerFormat) return gl.RGB_INTEGER;
			if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;

			if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
				extension = extensions.get('WEBGL_compressed_texture_s3tc');

				if (extension !== null) {
					if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
				} else {
					return null;
				}
			}

			if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
				extension = extensions.get('WEBGL_compressed_texture_pvrtc');

				if (extension !== null) {
					if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
				} else {
					return null;
				}
			}

			if (p === RGB_ETC1_Format) {
				extension = extensions.get('WEBGL_compressed_texture_etc1');

				if (extension !== null) {
					return extension.COMPRESSED_RGB_ETC1_WEBGL;
				} else {
					return null;
				}
			}

			if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
				extension = extensions.get('WEBGL_compressed_texture_etc');

				if (extension !== null) {
					if (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;
					if (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;
				}
			}

			if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {
				extension = extensions.get('WEBGL_compressed_texture_astc');

				if (extension !== null) {
					// TODO Complete?
					return p;
				} else {
					return null;
				}
			}

			if (p === RGBA_BPTC_Format) {
				extension = extensions.get('EXT_texture_compression_bptc');

				if (extension !== null) {
					// TODO Complete?
					return p;
				} else {
					return null;
				}
			}

			if (p === UnsignedInt248Type) {
				if (isWebGL2) return gl.UNSIGNED_INT_24_8;
				extension = extensions.get('WEBGL_depth_texture');

				if (extension !== null) {
					return extension.UNSIGNED_INT_24_8_WEBGL;
				} else {
					return null;
				}
			}
		}

		return {
			convert: convert
		};
	}

	class ArrayCamera extends PerspectiveCamera {
		constructor(array = []) {
			super();
			this.cameras = array;
		}

	}

	ArrayCamera.prototype.isArrayCamera = true;

	class Group extends Object3D {
		constructor() {
			super();
			this.type = 'Group';
		}

	}

	Group.prototype.isGroup = true;

	const _moveEvent = {
		type: 'move'
	};

	class WebXRController {
		constructor() {
			this._targetRay = null;
			this._grip = null;
			this._hand = null;
		}

		getHandSpace() {
			if (this._hand === null) {
				this._hand = new Group();
				this._hand.matrixAutoUpdate = false;
				this._hand.visible = false;
				this._hand.joints = {};
				this._hand.inputState = {
					pinching: false
				};
			}

			return this._hand;
		}

		getTargetRaySpace() {
			if (this._targetRay === null) {
				this._targetRay = new Group();
				this._targetRay.matrixAutoUpdate = false;
				this._targetRay.visible = false;
				this._targetRay.hasLinearVelocity = false;
				this._targetRay.linearVelocity = new Vector3();
				this._targetRay.hasAngularVelocity = false;
				this._targetRay.angularVelocity = new Vector3();
			}

			return this._targetRay;
		}

		getGripSpace() {
			if (this._grip === null) {
				this._grip = new Group();
				this._grip.matrixAutoUpdate = false;
				this._grip.visible = false;
				this._grip.hasLinearVelocity = false;
				this._grip.linearVelocity = new Vector3();
				this._grip.hasAngularVelocity = false;
				this._grip.angularVelocity = new Vector3();
			}

			return this._grip;
		}

		dispatchEvent(event) {
			if (this._targetRay !== null) {
				this._targetRay.dispatchEvent(event);
			}

			if (this._grip !== null) {
				this._grip.dispatchEvent(event);
			}

			if (this._hand !== null) {
				this._hand.dispatchEvent(event);
			}

			return this;
		}

		disconnect(inputSource) {
			this.dispatchEvent({
				type: 'disconnected',
				data: inputSource
			});

			if (this._targetRay !== null) {
				this._targetRay.visible = false;
			}

			if (this._grip !== null) {
				this._grip.visible = false;
			}

			if (this._hand !== null) {
				this._hand.visible = false;
			}

			return this;
		}

		update(inputSource, frame, referenceSpace) {
			let inputPose = null;
			let gripPose = null;
			let handPose = null;
			const targetRay = this._targetRay;
			const grip = this._grip;
			const hand = this._hand;

			if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
				if (targetRay !== null) {
					inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);

					if (inputPose !== null) {
						targetRay.matrix.fromArray(inputPose.transform.matrix);
						targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);

						if (inputPose.linearVelocity) {
							targetRay.hasLinearVelocity = true;
							targetRay.linearVelocity.copy(inputPose.linearVelocity);
						} else {
							targetRay.hasLinearVelocity = false;
						}

						if (inputPose.angularVelocity) {
							targetRay.hasAngularVelocity = true;
							targetRay.angularVelocity.copy(inputPose.angularVelocity);
						} else {
							targetRay.hasAngularVelocity = false;
						}

						this.dispatchEvent(_moveEvent);
					}
				}

				if (hand && inputSource.hand) {
					handPose = true;

					for (const inputjoint of inputSource.hand.values()) {
						// Update the joints groups with the XRJoint poses
						const jointPose = frame.getJointPose(inputjoint, referenceSpace);

						if (hand.joints[inputjoint.jointName] === undefined) {
							// The transform of this joint will be updated with the joint pose on each frame
							const joint = new Group();
							joint.matrixAutoUpdate = false;
							joint.visible = false;
							hand.joints[inputjoint.jointName] = joint; // ??

							hand.add(joint);
						}

						const joint = hand.joints[inputjoint.jointName];

						if (jointPose !== null) {
							joint.matrix.fromArray(jointPose.transform.matrix);
							joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
							joint.jointRadius = jointPose.radius;
						}

						joint.visible = jointPose !== null;
					} // Custom events
					// Check pinchz


					const indexTip = hand.joints['index-finger-tip'];
					const thumbTip = hand.joints['thumb-tip'];
					const distance = indexTip.position.distanceTo(thumbTip.position);
					const distanceToPinch = 0.02;
					const threshold = 0.005;

					if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
						hand.inputState.pinching = false;
						this.dispatchEvent({
							type: 'pinchend',
							handedness: inputSource.handedness,
							target: this
						});
					} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
						hand.inputState.pinching = true;
						this.dispatchEvent({
							type: 'pinchstart',
							handedness: inputSource.handedness,
							target: this
						});
					}
				} else {
					if (grip !== null && inputSource.gripSpace) {
						gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);

						if (gripPose !== null) {
							grip.matrix.fromArray(gripPose.transform.matrix);
							grip.matrix.decompose(grip.position, grip.rotation, grip.scale);

							if (gripPose.linearVelocity) {
								grip.hasLinearVelocity = true;
								grip.linearVelocity.copy(gripPose.linearVelocity);
							} else {
								grip.hasLinearVelocity = false;
							}

							if (gripPose.angularVelocity) {
								grip.hasAngularVelocity = true;
								grip.angularVelocity.copy(gripPose.angularVelocity);
							} else {
								grip.hasAngularVelocity = false;
							}
						}
					}
				}
			}

			if (targetRay !== null) {
				targetRay.visible = inputPose !== null;
			}

			if (grip !== null) {
				grip.visible = gripPose !== null;
			}

			if (hand !== null) {
				hand.visible = handPose !== null;
			}

			return this;
		}

	}

	class WebXRManager extends EventDispatcher {
		constructor(renderer, gl) {
			super();
			const scope = this;
			const state = renderer.state;
			let session = null;
			let framebufferScaleFactor = 1.0;
			let referenceSpace = null;
			let referenceSpaceType = 'local-floor';
			let pose = null;
			const controllers = [];
			const inputSourcesMap = new Map(); //

			const cameraL = new PerspectiveCamera();
			cameraL.layers.enable(1);
			cameraL.viewport = new Vector4();
			const cameraR = new PerspectiveCamera();
			cameraR.layers.enable(2);
			cameraR.viewport = new Vector4();
			const cameras = [cameraL, cameraR];
			const cameraVR = new ArrayCamera();
			cameraVR.layers.enable(1);
			cameraVR.layers.enable(2);
			let _currentDepthNear = null;
			let _currentDepthFar = null; //

			this.enabled = false;
			this.isPresenting = false;

			this.getController = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getTargetRaySpace();
			};

			this.getControllerGrip = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getGripSpace();
			};

			this.getHand = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getHandSpace();
			}; //


			function onSessionEvent(event) {
				const controller = inputSourcesMap.get(event.inputSource);

				if (controller) {
					controller.dispatchEvent({
						type: event.type,
						data: event.inputSource
					});
				}
			}

			function onSessionEnd() {
				inputSourcesMap.forEach(function (controller, inputSource) {
					controller.disconnect(inputSource);
				});
				inputSourcesMap.clear();
				_currentDepthNear = null;
				_currentDepthFar = null; // restore framebuffer/rendering state

				state.bindXRFramebuffer(null);
				renderer.setRenderTarget(renderer.getRenderTarget()); //

				animation.stop();
				scope.isPresenting = false;
				scope.dispatchEvent({
					type: 'sessionend'
				});
			}

			this.setFramebufferScaleFactor = function (value) {
				framebufferScaleFactor = value;

				if (scope.isPresenting === true) {
					console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
				}
			};

			this.setReferenceSpaceType = function (value) {
				referenceSpaceType = value;

				if (scope.isPresenting === true) {
					console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
				}
			};

			this.getReferenceSpace = function () {
				return referenceSpace;
			};

			this.getSession = function () {
				return session;
			};

			this.setSession = async function (value) {
				session = value;

				if (session !== null) {
					session.addEventListener('select', onSessionEvent);
					session.addEventListener('selectstart', onSessionEvent);
					session.addEventListener('selectend', onSessionEvent);
					session.addEventListener('squeeze', onSessionEvent);
					session.addEventListener('squeezestart', onSessionEvent);
					session.addEventListener('squeezeend', onSessionEvent);
					session.addEventListener('end', onSessionEnd);
					session.addEventListener('inputsourceschange', onInputSourcesChange);
					const attributes = gl.getContextAttributes();

					if (attributes.xrCompatible !== true) {
						await gl.makeXRCompatible();
					}

					const layerInit = {
						antialias: attributes.antialias,
						alpha: attributes.alpha,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					}; // eslint-disable-next-line no-undef

					const baseLayer = new XRWebGLLayer(session, gl, layerInit);
					session.updateRenderState({
						baseLayer: baseLayer
					});
					referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
					animation.setContext(session);
					animation.start();
					scope.isPresenting = true;
					scope.dispatchEvent({
						type: 'sessionstart'
					});
				}
			};

			function onInputSourcesChange(event) {
				const inputSources = session.inputSources; // Assign inputSources to available controllers

				for (let i = 0; i < controllers.length; i++) {
					inputSourcesMap.set(inputSources[i], controllers[i]);
				} // Notify disconnected


				for (let i = 0; i < event.removed.length; i++) {
					const inputSource = event.removed[i];
					const controller = inputSourcesMap.get(inputSource);

					if (controller) {
						controller.dispatchEvent({
							type: 'disconnected',
							data: inputSource
						});
						inputSourcesMap.delete(inputSource);
					}
				} // Notify connected


				for (let i = 0; i < event.added.length; i++) {
					const inputSource = event.added[i];
					const controller = inputSourcesMap.get(inputSource);

					if (controller) {
						controller.dispatchEvent({
							type: 'connected',
							data: inputSource
						});
					}
				}
			} //


			const cameraLPos = new Vector3();
			const cameraRPos = new Vector3();
			/**
			 * Assumes 2 cameras that are parallel and share an X-axis, and that
			 * the cameras' projection and world matrices have already been set.
			 * And that near and far planes are identical for both cameras.
			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
			 */

			function setProjectionFromUnion(camera, cameraL, cameraR) {
				cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
				cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
				const ipd = cameraLPos.distanceTo(cameraRPos);
				const projL = cameraL.projectionMatrix.elements;
				const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
				// most likely identical top and bottom frustum extents.
				// Use the left camera for these values.

				const near = projL[14] / (projL[10] - 1);
				const far = projL[14] / (projL[10] + 1);
				const topFov = (projL[9] + 1) / projL[5];
				const bottomFov = (projL[9] - 1) / projL[5];
				const leftFov = (projL[8] - 1) / projL[0];
				const rightFov = (projR[8] + 1) / projR[0];
				const left = near * leftFov;
				const right = near * rightFov; // Calculate the new camera's position offset from the
				// left camera. xOffset should be roughly half `ipd`.

				const zOffset = ipd / (-leftFov + rightFov);
				const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?

				cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
				camera.translateX(xOffset);
				camera.translateZ(zOffset);
				camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
				camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
				// the values so that the near plane's position does not change in world space,
				// although must now be relative to the new union camera.

				const near2 = near + zOffset;
				const far2 = far + zOffset;
				const left2 = left - xOffset;
				const right2 = right + (ipd - xOffset);
				const top2 = topFov * far / far2 * near2;
				const bottom2 = bottomFov * far / far2 * near2;
				camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
			}

			function updateCamera(camera, parent) {
				if (parent === null) {
					camera.matrixWorld.copy(camera.matrix);
				} else {
					camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
				}

				camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
			}

			this.getCamera = function (camera) {
				cameraVR.near = cameraR.near = cameraL.near = camera.near;
				cameraVR.far = cameraR.far = cameraL.far = camera.far;

				if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
					// Note that the new renderState won't apply until the next frame. See #18320
					session.updateRenderState({
						depthNear: cameraVR.near,
						depthFar: cameraVR.far
					});
					_currentDepthNear = cameraVR.near;
					_currentDepthFar = cameraVR.far;
				}

				const parent = camera.parent;
				const cameras = cameraVR.cameras;
				updateCamera(cameraVR, parent);

				for (let i = 0; i < cameras.length; i++) {
					updateCamera(cameras[i], parent);
				} // update camera and its children


				camera.matrixWorld.copy(cameraVR.matrixWorld);
				camera.matrix.copy(cameraVR.matrix);
				camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
				const children = camera.children;

				for (let i = 0, l = children.length; i < l; i++) {
					children[i].updateMatrixWorld(true);
				} // update projection matrix for proper view frustum culling


				if (cameras.length === 2) {
					setProjectionFromUnion(cameraVR, cameraL, cameraR);
				} else {
					// assume single camera setup (AR)
					cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
				}

				return cameraVR;
			}; // Animation Loop


			let onAnimationFrameCallback = null;

			function onAnimationFrame(time, frame) {
				pose = frame.getViewerPose(referenceSpace);

				if (pose !== null) {
					const views = pose.views;
					const baseLayer = session.renderState.baseLayer;
					state.bindXRFramebuffer(baseLayer.framebuffer);
					let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list

					if (views.length !== cameraVR.cameras.length) {
						cameraVR.cameras.length = 0;
						cameraVRNeedsUpdate = true;
					}

					for (let i = 0; i < views.length; i++) {
						const view = views[i];
						const viewport = baseLayer.getViewport(view);
						const camera = cameras[i];
						camera.matrix.fromArray(view.transform.matrix);
						camera.projectionMatrix.fromArray(view.projectionMatrix);
						camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);

						if (i === 0) {
							cameraVR.matrix.copy(camera.matrix);
						}

						if (cameraVRNeedsUpdate === true) {
							cameraVR.cameras.push(camera);
						}
					}
				} //


				const inputSources = session.inputSources;

				for (let i = 0; i < controllers.length; i++) {
					const controller = controllers[i];
					const inputSource = inputSources[i];
					controller.update(inputSource, frame, referenceSpace);
				}

				if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
			}

			const animation = new WebGLAnimation();
			animation.setAnimationLoop(onAnimationFrame);

			this.setAnimationLoop = function (callback) {
				onAnimationFrameCallback = callback;
			};

			this.dispose = function () {};
		}

	}

	function WebGLMaterials(properties) {
		function refreshFogUniforms(uniforms, fog) {
			uniforms.fogColor.value.copy(fog.color);

			if (fog.isFog) {
				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;
			} else if (fog.isFogExp2) {
				uniforms.fogDensity.value = fog.density;
			}
		}

		function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {
			if (material.isMeshBasicMaterial) {
				refreshUniformsCommon(uniforms, material);
			} else if (material.isMeshLambertMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsLambert(uniforms, material);
			} else if (material.isMeshToonMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsToon(uniforms, material);
			} else if (material.isMeshPhongMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsPhong(uniforms, material);
			} else if (material.isMeshStandardMaterial) {
				refreshUniformsCommon(uniforms, material);

				if (material.isMeshPhysicalMaterial) {
					refreshUniformsPhysical(uniforms, material);
				} else {
					refreshUniformsStandard(uniforms, material);
				}
			} else if (material.isMeshMatcapMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsMatcap(uniforms, material);
			} else if (material.isMeshDepthMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsDepth(uniforms, material);
			} else if (material.isMeshDistanceMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsDistance(uniforms, material);
			} else if (material.isMeshNormalMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsNormal(uniforms, material);
			} else if (material.isLineBasicMaterial) {
				refreshUniformsLine(uniforms, material);

				if (material.isLineDashedMaterial) {
					refreshUniformsDash(uniforms, material);
				}
			} else if (material.isPointsMaterial) {
				refreshUniformsPoints(uniforms, material, pixelRatio, height);
			} else if (material.isSpriteMaterial) {
				refreshUniformsSprites(uniforms, material);
			} else if (material.isShadowMaterial) {
				uniforms.color.value.copy(material.color);
				uniforms.opacity.value = material.opacity;
			} else if (material.isShaderMaterial) {
				material.uniformsNeedUpdate = false; // #15581
			}
		}

		function refreshUniformsCommon(uniforms, material) {
			uniforms.opacity.value = material.opacity;

			if (material.color) {
				uniforms.diffuse.value.copy(material.color);
			}

			if (material.emissive) {
				uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
			}

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			}

			if (material.specularMap) {
				uniforms.specularMap.value = material.specularMap;
			}

			const envMap = properties.get(material).envMap;

			if (envMap) {
				uniforms.envMap.value = envMap;
				uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;
				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

				const maxMipLevel = properties.get(envMap).__maxMipLevel;

				if (maxMipLevel !== undefined) {
					uniforms.maxMipLevel.value = maxMipLevel;
				}
			}

			if (material.lightMap) {
				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;
			}

			if (material.aoMap) {
				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. displacementMap map
			// 4. normal map
			// 5. bump map
			// 6. roughnessMap map
			// 7. metalnessMap map
			// 8. alphaMap map
			// 9. emissiveMap map
			// 10. clearcoat map
			// 11. clearcoat normal map
			// 12. clearcoat roughnessMap map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.specularMap) {
				uvScaleMap = material.specularMap;
			} else if (material.displacementMap) {
				uvScaleMap = material.displacementMap;
			} else if (material.normalMap) {
				uvScaleMap = material.normalMap;
			} else if (material.bumpMap) {
				uvScaleMap = material.bumpMap;
			} else if (material.roughnessMap) {
				uvScaleMap = material.roughnessMap;
			} else if (material.metalnessMap) {
				uvScaleMap = material.metalnessMap;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			} else if (material.emissiveMap) {
				uvScaleMap = material.emissiveMap;
			} else if (material.clearcoatMap) {
				uvScaleMap = material.clearcoatMap;
			} else if (material.clearcoatNormalMap) {
				uvScaleMap = material.clearcoatNormalMap;
			} else if (material.clearcoatRoughnessMap) {
				uvScaleMap = material.clearcoatRoughnessMap;
			}

			if (uvScaleMap !== undefined) {
				// backwards compatibility
				if (uvScaleMap.isWebGLRenderTarget) {
					uvScaleMap = uvScaleMap.texture;
				}

				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			} // uv repeat and offset setting priorities for uv2
			// 1. ao map
			// 2. light map


			let uv2ScaleMap;

			if (material.aoMap) {
				uv2ScaleMap = material.aoMap;
			} else if (material.lightMap) {
				uv2ScaleMap = material.lightMap;
			}

			if (uv2ScaleMap !== undefined) {
				// backwards compatibility
				if (uv2ScaleMap.isWebGLRenderTarget) {
					uv2ScaleMap = uv2ScaleMap.texture;
				}

				if (uv2ScaleMap.matrixAutoUpdate === true) {
					uv2ScaleMap.updateMatrix();
				}

				uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
			}
		}

		function refreshUniformsLine(uniforms, material) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
		}

		function refreshUniformsDash(uniforms, material) {
			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;
		}

		function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * pixelRatio;
			uniforms.scale.value = height * 0.5;

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			}

			if (uvScaleMap !== undefined) {
				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			}
		}

		function refreshUniformsSprites(uniforms, material) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			}

			if (uvScaleMap !== undefined) {
				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			}
		}

		function refreshUniformsLambert(uniforms, material) {
			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}
		}

		function refreshUniformsPhong(uniforms, material) {
			uniforms.specular.value.copy(material.specular);
			uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsToon(uniforms, material) {
			if (material.gradientMap) {
				uniforms.gradientMap.value = material.gradientMap;
			}

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsStandard(uniforms, material) {
			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if (material.roughnessMap) {
				uniforms.roughnessMap.value = material.roughnessMap;
			}

			if (material.metalnessMap) {
				uniforms.metalnessMap.value = material.metalnessMap;
			}

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}

			const envMap = properties.get(material).envMap;

			if (envMap) {
				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;
			}
		}

		function refreshUniformsPhysical(uniforms, material) {
			refreshUniformsStandard(uniforms, material);
			uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
			if (material.sheen) uniforms.sheen.value.copy(material.sheen);

			if (material.clearcoatMap) {
				uniforms.clearcoatMap.value = material.clearcoatMap;
			}

			if (material.clearcoatRoughnessMap) {
				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
			}

			if (material.clearcoatNormalMap) {
				uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				if (material.side === BackSide) {
					uniforms.clearcoatNormalScale.value.negate();
				}
			}

			uniforms.transmission.value = material.transmission;

			if (material.transmissionMap) {
				uniforms.transmissionMap.value = material.transmissionMap;
			}
		}

		function refreshUniformsMatcap(uniforms, material) {
			if (material.matcap) {
				uniforms.matcap.value = material.matcap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsDepth(uniforms, material) {
			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsDistance(uniforms, material) {
			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}

			uniforms.referencePosition.value.copy(material.referencePosition);
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;
		}

		function refreshUniformsNormal(uniforms, material) {
			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		return {
			refreshFogUniforms: refreshFogUniforms,
			refreshMaterialUniforms: refreshMaterialUniforms
		};
	}

	function createCanvasElement() {
		const canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
		canvas.style.display = 'block';
		return canvas;
	}

	function WebGLRenderer(parameters) {
		parameters = parameters || {};

		const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
					_context = parameters.context !== undefined ? parameters.context : null,
					_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
					_depth = parameters.depth !== undefined ? parameters.depth : true,
					_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
					_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
					_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
					_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
					_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
					_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

		let currentRenderList = null;
		let currentRenderState = null; // render() can be called from within a callback triggered by another render.
		// We track this so that the nested render call gets its list and state isolated from the parent render call.

		const renderListStack = [];
		const renderStateStack = []; // public properties

		this.domElement = _canvas; // Debug configuration container

		this.debug = {
			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true
		}; // clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true; // scene graph

		this.sortObjects = true; // user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false; // physically based shading

		this.gammaFactor = 2.0; // for backwards compatibility

		this.outputEncoding = LinearEncoding; // physical lights

		this.physicallyCorrectLights = false; // tone mapping

		this.toneMapping = NoToneMapping;
		this.toneMappingExposure = 1.0; // internal properties

		const _this = this;

		let _isContextLost = false; // internal state cache

		let _currentActiveCubeFace = 0;
		let _currentActiveMipmapLevel = 0;
		let _currentRenderTarget = null;

		let _currentMaterialId = -1;

		let _currentCamera = null;

		const _currentViewport = new Vector4();

		const _currentScissor = new Vector4();

		let _currentScissorTest = null; //

		let _width = _canvas.width;
		let _height = _canvas.height;
		let _pixelRatio = 1;
		let _opaqueSort = null;
		let _transparentSort = null;

		const _viewport = new Vector4(0, 0, _width, _height);

		const _scissor = new Vector4(0, 0, _width, _height);

		let _scissorTest = false; // frustum

		const _frustum = new Frustum(); // clipping


		let _clippingEnabled = false;
		let _localClippingEnabled = false; // camera matrices cache

		const _projScreenMatrix = new Matrix4();

		const _vector3 = new Vector3();

		const _emptyScene = {
			background: null,
			fog: null,
			environment: null,
			overrideMaterial: null,
			isScene: true
		};

		function getTargetPixelRatio() {
			return _currentRenderTarget === null ? _pixelRatio : 1;
		} // initialize


		let _gl = _context;

		function getContext(contextNames, contextAttributes) {
			for (let i = 0; i < contextNames.length; i++) {
				const contextName = contextNames[i];

				const context = _canvas.getContext(contextName, contextAttributes);

				if (context !== null) return context;
			}

			return null;
		}

		try {
			const contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference,
				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
			}; // event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener('webglcontextlost', onContextLost, false);

			_canvas.addEventListener('webglcontextrestored', onContextRestore, false);

			if (_gl === null) {
				const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];

				if (_this.isWebGL1Renderer === true) {
					contextNames.shift();
				}

				_gl = getContext(contextNames, contextAttributes);

				if (_gl === null) {
					if (getContext(contextNames)) {
						throw new Error('Error creating WebGL context with your selected attributes.');
					} else {
						throw new Error('Error creating WebGL context.');
					}
				}
			} // Some experimental-webgl implementations do not have getShaderPrecisionFormat


			if (_gl.getShaderPrecisionFormat === undefined) {
				_gl.getShaderPrecisionFormat = function () {
					return {
						'rangeMin': 1,
						'rangeMax': 1,
						'precision': 1
					};
				};
			}
		} catch (error) {
			console.error('THREE.WebGLRenderer: ' + error.message);
			throw error;
		}

		let extensions, capabilities, state, info;
		let properties, textures, cubemaps, attributes, geometries, objects;
		let programCache, materials, renderLists, renderStates, clipping, shadowMap;
		let background, morphtargets, bufferRenderer, indexedBufferRenderer;
		let utils, bindingStates;

		function initGLContext() {
			extensions = new WebGLExtensions(_gl);
			capabilities = new WebGLCapabilities(_gl, extensions, parameters);
			extensions.init(capabilities);
			utils = new WebGLUtils(_gl, extensions, capabilities);
			state = new WebGLState(_gl, extensions, capabilities);
			info = new WebGLInfo(_gl);
			properties = new WebGLProperties();
			textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
			cubemaps = new WebGLCubeMaps(_this);
			attributes = new WebGLAttributes(_gl, capabilities);
			bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
			geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
			objects = new WebGLObjects(_gl, geometries, attributes, info);
			morphtargets = new WebGLMorphtargets(_gl);
			clipping = new WebGLClipping(properties);
			programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);
			materials = new WebGLMaterials(properties);
			renderLists = new WebGLRenderLists(properties);
			renderStates = new WebGLRenderStates(extensions, capabilities);
			background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
			shadowMap = new WebGLShadowMap(_this, objects, capabilities);
			bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
			indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
			info.programs = programCache.programs;
			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.shadowMap = shadowMap;
			_this.state = state;
			_this.info = info;
		}

		initGLContext(); // xr

		const xr = new WebXRManager(_this, _gl);
		this.xr = xr; // API

		this.getContext = function () {
			return _gl;
		};

		this.getContextAttributes = function () {
			return _gl.getContextAttributes();
		};

		this.forceContextLoss = function () {
			const extension = extensions.get('WEBGL_lose_context');
			if (extension) extension.loseContext();
		};

		this.forceContextRestore = function () {
			const extension = extensions.get('WEBGL_lose_context');
			if (extension) extension.restoreContext();
		};

		this.getPixelRatio = function () {
			return _pixelRatio;
		};

		this.setPixelRatio = function (value) {
			if (value === undefined) return;
			_pixelRatio = value;
			this.setSize(_width, _height, false);
		};

		this.getSize = function (target) {
			if (target === undefined) {
				console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');
				target = new Vector2();
			}

			return target.set(_width, _height);
		};

		this.setSize = function (width, height, updateStyle) {
			if (xr.isPresenting) {
				console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
				return;
			}

			_width = width;
			_height = height;
			_canvas.width = Math.floor(width * _pixelRatio);
			_canvas.height = Math.floor(height * _pixelRatio);

			if (updateStyle !== false) {
				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';
			}

			this.setViewport(0, 0, width, height);
		};

		this.getDrawingBufferSize = function (target) {
			if (target === undefined) {
				console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');
				target = new Vector2();
			}

			return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
		};

		this.setDrawingBufferSize = function (width, height, pixelRatio) {
			_width = width;
			_height = height;
			_pixelRatio = pixelRatio;
			_canvas.width = Math.floor(width * pixelRatio);
			_canvas.height = Math.floor(height * pixelRatio);
			this.setViewport(0, 0, width, height);
		};

		this.getCurrentViewport = function (target) {
			if (target === undefined) {
				console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');
				target = new Vector4();
			}

			return target.copy(_currentViewport);
		};

		this.getViewport = function (target) {
			return target.copy(_viewport);
		};

		this.setViewport = function (x, y, width, height) {
			if (x.isVector4) {
				_viewport.set(x.x, x.y, x.z, x.w);
			} else {
				_viewport.set(x, y, width, height);
			}

			state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
		};

		this.getScissor = function (target) {
			return target.copy(_scissor);
		};

		this.setScissor = function (x, y, width, height) {
			if (x.isVector4) {
				_scissor.set(x.x, x.y, x.z, x.w);
			} else {
				_scissor.set(x, y, width, height);
			}

			state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
		};

		this.getScissorTest = function () {
			return _scissorTest;
		};

		this.setScissorTest = function (boolean) {
			state.setScissorTest(_scissorTest = boolean);
		};

		this.setOpaqueSort = function (method) {
			_opaqueSort = method;
		};

		this.setTransparentSort = function (method) {
			_transparentSort = method;
		}; // Clearing


		this.getClearColor = function (target) {
			if (target === undefined) {
				console.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');
				target = new Color();
			}

			return target.copy(background.getClearColor());
		};

		this.setClearColor = function () {
			background.setClearColor.apply(background, arguments);
		};

		this.getClearAlpha = function () {
			return background.getClearAlpha();
		};

		this.setClearAlpha = function () {
			background.setClearAlpha.apply(background, arguments);
		};

		this.clear = function (color, depth, stencil) {
			let bits = 0;
			if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;
			if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;
			if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear(bits);
		};

		this.clearColor = function () {
			this.clear(true, false, false);
		};

		this.clearDepth = function () {
			this.clear(false, true, false);
		};

		this.clearStencil = function () {
			this.clear(false, false, true);
		}; //


		this.dispose = function () {
			_canvas.removeEventListener('webglcontextlost', onContextLost, false);

			_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			cubemaps.dispose();
			objects.dispose();
			bindingStates.dispose();
			xr.dispose();
			xr.removeEventListener('sessionstart', onXRSessionStart);
			xr.removeEventListener('sessionend', onXRSessionEnd);
			animation.stop();
		}; // Events


		function onContextLost(event) {
			event.preventDefault();
			console.log('THREE.WebGLRenderer: Context Lost.');
			_isContextLost = true;
		}

		function onContextRestore()
		/* event */
		{
			console.log('THREE.WebGLRenderer: Context Restored.');
			_isContextLost = false;
			const infoAutoReset = info.autoReset;
			const shadowMapEnabled = shadowMap.enabled;
			const shadowMapAutoUpdate = shadowMap.autoUpdate;
			const shadowMapNeedsUpdate = shadowMap.needsUpdate;
			const shadowMapType = shadowMap.type;
			initGLContext();
			info.autoReset = infoAutoReset;
			shadowMap.enabled = shadowMapEnabled;
			shadowMap.autoUpdate = shadowMapAutoUpdate;
			shadowMap.needsUpdate = shadowMapNeedsUpdate;
			shadowMap.type = shadowMapType;
		}

		function onMaterialDispose(event) {
			const material = event.target;
			material.removeEventListener('dispose', onMaterialDispose);
			deallocateMaterial(material);
		} // Buffer deallocation


		function deallocateMaterial(material) {
			releaseMaterialProgramReferences(material);
			properties.remove(material);
		}

		function releaseMaterialProgramReferences(material) {
			const programs = properties.get(material).programs;

			if (programs !== undefined) {
				programs.forEach(function (program) {
					programCache.releaseProgram(program);
				});
			}
		} // Buffer rendering


		function renderObjectImmediate(object, program) {
			object.render(function (object) {
				_this.renderBufferImmediate(object, program);
			});
		}

		this.renderBufferImmediate = function (object, program) {
			bindingStates.initAttributes();
			const buffers = properties.get(object);
			if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();
			if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();
			if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();
			if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();
			const programAttributes = program.getAttributes();

			if (object.hasPositions) {
				_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);

				_gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);

				bindingStates.enableAttribute(programAttributes.position);

				_gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);
			}

			if (object.hasNormals) {
				_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);

				_gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);

				bindingStates.enableAttribute(programAttributes.normal);

				_gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);
			}

			if (object.hasUvs) {
				_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);

				_gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);

				bindingStates.enableAttribute(programAttributes.uv);

				_gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);
			}

			if (object.hasColors) {
				_gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);

				_gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);

				bindingStates.enableAttribute(programAttributes.color);

				_gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);
			}

			bindingStates.disableUnusedAttributes();

			_gl.drawArrays(_gl.TRIANGLES, 0, object.count);

			object.count = 0;
		};

		this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {
			if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

			const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
			const program = setProgram(camera, scene, material, object);
			state.setMaterial(material, frontFaceCW); //

			let index = geometry.index;
			const position = geometry.attributes.position; //

			if (index === null) {
				if (position === undefined || position.count === 0) return;
			} else if (index.count === 0) {
				return;
			} //


			let rangeFactor = 1;

			if (material.wireframe === true) {
				index = geometries.getWireframeAttribute(geometry);
				rangeFactor = 2;
			}

			if (material.morphTargets || material.morphNormals) {
				morphtargets.update(object, geometry, material, program);
			}

			bindingStates.setup(object, material, program, geometry, index);
			let attribute;
			let renderer = bufferRenderer;

			if (index !== null) {
				attribute = attributes.get(index);
				renderer = indexedBufferRenderer;
				renderer.setIndex(attribute);
			} //


			const dataCount = index !== null ? index.count : position.count;
			const rangeStart = geometry.drawRange.start * rangeFactor;
			const rangeCount = geometry.drawRange.count * rangeFactor;
			const groupStart = group !== null ? group.start * rangeFactor : 0;
			const groupCount = group !== null ? group.count * rangeFactor : Infinity;
			const drawStart = Math.max(rangeStart, groupStart);
			const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
			const drawCount = Math.max(0, drawEnd - drawStart + 1);
			if (drawCount === 0) return; //

			if (object.isMesh) {
				if (material.wireframe === true) {
					state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
					renderer.setMode(_gl.LINES);
				} else {
					renderer.setMode(_gl.TRIANGLES);
				}
			} else if (object.isLine) {
				let lineWidth = material.linewidth;
				if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

				state.setLineWidth(lineWidth * getTargetPixelRatio());

				if (object.isLineSegments) {
					renderer.setMode(_gl.LINES);
				} else if (object.isLineLoop) {
					renderer.setMode(_gl.LINE_LOOP);
				} else {
					renderer.setMode(_gl.LINE_STRIP);
				}
			} else if (object.isPoints) {
				renderer.setMode(_gl.POINTS);
			} else if (object.isSprite) {
				renderer.setMode(_gl.TRIANGLES);
			}

			if (object.isInstancedMesh) {
				renderer.renderInstances(drawStart, drawCount, object.count);
			} else if (geometry.isInstancedBufferGeometry) {
				const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
				renderer.renderInstances(drawStart, drawCount, instanceCount);
			} else {
				renderer.render(drawStart, drawCount);
			}
		}; // Compile


		this.compile = function (scene, camera) {
			currentRenderState = renderStates.get(scene);
			currentRenderState.init();
			scene.traverseVisible(function (object) {
				if (object.isLight && object.layers.test(camera.layers)) {
					currentRenderState.pushLight(object);

					if (object.castShadow) {
						currentRenderState.pushShadow(object);
					}
				}
			});
			currentRenderState.setupLights();
			scene.traverse(function (object) {
				const material = object.material;

				if (material) {
					if (Array.isArray(material)) {
						for (let i = 0; i < material.length; i++) {
							const material2 = material[i];
							getProgram(material2, scene, object);
						}
					} else {
						getProgram(material, scene, object);
					}
				}
			});
		}; // Animation Loop


		let onAnimationFrameCallback = null;

		function onAnimationFrame(time) {
			if (onAnimationFrameCallback) onAnimationFrameCallback(time);
		}

		function onXRSessionStart() {
			animation.stop();
		}

		function onXRSessionEnd() {
			animation.start();
		}

		const animation = new WebGLAnimation();
		animation.setAnimationLoop(onAnimationFrame);
		if (typeof window !== 'undefined') animation.setContext(window);

		this.setAnimationLoop = function (callback) {
			onAnimationFrameCallback = callback;
			xr.setAnimationLoop(callback);
			callback === null ? animation.stop() : animation.start();
		};

		xr.addEventListener('sessionstart', onXRSessionStart);
		xr.addEventListener('sessionend', onXRSessionEnd); // Rendering

		this.render = function (scene, camera) {
			let renderTarget, forceClear;

			if (arguments[2] !== undefined) {
				console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');
				renderTarget = arguments[2];
			}

			if (arguments[3] !== undefined) {
				console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');
				forceClear = arguments[3];
			}

			if (camera !== undefined && camera.isCamera !== true) {
				console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
				return;
			}

			if (_isContextLost === true) return; // update scene graph

			if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum

			if (camera.parent === null) camera.updateMatrixWorld();

			if (xr.enabled === true && xr.isPresenting === true) {
				camera = xr.getCamera(camera);
			} //


			if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);
			currentRenderState = renderStates.get(scene, renderStateStack.length);
			currentRenderState.init();
			renderStateStack.push(currentRenderState);

			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

			_frustum.setFromProjectionMatrix(_projScreenMatrix);

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
			currentRenderList = renderLists.get(scene, renderListStack.length);
			currentRenderList.init();
			renderListStack.push(currentRenderList);
			projectObject(scene, camera, 0, _this.sortObjects);
			currentRenderList.finish();

			if (_this.sortObjects === true) {
				currentRenderList.sort(_opaqueSort, _transparentSort);
			} //


			if (_clippingEnabled === true) clipping.beginShadows();
			const shadowsArray = currentRenderState.state.shadowsArray;
			shadowMap.render(shadowsArray, scene, camera);
			currentRenderState.setupLights();
			currentRenderState.setupLightsView(camera);
			if (_clippingEnabled === true) clipping.endShadows(); //

			if (this.info.autoReset === true) this.info.reset();

			if (renderTarget !== undefined) {
				this.setRenderTarget(renderTarget);
			} //


			background.render(currentRenderList, scene, camera, forceClear); // render scene

			const opaqueObjects = currentRenderList.opaque;
			const transparentObjects = currentRenderList.transparent;
			if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
			if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //

			if (_currentRenderTarget !== null) {
				// Generate mipmap if we're using any kind of mipmap filtering
				textures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary

				textures.updateMultisampleRenderTarget(_currentRenderTarget);
			} //


			if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest(true);
			state.buffers.depth.setMask(true);
			state.buffers.color.setMask(true);
			state.setPolygonOffset(false); // _gl.finish();

			bindingStates.resetDefaultState();
			_currentMaterialId = -1;
			_currentCamera = null;
			renderStateStack.pop();

			if (renderStateStack.length > 0) {
				currentRenderState = renderStateStack[renderStateStack.length - 1];
			} else {
				currentRenderState = null;
			}

			renderListStack.pop();

			if (renderListStack.length > 0) {
				currentRenderList = renderListStack[renderListStack.length - 1];
			} else {
				currentRenderList = null;
			}
		};

		function projectObject(object, camera, groupOrder, sortObjects) {
			if (object.visible === false) return;
			const visible = object.layers.test(camera.layers);

			if (visible) {
				if (object.isGroup) {
					groupOrder = object.renderOrder;
				} else if (object.isLOD) {
					if (object.autoUpdate === true) object.update(camera);
				} else if (object.isLight) {
					currentRenderState.pushLight(object);

					if (object.castShadow) {
						currentRenderState.pushShadow(object);
					}
				} else if (object.isSprite) {
					if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
						if (sortObjects) {
							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
						}

						const geometry = objects.update(object);
						const material = object.material;

						if (material.visible) {
							currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
						}
					}
				} else if (object.isImmediateRenderObject) {
					if (sortObjects) {
						_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
					}

					currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
				} else if (object.isMesh || object.isLine || object.isPoints) {
					if (object.isSkinnedMesh) {
						// update skeleton only once in a frame
						if (object.skeleton.frame !== info.render.frame) {
							object.skeleton.update();
							object.skeleton.frame = info.render.frame;
						}
					}

					if (!object.frustumCulled || _frustum.intersectsObject(object)) {
						if (sortObjects) {
							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
						}

						const geometry = objects.update(object);
						const material = object.material;

						if (Array.isArray(material)) {
							const groups = geometry.groups;

							for (let i = 0, l = groups.length; i < l; i++) {
								const group = groups[i];
								const groupMaterial = material[group.materialIndex];

								if (groupMaterial && groupMaterial.visible) {
									currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
								}
							}
						} else if (material.visible) {
							currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
						}
					}
				}
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				projectObject(children[i], camera, groupOrder, sortObjects);
			}
		}

		function renderObjects(renderList, scene, camera) {
			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

			for (let i = 0, l = renderList.length; i < l; i++) {
				const renderItem = renderList[i];
				const object = renderItem.object;
				const geometry = renderItem.geometry;
				const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
				const group = renderItem.group;

				if (camera.isArrayCamera) {
					const cameras = camera.cameras;

					for (let j = 0, jl = cameras.length; j < jl; j++) {
						const camera2 = cameras[j];

						if (object.layers.test(camera2.layers)) {
							state.viewport(_currentViewport.copy(camera2.viewport));
							currentRenderState.setupLightsView(camera2);
							renderObject(object, scene, camera2, geometry, material, group);
						}
					}
				} else {
					renderObject(object, scene, camera, geometry, material, group);
				}
			}
		}

		function renderObject(object, scene, camera, geometry, material, group) {
			object.onBeforeRender(_this, scene, camera, geometry, material, group);
			object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
			object.normalMatrix.getNormalMatrix(object.modelViewMatrix);

			if (object.isImmediateRenderObject) {
				const program = setProgram(camera, scene, material, object);
				state.setMaterial(material);
				bindingStates.reset();
				renderObjectImmediate(object, program);
			} else {
				_this.renderBufferDirect(camera, scene, geometry, material, object, group);
			}

			object.onAfterRender(_this, scene, camera, geometry, material, group);
		}

		function getProgram(material, scene, object) {
			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			const materialProperties = properties.get(material);
			const lights = currentRenderState.state.lights;
			const shadowsArray = currentRenderState.state.shadowsArray;
			const lightsStateVersion = lights.state.version;
			const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
			const programCacheKey = programCache.getProgramCacheKey(parameters);
			let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
			materialProperties.fog = scene.fog;
			materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);

			if (programs === undefined) {
				// new material
				material.addEventListener('dispose', onMaterialDispose);
				programs = new Map();
				materialProperties.programs = programs;
			}

			let program = programs.get(programCacheKey);

			if (program !== undefined) {
				// early out if program and light state is identical
				if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
					updateCommonMaterialProperties(material, parameters);
					return program;
				}
			} else {
				parameters.uniforms = programCache.getUniforms(material);
				material.onBuild(parameters, _this);
				material.onBeforeCompile(parameters, _this);
				program = programCache.acquireProgram(parameters, programCacheKey);
				programs.set(programCacheKey, program);
				materialProperties.uniforms = parameters.uniforms;
			}

			const uniforms = materialProperties.uniforms;

			if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
				uniforms.clippingPlanes = clipping.uniform;
			}

			updateCommonMaterialProperties(material, parameters); // store the light setup it was created for

			materialProperties.needsLights = materialNeedsLights(material);
			materialProperties.lightsStateVersion = lightsStateVersion;

			if (materialProperties.needsLights) {
				// wire up the material to this renderer's lighting state
				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.directionalLightShadows.value = lights.state.directionalShadow;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.spotLightShadows.value = lights.state.spotShadow;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.ltc_1.value = lights.state.rectAreaLTC1;
				uniforms.ltc_2.value = lights.state.rectAreaLTC2;
				uniforms.pointLights.value = lights.state.point;
				uniforms.pointLightShadows.value = lights.state.pointShadow;
				uniforms.hemisphereLights.value = lights.state.hemi;
				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
			}

			const progUniforms = program.getUniforms();
			const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
			materialProperties.currentProgram = program;
			materialProperties.uniformsList = uniformsList;
			return program;
		}

		function updateCommonMaterialProperties(material, parameters) {
			const materialProperties = properties.get(material);
			materialProperties.outputEncoding = parameters.outputEncoding;
			materialProperties.instancing = parameters.instancing;
			materialProperties.numClippingPlanes = parameters.numClippingPlanes;
			materialProperties.numIntersection = parameters.numClipIntersection;
			materialProperties.vertexAlphas = parameters.vertexAlphas;
		}

		function setProgram(camera, scene, material, object) {
			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			textures.resetTextureUnits();
			const fog = scene.fog;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;
			const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
			const envMap = cubemaps.get(material.envMap || environment);
			const vertexAlphas = material.vertexColors === true && object.geometry && object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;
			const materialProperties = properties.get(material);
			const lights = currentRenderState.state.lights;

			if (_clippingEnabled === true) {
				if (_localClippingEnabled === true || camera !== _currentCamera) {
					const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)

					clipping.setState(material, camera, useCache);
				}
			} //


			let needsProgramChange = false;

			if (material.version === materialProperties.__version) {
				if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
					needsProgramChange = true;
				} else if (materialProperties.outputEncoding !== encoding) {
					needsProgramChange = true;
				} else if (object.isInstancedMesh && materialProperties.instancing === false) {
					needsProgramChange = true;
				} else if (!object.isInstancedMesh && materialProperties.instancing === true) {
					needsProgramChange = true;
				} else if (materialProperties.envMap !== envMap) {
					needsProgramChange = true;
				} else if (material.fog && materialProperties.fog !== fog) {
					needsProgramChange = true;
				} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
					needsProgramChange = true;
				} else if (materialProperties.vertexAlphas !== vertexAlphas) {
					needsProgramChange = true;
				}
			} else {
				needsProgramChange = true;
				materialProperties.__version = material.version;
			} //


			let program = materialProperties.currentProgram;

			if (needsProgramChange === true) {
				program = getProgram(material, scene, object);
			}

			let refreshProgram = false;
			let refreshMaterial = false;
			let refreshLights = false;
			const p_uniforms = program.getUniforms(),
						m_uniforms = materialProperties.uniforms;

			if (state.useProgram(program.program)) {
				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;
			}

			if (material.id !== _currentMaterialId) {
				_currentMaterialId = material.id;
				refreshMaterial = true;
			}

			if (refreshProgram || _currentCamera !== camera) {
				p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);

				if (capabilities.logarithmicDepthBuffer) {
					p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
				}

				if (_currentCamera !== camera) {
					_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true; // set to true on material change

					refreshLights = true; // remains set until update done
				} // load material specific uniforms
				// (shader material also gets them for the sake of genericity)


				if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
					const uCamPos = p_uniforms.map.cameraPosition;

					if (uCamPos !== undefined) {
						uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
					}
				}

				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
					p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
				}

				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {
					p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
				}
			} // skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// otherwise textures used for skinning can take over texture units reserved for other material textures


			if (material.skinning) {
				p_uniforms.setOptional(_gl, object, 'bindMatrix');
				p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
				const skeleton = object.skeleton;

				if (skeleton) {
					const bones = skeleton.bones;

					if (capabilities.floatVertexTextures) {
						if (skeleton.boneTexture === null) {
							// layout (1 matrix = 4 pixels)
							//			RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
							//	with	8x8	pixel texture max	 16 bones * 4 pixels =	(8 * 8)
							//			 16x16 pixel texture max	 64 bones * 4 pixels = (16 * 16)
							//			 32x32 pixel texture max	256 bones * 4 pixels = (32 * 32)
							//			 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
							let size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix

							size = ceilPowerOfTwo(size);
							size = Math.max(size, 4);
							const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel

							boneMatrices.set(skeleton.boneMatrices); // copy current values

							const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;
						}

						p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);
						p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
					} else {
						p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
					}
				}
			}

			if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
				materialProperties.receiveShadow = object.receiveShadow;
				p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
			}

			if (refreshMaterial) {
				p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);

				if (materialProperties.needsLights) {
					// the current material requires lighting info
					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required
					markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
				} // refresh uniforms common to several materials


				if (fog && material.fog) {
					materials.refreshFogUniforms(m_uniforms, fog);
				}

				materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);
				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
			}

			if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
				material.uniformsNeedUpdate = false;
			}

			if (material.isSpriteMaterial) {
				p_uniforms.setValue(_gl, 'center', object.center);
			} // common matrices


			p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
			p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
			p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
			return program;
		} // If uniforms are marked as clean, they don't need to be loaded to the GPU.


		function markUniformsLightsNeedsUpdate(uniforms, value) {
			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;
			uniforms.directionalLights.needsUpdate = value;
			uniforms.directionalLightShadows.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.pointLightShadows.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.spotLightShadows.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;
		}

		function materialNeedsLights(material) {
			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
		}

		this.getActiveCubeFace = function () {
			return _currentActiveCubeFace;
		};

		this.getActiveMipmapLevel = function () {
			return _currentActiveMipmapLevel;
		};

		this.getRenderTarget = function () {
			return _currentRenderTarget;
		};

		this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;

			if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {
				textures.setupRenderTarget(renderTarget);
			}

			let framebuffer = null;
			let isCube = false;
			let isRenderTarget3D = false;

			if (renderTarget) {
				const texture = renderTarget.texture;

				if (texture.isDataTexture3D || texture.isDataTexture2DArray) {
					isRenderTarget3D = true;
				}

				const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;

				if (renderTarget.isWebGLCubeRenderTarget) {
					framebuffer = __webglFramebuffer[activeCubeFace];
					isCube = true;
				} else if (renderTarget.isWebGLMultisampleRenderTarget) {
					framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
				} else {
					framebuffer = __webglFramebuffer;
				}

				_currentViewport.copy(renderTarget.viewport);

				_currentScissor.copy(renderTarget.scissor);

				_currentScissorTest = renderTarget.scissorTest;
			} else {
				_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();

				_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();

				_currentScissorTest = _scissorTest;
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
			state.viewport(_currentViewport);
			state.scissor(_currentScissor);
			state.setScissorTest(_currentScissorTest);

			if (isCube) {
				const textureProperties = properties.get(renderTarget.texture);

				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
			} else if (isRenderTarget3D) {
				const textureProperties = properties.get(renderTarget.texture);
				const layer = activeCubeFace || 0;

				_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
			}
		};

		this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
			if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
				console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
				return;
			}

			let framebuffer = properties.get(renderTarget).__webglFramebuffer;

			if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {
				framebuffer = framebuffer[activeCubeFaceIndex];
			}

			if (framebuffer) {
				state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

				try {
					const texture = renderTarget.texture;
					const textureFormat = texture.format;
					const textureType = texture.type;

					if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
						return;
					}

					const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));

					if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
					!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
					!halfFloatSupportedByExt) {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
						return;
					}

					if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {
						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
						if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
							_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
						}
					} else {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
					}
				} finally {
					// restore framebuffer of current render target if necessary
					const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
					state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
				}
			}
		};

		this.copyFramebufferToTexture = function (position, texture, level = 0) {
			const levelScale = Math.pow(2, -level);
			const width = Math.floor(texture.image.width * levelScale);
			const height = Math.floor(texture.image.height * levelScale);
			const glFormat = utils.convert(texture.format);
			textures.setTexture2D(texture, 0);

			_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);

			state.unbindTexture();
		};

		this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {
			const width = srcTexture.image.width;
			const height = srcTexture.image.height;
			const glFormat = utils.convert(dstTexture.format);
			const glType = utils.convert(dstTexture.type);
			textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei
			// parameters, make sure they are correct for the dstTexture

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);

			if (srcTexture.isDataTexture) {
				_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
			} else {
				if (srcTexture.isCompressedTexture) {
					_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
				} else {
					_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
				}
			} // Generate mipmaps only when copying level 0


			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
			state.unbindTexture();
		};

		this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {
			if (_this.isWebGL1Renderer) {
				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
				return;
			}

			const {
				width,
				height,
				data
			} = srcTexture.image;
			const glFormat = utils.convert(dstTexture.format);
			const glType = utils.convert(dstTexture.type);
			let glTarget;

			if (dstTexture.isDataTexture3D) {
				textures.setTexture3D(dstTexture, 0);
				glTarget = _gl.TEXTURE_3D;
			} else if (dstTexture.isDataTexture2DArray) {
				textures.setTexture2DArray(dstTexture, 0);
				glTarget = _gl.TEXTURE_2D_ARRAY;
			} else {
				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
				return;
			}

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);

			const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);

			const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);

			const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);

			const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);

			const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);

			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);

			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);

			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);

			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);

			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);

			_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);

			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);

			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);

			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);

			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);

			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0


			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
			state.unbindTexture();
		};

		this.initTexture = function (texture) {
			textures.setTexture2D(texture, 0);
			state.unbindTexture();
		};

		this.resetState = function () {
			_currentActiveCubeFace = 0;
			_currentActiveMipmapLevel = 0;
			_currentRenderTarget = null;
			state.reset();
			bindingStates.reset();
		};

		if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
			__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
				detail: this
			})); // eslint-disable-line no-undef

		}
	}

	class WebGL1Renderer extends WebGLRenderer {}

	WebGL1Renderer.prototype.isWebGL1Renderer = true;

	class FogExp2 {
		constructor(color, density = 0.00025) {
			this.name = '';
			this.color = new Color(color);
			this.density = density;
		}

		clone() {
			return new FogExp2(this.color, this.density);
		}

		toJSON()
		/* meta */
		{
			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};
		}

	}

	FogExp2.prototype.isFogExp2 = true;

	class Fog {
		constructor(color, near = 1, far = 1000) {
			this.name = '';
			this.color = new Color(color);
			this.near = near;
			this.far = far;
		}

		clone() {
			return new Fog(this.color, this.near, this.far);
		}

		toJSON()
		/* meta */
		{
			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};
		}

	}

	Fog.prototype.isFog = true;

	class Scene extends Object3D {
		constructor() {
			super();
			this.type = 'Scene';
			this.background = null;
			this.environment = null;
			this.fog = null;
			this.overrideMaterial = null;
			this.autoUpdate = true; // checked by the renderer

			if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
				__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
					detail: this
				})); // eslint-disable-line no-undef

			}
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			if (source.background !== null) this.background = source.background.clone();
			if (source.environment !== null) this.environment = source.environment.clone();
			if (source.fog !== null) this.fog = source.fog.clone();
			if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			if (this.background !== null) data.object.background = this.background.toJSON(meta);
			if (this.environment !== null) data.object.environment = this.environment.toJSON(meta);
			if (this.fog !== null) data.object.fog = this.fog.toJSON();
			return data;
		}

	}

	Scene.prototype.isScene = true;

	class InterleavedBuffer {
		constructor(array, stride) {
			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;
			this.usage = StaticDrawUsage;
			this.updateRange = {
				offset: 0,
				count: -1
			};
			this.version = 0;
			this.uuid = generateUUID();

			this.onUploadCallback = function () {};
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setUsage(value) {
			this.usage = value;
			return this;
		}

		copy(source) {
			this.array = new source.array.constructor(source.array);
			this.count = source.count;
			this.stride = source.stride;
			this.usage = source.usage;
			return this;
		}

		copyAt(index1, attribute, index2) {
			index1 *= this.stride;
			index2 *= attribute.stride;

			for (let i = 0, l = this.stride; i < l; i++) {
				this.array[index1 + i] = attribute.array[index2 + i];
			}

			return this;
		}

		set(value, offset = 0) {
			this.array.set(value, offset);
			return this;
		}

		clone(data) {
			if (data.arrayBuffers === undefined) {
				data.arrayBuffers = {};
			}

			if (this.array.buffer._uuid === undefined) {
				this.array.buffer._uuid = generateUUID();
			}

			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
				data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
			}

			const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
			const ib = new InterleavedBuffer(array, this.stride);
			ib.setUsage(this.usage);
			return ib;
		}

		onUpload(callback) {
			this.onUploadCallback = callback;
			return this;
		}

		toJSON(data) {
			if (data.arrayBuffers === undefined) {
				data.arrayBuffers = {};
			} // generate UUID for array buffer if necessary


			if (this.array.buffer._uuid === undefined) {
				this.array.buffer._uuid = generateUUID();
			}

			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
				data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
			} //


			return {
				uuid: this.uuid,
				buffer: this.array.buffer._uuid,
				type: this.array.constructor.name,
				stride: this.stride
			};
		}

	}

	InterleavedBuffer.prototype.isInterleavedBuffer = true;

	const _vector$6 = new /*@__PURE__*/Vector3();

	class InterleavedBufferAttribute {
		constructor(interleavedBuffer, itemSize, offset, normalized) {
			this.name = '';
			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;
			this.normalized = normalized === true;
		}

		get count() {
			return this.data.count;
		}

		get array() {
			return this.data.array;
		}

		set needsUpdate(value) {
			this.data.needsUpdate = value;
		}

		applyMatrix4(m) {
			for (let i = 0, l = this.data.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.applyMatrix4(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		applyNormalMatrix(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.applyNormalMatrix(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		transformDirection(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.transformDirection(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		setX(index, x) {
			this.data.array[index * this.data.stride + this.offset] = x;
			return this;
		}

		setY(index, y) {
			this.data.array[index * this.data.stride + this.offset + 1] = y;
			return this;
		}

		setZ(index, z) {
			this.data.array[index * this.data.stride + this.offset + 2] = z;
			return this;
		}

		setW(index, w) {
			this.data.array[index * this.data.stride + this.offset + 3] = w;
			return this;
		}

		getX(index) {
			return this.data.array[index * this.data.stride + this.offset];
		}

		getY(index) {
			return this.data.array[index * this.data.stride + this.offset + 1];
		}

		getZ(index) {
			return this.data.array[index * this.data.stride + this.offset + 2];
		}

		getW(index) {
			return this.data.array[index * this.data.stride + this.offset + 3];
		}

		setXY(index, x, y) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			return this;
		}

		setXYZ(index, x, y, z) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			this.data.array[index + 2] = z;
			return this;
		}

		setXYZW(index, x, y, z, w) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			this.data.array[index + 2] = z;
			this.data.array[index + 3] = w;
			return this;
		}

		clone(data) {
			if (data === undefined) {
				console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
				const array = [];

				for (let i = 0; i < this.count; i++) {
					const index = i * this.data.stride + this.offset;

					for (let j = 0; j < this.itemSize; j++) {
						array.push(this.data.array[index + j]);
					}
				}

				return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
			} else {
				if (data.interleavedBuffers === undefined) {
					data.interleavedBuffers = {};
				}

				if (data.interleavedBuffers[this.data.uuid] === undefined) {
					data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
				}

				return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
			}
		}

		toJSON(data) {
			if (data === undefined) {
				console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
				const array = [];

				for (let i = 0; i < this.count; i++) {
					const index = i * this.data.stride + this.offset;

					for (let j = 0; j < this.itemSize; j++) {
						array.push(this.data.array[index + j]);
					}
				} // deinterleave data and save it as an ordinary buffer attribute for now


				return {
					itemSize: this.itemSize,
					type: this.array.constructor.name,
					array: array,
					normalized: this.normalized
				};
			} else {
				// save as true interlaved attribtue
				if (data.interleavedBuffers === undefined) {
					data.interleavedBuffers = {};
				}

				if (data.interleavedBuffers[this.data.uuid] === undefined) {
					data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
				}

				return {
					isInterleavedBufferAttribute: true,
					itemSize: this.itemSize,
					data: this.data.uuid,
					offset: this.offset,
					normalized: this.normalized
				};
			}
		}

	}

	InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	map: new THREE.Texture( <Image> ),
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *	rotation: <float>,
	 *	sizeAttenuation: <bool>
	 * }
	 */

	class SpriteMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'SpriteMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.alphaMap = null;
			this.rotation = 0;
			this.sizeAttenuation = true;
			this.transparent = true;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.rotation = source.rotation;
			this.sizeAttenuation = source.sizeAttenuation;
			return this;
		}

	}

	SpriteMaterial.prototype.isSpriteMaterial = true;

	let _geometry;

	const _intersectPoint = /*@__PURE__*/new Vector3();

	const _worldScale = /*@__PURE__*/new Vector3();

	const _mvPosition = /*@__PURE__*/new Vector3();

	const _alignedPosition = /*@__PURE__*/new Vector2();

	const _rotatedPosition = /*@__PURE__*/new Vector2();

	const _viewWorldMatrix = /*@__PURE__*/new Matrix4();

	const _vA = /*@__PURE__*/new Vector3();

	const _vB = /*@__PURE__*/new Vector3();

	const _vC = /*@__PURE__*/new Vector3();

	const _uvA = /*@__PURE__*/new Vector2();

	const _uvB = /*@__PURE__*/new Vector2();

	const _uvC = /*@__PURE__*/new Vector2();

	class Sprite extends Object3D {
		constructor(material) {
			super();
			this.type = 'Sprite';

			if (_geometry === undefined) {
				_geometry = new BufferGeometry();
				const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
				const interleavedBuffer = new InterleavedBuffer(float32Array, 5);

				_geometry.setIndex([0, 1, 2, 0, 2, 3]);

				_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));

				_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
			}

			this.geometry = _geometry;
			this.material = material !== undefined ? material : new SpriteMaterial();
			this.center = new Vector2(0.5, 0.5);
		}

		raycast(raycaster, intersects) {
			if (raycaster.camera === null) {
				console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
			}

			_worldScale.setFromMatrixScale(this.matrixWorld);

			_viewWorldMatrix.copy(raycaster.camera.matrixWorld);

			this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);

			_mvPosition.setFromMatrixPosition(this.modelViewMatrix);

			if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
				_worldScale.multiplyScalar(-_mvPosition.z);
			}

			const rotation = this.material.rotation;
			let sin, cos;

			if (rotation !== 0) {
				cos = Math.cos(rotation);
				sin = Math.sin(rotation);
			}

			const center = this.center;
			transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
			transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
			transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

			_uvA.set(0, 0);

			_uvB.set(1, 0);

			_uvC.set(1, 1); // check first triangle


			let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);

			if (intersect === null) {
				// check second triangle
				transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

				_uvB.set(0, 1);

				intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);

				if (intersect === null) {
					return;
				}
			}

			const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
			if (distance < raycaster.near || distance > raycaster.far) return;
			intersects.push({
				distance: distance,
				point: _intersectPoint.clone(),
				uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
				face: null,
				object: this
			});
		}

		copy(source) {
			super.copy(source);
			if (source.center !== undefined) this.center.copy(source.center);
			this.material = source.material;
			return this;
		}

	}

	Sprite.prototype.isSprite = true;

	function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
		// compute position in camera space
		_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero


		if (sin !== undefined) {
			_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
			_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
		} else {
			_rotatedPosition.copy(_alignedPosition);
		}

		vertexPosition.copy(mvPosition);
		vertexPosition.x += _rotatedPosition.x;
		vertexPosition.y += _rotatedPosition.y; // transform to world space

		vertexPosition.applyMatrix4(_viewWorldMatrix);
	}

	const _v1$2 = /*@__PURE__*/new Vector3();

	const _v2$1 = /*@__PURE__*/new Vector3();

	class LOD extends Object3D {
		constructor() {
			super();
			this._currentLevel = 0;
			this.type = 'LOD';
			Object.defineProperties(this, {
				levels: {
					enumerable: true,
					value: []
				},
				isLOD: {
					value: true
				}
			});
			this.autoUpdate = true;
		}

		copy(source) {
			super.copy(source, false);
			const levels = source.levels;

			for (let i = 0, l = levels.length; i < l; i++) {
				const level = levels[i];
				this.addLevel(level.object.clone(), level.distance);
			}

			this.autoUpdate = source.autoUpdate;
			return this;
		}

		addLevel(object, distance = 0) {
			distance = Math.abs(distance);
			const levels = this.levels;
			let l;

			for (l = 0; l < levels.length; l++) {
				if (distance < levels[l].distance) {
					break;
				}
			}

			levels.splice(l, 0, {
				distance: distance,
				object: object
			});
			this.add(object);
			return this;
		}

		getCurrentLevel() {
			return this._currentLevel;
		}

		getObjectForDistance(distance) {
			const levels = this.levels;

			if (levels.length > 0) {
				let i, l;

				for (i = 1, l = levels.length; i < l; i++) {
					if (distance < levels[i].distance) {
						break;
					}
				}

				return levels[i - 1].object;
			}

			return null;
		}

		raycast(raycaster, intersects) {
			const levels = this.levels;

			if (levels.length > 0) {
				_v1$2.setFromMatrixPosition(this.matrixWorld);

				const distance = raycaster.ray.origin.distanceTo(_v1$2);
				this.getObjectForDistance(distance).raycast(raycaster, intersects);
			}
		}

		update(camera) {
			const levels = this.levels;

			if (levels.length > 1) {
				_v1$2.setFromMatrixPosition(camera.matrixWorld);

				_v2$1.setFromMatrixPosition(this.matrixWorld);

				const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
				levels[0].object.visible = true;
				let i, l;

				for (i = 1, l = levels.length; i < l; i++) {
					if (distance >= levels[i].distance) {
						levels[i - 1].object.visible = false;
						levels[i].object.visible = true;
					} else {
						break;
					}
				}

				this._currentLevel = i - 1;

				for (; i < l; i++) {
					levels[i].object.visible = false;
				}
			}
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			if (this.autoUpdate === false) data.object.autoUpdate = false;
			data.object.levels = [];
			const levels = this.levels;

			for (let i = 0, l = levels.length; i < l; i++) {
				const level = levels[i];
				data.object.levels.push({
					object: level.object.uuid,
					distance: level.distance
				});
			}

			return data;
		}

	}

	const _basePosition = /*@__PURE__*/new Vector3();

	const _skinIndex = /*@__PURE__*/new Vector4();

	const _skinWeight = /*@__PURE__*/new Vector4();

	const _vector$5 = /*@__PURE__*/new Vector3();

	const _matrix = /*@__PURE__*/new Matrix4();

	class SkinnedMesh extends Mesh {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'SkinnedMesh';
			this.bindMode = 'attached';
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();
		}

		copy(source) {
			super.copy(source);
			this.bindMode = source.bindMode;
			this.bindMatrix.copy(source.bindMatrix);
			this.bindMatrixInverse.copy(source.bindMatrixInverse);
			this.skeleton = source.skeleton;
			return this;
		}

		bind(skeleton, bindMatrix) {
			this.skeleton = skeleton;

			if (bindMatrix === undefined) {
				this.updateMatrixWorld(true);
				this.skeleton.calculateInverses();
				bindMatrix = this.matrixWorld;
			}

			this.bindMatrix.copy(bindMatrix);
			this.bindMatrixInverse.copy(bindMatrix).invert();
		}

		pose() {
			this.skeleton.pose();
		}

		normalizeSkinWeights() {
			const vector = new Vector4();
			const skinWeight = this.geometry.attributes.skinWeight;

			for (let i = 0, l = skinWeight.count; i < l; i++) {
				vector.x = skinWeight.getX(i);
				vector.y = skinWeight.getY(i);
				vector.z = skinWeight.getZ(i);
				vector.w = skinWeight.getW(i);
				const scale = 1.0 / vector.manhattanLength();

				if (scale !== Infinity) {
					vector.multiplyScalar(scale);
				} else {
					vector.set(1, 0, 0, 0); // do something reasonable
				}

				skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
			}
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);

			if (this.bindMode === 'attached') {
				this.bindMatrixInverse.copy(this.matrixWorld).invert();
			} else if (this.bindMode === 'detached') {
				this.bindMatrixInverse.copy(this.bindMatrix).invert();
			} else {
				console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
			}
		}

		boneTransform(index, target) {
			const skeleton = this.skeleton;
			const geometry = this.geometry;

			_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);

			_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);

			_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);

			target.set(0, 0, 0);

			for (let i = 0; i < 4; i++) {
				const weight = _skinWeight.getComponent(i);

				if (weight !== 0) {
					const boneIndex = _skinIndex.getComponent(i);

					_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);

					target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
				}
			}

			return target.applyMatrix4(this.bindMatrixInverse);
		}

	}

	SkinnedMesh.prototype.isSkinnedMesh = true;

	class Bone extends Object3D {
		constructor() {
			super();
			this.type = 'Bone';
		}

	}

	Bone.prototype.isBone = true;

	const _offsetMatrix = /*@__PURE__*/new Matrix4();

	const _identityMatrix = /*@__PURE__*/new Matrix4();

	class Skeleton {
		constructor(bones = [], boneInverses = []) {
			this.uuid = generateUUID();
			this.bones = bones.slice(0);
			this.boneInverses = boneInverses;
			this.boneMatrices = null;
			this.boneTexture = null;
			this.boneTextureSize = 0;
			this.frame = -1;
			this.init();
		}

		init() {
			const bones = this.bones;
			const boneInverses = this.boneInverses;
			this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary

			if (boneInverses.length === 0) {
				this.calculateInverses();
			} else {
				// handle special case
				if (bones.length !== boneInverses.length) {
					console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
					this.boneInverses = [];

					for (let i = 0, il = this.bones.length; i < il; i++) {
						this.boneInverses.push(new Matrix4());
					}
				}
			}
		}

		calculateInverses() {
			this.boneInverses.length = 0;

			for (let i = 0, il = this.bones.length; i < il; i++) {
				const inverse = new Matrix4();

				if (this.bones[i]) {
					inverse.copy(this.bones[i].matrixWorld).invert();
				}

				this.boneInverses.push(inverse);
			}
		}

		pose() {
			// recover the bind-time world matrices
			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone) {
					bone.matrixWorld.copy(this.boneInverses[i]).invert();
				}
			} // compute the local matrices, positions, rotations and scales


			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone) {
					if (bone.parent && bone.parent.isBone) {
						bone.matrix.copy(bone.parent.matrixWorld).invert();
						bone.matrix.multiply(bone.matrixWorld);
					} else {
						bone.matrix.copy(bone.matrixWorld);
					}

					bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
				}
			}
		}

		update() {
			const bones = this.bones;
			const boneInverses = this.boneInverses;
			const boneMatrices = this.boneMatrices;
			const boneTexture = this.boneTexture; // flatten bone matrices to array

			for (let i = 0, il = bones.length; i < il; i++) {
				// compute the offset between the current and the original transform
				const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;

				_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);

				_offsetMatrix.toArray(boneMatrices, i * 16);
			}

			if (boneTexture !== null) {
				boneTexture.needsUpdate = true;
			}
		}

		clone() {
			return new Skeleton(this.bones, this.boneInverses);
		}

		getBoneByName(name) {
			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone.name === name) {
					return bone;
				}
			}

			return undefined;
		}

		dispose() {
			if (this.boneTexture !== null) {
				this.boneTexture.dispose();
				this.boneTexture = null;
			}
		}

		fromJSON(json, bones) {
			this.uuid = json.uuid;

			for (let i = 0, l = json.bones.length; i < l; i++) {
				const uuid = json.bones[i];
				let bone = bones[uuid];

				if (bone === undefined) {
					console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
					bone = new Bone();
				}

				this.bones.push(bone);
				this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
			}

			this.init();
			return this;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'Skeleton',
					generator: 'Skeleton.toJSON'
				},
				bones: [],
				boneInverses: []
			};
			data.uuid = this.uuid;
			const bones = this.bones;
			const boneInverses = this.boneInverses;

			for (let i = 0, l = bones.length; i < l; i++) {
				const bone = bones[i];
				data.bones.push(bone.uuid);
				const boneInverse = boneInverses[i];
				data.boneInverses.push(boneInverse.toArray());
			}

			return data;
		}

	}

	const _instanceLocalMatrix = /*@__PURE__*/new Matrix4();

	const _instanceWorldMatrix = /*@__PURE__*/new Matrix4();

	const _instanceIntersects = [];

	const _mesh = /*@__PURE__*/new Mesh();

	class InstancedMesh extends Mesh {
		constructor(geometry, material, count) {
			super(geometry, material);
			this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);
			this.instanceColor = null;
			this.count = count;
			this.frustumCulled = false;
		}

		copy(source) {
			super.copy(source);
			this.instanceMatrix.copy(source.instanceMatrix);
			if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
			this.count = source.count;
			return this;
		}

		getColorAt(index, color) {
			color.fromArray(this.instanceColor.array, index * 3);
		}

		getMatrixAt(index, matrix) {
			matrix.fromArray(this.instanceMatrix.array, index * 16);
		}

		raycast(raycaster, intersects) {
			const matrixWorld = this.matrixWorld;
			const raycastTimes = this.count;
			_mesh.geometry = this.geometry;
			_mesh.material = this.material;
			if (_mesh.material === undefined) return;

			for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
				// calculate the world matrix for each instance
				this.getMatrixAt(instanceId, _instanceLocalMatrix);

				_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance


				_mesh.matrixWorld = _instanceWorldMatrix;

				_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast


				for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
					const intersect = _instanceIntersects[i];
					intersect.instanceId = instanceId;
					intersect.object = this;
					intersects.push(intersect);
				}

				_instanceIntersects.length = 0;
			}
		}

		setColorAt(index, color) {
			if (this.instanceColor === null) {
				this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);
			}

			color.toArray(this.instanceColor.array, index * 3);
		}

		setMatrixAt(index, matrix) {
			matrix.toArray(this.instanceMatrix.array, index * 16);
		}

		updateMorphTargets() {}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	InstancedMesh.prototype.isInstancedMesh = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	linewidth: <float>,
	 *	linecap: "round",
	 *	linejoin: "round"
	 * }
	 */

	class LineBasicMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'LineBasicMaterial';
			this.color = new Color(0xffffff);
			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';
			this.morphTargets = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;
			this.morphTargets = source.morphTargets;
			return this;
		}

	}

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	const _start$1 = /*@__PURE__*/new Vector3();

	const _end$1 = /*@__PURE__*/new Vector3();

	const _inverseMatrix$1 = /*@__PURE__*/new Matrix4();

	const _ray$1 = /*@__PURE__*/new Ray();

	const _sphere$1 = /*@__PURE__*/new Sphere();

	class Line extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
			super();
			this.type = 'Line';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);
			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		computeLineDistances() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				// we assume non-indexed geometry
				if (geometry.index === null) {
					const positionAttribute = geometry.attributes.position;
					const lineDistances = [0];

					for (let i = 1, l = positionAttribute.count; i < l; i++) {
						_start$1.fromBufferAttribute(positionAttribute, i - 1);

						_end$1.fromBufferAttribute(positionAttribute, i);

						lineDistances[i] = lineDistances[i - 1];
						lineDistances[i] += _start$1.distanceTo(_end$1);
					}

					geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
				} else {
					console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}

			return this;
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const matrixWorld = this.matrixWorld;
			const threshold = raycaster.params.Line.threshold;
			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$1.copy(geometry.boundingSphere);

			_sphere$1.applyMatrix4(matrixWorld);

			_sphere$1.radius += threshold;
			if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //

			_inverseMatrix$1.copy(matrixWorld).invert();

			_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);

			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
			const localThresholdSq = localThreshold * localThreshold;
			const vStart = new Vector3();
			const vEnd = new Vector3();
			const interSegment = new Vector3();
			const interRay = new Vector3();
			const step = this.isLineSegments ? 2 : 1;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const attributes = geometry.attributes;
				const positionAttribute = attributes.position;

				if (index !== null) {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(index.count, drawRange.start + drawRange.count);

					for (let i = start, l = end - 1; i < l; i += step) {
						const a = index.getX(i);
						const b = index.getX(i + 1);
						vStart.fromBufferAttribute(positionAttribute, a);
						vEnd.fromBufferAttribute(positionAttribute, b);

						const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

						if (distSq > localThresholdSq) continue;
						interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

						const distance = raycaster.ray.origin.distanceTo(interRay);
						if (distance < raycaster.near || distance > raycaster.far) continue;
						intersects.push({
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4(this.matrixWorld),
							index: i,
							face: null,
							faceIndex: null,
							object: this
						});
					}
				} else {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

					for (let i = start, l = end - 1; i < l; i += step) {
						vStart.fromBufferAttribute(positionAttribute, i);
						vEnd.fromBufferAttribute(positionAttribute, i + 1);

						const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

						if (distSq > localThresholdSq) continue;
						interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

						const distance = raycaster.ray.origin.distanceTo(interRay);
						if (distance < raycaster.near || distance > raycaster.far) continue;
						intersects.push({
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4(this.matrixWorld),
							index: i,
							face: null,
							faceIndex: null,
							object: this
						});
					}
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

	}

	Line.prototype.isLine = true;

	const _start = /*@__PURE__*/new Vector3();

	const _end = /*@__PURE__*/new Vector3();

	class LineSegments extends Line {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'LineSegments';
		}

		computeLineDistances() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				// we assume non-indexed geometry
				if (geometry.index === null) {
					const positionAttribute = geometry.attributes.position;
					const lineDistances = [];

					for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
						_start.fromBufferAttribute(positionAttribute, i);

						_end.fromBufferAttribute(positionAttribute, i + 1);

						lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
						lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
					}

					geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
				} else {
					console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}

			return this;
		}

	}

	LineSegments.prototype.isLineSegments = true;

	class LineLoop extends Line {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'LineLoop';
		}

	}

	LineLoop.prototype.isLineLoop = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *	map: new THREE.Texture( <Image> ),
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	size: <float>,
	 *	sizeAttenuation: <bool>
	 *
	 *	morphTargets: <bool>
	 * }
	 */

	class PointsMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'PointsMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.alphaMap = null;
			this.size = 1;
			this.sizeAttenuation = true;
			this.morphTargets = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;
			this.morphTargets = source.morphTargets;
			return this;
		}

	}

	PointsMaterial.prototype.isPointsMaterial = true;

	const _inverseMatrix = /*@__PURE__*/new Matrix4();

	const _ray = /*@__PURE__*/new Ray();

	const _sphere = /*@__PURE__*/new Sphere();

	const _position$2 = /*@__PURE__*/new Vector3();

	class Points extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
			super();
			this.type = 'Points';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);
			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const matrixWorld = this.matrixWorld;
			const threshold = raycaster.params.Points.threshold;
			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere.copy(geometry.boundingSphere);

			_sphere.applyMatrix4(matrixWorld);

			_sphere.radius += threshold;
			if (raycaster.ray.intersectsSphere(_sphere) === false) return; //

			_inverseMatrix.copy(matrixWorld).invert();

			_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);

			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
			const localThresholdSq = localThreshold * localThreshold;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const attributes = geometry.attributes;
				const positionAttribute = attributes.position;

				if (index !== null) {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(index.count, drawRange.start + drawRange.count);

					for (let i = start, il = end; i < il; i++) {
						const a = index.getX(i);

						_position$2.fromBufferAttribute(positionAttribute, a);

						testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
					}
				} else {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

					for (let i = start, l = end; i < l; i++) {
						_position$2.fromBufferAttribute(positionAttribute, i);

						testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
					}
				}
			} else {
				console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

	}

	Points.prototype.isPoints = true;

	function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
		const rayPointDistanceSq = _ray.distanceSqToPoint(point);

		if (rayPointDistanceSq < localThresholdSq) {
			const intersectPoint = new Vector3();

			_ray.closestPointToPoint(point, intersectPoint);

			intersectPoint.applyMatrix4(matrixWorld);
			const distance = raycaster.ray.origin.distanceTo(intersectPoint);
			if (distance < raycaster.near || distance > raycaster.far) return;
			intersects.push({
				distance: distance,
				distanceToRay: Math.sqrt(rayPointDistanceSq),
				point: intersectPoint,
				index: index,
				face: null,
				object: object
			});
		}
	}

	class VideoTexture extends Texture {
		constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
			super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.format = format !== undefined ? format : RGBFormat;
			this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.generateMipmaps = false;
			const scope = this;

			function updateVideo() {
				scope.needsUpdate = true;
				video.requestVideoFrameCallback(updateVideo);
			}

			if ('requestVideoFrameCallback' in video) {
				video.requestVideoFrameCallback(updateVideo);
			}
		}

		clone() {
			return new this.constructor(this.image).copy(this);
		}

		update() {
			const video = this.image;
			const hasVideoFrameCallback = ('requestVideoFrameCallback' in video);

			if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
				this.needsUpdate = true;
			}
		}

	}

	VideoTexture.prototype.isVideoTexture = true;

	class CompressedTexture extends Texture {
		constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
			this.image = {
				width: width,
				height: height
			};
			this.mipmaps = mipmaps; // no flipping for cube textures
			// (also flipping doesn't work for compressed textures )

			this.flipY = false; // can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files

			this.generateMipmaps = false;
		}

	}

	CompressedTexture.prototype.isCompressedTexture = true;

	class CanvasTexture extends Texture {
		constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
			super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.needsUpdate = true;
		}

	}

	CanvasTexture.prototype.isCanvasTexture = true;

	class DepthTexture extends Texture {
		constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
			format = format !== undefined ? format : DepthFormat;

			if (format !== DepthFormat && format !== DepthStencilFormat) {
				throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
			}

			if (type === undefined && format === DepthFormat) type = UnsignedShortType;
			if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.image = {
				width: width,
				height: height
			};
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
			this.flipY = false;
			this.generateMipmaps = false;
		}

	}

	DepthTexture.prototype.isDepthTexture = true;

	class CircleGeometry extends BufferGeometry {
		constructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'CircleGeometry';
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			segments = Math.max(3, segments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const vertex = new Vector3();
			const uv = new Vector2(); // center point

			vertices.push(0, 0, 0);
			normals.push(0, 0, 1);
			uvs.push(0.5, 0.5);

			for (let s = 0, i = 3; s <= segments; s++, i += 3) {
				const segment = thetaStart + s / segments * thetaLength; // vertex

				vertex.x = radius * Math.cos(segment);
				vertex.y = radius * Math.sin(segment);
				vertices.push(vertex.x, vertex.y, vertex.z); // normal

				normals.push(0, 0, 1); // uvs

				uv.x = (vertices[i] / radius + 1) / 2;
				uv.y = (vertices[i + 1] / radius + 1) / 2;
				uvs.push(uv.x, uv.y);
			} // indices


			for (let i = 1; i <= segments; i++) {
				indices.push(i, i + 1, 0);
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	class CylinderGeometry extends BufferGeometry {
		constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'CylinderGeometry';
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			const scope = this;
			radialSegments = Math.floor(radialSegments);
			heightSegments = Math.floor(heightSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let index = 0;
			const indexArray = [];
			const halfHeight = height / 2;
			let groupStart = 0; // generate geometry

			generateTorso();

			if (openEnded === false) {
				if (radiusTop > 0) generateCap(true);
				if (radiusBottom > 0) generateCap(false);
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

			function generateTorso() {
				const normal = new Vector3();
				const vertex = new Vector3();
				let groupCount = 0; // this will be used to calculate the normal

				const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs

				for (let y = 0; y <= heightSegments; y++) {
					const indexRow = [];
					const v = y / heightSegments; // calculate the radius of the current row

					const radius = v * (radiusBottom - radiusTop) + radiusTop;

					for (let x = 0; x <= radialSegments; x++) {
						const u = x / radialSegments;
						const theta = u * thetaLength + thetaStart;
						const sinTheta = Math.sin(theta);
						const cosTheta = Math.cos(theta); // vertex

						vertex.x = radius * sinTheta;
						vertex.y = -v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.push(vertex.x, vertex.y, vertex.z); // normal

						normal.set(sinTheta, slope, cosTheta).normalize();
						normals.push(normal.x, normal.y, normal.z); // uv

						uvs.push(u, 1 - v); // save index of vertex in respective row

						indexRow.push(index++);
					} // now save vertices of the row in our index array


					indexArray.push(indexRow);
				} // generate indices


				for (let x = 0; x < radialSegments; x++) {
					for (let y = 0; y < heightSegments; y++) {
						// we use the index array to access the correct indices
						const a = indexArray[y][x];
						const b = indexArray[y + 1][x];
						const c = indexArray[y + 1][x + 1];
						const d = indexArray[y][x + 1]; // faces

						indices.push(a, b, d);
						indices.push(b, c, d); // update group counter

						groupCount += 6;
					}
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups

				groupStart += groupCount;
			}

			function generateCap(top) {
				// save the index of the first center vertex
				const centerIndexStart = index;
				const uv = new Vector2();
				const vertex = new Vector3();
				let groupCount = 0;
				const radius = top === true ? radiusTop : radiusBottom;
				const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment

				for (let x = 1; x <= radialSegments; x++) {
					// vertex
					vertices.push(0, halfHeight * sign, 0); // normal

					normals.push(0, sign, 0); // uv

					uvs.push(0.5, 0.5); // increase index

					index++;
				} // save the index of the last center vertex


				const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs

				for (let x = 0; x <= radialSegments; x++) {
					const u = x / radialSegments;
					const theta = u * thetaLength + thetaStart;
					const cosTheta = Math.cos(theta);
					const sinTheta = Math.sin(theta); // vertex

					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normals.push(0, sign, 0); // uv

					uv.x = cosTheta * 0.5 + 0.5;
					uv.y = sinTheta * 0.5 * sign + 0.5;
					uvs.push(uv.x, uv.y); // increase index

					index++;
				} // generate indices


				for (let x = 0; x < radialSegments; x++) {
					const c = centerIndexStart + x;
					const i = centerIndexEnd + x;

					if (top === true) {
						// face top
						indices.push(i, i + 1, c);
					} else {
						// face bottom
						indices.push(i + 1, i, c);
					}

					groupCount += 3;
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups

				groupStart += groupCount;
			}
		}

	}

	class ConeGeometry extends CylinderGeometry {
		constructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
			super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
			this.type = 'ConeGeometry';
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
		}

	}

	class PolyhedronGeometry extends BufferGeometry {
		constructor(vertices, indices, radius = 1, detail = 0) {
			super();
			this.type = 'PolyhedronGeometry';
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			}; // default buffer data

			const vertexBuffer = [];
			const uvBuffer = []; // the subdivision creates the vertex buffer data

			subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius

			applyRadius(radius); // finally, create the uv data

			generateUVs(); // build non-indexed geometry

			this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
			this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));

			if (detail === 0) {
				this.computeVertexNormals(); // flat normals
			} else {
				this.normalizeNormals(); // smooth normals
			} // helper functions


			function subdivide(detail) {
				const a = new Vector3();
				const b = new Vector3();
				const c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value

				for (let i = 0; i < indices.length; i += 3) {
					// get the vertices of the face
					getVertexByIndex(indices[i + 0], a);
					getVertexByIndex(indices[i + 1], b);
					getVertexByIndex(indices[i + 2], c); // perform subdivision

					subdivideFace(a, b, c, detail);
				}
			}

			function subdivideFace(a, b, c, detail) {
				const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision

				const v = []; // construct all of the vertices for this subdivision

				for (let i = 0; i <= cols; i++) {
					v[i] = [];
					const aj = a.clone().lerp(c, i / cols);
					const bj = b.clone().lerp(c, i / cols);
					const rows = cols - i;

					for (let j = 0; j <= rows; j++) {
						if (j === 0 && i === cols) {
							v[i][j] = aj;
						} else {
							v[i][j] = aj.clone().lerp(bj, j / rows);
						}
					}
				} // construct all of the faces


				for (let i = 0; i < cols; i++) {
					for (let j = 0; j < 2 * (cols - i) - 1; j++) {
						const k = Math.floor(j / 2);

						if (j % 2 === 0) {
							pushVertex(v[i][k + 1]);
							pushVertex(v[i + 1][k]);
							pushVertex(v[i][k]);
						} else {
							pushVertex(v[i][k + 1]);
							pushVertex(v[i + 1][k + 1]);
							pushVertex(v[i + 1][k]);
						}
					}
				}
			}

			function applyRadius(radius) {
				const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex

				for (let i = 0; i < vertexBuffer.length; i += 3) {
					vertex.x = vertexBuffer[i + 0];
					vertex.y = vertexBuffer[i + 1];
					vertex.z = vertexBuffer[i + 2];
					vertex.normalize().multiplyScalar(radius);
					vertexBuffer[i + 0] = vertex.x;
					vertexBuffer[i + 1] = vertex.y;
					vertexBuffer[i + 2] = vertex.z;
				}
			}

			function generateUVs() {
				const vertex = new Vector3();

				for (let i = 0; i < vertexBuffer.length; i += 3) {
					vertex.x = vertexBuffer[i + 0];
					vertex.y = vertexBuffer[i + 1];
					vertex.z = vertexBuffer[i + 2];
					const u = azimuth(vertex) / 2 / Math.PI + 0.5;
					const v = inclination(vertex) / Math.PI + 0.5;
					uvBuffer.push(u, 1 - v);
				}

				correctUVs();
				correctSeam();
			}

			function correctSeam() {
				// handle case when face straddles the seam, see #3269
				for (let i = 0; i < uvBuffer.length; i += 6) {
					// uv data of a single face
					const x0 = uvBuffer[i + 0];
					const x1 = uvBuffer[i + 2];
					const x2 = uvBuffer[i + 4];
					const max = Math.max(x0, x1, x2);
					const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary

					if (max > 0.9 && min < 0.1) {
						if (x0 < 0.2) uvBuffer[i + 0] += 1;
						if (x1 < 0.2) uvBuffer[i + 2] += 1;
						if (x2 < 0.2) uvBuffer[i + 4] += 1;
					}
				}
			}

			function pushVertex(vertex) {
				vertexBuffer.push(vertex.x, vertex.y, vertex.z);
			}

			function getVertexByIndex(index, vertex) {
				const stride = index * 3;
				vertex.x = vertices[stride + 0];
				vertex.y = vertices[stride + 1];
				vertex.z = vertices[stride + 2];
			}

			function correctUVs() {
				const a = new Vector3();
				const b = new Vector3();
				const c = new Vector3();
				const centroid = new Vector3();
				const uvA = new Vector2();
				const uvB = new Vector2();
				const uvC = new Vector2();

				for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
					a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
					b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
					c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
					uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
					uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
					uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
					centroid.copy(a).add(b).add(c).divideScalar(3);
					const azi = azimuth(centroid);
					correctUV(uvA, j + 0, a, azi);
					correctUV(uvB, j + 2, b, azi);
					correctUV(uvC, j + 4, c, azi);
				}
			}

			function correctUV(uv, stride, vector, azimuth) {
				if (azimuth < 0 && uv.x === 1) {
					uvBuffer[stride] = uv.x - 1;
				}

				if (vector.x === 0 && vector.z === 0) {
					uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
				}
			} // Angle around the Y axis, counter-clockwise when looking from above.


			function azimuth(vector) {
				return Math.atan2(vector.z, -vector.x);
			} // Angle above the XZ plane.


			function inclination(vector) {
				return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
			}
		}

	}

	class DodecahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const t = (1 + Math.sqrt(5)) / 2;
			const r = 1 / t;
			const vertices = [// (±1, ±1, ±1)
			-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)
			0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)
			-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)
			-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
			const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
			super(vertices, indices, radius, detail);
			this.type = 'DodecahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

	}

	const _v0 = new Vector3();

	const _v1$1 = new Vector3();

	const _normal = new Vector3();

	const _triangle = new Triangle();

	class EdgesGeometry extends BufferGeometry {
		constructor(geometry, thresholdAngle) {
			super();
			this.type = 'EdgesGeometry';
			this.parameters = {
				thresholdAngle: thresholdAngle
			};
			thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;

			if (geometry.isGeometry === true) {
				console.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
				return;
			}

			const precisionPoints = 4;
			const precision = Math.pow(10, precisionPoints);
			const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
			const indexAttr = geometry.getIndex();
			const positionAttr = geometry.getAttribute('position');
			const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
			const indexArr = [0, 0, 0];
			const vertKeys = ['a', 'b', 'c'];
			const hashes = new Array(3);
			const edgeData = {};
			const vertices = [];

			for (let i = 0; i < indexCount; i += 3) {
				if (indexAttr) {
					indexArr[0] = indexAttr.getX(i);
					indexArr[1] = indexAttr.getX(i + 1);
					indexArr[2] = indexAttr.getX(i + 2);
				} else {
					indexArr[0] = i;
					indexArr[1] = i + 1;
					indexArr[2] = i + 2;
				}

				const {
					a,
					b,
					c
				} = _triangle;
				a.fromBufferAttribute(positionAttr, indexArr[0]);
				b.fromBufferAttribute(positionAttr, indexArr[1]);
				c.fromBufferAttribute(positionAttr, indexArr[2]);

				_triangle.getNormal(_normal); // create hashes for the edge from the vertices


				hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
				hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
				hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles

				if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
					continue;
				} // iterate over every edge


				for (let j = 0; j < 3; j++) {
					// get the first and next vertex making up the edge
					const jNext = (j + 1) % 3;
					const vecHash0 = hashes[j];
					const vecHash1 = hashes[jNext];
					const v0 = _triangle[vertKeys[j]];
					const v1 = _triangle[vertKeys[jNext]];
					const hash = `${vecHash0}_${vecHash1}`;
					const reverseHash = `${vecHash1}_${vecHash0}`;

					if (reverseHash in edgeData && edgeData[reverseHash]) {
						// if we found a sibling edge add it into the vertex array if
						// it meets the angle threshold and delete the edge from the map.
						if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
							vertices.push(v0.x, v0.y, v0.z);
							vertices.push(v1.x, v1.y, v1.z);
						}

						edgeData[reverseHash] = null;
					} else if (!(hash in edgeData)) {
						// if we've already got an edge here then skip adding a new one
						edgeData[hash] = {
							index0: indexArr[j],
							index1: indexArr[jNext],
							normal: _normal.clone()
						};
					}
				}
			} // iterate over all remaining, unmatched edges and add them to the vertex array


			for (const key in edgeData) {
				if (edgeData[key]) {
					const {
						index0,
						index1
					} = edgeData[key];

					_v0.fromBufferAttribute(positionAttr, index0);

					_v1$1.fromBufferAttribute(positionAttr, index1);

					vertices.push(_v0.x, _v0.y, _v0.z);
					vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
				}
			}

			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
		}

	}

	/**
	 * Port from https://github.com/mapbox/earcut (v2.2.2)
	 */
	const Earcut = {
		triangulate: function (data, holeIndices, dim) {
			dim = dim || 2;
			const hasHoles = holeIndices && holeIndices.length;
			const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
			let outerNode = linkedList(data, 0, outerLen, dim, true);
			const triangles = [];
			if (!outerNode || outerNode.next === outerNode.prev) return triangles;
			let minX, minY, maxX, maxY, x, y, invSize;
			if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

			if (data.length > 80 * dim) {
				minX = maxX = data[0];
				minY = maxY = data[1];

				for (let i = dim; i < outerLen; i += dim) {
					x = data[i];
					y = data[i + 1];
					if (x < minX) minX = x;
					if (y < minY) minY = y;
					if (x > maxX) maxX = x;
					if (y > maxY) maxY = y;
				} // minX, minY and invSize are later used to transform coords into integers for z-order calculation


				invSize = Math.max(maxX - minX, maxY - minY);
				invSize = invSize !== 0 ? 1 / invSize : 0;
			}

			earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
			return triangles;
		}
	}; // create a circular doubly linked list from polygon points in the specified winding order

	function linkedList(data, start, end, dim, clockwise) {
		let i, last;

		if (clockwise === signedArea(data, start, end, dim) > 0) {
			for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
		} else {
			for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
		}

		if (last && equals(last, last.next)) {
			removeNode(last);
			last = last.next;
		}

		return last;
	} // eliminate colinear or duplicate points


	function filterPoints(start, end) {
		if (!start) return start;
		if (!end) end = start;
		let p = start,
				again;

		do {
			again = false;

			if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
				removeNode(p);
				p = end = p.prev;
				if (p === p.next) break;
				again = true;
			} else {
				p = p.next;
			}
		} while (again || p !== end);

		return end;
	} // main ear slicing loop which triangulates a polygon (given as a linked list)


	function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
		if (!ear) return; // interlink polygon nodes in z-order

		if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
		let stop = ear,
				prev,
				next; // iterate through ears, slicing them one by one

		while (ear.prev !== ear.next) {
			prev = ear.prev;
			next = ear.next;

			if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
				// cut off the triangle
				triangles.push(prev.i / dim);
				triangles.push(ear.i / dim);
				triangles.push(next.i / dim);
				removeNode(ear); // skipping the next vertex leads to less sliver triangles

				ear = next.next;
				stop = next.next;
				continue;
			}

			ear = next; // if we looped through the whole remaining polygon and can't find any more ears

			if (ear === stop) {
				// try filtering points and slicing again
				if (!pass) {
					earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
				} else if (pass === 1) {
					ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
					earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
				} else if (pass === 2) {
					splitEarcut(ear, triangles, dim, minX, minY, invSize);
				}

				break;
			}
		}
	} // check whether a polygon node forms a valid ear with adjacent nodes


	function isEar(ear) {
		const a = ear.prev,
					b = ear,
					c = ear.next;
		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
		// now make sure we don't have other points inside the potential ear

		let p = ear.next.next;

		while (p !== ear.prev) {
			if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.next;
		}

		return true;
	}

	function isEarHashed(ear, minX, minY, invSize) {
		const a = ear.prev,
					b = ear,
					c = ear.next;
		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
		// triangle bbox; min & max are calculated like this for speed

		const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
					minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
					maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
					maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

		const minZ = zOrder(minTX, minTY, minX, minY, invSize),
					maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
		let p = ear.prevZ,
				n = ear.nextZ; // look for points inside the triangle in both directions

		while (p && p.z >= minZ && n && n.z <= maxZ) {
			if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.prevZ;
			if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
			n = n.nextZ;
		} // look for remaining points in decreasing z-order


		while (p && p.z >= minZ) {
			if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.prevZ;
		} // look for remaining points in increasing z-order


		while (n && n.z <= maxZ) {
			if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
			n = n.nextZ;
		}

		return true;
	} // go through all polygon nodes and cure small local self-intersections


	function cureLocalIntersections(start, triangles, dim) {
		let p = start;

		do {
			const a = p.prev,
						b = p.next.next;

			if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
				triangles.push(a.i / dim);
				triangles.push(p.i / dim);
				triangles.push(b.i / dim); // remove two nodes involved

				removeNode(p);
				removeNode(p.next);
				p = start = b;
			}

			p = p.next;
		} while (p !== start);

		return filterPoints(p);
	} // try splitting polygon into two and triangulate them independently


	function splitEarcut(start, triangles, dim, minX, minY, invSize) {
		// look for a valid diagonal that divides the polygon into two
		let a = start;

		do {
			let b = a.next.next;

			while (b !== a.prev) {
				if (a.i !== b.i && isValidDiagonal(a, b)) {
					// split the polygon in two by the diagonal
					let c = splitPolygon(a, b); // filter colinear points around the cuts

					a = filterPoints(a, a.next);
					c = filterPoints(c, c.next); // run earcut on each half

					earcutLinked(a, triangles, dim, minX, minY, invSize);
					earcutLinked(c, triangles, dim, minX, minY, invSize);
					return;
				}

				b = b.next;
			}

			a = a.next;
		} while (a !== start);
	} // link every hole into the outer loop, producing a single-ring polygon without holes


	function eliminateHoles(data, holeIndices, outerNode, dim) {
		const queue = [];
		let i, len, start, end, list;

		for (i = 0, len = holeIndices.length; i < len; i++) {
			start = holeIndices[i] * dim;
			end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
			list = linkedList(data, start, end, dim, false);
			if (list === list.next) list.steiner = true;
			queue.push(getLeftmost(list));
		}

		queue.sort(compareX); // process holes from left to right

		for (i = 0; i < queue.length; i++) {
			eliminateHole(queue[i], outerNode);
			outerNode = filterPoints(outerNode, outerNode.next);
		}

		return outerNode;
	}

	function compareX(a, b) {
		return a.x - b.x;
	} // find a bridge between vertices that connects hole with an outer ring and and link it


	function eliminateHole(hole, outerNode) {
		outerNode = findHoleBridge(hole, outerNode);

		if (outerNode) {
			const b = splitPolygon(outerNode, hole); // filter collinear points around the cuts

			filterPoints(outerNode, outerNode.next);
			filterPoints(b, b.next);
		}
	} // David Eberly's algorithm for finding a bridge between hole and outer polygon


	function findHoleBridge(hole, outerNode) {
		let p = outerNode;
		const hx = hole.x;
		const hy = hole.y;
		let qx = -Infinity,
				m; // find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point

		do {
			if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
				const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

				if (x <= hx && x > qx) {
					qx = x;

					if (x === hx) {
						if (hy === p.y) return p;
						if (hy === p.next.y) return p.next;
					}

					m = p.x < p.next.x ? p : p.next;
				}
			}

			p = p.next;
		} while (p !== outerNode);

		if (!m) return null;
		if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		const stop = m,
					mx = m.x,
					my = m.y;
		let tanMin = Infinity,
				tan;
		p = m;

		do {
			if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
				tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

				if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
					m = p;
					tanMin = tan;
				}
			}

			p = p.next;
		} while (p !== stop);

		return m;
	} // whether sector in vertex m contains sector in vertex p in the same coordinates


	function sectorContainsSector(m, p) {
		return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
	} // interlink polygon nodes in z-order


	function indexCurve(start, minX, minY, invSize) {
		let p = start;

		do {
			if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while (p !== start);

		p.prevZ.nextZ = null;
		p.prevZ = null;
		sortLinked(p);
	} // Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


	function sortLinked(list) {
		let i,
				p,
				q,
				e,
				tail,
				numMerges,
				pSize,
				qSize,
				inSize = 1;

		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while (p) {
				numMerges++;
				q = p;
				pSize = 0;

				for (i = 0; i < inSize; i++) {
					pSize++;
					q = q.nextZ;
					if (!q) break;
				}

				qSize = inSize;

				while (pSize > 0 || qSize > 0 && q) {
					if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
						e = p;
						p = p.nextZ;
						pSize--;
					} else {
						e = q;
						q = q.nextZ;
						qSize--;
					}

					if (tail) tail.nextZ = e;else list = e;
					e.prevZ = tail;
					tail = e;
				}

				p = q;
			}

			tail.nextZ = null;
			inSize *= 2;
		} while (numMerges > 1);

		return list;
	} // z-order of a point given coords and inverse of the longer side of data bbox


	function zOrder(x, y, minX, minY, invSize) {
		// coords are transformed into non-negative 15-bit integer range
		x = 32767 * (x - minX) * invSize;
		y = 32767 * (y - minY) * invSize;
		x = (x | x << 8) & 0x00FF00FF;
		x = (x | x << 4) & 0x0F0F0F0F;
		x = (x | x << 2) & 0x33333333;
		x = (x | x << 1) & 0x55555555;
		y = (y | y << 8) & 0x00FF00FF;
		y = (y | y << 4) & 0x0F0F0F0F;
		y = (y | y << 2) & 0x33333333;
		y = (y | y << 1) & 0x55555555;
		return x | y << 1;
	} // find the leftmost node of a polygon ring


	function getLeftmost(start) {
		let p = start,
				leftmost = start;

		do {
			if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
			p = p.next;
		} while (p !== start);

		return leftmost;
	} // check if a point lies within a convex triangle


	function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
		return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
	} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


	function isValidDiagonal(a, b) {
		return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
		locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
		area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
		equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
	} // signed area of a triangle


	function area(p, q, r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	} // check if two points are equal


	function equals(p1, p2) {
		return p1.x === p2.x && p1.y === p2.y;
	} // check if two segments intersect


	function intersects(p1, q1, p2, q2) {
		const o1 = sign(area(p1, q1, p2));
		const o2 = sign(area(p1, q1, q2));
		const o3 = sign(area(p2, q2, p1));
		const o4 = sign(area(p2, q2, q1));
		if (o1 !== o2 && o3 !== o4) return true; // general case

		if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

		if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

		if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

		if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

		return false;
	} // for collinear points p, q, r, check if point q lies on segment pr


	function onSegment(p, q, r) {
		return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
	}

	function sign(num) {
		return num > 0 ? 1 : num < 0 ? -1 : 0;
	} // check if a polygon diagonal intersects any polygon segments


	function intersectsPolygon(a, b) {
		let p = a;

		do {
			if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
			p = p.next;
		} while (p !== a);

		return false;
	} // check if a polygon diagonal is locally inside the polygon


	function locallyInside(a, b) {
		return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
	} // check if the middle point of a polygon diagonal is inside the polygon


	function middleInside(a, b) {
		let p = a,
				inside = false;
		const px = (a.x + b.x) / 2,
					py = (a.y + b.y) / 2;

		do {
			if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
			p = p.next;
		} while (p !== a);

		return inside;
	} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring


	function splitPolygon(a, b) {
		const a2 = new Node(a.i, a.x, a.y),
					b2 = new Node(b.i, b.x, b.y),
					an = a.next,
					bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	} // create a node and optionally link it with previous one (in a circular doubly linked list)


	function insertNode(i, x, y, last) {
		const p = new Node(i, x, y);

		if (!last) {
			p.prev = p;
			p.next = p;
		} else {
			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;
		}

		return p;
	}

	function removeNode(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if (p.prevZ) p.prevZ.nextZ = p.nextZ;
		if (p.nextZ) p.nextZ.prevZ = p.prevZ;
	}

	function Node(i, x, y) {
		// vertex index in coordinates array
		this.i = i; // vertex coordinates

		this.x = x;
		this.y = y; // previous and next vertex nodes in a polygon ring

		this.prev = null;
		this.next = null; // z-order curve value

		this.z = null; // previous and next nodes in z-order

		this.prevZ = null;
		this.nextZ = null; // indicates whether this is a steiner point

		this.steiner = false;
	}

	function signedArea(data, start, end, dim) {
		let sum = 0;

		for (let i = start, j = end - dim; i < end; i += dim) {
			sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
			j = i;
		}

		return sum;
	}

	class ShapeUtils {
		// calculate area of the contour polygon
		static area(contour) {
			const n = contour.length;
			let a = 0.0;

			for (let p = n - 1, q = 0; q < n; p = q++) {
				a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
			}

			return a * 0.5;
		}

		static isClockWise(pts) {
			return ShapeUtils.area(pts) < 0;
		}

		static triangulateShape(contour, holes) {
			const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]

			const holeIndices = []; // array of hole indices

			const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts(contour);
			addContour(vertices, contour); //

			let holeIndex = contour.length;
			holes.forEach(removeDupEndPts);

			for (let i = 0; i < holes.length; i++) {
				holeIndices.push(holeIndex);
				holeIndex += holes[i].length;
				addContour(vertices, holes[i]);
			} //


			const triangles = Earcut.triangulate(vertices, holeIndices); //

			for (let i = 0; i < triangles.length; i += 3) {
				faces.push(triangles.slice(i, i + 3));
			}

			return faces;
		}

	}

	function removeDupEndPts(points) {
		const l = points.length;

		if (l > 2 && points[l - 1].equals(points[0])) {
			points.pop();
		}
	}

	function addContour(vertices, contour) {
		for (let i = 0; i < contour.length; i++) {
			vertices.push(contour[i].x);
			vertices.push(contour[i].y);
		}
	}

	/**
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves
	 *	steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *	depth: <float>, // Depth to extrude the shape
	 *
	 *	bevelEnabled: <bool>, // turn on bevel
	 *	bevelThickness: <float>, // how deep into the original shape bevel goes
	 *	bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
	 *	bevelOffset: <float>, // how far from shape outline does bevel start
	 *	bevelSegments: <int>, // number of bevel layers
	 *
	 *	extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *	UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	class ExtrudeGeometry extends BufferGeometry {
		constructor(shapes, options) {
			super();
			this.type = 'ExtrudeGeometry';
			this.parameters = {
				shapes: shapes,
				options: options
			};
			shapes = Array.isArray(shapes) ? shapes : [shapes];
			const scope = this;
			const verticesArray = [];
			const uvArray = [];

			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				addShape(shape);
			} // build geometry


			this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));
			this.computeVertexNormals(); // functions

			function addShape(shape) {
				const placeholder = []; // options

				const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
				const steps = options.steps !== undefined ? options.steps : 1;
				let depth = options.depth !== undefined ? options.depth : 100;
				let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
				let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
				let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
				let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
				let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
				const extrudePath = options.extrudePath;
				const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options

				if (options.amount !== undefined) {
					console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
					depth = options.amount;
				} //


				let extrudePts,
						extrudeByPath = false;
				let splineTube, binormal, normal, position2;

				if (extrudePath) {
					extrudePts = extrudePath.getSpacedPoints(steps);
					extrudeByPath = true;
					bevelEnabled = false; // bevels not supported for path extrusion
					// SETUP TNB variables
					// TODO1 - have a .isClosed in spline?

					splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

					binormal = new Vector3();
					normal = new Vector3();
					position2 = new Vector3();
				} // Safeguards if bevels are not enabled


				if (!bevelEnabled) {
					bevelSegments = 0;
					bevelThickness = 0;
					bevelSize = 0;
					bevelOffset = 0;
				} // Variables initialization


				const shapePoints = shape.extractPoints(curveSegments);
				let vertices = shapePoints.shape;
				const holes = shapePoints.holes;
				const reverse = !ShapeUtils.isClockWise(vertices);

				if (reverse) {
					vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...

					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];

						if (ShapeUtils.isClockWise(ahole)) {
							holes[h] = ahole.reverse();
						}
					}
				}

				const faces = ShapeUtils.triangulateShape(vertices, holes);
				/* Vertices */

				const contour = vertices; // vertices has all points but contour has only points of circumference

				for (let h = 0, hl = holes.length; h < hl; h++) {
					const ahole = holes[h];
					vertices = vertices.concat(ahole);
				}

				function scalePt2(pt, vec, size) {
					if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
					return vec.clone().multiplyScalar(size).add(pt);
				}

				const vlen = vertices.length,
							flen = faces.length; // Find directions for point movement

				function getBevelVec(inPt, inPrev, inNext) {
					// computes for inPt the corresponding point inPt' on a new contour
					//	 shifted by 1 unit (length of normalized vector) to the left
					// if we walk along contour clockwise, this new contour is outside the old one
					//
					// inPt' is the intersection of the two lines parallel to the two
					//	adjacent edges of inPt at a distance of 1 unit on the left side.
					let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
					// good reading for geometry algorithms (here: line-line intersection)
					// http://geomalgorithms.com/a05-_intersect-1.html

					const v_prev_x = inPt.x - inPrev.x,
								v_prev_y = inPt.y - inPrev.y;
					const v_next_x = inNext.x - inPt.x,
								v_next_y = inNext.y - inPt.y;
					const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges

					const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;

					if (Math.abs(collinear0) > Number.EPSILON) {
						// not collinear
						// length of vectors for normalizing
						const v_prev_len = Math.sqrt(v_prev_lensq);
						const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left

						const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
						const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
						const ptNextShift_x = inNext.x - v_next_y / v_next_len;
						const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point

						const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point

						v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
						v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
						//	but prevent crazy spikes

						const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;

						if (v_trans_lensq <= 2) {
							return new Vector2(v_trans_x, v_trans_y);
						} else {
							shrink_by = Math.sqrt(v_trans_lensq / 2);
						}
					} else {
						// handle special case of collinear edges
						let direction_eq = false; // assumes: opposite

						if (v_prev_x > Number.EPSILON) {
							if (v_next_x > Number.EPSILON) {
								direction_eq = true;
							}
						} else {
							if (v_prev_x < -Number.EPSILON) {
								if (v_next_x < -Number.EPSILON) {
									direction_eq = true;
								}
							} else {
								if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
									direction_eq = true;
								}
							}
						}

						if (direction_eq) {
							// console.log("Warning: lines are a straight sequence");
							v_trans_x = -v_prev_y;
							v_trans_y = v_prev_x;
							shrink_by = Math.sqrt(v_prev_lensq);
						} else {
							// console.log("Warning: lines are a straight spike");
							v_trans_x = v_prev_x;
							v_trans_y = v_prev_y;
							shrink_by = Math.sqrt(v_prev_lensq / 2);
						}
					}

					return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
				}

				const contourMovements = [];

				for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
					if (j === il) j = 0;
					if (k === il) k = 0; //	(j)---(i)---(k)
					// console.log('i,j,k', i, j , k)

					contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
				}

				const holesMovements = [];
				let oneHoleMovements,
						verticesMovements = contourMovements.concat();

				for (let h = 0, hl = holes.length; h < hl; h++) {
					const ahole = holes[h];
					oneHoleMovements = [];

					for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
						if (j === il) j = 0;
						if (k === il) k = 0; //	(j)---(i)---(k)

						oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
					}

					holesMovements.push(oneHoleMovements);
					verticesMovements = verticesMovements.concat(oneHoleMovements);
				} // Loop bevelSegments, 1 for the front, 1 for the back


				for (let b = 0; b < bevelSegments; b++) {
					//for ( b = bevelSegments; b > 0; b -- ) {
					const t = b / bevelSegments;
					const z = bevelThickness * Math.cos(t * Math.PI / 2);
					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape

					for (let i = 0, il = contour.length; i < il; i++) {
						const vert = scalePt2(contour[i], contourMovements[i], bs);
						v(vert.x, vert.y, -z);
					} // expand holes


					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						oneHoleMovements = holesMovements[h];

						for (let i = 0, il = ahole.length; i < il; i++) {
							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
							v(vert.x, vert.y, -z);
						}
					}
				}

				const bs = bevelSize + bevelOffset; // Back facing vertices

				for (let i = 0; i < vlen; i++) {
					const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

					if (!extrudeByPath) {
						v(vert.x, vert.y, 0);
					} else {
						// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
						normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
						binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
						position2.copy(extrudePts[0]).add(normal).add(binormal);
						v(position2.x, position2.y, position2.z);
					}
				} // Add stepped vertices...
				// Including front facing vertices


				for (let s = 1; s <= steps; s++) {
					for (let i = 0; i < vlen; i++) {
						const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

						if (!extrudeByPath) {
							v(vert.x, vert.y, depth / steps * s);
						} else {
							// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
							normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
							binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
							position2.copy(extrudePts[s]).add(normal).add(binormal);
							v(position2.x, position2.y, position2.z);
						}
					}
				} // Add bevel segments planes
				//for ( b = 1; b <= bevelSegments; b ++ ) {


				for (let b = bevelSegments - 1; b >= 0; b--) {
					const t = b / bevelSegments;
					const z = bevelThickness * Math.cos(t * Math.PI / 2);
					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape

					for (let i = 0, il = contour.length; i < il; i++) {
						const vert = scalePt2(contour[i], contourMovements[i], bs);
						v(vert.x, vert.y, depth + z);
					} // expand holes


					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						oneHoleMovements = holesMovements[h];

						for (let i = 0, il = ahole.length; i < il; i++) {
							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);

							if (!extrudeByPath) {
								v(vert.x, vert.y, depth + z);
							} else {
								v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
							}
						}
					}
				}
				/* Faces */
				// Top and bottom faces


				buildLidFaces(); // Sides faces

				buildSideFaces(); /////	Internal functions

				function buildLidFaces() {
					const start = verticesArray.length / 3;

					if (bevelEnabled) {
						let layer = 0; // steps + 1

						let offset = vlen * layer; // Bottom faces

						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[2] + offset, face[1] + offset, face[0] + offset);
						}

						layer = steps + bevelSegments * 2;
						offset = vlen * layer; // Top faces

						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[0] + offset, face[1] + offset, face[2] + offset);
						}
					} else {
						// Bottom faces
						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[2], face[1], face[0]);
						} // Top faces


						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
						}
					}

					scope.addGroup(start, verticesArray.length / 3 - start, 0);
				} // Create faces for the z-sides of the shape


				function buildSideFaces() {
					const start = verticesArray.length / 3;
					let layeroffset = 0;
					sidewalls(contour, layeroffset);
					layeroffset += contour.length;

					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						sidewalls(ahole, layeroffset); //, true

						layeroffset += ahole.length;
					}

					scope.addGroup(start, verticesArray.length / 3 - start, 1);
				}

				function sidewalls(contour, layeroffset) {
					let i = contour.length;

					while (--i >= 0) {
						const j = i;
						let k = i - 1;
						if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);

						for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
							const slen1 = vlen * s;
							const slen2 = vlen * (s + 1);
							const a = layeroffset + j + slen1,
										b = layeroffset + k + slen1,
										c = layeroffset + k + slen2,
										d = layeroffset + j + slen2;
							f4(a, b, c, d);
						}
					}
				}

				function v(x, y, z) {
					placeholder.push(x);
					placeholder.push(y);
					placeholder.push(z);
				}

				function f3(a, b, c) {
					addVertex(a);
					addVertex(b);
					addVertex(c);
					const nextIndex = verticesArray.length / 3;
					const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
					addUV(uvs[0]);
					addUV(uvs[1]);
					addUV(uvs[2]);
				}

				function f4(a, b, c, d) {
					addVertex(a);
					addVertex(b);
					addVertex(d);
					addVertex(b);
					addVertex(c);
					addVertex(d);
					const nextIndex = verticesArray.length / 3;
					const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
					addUV(uvs[0]);
					addUV(uvs[1]);
					addUV(uvs[3]);
					addUV(uvs[1]);
					addUV(uvs[2]);
					addUV(uvs[3]);
				}

				function addVertex(index) {
					verticesArray.push(placeholder[index * 3 + 0]);
					verticesArray.push(placeholder[index * 3 + 1]);
					verticesArray.push(placeholder[index * 3 + 2]);
				}

				function addUV(vector2) {
					uvArray.push(vector2.x);
					uvArray.push(vector2.y);
				}
			}
		}

		toJSON() {
			const data = BufferGeometry.prototype.toJSON.call(this);
			const shapes = this.parameters.shapes;
			const options = this.parameters.options;
			return toJSON$1(shapes, options, data);
		}

	}

	const WorldUVGenerator = {
		generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {
			const a_x = vertices[indexA * 3];
			const a_y = vertices[indexA * 3 + 1];
			const b_x = vertices[indexB * 3];
			const b_y = vertices[indexB * 3 + 1];
			const c_x = vertices[indexC * 3];
			const c_y = vertices[indexC * 3 + 1];
			return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];
		},
		generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {
			const a_x = vertices[indexA * 3];
			const a_y = vertices[indexA * 3 + 1];
			const a_z = vertices[indexA * 3 + 2];
			const b_x = vertices[indexB * 3];
			const b_y = vertices[indexB * 3 + 1];
			const b_z = vertices[indexB * 3 + 2];
			const c_x = vertices[indexC * 3];
			const c_y = vertices[indexC * 3 + 1];
			const c_z = vertices[indexC * 3 + 2];
			const d_x = vertices[indexD * 3];
			const d_y = vertices[indexD * 3 + 1];
			const d_z = vertices[indexD * 3 + 2];

			if (Math.abs(a_y - b_y) < 0.01) {
				return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
			} else {
				return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];
			}
		}
	};

	function toJSON$1(shapes, options, data) {
		data.shapes = [];

		if (Array.isArray(shapes)) {
			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				data.shapes.push(shape.uuid);
			}
		} else {
			data.shapes.push(shapes.uuid);
		}

		if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
		return data;
	}

	class IcosahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const t = (1 + Math.sqrt(5)) / 2;
			const vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];
			const indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
			super(vertices, indices, radius, detail);
			this.type = 'IcosahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

	}

	class LatheGeometry extends BufferGeometry {
		constructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
			super();
			this.type = 'LatheGeometry';
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
			segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]

			phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers

			const indices = [];
			const vertices = [];
			const uvs = []; // helper variables

			const inverseSegments = 1.0 / segments;
			const vertex = new Vector3();
			const uv = new Vector2(); // generate vertices and uvs

			for (let i = 0; i <= segments; i++) {
				const phi = phiStart + i * inverseSegments * phiLength;
				const sin = Math.sin(phi);
				const cos = Math.cos(phi);

				for (let j = 0; j <= points.length - 1; j++) {
					// vertex
					vertex.x = points[j].x * sin;
					vertex.y = points[j].y;
					vertex.z = points[j].x * cos;
					vertices.push(vertex.x, vertex.y, vertex.z); // uv

					uv.x = i / segments;
					uv.y = j / (points.length - 1);
					uvs.push(uv.x, uv.y);
				}
			} // indices


			for (let i = 0; i < segments; i++) {
				for (let j = 0; j < points.length - 1; j++) {
					const base = j + i * points.length;
					const a = base;
					const b = base + points.length;
					const c = base + points.length + 1;
					const d = base + 1; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals

			this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).

			if (phiLength === Math.PI * 2) {
				const normals = this.attributes.normal.array;
				const n1 = new Vector3();
				const n2 = new Vector3();
				const n = new Vector3(); // this is the buffer offset for the last line of vertices

				const base = segments * points.length * 3;

				for (let i = 0, j = 0; i < points.length; i++, j += 3) {
					// select the normal of the vertex in the first line
					n1.x = normals[j + 0];
					n1.y = normals[j + 1];
					n1.z = normals[j + 2]; // select the normal of the vertex in the last line

					n2.x = normals[base + j + 0];
					n2.y = normals[base + j + 1];
					n2.z = normals[base + j + 2]; // average normals

					n.addVectors(n1, n2).normalize(); // assign the new values to both normals

					normals[j + 0] = normals[base + j + 0] = n.x;
					normals[j + 1] = normals[base + j + 1] = n.y;
					normals[j + 2] = normals[base + j + 2] = n.z;
				}
			}
		}

	}

	class OctahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];
			const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
			super(vertices, indices, radius, detail);
			this.type = 'OctahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

	}

	/**
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
	 */

	class ParametricGeometry extends BufferGeometry {
		constructor(func, slices, stacks) {
			super();
			this.type = 'ParametricGeometry';
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			}; // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];
			const EPS = 0.00001;
			const normal = new Vector3();
			const p0 = new Vector3(),
						p1 = new Vector3();
			const pu = new Vector3(),
						pv = new Vector3();

			if (func.length < 3) {
				console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');
			} // generate vertices, normals and uvs


			const sliceCount = slices + 1;

			for (let i = 0; i <= stacks; i++) {
				const v = i / stacks;

				for (let j = 0; j <= slices; j++) {
					const u = j / slices; // vertex

					func(u, v, p0);
					vertices.push(p0.x, p0.y, p0.z); // normal
					// approximate tangent vectors via finite differences

					if (u - EPS >= 0) {
						func(u - EPS, v, p1);
						pu.subVectors(p0, p1);
					} else {
						func(u + EPS, v, p1);
						pu.subVectors(p1, p0);
					}

					if (v - EPS >= 0) {
						func(u, v - EPS, p1);
						pv.subVectors(p0, p1);
					} else {
						func(u, v + EPS, p1);
						pv.subVectors(p1, p0);
					} // cross product of tangent vectors returns surface normal


					normal.crossVectors(pu, pv).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(u, v);
				}
			} // generate indices


			for (let i = 0; i < stacks; i++) {
				for (let j = 0; j < slices; j++) {
					const a = i * sliceCount + j;
					const b = i * sliceCount + j + 1;
					const c = (i + 1) * sliceCount + j + 1;
					const d = (i + 1) * sliceCount + j; // faces one and two

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	class RingGeometry extends BufferGeometry {
		constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'RingGeometry';
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			thetaSegments = Math.max(3, thetaSegments);
			phiSegments = Math.max(1, phiSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // some helper variables

			let radius = innerRadius;
			const radiusStep = (outerRadius - innerRadius) / phiSegments;
			const vertex = new Vector3();
			const uv = new Vector2(); // generate vertices, normals and uvs

			for (let j = 0; j <= phiSegments; j++) {
				for (let i = 0; i <= thetaSegments; i++) {
					// values are generate from the inside of the ring to the outside
					const segment = thetaStart + i / thetaSegments * thetaLength; // vertex

					vertex.x = radius * Math.cos(segment);
					vertex.y = radius * Math.sin(segment);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normals.push(0, 0, 1); // uv

					uv.x = (vertex.x / outerRadius + 1) / 2;
					uv.y = (vertex.y / outerRadius + 1) / 2;
					uvs.push(uv.x, uv.y);
				} // increase the radius for next row of vertices


				radius += radiusStep;
			} // indices


			for (let j = 0; j < phiSegments; j++) {
				const thetaSegmentLevel = j * (thetaSegments + 1);

				for (let i = 0; i < thetaSegments; i++) {
					const segment = i + thetaSegmentLevel;
					const a = segment;
					const b = segment + thetaSegments + 1;
					const c = segment + thetaSegments + 2;
					const d = segment + 1; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	class ShapeGeometry extends BufferGeometry {
		constructor(shapes, curveSegments = 12) {
			super();
			this.type = 'ShapeGeometry';
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			}; // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let groupStart = 0;
			let groupCount = 0; // allow single and array values for "shapes" parameter

			if (Array.isArray(shapes) === false) {
				addShape(shapes);
			} else {
				for (let i = 0; i < shapes.length; i++) {
					addShape(shapes[i]);
					this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support

					groupStart += groupCount;
					groupCount = 0;
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions

			function addShape(shape) {
				const indexOffset = vertices.length / 3;
				const points = shape.extractPoints(curveSegments);
				let shapeVertices = points.shape;
				const shapeHoles = points.holes; // check direction of vertices

				if (ShapeUtils.isClockWise(shapeVertices) === false) {
					shapeVertices = shapeVertices.reverse();
				}

				for (let i = 0, l = shapeHoles.length; i < l; i++) {
					const shapeHole = shapeHoles[i];

					if (ShapeUtils.isClockWise(shapeHole) === true) {
						shapeHoles[i] = shapeHole.reverse();
					}
				}

				const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array

				for (let i = 0, l = shapeHoles.length; i < l; i++) {
					const shapeHole = shapeHoles[i];
					shapeVertices = shapeVertices.concat(shapeHole);
				} // vertices, normals, uvs


				for (let i = 0, l = shapeVertices.length; i < l; i++) {
					const vertex = shapeVertices[i];
					vertices.push(vertex.x, vertex.y, 0);
					normals.push(0, 0, 1);
					uvs.push(vertex.x, vertex.y); // world uvs
				} // incides


				for (let i = 0, l = faces.length; i < l; i++) {
					const face = faces[i];
					const a = face[0] + indexOffset;
					const b = face[1] + indexOffset;
					const c = face[2] + indexOffset;
					indices.push(a, b, c);
					groupCount += 3;
				}
			}
		}

		toJSON() {
			const data = BufferGeometry.prototype.toJSON.call(this);
			const shapes = this.parameters.shapes;
			return toJSON(shapes, data);
		}

	}

	function toJSON(shapes, data) {
		data.shapes = [];

		if (Array.isArray(shapes)) {
			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				data.shapes.push(shape.uuid);
			}
		} else {
			data.shapes.push(shapes.uuid);
		}

		return data;
	}

	class SphereGeometry extends BufferGeometry {
		constructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
			super();
			this.type = 'SphereGeometry';
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			widthSegments = Math.max(3, Math.floor(widthSegments));
			heightSegments = Math.max(2, Math.floor(heightSegments));
			const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
			let index = 0;
			const grid = [];
			const vertex = new Vector3();
			const normal = new Vector3(); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // generate vertices, normals and uvs

			for (let iy = 0; iy <= heightSegments; iy++) {
				const verticesRow = [];
				const v = iy / heightSegments; // special case for the poles

				let uOffset = 0;

				if (iy == 0 && thetaStart == 0) {
					uOffset = 0.5 / widthSegments;
				} else if (iy == heightSegments && thetaEnd == Math.PI) {
					uOffset = -0.5 / widthSegments;
				}

				for (let ix = 0; ix <= widthSegments; ix++) {
					const u = ix / widthSegments; // vertex

					vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
					vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
					vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normal.copy(vertex).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(u + uOffset, 1 - v);
					verticesRow.push(index++);
				}

				grid.push(verticesRow);
			} // indices


			for (let iy = 0; iy < heightSegments; iy++) {
				for (let ix = 0; ix < widthSegments; ix++) {
					const a = grid[iy][ix + 1];
					const b = grid[iy][ix];
					const c = grid[iy + 1][ix];
					const d = grid[iy + 1][ix + 1];
					if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
					if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	class TetrahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];
			const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
			super(vertices, indices, radius, detail);
			this.type = 'TetrahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

	}

	/**
	 * Text = 3D Text
	 *
	 * parameters = {
	 *	font: <THREE.Font>, // font
	 *
	 *	size: <float>, // size of the text
	 *	height: <float>, // thickness to extrude text
	 *	curveSegments: <int>, // number of points on the curves
	 *
	 *	bevelEnabled: <bool>, // turn on bevel
	 *	bevelThickness: <float>, // how deep into text bevel goes
	 *	bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
	 *	bevelOffset: <float> // how far from text outline does bevel start
	 * }
	 */

	class TextGeometry extends ExtrudeGeometry {
		constructor(text, parameters = {}) {
			const font = parameters.font;

			if (!(font && font.isFont)) {
				console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');
				return new BufferGeometry();
			}

			const shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API

			parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults

			if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;
			if (parameters.bevelSize === undefined) parameters.bevelSize = 8;
			if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;
			super(shapes, parameters);
			this.type = 'TextGeometry';
		}

	}

	class TorusGeometry extends BufferGeometry {
		constructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {
			super();
			this.type = 'TorusGeometry';
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
			radialSegments = Math.floor(radialSegments);
			tubularSegments = Math.floor(tubularSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const center = new Vector3();
			const vertex = new Vector3();
			const normal = new Vector3(); // generate vertices, normals and uvs

			for (let j = 0; j <= radialSegments; j++) {
				for (let i = 0; i <= tubularSegments; i++) {
					const u = i / tubularSegments * arc;
					const v = j / radialSegments * Math.PI * 2; // vertex

					vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
					vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
					vertex.z = tube * Math.sin(v);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					center.x = radius * Math.cos(u);
					center.y = radius * Math.sin(u);
					normal.subVectors(vertex, center).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(i / tubularSegments);
					uvs.push(j / radialSegments);
				}
			} // generate indices


			for (let j = 1; j <= radialSegments; j++) {
				for (let i = 1; i <= tubularSegments; i++) {
					// indices
					const a = (tubularSegments + 1) * j + i - 1;
					const b = (tubularSegments + 1) * (j - 1) + i - 1;
					const c = (tubularSegments + 1) * (j - 1) + i;
					const d = (tubularSegments + 1) * j + i; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

	}

	class TorusKnotGeometry extends BufferGeometry {
		constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
			super();
			this.type = 'TorusKnotGeometry';
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
			tubularSegments = Math.floor(tubularSegments);
			radialSegments = Math.floor(radialSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const vertex = new Vector3();
			const normal = new Vector3();
			const P1 = new Vector3();
			const P2 = new Vector3();
			const B = new Vector3();
			const T = new Vector3();
			const N = new Vector3(); // generate vertices, normals and uvs

			for (let i = 0; i <= tubularSegments; ++i) {
				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
				const u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

				calculatePositionOnCurve(u, p, q, radius, P1);
				calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis

				T.subVectors(P2, P1);
				N.addVectors(P2, P1);
				B.crossVectors(T, N);
				N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it

				B.normalize();
				N.normalize();

				for (let j = 0; j <= radialSegments; ++j) {
					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
					const v = j / radialSegments * Math.PI * 2;
					const cx = -tube * Math.cos(v);
					const cy = tube * Math.sin(v); // now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

					vertex.x = P1.x + (cx * N.x + cy * B.x);
					vertex.y = P1.y + (cx * N.y + cy * B.y);
					vertex.z = P1.z + (cx * N.z + cy * B.z);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

					normal.subVectors(vertex, P1).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(i / tubularSegments);
					uvs.push(j / radialSegments);
				}
			} // generate indices


			for (let j = 1; j <= tubularSegments; j++) {
				for (let i = 1; i <= radialSegments; i++) {
					// indices
					const a = (radialSegments + 1) * (j - 1) + (i - 1);
					const b = (radialSegments + 1) * j + (i - 1);
					const c = (radialSegments + 1) * j + i;
					const d = (radialSegments + 1) * (j - 1) + i; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve

			function calculatePositionOnCurve(u, p, q, radius, position) {
				const cu = Math.cos(u);
				const su = Math.sin(u);
				const quOverP = q / p * u;
				const cs = Math.cos(quOverP);
				position.x = radius * (2 + cs) * 0.5 * cu;
				position.y = radius * (2 + cs) * su * 0.5;
				position.z = radius * Math.sin(quOverP) * 0.5;
			}
		}

	}

	class TubeGeometry extends BufferGeometry {
		constructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
			super();
			this.type = 'TubeGeometry';
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
			const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals

			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals; // helper variables

			const vertex = new Vector3();
			const normal = new Vector3();
			const uv = new Vector2();
			let P = new Vector3(); // buffer

			const vertices = [];
			const normals = [];
			const uvs = [];
			const indices = []; // create buffer data

			generateBufferData(); // build geometry

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions

			function generateBufferData() {
				for (let i = 0; i < tubularSegments; i++) {
					generateSegment(i);
				} // if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)


				generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries

				generateUVs(); // finally create faces

				generateIndices();
			}

			function generateSegment(i) {
				// we use getPointAt to sample evenly distributed points from the given path
				P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal

				const N = frames.normals[i];
				const B = frames.binormals[i]; // generate normals and vertices for the current segment

				for (let j = 0; j <= radialSegments; j++) {
					const v = j / radialSegments * Math.PI * 2;
					const sin = Math.sin(v);
					const cos = -Math.cos(v); // normal

					normal.x = cos * N.x + sin * B.x;
					normal.y = cos * N.y + sin * B.y;
					normal.z = cos * N.z + sin * B.z;
					normal.normalize();
					normals.push(normal.x, normal.y, normal.z); // vertex

					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;
					vertices.push(vertex.x, vertex.y, vertex.z);
				}
			}

			function generateIndices() {
				for (let j = 1; j <= tubularSegments; j++) {
					for (let i = 1; i <= radialSegments; i++) {
						const a = (radialSegments + 1) * (j - 1) + (i - 1);
						const b = (radialSegments + 1) * j + (i - 1);
						const c = (radialSegments + 1) * j + i;
						const d = (radialSegments + 1) * (j - 1) + i; // faces

						indices.push(a, b, d);
						indices.push(b, c, d);
					}
				}
			}

			function generateUVs() {
				for (let i = 0; i <= tubularSegments; i++) {
					for (let j = 0; j <= radialSegments; j++) {
						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;
						uvs.push(uv.x, uv.y);
					}
				}
			}
		}

		toJSON() {
			const data = BufferGeometry.prototype.toJSON.call(this);
			data.path = this.parameters.path.toJSON();
			return data;
		}

	}

	class WireframeGeometry extends BufferGeometry {
		constructor(geometry) {
			super();
			this.type = 'WireframeGeometry';

			if (geometry.isGeometry === true) {
				console.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
				return;
			} // buffer


			const vertices = []; // helper variables

			const edge = [0, 0],
						edges = {};
			const vertex = new Vector3();

			if (geometry.index !== null) {
				// indexed BufferGeometry
				const position = geometry.attributes.position;
				const indices = geometry.index;
				let groups = geometry.groups;

				if (groups.length === 0) {
					groups = [{
						start: 0,
						count: indices.count,
						materialIndex: 0
					}];
				} // create a data structure that contains all eges without duplicates


				for (let o = 0, ol = groups.length; o < ol; ++o) {
					const group = groups[o];
					const start = group.start;
					const count = group.count;

					for (let i = start, l = start + count; i < l; i += 3) {
						for (let j = 0; j < 3; j++) {
							const edge1 = indices.getX(i + j);
							const edge2 = indices.getX(i + (j + 1) % 3);
							edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates

							edge[1] = Math.max(edge1, edge2);
							const key = edge[0] + ',' + edge[1];

							if (edges[key] === undefined) {
								edges[key] = {
									index1: edge[0],
									index2: edge[1]
								};
							}
						}
					}
				} // generate vertices


				for (const key in edges) {
					const e = edges[key];
					vertex.fromBufferAttribute(position, e.index1);
					vertices.push(vertex.x, vertex.y, vertex.z);
					vertex.fromBufferAttribute(position, e.index2);
					vertices.push(vertex.x, vertex.y, vertex.z);
				}
			} else {
				// non-indexed BufferGeometry
				const position = geometry.attributes.position;

				for (let i = 0, l = position.count / 3; i < l; i++) {
					for (let j = 0; j < 3; j++) {
						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
						const index1 = 3 * i + j;
						vertex.fromBufferAttribute(position, index1);
						vertices.push(vertex.x, vertex.y, vertex.z);
						const index2 = 3 * i + (j + 1) % 3;
						vertex.fromBufferAttribute(position, index2);
						vertices.push(vertex.x, vertex.y, vertex.z);
					}
				}
			} // build geometry


			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
		}

	}

	var Geometries = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronGeometry,
		EdgesGeometry: EdgesGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeGeometry,
		WireframeGeometry: WireframeGeometry
	});

	/**
	 * parameters = {
	 *	color: <THREE.Color>
	 * }
	 */

	class ShadowMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'ShadowMaterial';
			this.color = new Color(0x000000);
			this.transparent = true;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			return this;
		}

	}

	ShadowMaterial.prototype.isShadowMaterial = true;

	class RawShaderMaterial extends ShaderMaterial {
		constructor(parameters) {
			super(parameters);
			this.type = 'RawShaderMaterial';
		}

	}

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	roughness: <float>,
	 *	metalness: <float>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *	metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	envMapIntensity: <float>
	 *
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>,
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshStandardMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'STANDARD': ''
			};
			this.type = 'MeshStandardMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.roughness = 1.0;
			this.metalness = 0.0;
			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.roughnessMap = null;
			this.metalnessMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.envMapIntensity = 1.0;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.flatShading = false;
			this.vertexTangents = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'STANDARD': ''
			};
			this.color.copy(source.color);
			this.roughness = source.roughness;
			this.metalness = source.metalness;
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.roughnessMap = source.roughnessMap;
			this.metalnessMap = source.metalnessMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			this.flatShading = source.flatShading;
			this.vertexTangents = source.vertexTangents;
			return this;
		}

	}

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	/**
	 * parameters = {
	 *	clearcoat: <float>,
	 *	clearcoatMap: new THREE.Texture( <Image> ),
	 *	clearcoatRoughness: <float>,
	 *	clearcoatRoughnessMap: new THREE.Texture( <Image> ),
	 *	clearcoatNormalScale: <Vector2>,
	 *	clearcoatNormalMap: new THREE.Texture( <Image> ),
	 *
	 *	reflectivity: <float>,
	 *	ior: <float>,
	 *
	 *	sheen: <Color>,
	 *
	 *	transmission: <float>,
	 *	transmissionMap: new THREE.Texture( <Image> )
	 * }
	 */

	class MeshPhysicalMaterial extends MeshStandardMaterial {
		constructor(parameters) {
			super();
			this.defines = {
				'STANDARD': '',
				'PHYSICAL': ''
			};
			this.type = 'MeshPhysicalMaterial';
			this.clearcoat = 0.0;
			this.clearcoatMap = null;
			this.clearcoatRoughness = 0.0;
			this.clearcoatRoughnessMap = null;
			this.clearcoatNormalScale = new Vector2(1, 1);
			this.clearcoatNormalMap = null;
			this.reflectivity = 0.5; // maps to F0 = 0.04

			Object.defineProperty(this, 'ior', {
				get: function () {
					return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
				},
				set: function (ior) {
					this.reflectivity = clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
				}
			});
			this.sheen = null; // null will disable sheen bsdf

			this.transmission = 0.0;
			this.transmissionMap = null;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'STANDARD': '',
				'PHYSICAL': ''
			};
			this.clearcoat = source.clearcoat;
			this.clearcoatMap = source.clearcoatMap;
			this.clearcoatRoughness = source.clearcoatRoughness;
			this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
			this.clearcoatNormalMap = source.clearcoatNormalMap;
			this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
			this.reflectivity = source.reflectivity;

			if (source.sheen) {
				this.sheen = (this.sheen || new Color()).copy(source.sheen);
			} else {
				this.sheen = null;
			}

			this.transmission = source.transmission;
			this.transmissionMap = source.transmissionMap;
			return this;
		}

	}

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	specular: <hex>,
	 *	shininess: <float>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.MultiplyOperation,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>,
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshPhongMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshPhongMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.specular = new Color(0x111111);
			this.shininess = 30;
			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.specular.copy(source.specular);
			this.shininess = source.shininess;
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *	gradientMap: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>
	 * }
	 */

	class MeshToonMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'TOON': ''
			};
			this.type = 'MeshToonMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.gradientMap = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.alphaMap = null;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.gradientMap = source.gradientMap;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.alphaMap = source.alphaMap;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			return this;
		}

	}

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	/**
	 * parameters = {
	 *	opacity: <float>,
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>,
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshNormalMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshNormalMaterial';
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false;
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.Multiply,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>
	 * }
	 */

	class MeshLambertMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshLambertMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			return this;
		}

	}

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	matcap: new THREE.Texture( <Image> ),
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	skinning: <bool>,
	 *	morphTargets: <bool>,
	 *	morphNormals: <bool>
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshMatcapMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'MATCAP': ''
			};
			this.type = 'MeshMatcapMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.matcap = null;
			this.map = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.alphaMap = null;
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'MATCAP': ''
			};
			this.color.copy(source.color);
			this.matcap = source.matcap;
			this.map = source.map;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.alphaMap = source.alphaMap;
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	linewidth: <float>,
	 *
	 *	scale: <float>,
	 *	dashSize: <float>,
	 *	gapSize: <float>
	 * }
	 */

	class LineDashedMaterial extends LineBasicMaterial {
		constructor(parameters) {
			super();
			this.type = 'LineDashedMaterial';
			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;
			return this;
		}

	}

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	var Materials = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		MeshMatcapMaterial: MeshMatcapMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	const AnimationUtils = {
		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function (array, from, to) {
			if (AnimationUtils.isTypedArray(array)) {
				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
			}

			return array.slice(from, to);
		},
		// converts an array to a specific type
		convertArray: function (array, type, forceClone) {
			if (!array || // let 'undefined' and 'null' pass
			!forceClone && array.constructor === type) return array;

			if (typeof type.BYTES_PER_ELEMENT === 'number') {
				return new type(array); // create typed array
			}

			return Array.prototype.slice.call(array); // create Array
		},
		isTypedArray: function (object) {
			return ArrayBuffer.isView(object) && !(object instanceof DataView);
		},
		// returns an array by which times and values can be sorted
		getKeyframeOrder: function (times) {
			function compareTime(i, j) {
				return times[i] - times[j];
			}

			const n = times.length;
			const result = new Array(n);

			for (let i = 0; i !== n; ++i) result[i] = i;

			result.sort(compareTime);
			return result;
		},
		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function (values, stride, order) {
			const nValues = values.length;
			const result = new values.constructor(nValues);

			for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
				const srcOffset = order[i] * stride;

				for (let j = 0; j !== stride; ++j) {
					result[dstOffset++] = values[srcOffset + j];
				}
			}

			return result;
		},
		// function for parsing AOS keyframe formats
		flattenJSON: function (jsonKeys, times, values, valuePropertyName) {
			let i = 1,
					key = jsonKeys[0];

			while (key !== undefined && key[valuePropertyName] === undefined) {
				key = jsonKeys[i++];
			}

			if (key === undefined) return; // no data

			let value = key[valuePropertyName];
			if (value === undefined) return; // no data

			if (Array.isArray(value)) {
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						values.push.apply(values, value); // push all elements
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			} else if (value.toArray !== undefined) {
				// ...assume THREE.Math-ish
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						value.toArray(values, values.length);
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			} else {
				// otherwise push as-is
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						values.push(value);
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			}
		},
		subclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {
			const clip = sourceClip.clone();
			clip.name = name;
			const tracks = [];

			for (let i = 0; i < clip.tracks.length; ++i) {
				const track = clip.tracks[i];
				const valueSize = track.getValueSize();
				const times = [];
				const values = [];

				for (let j = 0; j < track.times.length; ++j) {
					const frame = track.times[j] * fps;
					if (frame < startFrame || frame >= endFrame) continue;
					times.push(track.times[j]);

					for (let k = 0; k < valueSize; ++k) {
						values.push(track.values[j * valueSize + k]);
					}
				}

				if (times.length === 0) continue;
				track.times = AnimationUtils.convertArray(times, track.times.constructor);
				track.values = AnimationUtils.convertArray(values, track.values.constructor);
				tracks.push(track);
			}

			clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip

			let minStartTime = Infinity;

			for (let i = 0; i < clip.tracks.length; ++i) {
				if (minStartTime > clip.tracks[i].times[0]) {
					minStartTime = clip.tracks[i].times[0];
				}
			} // shift all tracks such that clip begins at t=0


			for (let i = 0; i < clip.tracks.length; ++i) {
				clip.tracks[i].shift(-1 * minStartTime);
			}

			clip.resetDuration();
			return clip;
		},
		makeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
			if (fps <= 0) fps = 30;
			const numTracks = referenceClip.tracks.length;
			const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame

			for (let i = 0; i < numTracks; ++i) {
				const referenceTrack = referenceClip.tracks[i];
				const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric

				if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track

				const targetTrack = targetClip.tracks.find(function (track) {
					return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
				});
				if (targetTrack === undefined) continue;
				let referenceOffset = 0;
				const referenceValueSize = referenceTrack.getValueSize();

				if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
					referenceOffset = referenceValueSize / 3;
				}

				let targetOffset = 0;
				const targetValueSize = targetTrack.getValueSize();

				if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
					targetOffset = targetValueSize / 3;
				}

				const lastIndex = referenceTrack.times.length - 1;
				let referenceValue; // Find the value to subtract out of the track

				if (referenceTime <= referenceTrack.times[0]) {
					// Reference frame is earlier than the first keyframe, so just use the first keyframe
					const startIndex = referenceOffset;
					const endIndex = referenceValueSize - referenceOffset;
					referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
				} else if (referenceTime >= referenceTrack.times[lastIndex]) {
					// Reference frame is after the last keyframe, so just use the last keyframe
					const startIndex = lastIndex * referenceValueSize + referenceOffset;
					const endIndex = startIndex + referenceValueSize - referenceOffset;
					referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
				} else {
					// Interpolate to the reference value
					const interpolant = referenceTrack.createInterpolant();
					const startIndex = referenceOffset;
					const endIndex = referenceValueSize - referenceOffset;
					interpolant.evaluate(referenceTime);
					referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
				} // Conjugate the quaternion


				if (referenceTrackType === 'quaternion') {
					const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
					referenceQuat.toArray(referenceValue);
				} // Subtract the reference value from all of the track values


				const numTimes = targetTrack.times.length;

				for (let j = 0; j < numTimes; ++j) {
					const valueStart = j * targetValueSize + targetOffset;

					if (referenceTrackType === 'quaternion') {
						// Multiply the conjugate for quaternion track types
						Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
					} else {
						const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types

						for (let k = 0; k < valueEnd; ++k) {
							targetTrack.values[valueStart + k] -= referenceValue[k];
						}
					}
				}
			}

			targetClip.blendMode = AdditiveAnimationBlendMode;
			return targetClip;
		}
	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 */
	class Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;
			this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;
			this.settings = null;
			this.DefaultSettings_ = {};
		}

		evaluate(t) {
			const pp = this.parameterPositions;
			let i1 = this._cachedIndex,
					t1 = pp[i1],
					t0 = pp[i1 - 1];

			validate_interval: {
				seek: {
					let right;

					linear_scan: {
						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if (!(t < t1)) {
							for (let giveUpAt = i1 + 2;;) {
								if (t1 === undefined) {
									if (t < t0) break forward_scan; // after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_(i1 - 1, t, t0);
								}

								if (i1 === giveUpAt) break; // this loop

								t0 = t1;
								t1 = pp[++i1];

								if (t < t1) {
									// we have arrived at the sought interval
									break seek;
								}
							} // prepare binary search on the right side of the index


							right = pp.length;
							break linear_scan;
						} //- slower code:
						//-					if ( t < t0 || t0 === undefined ) {


						if (!(t >= t0)) {
							// looping?
							const t1global = pp[1];

							if (t < t1global) {
								i1 = 2; // + 1, using the scan for the details

								t0 = t1global;
							} // linear reverse scan


							for (let giveUpAt = i1 - 2;;) {
								if (t0 === undefined) {
									// before start
									this._cachedIndex = 0;
									return this.beforeStart_(0, t, t1);
								}

								if (i1 === giveUpAt) break; // this loop

								t1 = t0;
								t0 = pp[--i1 - 1];

								if (t >= t0) {
									// we have arrived at the sought interval
									break seek;
								}
							} // prepare binary search on the left side of the index


							right = i1;
							i1 = 0;
							break linear_scan;
						} // the interval is valid


						break validate_interval;
					} // linear scan
					// binary search


					while (i1 < right) {
						const mid = i1 + right >>> 1;

						if (t < pp[mid]) {
							right = mid;
						} else {
							i1 = mid + 1;
						}
					}

					t1 = pp[i1];
					t0 = pp[i1 - 1]; // check boundary cases, again

					if (t0 === undefined) {
						this._cachedIndex = 0;
						return this.beforeStart_(0, t, t1);
					}

					if (t1 === undefined) {
						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_(i1 - 1, t0, t);
					}
				} // seek


				this._cachedIndex = i1;
				this.intervalChanged_(i1, t0, t1);
			} // validate_interval


			return this.interpolate_(i1, t0, t, t1);
		}

		getSettings_() {
			return this.settings || this.DefaultSettings_;
		}

		copySampleValue_(index) {
			// copies a sample value to the result buffer
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						offset = index * stride;

			for (let i = 0; i !== stride; ++i) {
				result[i] = values[offset + i];
			}

			return result;
		} // Template methods for derived classes:


		interpolate_()
		/* i1, t0, t, t1 */
		{
			throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
		}

		intervalChanged_()
		/* i1, t0, t1 */
		{// empty
		}

	} // ALIAS DEFINITIONS


	Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
	Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 */

	class CubicInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
			this._weightPrev = -0;
			this._offsetPrev = -0;
			this._weightNext = -0;
			this._offsetNext = -0;
			this.DefaultSettings_ = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};
		}

		intervalChanged_(i1, t0, t1) {
			const pp = this.parameterPositions;
			let iPrev = i1 - 2,
					iNext = i1 + 1,
					tPrev = pp[iPrev],
					tNext = pp[iNext];

			if (tPrev === undefined) {
				switch (this.getSettings_().endingStart) {
					case ZeroSlopeEnding:
						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;
						break;

					case WrapAroundEnding:
						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
						break;

					default:
						// ZeroCurvatureEnding
						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;
				}
			}

			if (tNext === undefined) {
				switch (this.getSettings_().endingEnd) {
					case ZeroSlopeEnding:
						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;
						break;

					case WrapAroundEnding:
						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[1] - pp[0];
						break;

					default:
						// ZeroCurvatureEnding
						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;
				}
			}

			const halfDt = (t1 - t0) * 0.5,
						stride = this.valueSize;
			this._weightPrev = halfDt / (t0 - tPrev);
			this._weightNext = halfDt / (tNext - t1);
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						o1 = i1 * stride,
						o0 = o1 - stride,
						oP = this._offsetPrev,
						oN = this._offsetNext,
						wP = this._weightPrev,
						wN = this._weightNext,
						p = (t - t0) / (t1 - t0),
						pp = p * p,
						ppp = pp * p; // evaluate polynomials

			const sP = -wP * ppp + 2 * wP * pp - wP * p;
			const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
			const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
			const sN = wN * ppp - wN * pp; // combine data linearly

			for (let i = 0; i !== stride; ++i) {
				result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
			}

			return result;
		}

	}

	class LinearInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						offset1 = i1 * stride,
						offset0 = offset1 - stride,
						weight1 = (t - t0) / (t1 - t0),
						weight0 = 1 - weight1;

			for (let i = 0; i !== stride; ++i) {
				result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
			}

			return result;
		}

	}

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 */

	class DiscreteInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1
		/*, t0, t, t1 */
		) {
			return this.copySampleValue_(i1 - 1);
		}

	}

	class KeyframeTrack {
		constructor(name, times, values, interpolation) {
			if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
			if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
			this.name = name;
			this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
			this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
			this.setInterpolation(interpolation || this.DefaultInterpolation);
		} // Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):


		static toJSON(track) {
			const trackType = track.constructor;
			let json; // derived classes can define a static toJSON method

			if (trackType.toJSON !== this.toJSON) {
				json = trackType.toJSON(track);
			} else {
				// by default, we assume the data can be serialized as-is
				json = {
					'name': track.name,
					'times': AnimationUtils.convertArray(track.times, Array),
					'values': AnimationUtils.convertArray(track.values, Array)
				};
				const interpolation = track.getInterpolation();

				if (interpolation !== track.DefaultInterpolation) {
					json.interpolation = interpolation;
				}
			}

			json.type = track.ValueTypeName; // mandatory

			return json;
		}

		InterpolantFactoryMethodDiscrete(result) {
			return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		InterpolantFactoryMethodLinear(result) {
			return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		InterpolantFactoryMethodSmooth(result) {
			return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		setInterpolation(interpolation) {
			let factoryMethod;

			switch (interpolation) {
				case InterpolateDiscrete:
					factoryMethod = this.InterpolantFactoryMethodDiscrete;
					break;

				case InterpolateLinear:
					factoryMethod = this.InterpolantFactoryMethodLinear;
					break;

				case InterpolateSmooth:
					factoryMethod = this.InterpolantFactoryMethodSmooth;
					break;
			}

			if (factoryMethod === undefined) {
				const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;

				if (this.createInterpolant === undefined) {
					// fall back to default, unless the default itself is messed up
					if (interpolation !== this.DefaultInterpolation) {
						this.setInterpolation(this.DefaultInterpolation);
					} else {
						throw new Error(message); // fatal, in this case
					}
				}

				console.warn('THREE.KeyframeTrack:', message);
				return this;
			}

			this.createInterpolant = factoryMethod;
			return this;
		}

		getInterpolation() {
			switch (this.createInterpolant) {
				case this.InterpolantFactoryMethodDiscrete:
					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:
					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:
					return InterpolateSmooth;
			}
		}

		getValueSize() {
			return this.values.length / this.times.length;
		} // move all keyframes either forwards or backwards in time


		shift(timeOffset) {
			if (timeOffset !== 0.0) {
				const times = this.times;

				for (let i = 0, n = times.length; i !== n; ++i) {
					times[i] += timeOffset;
				}
			}

			return this;
		} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)


		scale(timeScale) {
			if (timeScale !== 1.0) {
				const times = this.times;

				for (let i = 0, n = times.length; i !== n; ++i) {
					times[i] *= timeScale;
				}
			}

			return this;
		} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values


		trim(startTime, endTime) {
			const times = this.times,
						nKeys = times.length;
			let from = 0,
					to = nKeys - 1;

			while (from !== nKeys && times[from] < startTime) {
				++from;
			}

			while (to !== -1 && times[to] > endTime) {
				--to;
			}

			++to; // inclusive -> exclusive bound

			if (from !== 0 || to !== nKeys) {
				// empty tracks are forbidden, so keep at least one keyframe
				if (from >= to) {
					to = Math.max(to, 1);
					from = to - 1;
				}

				const stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice(times, from, to);
				this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
			}

			return this;
		} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable


		validate() {
			let valid = true;
			const valueSize = this.getValueSize();

			if (valueSize - Math.floor(valueSize) !== 0) {
				console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
				valid = false;
			}

			const times = this.times,
						values = this.values,
						nKeys = times.length;

			if (nKeys === 0) {
				console.error('THREE.KeyframeTrack: Track is empty.', this);
				valid = false;
			}

			let prevTime = null;

			for (let i = 0; i !== nKeys; i++) {
				const currTime = times[i];

				if (typeof currTime === 'number' && isNaN(currTime)) {
					console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
					valid = false;
					break;
				}

				if (prevTime !== null && prevTime > currTime) {
					console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
					valid = false;
					break;
				}

				prevTime = currTime;
			}

			if (values !== undefined) {
				if (AnimationUtils.isTypedArray(values)) {
					for (let i = 0, n = values.length; i !== n; ++i) {
						const value = values[i];

						if (isNaN(value)) {
							console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
							valid = false;
							break;
						}
					}
				}
			}

			return valid;
		} // removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)


		optimize() {
			// times or values may be shared with other tracks, so overwriting is unsafe
			const times = AnimationUtils.arraySlice(this.times),
						values = AnimationUtils.arraySlice(this.values),
						stride = this.getValueSize(),
						smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
						lastIndex = times.length - 1;
			let writeIndex = 1;

			for (let i = 1; i < lastIndex; ++i) {
				let keep = false;
				const time = times[i];
				const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time

				if (time !== timeNext && (i !== 1 || time !== times[0])) {
					if (!smoothInterpolation) {
						// remove unnecessary keyframes same as their neighbors
						const offset = i * stride,
									offsetP = offset - stride,
									offsetN = offset + stride;

						for (let j = 0; j !== stride; ++j) {
							const value = values[offset + j];

							if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
								keep = true;
								break;
							}
						}
					} else {
						keep = true;
					}
				} // in-place compaction


				if (keep) {
					if (i !== writeIndex) {
						times[writeIndex] = times[i];
						const readOffset = i * stride,
									writeOffset = writeIndex * stride;

						for (let j = 0; j !== stride; ++j) {
							values[writeOffset + j] = values[readOffset + j];
						}
					}

					++writeIndex;
				}
			} // flush last keyframe (compaction looks ahead)


			if (lastIndex > 0) {
				times[writeIndex] = times[lastIndex];

				for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
					values[writeOffset + j] = values[readOffset + j];
				}

				++writeIndex;
			}

			if (writeIndex !== times.length) {
				this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
				this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
			} else {
				this.times = times;
				this.values = values;
			}

			return this;
		}

		clone() {
			const times = AnimationUtils.arraySlice(this.times, 0);
			const values = AnimationUtils.arraySlice(this.values, 0);
			const TypedKeyframeTrack = this.constructor;
			const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.

			track.createInterpolant = this.createInterpolant;
			return track;
		}

	}

	KeyframeTrack.prototype.TimeBufferType = Float32Array;
	KeyframeTrack.prototype.ValueBufferType = Float32Array;
	KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;

	/**
	 * A Track of Boolean keyframe values.
	 */

	class BooleanKeyframeTrack extends KeyframeTrack {}

	BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
	BooleanKeyframeTrack.prototype.ValueBufferType = Array;
	BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed

	/**
	 * A Track of keyframe values that represent color.
	 */

	class ColorKeyframeTrack extends KeyframeTrack {}

	ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited

	/**
	 * A Track of numeric keyframe values.
	 */

	class NumberKeyframeTrack extends KeyframeTrack {}

	NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited

	/**
	 * Spherical linear unit quaternion interpolant.
	 */

	class QuaternionLinearInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						alpha = (t - t0) / (t1 - t0);
			let offset = i1 * stride;

			for (let end = offset + stride; offset !== end; offset += 4) {
				Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
			}

			return result;
		}

	}

	/**
	 * A Track of quaternion keyframe values.
	 */

	class QuaternionKeyframeTrack extends KeyframeTrack {
		InterpolantFactoryMethodLinear(result) {
			return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
		}

	}

	QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited

	QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
	QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

	/**
	 * A Track that interpolates Strings
	 */

	class StringKeyframeTrack extends KeyframeTrack {}

	StringKeyframeTrack.prototype.ValueTypeName = 'string';
	StringKeyframeTrack.prototype.ValueBufferType = Array;
	StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
	StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
	StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

	/**
	 * A Track of vectored keyframe values.
	 */

	class VectorKeyframeTrack extends KeyframeTrack {}

	VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited

	class AnimationClip {
		constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
			this.name = name;
			this.tracks = tracks;
			this.duration = duration;
			this.blendMode = blendMode;
			this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks

			if (this.duration < 0) {
				this.resetDuration();
			}
		}

		static parse(json) {
			const tracks = [],
						jsonTracks = json.tracks,
						frameTime = 1.0 / (json.fps || 1.0);

			for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
				tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
			}

			const clip = new this(json.name, json.duration, tracks, json.blendMode);
			clip.uuid = json.uuid;
			return clip;
		}

		static toJSON(clip) {
			const tracks = [],
						clipTracks = clip.tracks;
			const json = {
				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid,
				'blendMode': clip.blendMode
			};

			for (let i = 0, n = clipTracks.length; i !== n; ++i) {
				tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
			}

			return json;
		}

		static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
			const numMorphTargets = morphTargetSequence.length;
			const tracks = [];

			for (let i = 0; i < numMorphTargets; i++) {
				let times = [];
				let values = [];
				times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
				values.push(0, 1, 0);
				const order = AnimationUtils.getKeyframeOrder(times);
				times = AnimationUtils.sortedArray(times, 1, order);
				values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.

				if (!noLoop && times[0] === 0) {
					times.push(numMorphTargets);
					values.push(values[0]);
				}

				tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
			}

			return new this(name, -1, tracks);
		}

		static findByName(objectOrClipArray, name) {
			let clipArray = objectOrClipArray;

			if (!Array.isArray(objectOrClipArray)) {
				const o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;
			}

			for (let i = 0; i < clipArray.length; i++) {
				if (clipArray[i].name === name) {
					return clipArray[i];
				}
			}

			return null;
		}

		static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
			const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059

			const pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002

			for (let i = 0, il = morphTargets.length; i < il; i++) {
				const morphTarget = morphTargets[i];
				const parts = morphTarget.name.match(pattern);

				if (parts && parts.length > 1) {
					const name = parts[1];
					let animationMorphTargets = animationToMorphTargets[name];

					if (!animationMorphTargets) {
						animationToMorphTargets[name] = animationMorphTargets = [];
					}

					animationMorphTargets.push(morphTarget);
				}
			}

			const clips = [];

			for (const name in animationToMorphTargets) {
				clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
			}

			return clips;
		} // parse the animation.hierarchy format


		static parseAnimation(animation, bones) {
			if (!animation) {
				console.error('THREE.AnimationClip: No animation in JSONLoader data.');
				return null;
			}

			const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {
				// only return track if there are actually keys.
				if (animationKeys.length !== 0) {
					const times = [];
					const values = [];
					AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again

					if (times.length !== 0) {
						destTracks.push(new trackType(trackName, times, values));
					}
				}
			};

			const tracks = [];
			const clipName = animation.name || 'default';
			const fps = animation.fps || 30;
			const blendMode = animation.blendMode; // automatic length determination in AnimationClip.

			let duration = animation.length || -1;
			const hierarchyTracks = animation.hierarchy || [];

			for (let h = 0; h < hierarchyTracks.length; h++) {
				const animationKeys = hierarchyTracks[h].keys; // skip empty tracks

				if (!animationKeys || animationKeys.length === 0) continue; // process morph targets

				if (animationKeys[0].morphTargets) {
					// figure out all morph targets used in this track
					const morphTargetNames = {};
					let k;

					for (k = 0; k < animationKeys.length; k++) {
						if (animationKeys[k].morphTargets) {
							for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
								morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
							}
						}
					} // create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.


					for (const morphTargetName in morphTargetNames) {
						const times = [];
						const values = [];

						for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
							const animationKey = animationKeys[k];
							times.push(animationKey.time);
							values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
						}

						tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
					}

					duration = morphTargetNames.length * (fps || 1.0);
				} else {
					// ...assume skeletal animation
					const boneName = '.bones[' + bones[h].name + ']';
					addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
					addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
					addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
				}
			}

			if (tracks.length === 0) {
				return null;
			}

			const clip = new this(clipName, duration, tracks, blendMode);
			return clip;
		}

		resetDuration() {
			const tracks = this.tracks;
			let duration = 0;

			for (let i = 0, n = tracks.length; i !== n; ++i) {
				const track = this.tracks[i];
				duration = Math.max(duration, track.times[track.times.length - 1]);
			}

			this.duration = duration;
			return this;
		}

		trim() {
			for (let i = 0; i < this.tracks.length; i++) {
				this.tracks[i].trim(0, this.duration);
			}

			return this;
		}

		validate() {
			let valid = true;

			for (let i = 0; i < this.tracks.length; i++) {
				valid = valid && this.tracks[i].validate();
			}

			return valid;
		}

		optimize() {
			for (let i = 0; i < this.tracks.length; i++) {
				this.tracks[i].optimize();
			}

			return this;
		}

		clone() {
			const tracks = [];

			for (let i = 0; i < this.tracks.length; i++) {
				tracks.push(this.tracks[i].clone());
			}

			return new this.constructor(this.name, this.duration, tracks, this.blendMode);
		}

		toJSON() {
			return this.constructor.toJSON(this);
		}

	}

	function getTrackTypeForValueTypeName(typeName) {
		switch (typeName.toLowerCase()) {
			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':
				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':
				return VectorKeyframeTrack;

			case 'color':
				return ColorKeyframeTrack;

			case 'quaternion':
				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':
				return BooleanKeyframeTrack;

			case 'string':
				return StringKeyframeTrack;
		}

		throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
	}

	function parseKeyframeTrack(json) {
		if (json.type === undefined) {
			throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
		}

		const trackType = getTrackTypeForValueTypeName(json.type);

		if (json.times === undefined) {
			const times = [],
						values = [];
			AnimationUtils.flattenJSON(json.keys, times, values, 'value');
			json.times = times;
			json.values = values;
		} // derived classes can define a static parse method


		if (trackType.parse !== undefined) {
			return trackType.parse(json);
		} else {
			// by default, we assume a constructor compatible with the base
			return new trackType(json.name, json.times, json.values, json.interpolation);
		}
	}

	const Cache = {
		enabled: false,
		files: {},
		add: function (key, file) {
			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[key] = file;
		},
		get: function (key) {
			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[key];
		},
		remove: function (key) {
			delete this.files[key];
		},
		clear: function () {
			this.files = {};
		}
	};

	class LoadingManager {
		constructor(onLoad, onProgress, onError) {
			const scope = this;
			let isLoading = false;
			let itemsLoaded = 0;
			let itemsTotal = 0;
			let urlModifier = undefined;
			const handlers = []; // Refer to #5689 for the reason why we don't set .onStart
			// in the constructor

			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;

			this.itemStart = function (url) {
				itemsTotal++;

				if (isLoading === false) {
					if (scope.onStart !== undefined) {
						scope.onStart(url, itemsLoaded, itemsTotal);
					}
				}

				isLoading = true;
			};

			this.itemEnd = function (url) {
				itemsLoaded++;

				if (scope.onProgress !== undefined) {
					scope.onProgress(url, itemsLoaded, itemsTotal);
				}

				if (itemsLoaded === itemsTotal) {
					isLoading = false;

					if (scope.onLoad !== undefined) {
						scope.onLoad();
					}
				}
			};

			this.itemError = function (url) {
				if (scope.onError !== undefined) {
					scope.onError(url);
				}
			};

			this.resolveURL = function (url) {
				if (urlModifier) {
					return urlModifier(url);
				}

				return url;
			};

			this.setURLModifier = function (transform) {
				urlModifier = transform;
				return this;
			};

			this.addHandler = function (regex, loader) {
				handlers.push(regex, loader);
				return this;
			};

			this.removeHandler = function (regex) {
				const index = handlers.indexOf(regex);

				if (index !== -1) {
					handlers.splice(index, 2);
				}

				return this;
			};

			this.getHandler = function (file) {
				for (let i = 0, l = handlers.length; i < l; i += 2) {
					const regex = handlers[i];
					const loader = handlers[i + 1];
					if (regex.global) regex.lastIndex = 0; // see #17920

					if (regex.test(file)) {
						return loader;
					}
				}

				return null;
			};
		}

	}

	const DefaultLoadingManager = new LoadingManager();

	class Loader {
		constructor(manager) {
			this.manager = manager !== undefined ? manager : DefaultLoadingManager;
			this.crossOrigin = 'anonymous';
			this.withCredentials = false;
			this.path = '';
			this.resourcePath = '';
			this.requestHeader = {};
		}

		load()
		/* url, onLoad, onProgress, onError */
		{}

		loadAsync(url, onProgress) {
			const scope = this;
			return new Promise(function (resolve, reject) {
				scope.load(url, resolve, onProgress, reject);
			});
		}

		parse()
		/* data */
		{}

		setCrossOrigin(crossOrigin) {
			this.crossOrigin = crossOrigin;
			return this;
		}

		setWithCredentials(value) {
			this.withCredentials = value;
			return this;
		}

		setPath(path) {
			this.path = path;
			return this;
		}

		setResourcePath(resourcePath) {
			this.resourcePath = resourcePath;
			return this;
		}

		setRequestHeader(requestHeader) {
			this.requestHeader = requestHeader;
			return this;
		}

	}

	const loading = {};

	class FileLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			if (url === undefined) url = '';
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const scope = this;
			const cached = Cache.get(url);

			if (cached !== undefined) {
				scope.manager.itemStart(url);
				setTimeout(function () {
					if (onLoad) onLoad(cached);
					scope.manager.itemEnd(url);
				}, 0);
				return cached;
			} // Check if request is duplicate


			if (loading[url] !== undefined) {
				loading[url].push({
					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError
				});
				return;
			} // Check for data: URI


			const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			const dataUriRegexResult = url.match(dataUriRegex);
			let request; // Safari can not handle Data URIs through XMLHttpRequest so process manually

			if (dataUriRegexResult) {
				const mimeType = dataUriRegexResult[1];
				const isBase64 = !!dataUriRegexResult[2];
				let data = dataUriRegexResult[3];
				data = decodeURIComponent(data);
				if (isBase64) data = atob(data);

				try {
					let response;
					const responseType = (this.responseType || '').toLowerCase();

					switch (responseType) {
						case 'arraybuffer':
						case 'blob':
							const view = new Uint8Array(data.length);

							for (let i = 0; i < data.length; i++) {
								view[i] = data.charCodeAt(i);
							}

							if (responseType === 'blob') {
								response = new Blob([view.buffer], {
									type: mimeType
								});
							} else {
								response = view.buffer;
							}

							break;

						case 'document':
							const parser = new DOMParser();
							response = parser.parseFromString(data, mimeType);
							break;

						case 'json':
							response = JSON.parse(data);
							break;

						default:
							// 'text' or other
							response = data;
							break;
					} // Wait for next browser tick like standard XMLHttpRequest event dispatching does


					setTimeout(function () {
						if (onLoad) onLoad(response);
						scope.manager.itemEnd(url);
					}, 0);
				} catch (error) {
					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					setTimeout(function () {
						if (onError) onError(error);
						scope.manager.itemError(url);
						scope.manager.itemEnd(url);
					}, 0);
				}
			} else {
				// Initialise array for duplicate requests
				loading[url] = [];
				loading[url].push({
					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError
				});
				request = new XMLHttpRequest();
				request.open('GET', url, true);
				request.addEventListener('load', function (event) {
					const response = this.response;
					const callbacks = loading[url];
					delete loading[url];

					if (this.status === 200 || this.status === 0) {
						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.
						if (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache
						// error response bodies as proper responses to requests.

						Cache.add(url, response);

						for (let i = 0, il = callbacks.length; i < il; i++) {
							const callback = callbacks[i];
							if (callback.onLoad) callback.onLoad(response);
						}

						scope.manager.itemEnd(url);
					} else {
						for (let i = 0, il = callbacks.length; i < il; i++) {
							const callback = callbacks[i];
							if (callback.onError) callback.onError(event);
						}

						scope.manager.itemError(url);
						scope.manager.itemEnd(url);
					}
				}, false);
				request.addEventListener('progress', function (event) {
					const callbacks = loading[url];

					for (let i = 0, il = callbacks.length; i < il; i++) {
						const callback = callbacks[i];
						if (callback.onProgress) callback.onProgress(event);
					}
				}, false);
				request.addEventListener('error', function (event) {
					const callbacks = loading[url];
					delete loading[url];

					for (let i = 0, il = callbacks.length; i < il; i++) {
						const callback = callbacks[i];
						if (callback.onError) callback.onError(event);
					}

					scope.manager.itemError(url);
					scope.manager.itemEnd(url);
				}, false);
				request.addEventListener('abort', function (event) {
					const callbacks = loading[url];
					delete loading[url];

					for (let i = 0, il = callbacks.length; i < il; i++) {
						const callback = callbacks[i];
						if (callback.onError) callback.onError(event);
					}

					scope.manager.itemError(url);
					scope.manager.itemEnd(url);
				}, false);
				if (this.responseType !== undefined) request.responseType = this.responseType;
				if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;
				if (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');

				for (const header in this.requestHeader) {
					request.setRequestHeader(header, this.requestHeader[header]);
				}

				request.send(null);
			}

			scope.manager.itemStart(url);
			return request;
		}

		setResponseType(value) {
			this.responseType = value;
			return this;
		}

		setMimeType(value) {
			this.mimeType = value;
			return this;
		}

	}

	class AnimationLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const animations = [];

			for (let i = 0; i < json.length; i++) {
				const clip = AnimationClip.parse(json[i]);
				animations.push(clip);
			}

			return animations;
		}

	}

	/**
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	class CompressedTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const images = [];
			const texture = new CompressedTexture();
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setResponseType('arraybuffer');
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			let loaded = 0;

			function loadTexture(i) {
				loader.load(url[i], function (buffer) {
					const texDatas = scope.parse(buffer, true);
					images[i] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};
					loaded += 1;

					if (loaded === 6) {
						if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
						texture.image = images;
						texture.format = texDatas.format;
						texture.needsUpdate = true;
						if (onLoad) onLoad(texture);
					}
				}, onProgress, onError);
			}

			if (Array.isArray(url)) {
				for (let i = 0, il = url.length; i < il; ++i) {
					loadTexture(i);
				}
			} else {
				// compressed cubemap texture stored in a single DDS file
				loader.load(url, function (buffer) {
					const texDatas = scope.parse(buffer, true);

					if (texDatas.isCubemap) {
						const faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for (let f = 0; f < faces; f++) {
							images[f] = {
								mipmaps: []
							};

							for (let i = 0; i < texDatas.mipmapCount; i++) {
								images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
								images[f].format = texDatas.format;
								images[f].width = texDatas.width;
								images[f].height = texDatas.height;
							}
						}

						texture.image = images;
					} else {
						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;
					}

					if (texDatas.mipmapCount === 1) {
						texture.minFilter = LinearFilter;
					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;
					if (onLoad) onLoad(texture);
				}, onProgress, onError);
			}

			return texture;
		}

	}

	class ImageLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const scope = this;
			const cached = Cache.get(url);

			if (cached !== undefined) {
				scope.manager.itemStart(url);
				setTimeout(function () {
					if (onLoad) onLoad(cached);
					scope.manager.itemEnd(url);
				}, 0);
				return cached;
			}

			const image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');

			function onImageLoad() {
				image.removeEventListener('load', onImageLoad, false);
				image.removeEventListener('error', onImageError, false);
				Cache.add(url, this);
				if (onLoad) onLoad(this);
				scope.manager.itemEnd(url);
			}

			function onImageError(event) {
				image.removeEventListener('load', onImageLoad, false);
				image.removeEventListener('error', onImageError, false);
				if (onError) onError(event);
				scope.manager.itemError(url);
				scope.manager.itemEnd(url);
			}

			image.addEventListener('load', onImageLoad, false);
			image.addEventListener('error', onImageError, false);

			if (url.substr(0, 5) !== 'data:') {
				if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
			}

			scope.manager.itemStart(url);
			image.src = url;
			return image;
		}

	}

	class CubeTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(urls, onLoad, onProgress, onError) {
			const texture = new CubeTexture();
			const loader = new ImageLoader(this.manager);
			loader.setCrossOrigin(this.crossOrigin);
			loader.setPath(this.path);
			let loaded = 0;

			function loadTexture(i) {
				loader.load(urls[i], function (image) {
					texture.images[i] = image;
					loaded++;

					if (loaded === 6) {
						texture.needsUpdate = true;
						if (onLoad) onLoad(texture);
					}
				}, undefined, onError);
			}

			for (let i = 0; i < urls.length; ++i) {
				loadTexture(i);
			}

			return texture;
		}

	}

	/**
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	class DataTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const texture = new DataTexture();
			const loader = new FileLoader(this.manager);
			loader.setResponseType('arraybuffer');
			loader.setRequestHeader(this.requestHeader);
			loader.setPath(this.path);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (buffer) {
				const texData = scope.parse(buffer);
				if (!texData) return;

				if (texData.image !== undefined) {
					texture.image = texData.image;
				} else if (texData.data !== undefined) {
					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;
				}

				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

				if (texData.encoding !== undefined) {
					texture.encoding = texData.encoding;
				}

				if (texData.flipY !== undefined) {
					texture.flipY = texData.flipY;
				}

				if (texData.format !== undefined) {
					texture.format = texData.format;
				}

				if (texData.type !== undefined) {
					texture.type = texData.type;
				}

				if (texData.mipmaps !== undefined) {
					texture.mipmaps = texData.mipmaps;
					texture.minFilter = LinearMipmapLinearFilter; // presumably...
				}

				if (texData.mipmapCount === 1) {
					texture.minFilter = LinearFilter;
				}

				if (texData.generateMipmaps !== undefined) {
					texture.generateMipmaps = texData.generateMipmaps;
				}

				texture.needsUpdate = true;
				if (onLoad) onLoad(texture, texData);
			}, onProgress, onError);
			return texture;
		}

	}

	class TextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const texture = new Texture();
			const loader = new ImageLoader(this.manager);
			loader.setCrossOrigin(this.crossOrigin);
			loader.setPath(this.path);
			loader.load(url, function (image) {
				texture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.

				const isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;

				if (onLoad !== undefined) {
					onLoad(texture);
				}
			}, onProgress, onError);
			return texture;
		}

	}

	/**
	 * Extensible curve object.
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	class Curve {
		constructor() {
			this.type = 'Curve';
			this.arcLengthDivisions = 200;
		} // Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]


		getPoint()
		/* t, optionalTarget */
		{
			console.warn('THREE.Curve: .getPoint() not implemented.');
			return null;
		} // Get point at relative position in curve according to arc length
		// - u [0 .. 1]


		getPointAt(u, optionalTarget) {
			const t = this.getUtoTmapping(u);
			return this.getPoint(t, optionalTarget);
		} // Get sequence of points using getPoint( t )


		getPoints(divisions = 5) {
			const points = [];

			for (let d = 0; d <= divisions; d++) {
				points.push(this.getPoint(d / divisions));
			}

			return points;
		} // Get sequence of points using getPointAt( u )


		getSpacedPoints(divisions = 5) {
			const points = [];

			for (let d = 0; d <= divisions; d++) {
				points.push(this.getPointAt(d / divisions));
			}

			return points;
		} // Get total curve arc length


		getLength() {
			const lengths = this.getLengths();
			return lengths[lengths.length - 1];
		} // Get list of cumulative segment lengths


		getLengths(divisions = this.arcLengthDivisions) {
			if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
				return this.cacheArcLengths;
			}

			this.needsUpdate = false;
			const cache = [];
			let current,
					last = this.getPoint(0);
			let sum = 0;
			cache.push(0);

			for (let p = 1; p <= divisions; p++) {
				current = this.getPoint(p / divisions);
				sum += current.distanceTo(last);
				cache.push(sum);
				last = current;
			}

			this.cacheArcLengths = cache;
			return cache; // { sums: cache, sum: sum }; Sum is in the last element.
		}

		updateArcLengths() {
			this.needsUpdate = true;
			this.getLengths();
		} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant


		getUtoTmapping(u, distance) {
			const arcLengths = this.getLengths();
			let i = 0;
			const il = arcLengths.length;
			let targetArcLength; // The targeted u distance value to get

			if (distance) {
				targetArcLength = distance;
			} else {
				targetArcLength = u * arcLengths[il - 1];
			} // binary search for the index with largest value smaller than target u distance


			let low = 0,
					high = il - 1,
					comparison;

			while (low <= high) {
				i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[i] - targetArcLength;

				if (comparison < 0) {
					low = i + 1;
				} else if (comparison > 0) {
					high = i - 1;
				} else {
					high = i;
					break; // DONE
				}
			}

			i = high;

			if (arcLengths[i] === targetArcLength) {
				return i / (il - 1);
			} // we could get finer grain at lengths, or use simple interpolation between two points


			const lengthBefore = arcLengths[i];
			const lengthAfter = arcLengths[i + 1];
			const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points

			const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t

			const t = (i + segmentFraction) / (il - 1);
			return t;
		} // Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation


		getTangent(t, optionalTarget) {
			const delta = 0.0001;
			let t1 = t - delta;
			let t2 = t + delta; // Capping in case of danger

			if (t1 < 0) t1 = 0;
			if (t2 > 1) t2 = 1;
			const pt1 = this.getPoint(t1);
			const pt2 = this.getPoint(t2);
			const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
			tangent.copy(pt2).sub(pt1).normalize();
			return tangent;
		}

		getTangentAt(u, optionalTarget) {
			const t = this.getUtoTmapping(u);
			return this.getTangent(t, optionalTarget);
		}

		computeFrenetFrames(segments, closed) {
			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
			const normal = new Vector3();
			const tangents = [];
			const normals = [];
			const binormals = [];
			const vec = new Vector3();
			const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve

			for (let i = 0; i <= segments; i++) {
				const u = i / segments;
				tangents[i] = this.getTangentAt(u, new Vector3());
				tangents[i].normalize();
			} // select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component


			normals[0] = new Vector3();
			binormals[0] = new Vector3();
			let min = Number.MAX_VALUE;
			const tx = Math.abs(tangents[0].x);
			const ty = Math.abs(tangents[0].y);
			const tz = Math.abs(tangents[0].z);

			if (tx <= min) {
				min = tx;
				normal.set(1, 0, 0);
			}

			if (ty <= min) {
				min = ty;
				normal.set(0, 1, 0);
			}

			if (tz <= min) {
				normal.set(0, 0, 1);
			}

			vec.crossVectors(tangents[0], normal).normalize();
			normals[0].crossVectors(tangents[0], vec);
			binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve

			for (let i = 1; i <= segments; i++) {
				normals[i] = normals[i - 1].clone();
				binormals[i] = binormals[i - 1].clone();
				vec.crossVectors(tangents[i - 1], tangents[i]);

				if (vec.length() > Number.EPSILON) {
					vec.normalize();
					const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors

					normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
				}

				binormals[i].crossVectors(tangents[i], normals[i]);
			} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same


			if (closed === true) {
				let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
				theta /= segments;

				if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
					theta = -theta;
				}

				for (let i = 1; i <= segments; i++) {
					// twist a little...
					normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
					binormals[i].crossVectors(tangents[i], normals[i]);
				}
			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.arcLengthDivisions = source.arcLengthDivisions;
			return this;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};
			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;
			return data;
		}

		fromJSON(json) {
			this.arcLengthDivisions = json.arcLengthDivisions;
			return this;
		}

	}

	class EllipseCurve extends Curve {
		constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
			super();
			this.type = 'EllipseCurve';
			this.aX = aX;
			this.aY = aY;
			this.xRadius = xRadius;
			this.yRadius = yRadius;
			this.aStartAngle = aStartAngle;
			this.aEndAngle = aEndAngle;
			this.aClockwise = aClockwise;
			this.aRotation = aRotation;
		}

		getPoint(t, optionalTarget) {
			const point = optionalTarget || new Vector2();
			const twoPi = Math.PI * 2;
			let deltaAngle = this.aEndAngle - this.aStartAngle;
			const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI

			while (deltaAngle < 0) deltaAngle += twoPi;

			while (deltaAngle > twoPi) deltaAngle -= twoPi;

			if (deltaAngle < Number.EPSILON) {
				if (samePoints) {
					deltaAngle = 0;
				} else {
					deltaAngle = twoPi;
				}
			}

			if (this.aClockwise === true && !samePoints) {
				if (deltaAngle === twoPi) {
					deltaAngle = -twoPi;
				} else {
					deltaAngle = deltaAngle - twoPi;
				}
			}

			const angle = this.aStartAngle + t * deltaAngle;
			let x = this.aX + this.xRadius * Math.cos(angle);
			let y = this.aY + this.yRadius * Math.sin(angle);

			if (this.aRotation !== 0) {
				const cos = Math.cos(this.aRotation);
				const sin = Math.sin(this.aRotation);
				const tx = x - this.aX;
				const ty = y - this.aY; // Rotate the point about the center of the ellipse.

				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;
			}

			return point.set(x, y);
		}

		copy(source) {
			super.copy(source);
			this.aX = source.aX;
			this.aY = source.aY;
			this.xRadius = source.xRadius;
			this.yRadius = source.yRadius;
			this.aStartAngle = source.aStartAngle;
			this.aEndAngle = source.aEndAngle;
			this.aClockwise = source.aClockwise;
			this.aRotation = source.aRotation;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.aX = this.aX;
			data.aY = this.aY;
			data.xRadius = this.xRadius;
			data.yRadius = this.yRadius;
			data.aStartAngle = this.aStartAngle;
			data.aEndAngle = this.aEndAngle;
			data.aClockwise = this.aClockwise;
			data.aRotation = this.aRotation;
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.aX = json.aX;
			this.aY = json.aY;
			this.xRadius = json.xRadius;
			this.yRadius = json.yRadius;
			this.aStartAngle = json.aStartAngle;
			this.aEndAngle = json.aEndAngle;
			this.aClockwise = json.aClockwise;
			this.aRotation = json.aRotation;
			return this;
		}

	}

	EllipseCurve.prototype.isEllipseCurve = true;

	class ArcCurve extends EllipseCurve {
		constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
			this.type = 'ArcCurve';
		}

	}

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {
		let c0 = 0,
				c1 = 0,
				c2 = 0,
				c3 = 0;
		/*
		 * Compute coefficients for a cubic polynomial
		 *	 p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *	 p(0) = x0, p(1) = x1
		 *	and
		 *	 p'(0) = t0, p'(1) = t1.
		 */

		function init(x0, x1, t0, t1) {
			c0 = x0;
			c1 = t0;
			c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;
		}

		return {
			initCatmullRom: function (x0, x1, x2, x3, tension) {
				init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
			},
			initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {
				// compute tangents when parameterized in [t1,t2]
				let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
				let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]

				t1 *= dt1;
				t2 *= dt1;
				init(x1, x2, t1, t2);
			},
			calc: function (t) {
				const t2 = t * t;
				const t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;
			}
		};
	} //


	const tmp = new Vector3();
	const px = new CubicPoly(),
				py = new CubicPoly(),
				pz = new CubicPoly();

	class CatmullRomCurve3 extends Curve {
		constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {
			super();
			this.type = 'CatmullRomCurve3';
			this.points = points;
			this.closed = closed;
			this.curveType = curveType;
			this.tension = tension;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const points = this.points;
			const l = points.length;
			const p = (l - (this.closed ? 0 : 1)) * t;
			let intPoint = Math.floor(p);
			let weight = p - intPoint;

			if (this.closed) {
				intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
			} else if (weight === 0 && intPoint === l - 1) {
				intPoint = l - 2;
				weight = 1;
			}

			let p0, p3; // 4 points (p1 & p2 defined below)

			if (this.closed || intPoint > 0) {
				p0 = points[(intPoint - 1) % l];
			} else {
				// extrapolate first point
				tmp.subVectors(points[0], points[1]).add(points[0]);
				p0 = tmp;
			}

			const p1 = points[intPoint % l];
			const p2 = points[(intPoint + 1) % l];

			if (this.closed || intPoint + 2 < l) {
				p3 = points[(intPoint + 2) % l];
			} else {
				// extrapolate last point
				tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
				p3 = tmp;
			}

			if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
				// init Centripetal / Chordal Catmull-Rom
				const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
				let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
				let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
				let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points

				if (dt1 < 1e-4) dt1 = 1.0;
				if (dt0 < 1e-4) dt0 = dt1;
				if (dt2 < 1e-4) dt2 = dt1;
				px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
				py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
				pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
			} else if (this.curveType === 'catmullrom') {
				px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
				py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
				pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
			}

			point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.points = [];

			for (let i = 0, l = source.points.length; i < l; i++) {
				const point = source.points[i];
				this.points.push(point.clone());
			}

			this.closed = source.closed;
			this.curveType = source.curveType;
			this.tension = source.tension;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.points = [];

			for (let i = 0, l = this.points.length; i < l; i++) {
				const point = this.points[i];
				data.points.push(point.toArray());
			}

			data.closed = this.closed;
			data.curveType = this.curveType;
			data.tension = this.tension;
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.points = [];

			for (let i = 0, l = json.points.length; i < l; i++) {
				const point = json.points[i];
				this.points.push(new Vector3().fromArray(point));
			}

			this.closed = json.closed;
			this.curveType = json.curveType;
			this.tension = json.tension;
			return this;
		}

	}

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	/**
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */
	function CatmullRom(t, p0, p1, p2, p3) {
		const v0 = (p2 - p0) * 0.5;
		const v1 = (p3 - p1) * 0.5;
		const t2 = t * t;
		const t3 = t * t2;
		return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
	} //


	function QuadraticBezierP0(t, p) {
		const k = 1 - t;
		return k * k * p;
	}

	function QuadraticBezierP1(t, p) {
		return 2 * (1 - t) * t * p;
	}

	function QuadraticBezierP2(t, p) {
		return t * t * p;
	}

	function QuadraticBezier(t, p0, p1, p2) {
		return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
	} //


	function CubicBezierP0(t, p) {
		const k = 1 - t;
		return k * k * k * p;
	}

	function CubicBezierP1(t, p) {
		const k = 1 - t;
		return 3 * k * k * t * p;
	}

	function CubicBezierP2(t, p) {
		return 3 * (1 - t) * t * t * p;
	}

	function CubicBezierP3(t, p) {
		return t * t * t * p;
	}

	function CubicBezier(t, p0, p1, p2, p3) {
		return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
	}

	class CubicBezierCurve extends Curve {
		constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
			super();
			this.type = 'CubicBezierCurve';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2,
						v3 = this.v3;
			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			this.v3.copy(source.v3);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			this.v3.fromArray(json.v3);
			return this;
		}

	}

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	class CubicBezierCurve3 extends Curve {
		constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
			super();
			this.type = 'CubicBezierCurve3';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2,
						v3 = this.v3;
			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			this.v3.copy(source.v3);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			this.v3.fromArray(json.v3);
			return this;
		}

	}

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	class LineCurve extends Curve {
		constructor(v1 = new Vector2(), v2 = new Vector2()) {
			super();
			this.type = 'LineCurve';
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;

			if (t === 1) {
				point.copy(this.v2);
			} else {
				point.copy(this.v2).sub(this.v1);
				point.multiplyScalar(t).add(this.v1);
			}

			return point;
		} // Line curve is linear, so we can overwrite default getPointAt


		getPointAt(u, optionalTarget) {
			return this.getPoint(u, optionalTarget);
		}

		getTangent(t, optionalTarget) {
			const tangent = optionalTarget || new Vector2();
			tangent.copy(this.v2).sub(this.v1).normalize();
			return tangent;
		}

		copy(source) {
			super.copy(source);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	LineCurve.prototype.isLineCurve = true;

	class LineCurve3 extends Curve {
		constructor(v1 = new Vector3(), v2 = new Vector3()) {
			super();
			this.type = 'LineCurve3';
			this.isLineCurve3 = true;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;

			if (t === 1) {
				point.copy(this.v2);
			} else {
				point.copy(this.v2).sub(this.v1);
				point.multiplyScalar(t).add(this.v1);
			}

			return point;
		} // Line curve is linear, so we can overwrite default getPointAt


		getPointAt(u, optionalTarget) {
			return this.getPoint(u, optionalTarget);
		}

		copy(source) {
			super.copy(source);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	class QuadraticBezierCurve extends Curve {
		constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
			super();
			this.type = 'QuadraticBezierCurve';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2;
			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	class QuadraticBezierCurve3 extends Curve {
		constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
			super();
			this.type = 'QuadraticBezierCurve3';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2;
			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	class SplineCurve extends Curve {
		constructor(points = []) {
			super();
			this.type = 'SplineCurve';
			this.points = points;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const points = this.points;
			const p = (points.length - 1) * t;
			const intPoint = Math.floor(p);
			const weight = p - intPoint;
			const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
			const p1 = points[intPoint];
			const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
			const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
			point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.points = [];

			for (let i = 0, l = source.points.length; i < l; i++) {
				const point = source.points[i];
				this.points.push(point.clone());
			}

			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.points = [];

			for (let i = 0, l = this.points.length; i < l; i++) {
				const point = this.points[i];
				data.points.push(point.toArray());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.points = [];

			for (let i = 0, l = json.points.length; i < l; i++) {
				const point = json.points[i];
				this.points.push(new Vector2().fromArray(point));
			}

			return this;
		}

	}

	SplineCurve.prototype.isSplineCurve = true;

	var Curves = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *	curves, but retains the api of a curve
	 **************************************************************/

	class CurvePath extends Curve {
		constructor() {
			super();
			this.type = 'CurvePath';
			this.curves = [];
			this.autoClose = false; // Automatically closes the path
		}

		add(curve) {
			this.curves.push(curve);
		}

		closePath() {
			// Add a line curve if start and end of lines are not connected
			const startPoint = this.curves[0].getPoint(0);
			const endPoint = this.curves[this.curves.length - 1].getPoint(1);

			if (!startPoint.equals(endPoint)) {
				this.curves.push(new LineCurve(endPoint, startPoint));
			}
		} // To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:
		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')


		getPoint(t) {
			const d = t * this.getLength();
			const curveLengths = this.getCurveLengths();
			let i = 0; // To think about boundaries points.

			while (i < curveLengths.length) {
				if (curveLengths[i] >= d) {
					const diff = curveLengths[i] - d;
					const curve = this.curves[i];
					const segmentLength = curve.getLength();
					const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
					return curve.getPointAt(u);
				}

				i++;
			}

			return null; // loop where sum != 0, sum > d , sum+1 <d
		} // We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength


		getLength() {
			const lens = this.getCurveLengths();
			return lens[lens.length - 1];
		} // cacheLengths must be recalculated.


		updateArcLengths() {
			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();
		} // Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.


		getCurveLengths() {
			// We use cache values if curves and cache array are same length
			if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
				return this.cacheLengths;
			} // Get length of sub-curve
			// Push sums into cached array


			const lengths = [];
			let sums = 0;

			for (let i = 0, l = this.curves.length; i < l; i++) {
				sums += this.curves[i].getLength();
				lengths.push(sums);
			}

			this.cacheLengths = lengths;
			return lengths;
		}

		getSpacedPoints(divisions = 40) {
			const points = [];

			for (let i = 0; i <= divisions; i++) {
				points.push(this.getPoint(i / divisions));
			}

			if (this.autoClose) {
				points.push(points[0]);
			}

			return points;
		}

		getPoints(divisions = 12) {
			const points = [];
			let last;

			for (let i = 0, curves = this.curves; i < curves.length; i++) {
				const curve = curves[i];
				const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
				const pts = curve.getPoints(resolution);

				for (let j = 0; j < pts.length; j++) {
					const point = pts[j];
					if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates

					points.push(point);
					last = point;
				}
			}

			if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
				points.push(points[0]);
			}

			return points;
		}

		copy(source) {
			super.copy(source);
			this.curves = [];

			for (let i = 0, l = source.curves.length; i < l; i++) {
				const curve = source.curves[i];
				this.curves.push(curve.clone());
			}

			this.autoClose = source.autoClose;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.autoClose = this.autoClose;
			data.curves = [];

			for (let i = 0, l = this.curves.length; i < l; i++) {
				const curve = this.curves[i];
				data.curves.push(curve.toJSON());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.autoClose = json.autoClose;
			this.curves = [];

			for (let i = 0, l = json.curves.length; i < l; i++) {
				const curve = json.curves[i];
				this.curves.push(new Curves[curve.type]().fromJSON(curve));
			}

			return this;
		}

	}

	class Path extends CurvePath {
		constructor(points) {
			super();
			this.type = 'Path';
			this.currentPoint = new Vector2();

			if (points) {
				this.setFromPoints(points);
			}
		}

		setFromPoints(points) {
			this.moveTo(points[0].x, points[0].y);

			for (let i = 1, l = points.length; i < l; i++) {
				this.lineTo(points[i].x, points[i].y);
			}

			return this;
		}

		moveTo(x, y) {
			this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?

			return this;
		}

		lineTo(x, y) {
			const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
			this.curves.push(curve);
			this.currentPoint.set(x, y);
			return this;
		}

		quadraticCurveTo(aCPx, aCPy, aX, aY) {
			const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
			this.curves.push(curve);
			this.currentPoint.set(aX, aY);
			return this;
		}

		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
			const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
			this.curves.push(curve);
			this.currentPoint.set(aX, aY);
			return this;
		}

		splineThru(pts
		/*Array of Vector*/
		) {
			const npts = [this.currentPoint.clone()].concat(pts);
			const curve = new SplineCurve(npts);
			this.curves.push(curve);
			this.currentPoint.copy(pts[pts.length - 1]);
			return this;
		}

		arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			const x0 = this.currentPoint.x;
			const y0 = this.currentPoint.y;
			this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
			return this;
		}

		absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
			return this;
		}

		ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
			const x0 = this.currentPoint.x;
			const y0 = this.currentPoint.y;
			this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
			return this;
		}

		absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
			const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

			if (this.curves.length > 0) {
				// if a previous curve is present, attempt to join
				const firstPoint = curve.getPoint(0);

				if (!firstPoint.equals(this.currentPoint)) {
					this.lineTo(firstPoint.x, firstPoint.y);
				}
			}

			this.curves.push(curve);
			const lastPoint = curve.getPoint(1);
			this.currentPoint.copy(lastPoint);
			return this;
		}

		copy(source) {
			super.copy(source);
			this.currentPoint.copy(source.currentPoint);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.currentPoint = this.currentPoint.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.currentPoint.fromArray(json.currentPoint);
			return this;
		}

	}

	class Shape extends Path {
		constructor(points) {
			super(points);
			this.uuid = generateUUID();
			this.type = 'Shape';
			this.holes = [];
		}

		getPointsHoles(divisions) {
			const holesPts = [];

			for (let i = 0, l = this.holes.length; i < l; i++) {
				holesPts[i] = this.holes[i].getPoints(divisions);
			}

			return holesPts;
		} // get points of shape and holes (keypoints based on segments parameter)


		extractPoints(divisions) {
			return {
				shape: this.getPoints(divisions),
				holes: this.getPointsHoles(divisions)
			};
		}

		copy(source) {
			super.copy(source);
			this.holes = [];

			for (let i = 0, l = source.holes.length; i < l; i++) {
				const hole = source.holes[i];
				this.holes.push(hole.clone());
			}

			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.uuid = this.uuid;
			data.holes = [];

			for (let i = 0, l = this.holes.length; i < l; i++) {
				const hole = this.holes[i];
				data.holes.push(hole.toJSON());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.uuid = json.uuid;
			this.holes = [];

			for (let i = 0, l = json.holes.length; i < l; i++) {
				const hole = json.holes[i];
				this.holes.push(new Path().fromJSON(hole));
			}

			return this;
		}

	}

	class Light extends Object3D {
		constructor(color, intensity = 1) {
			super();
			this.type = 'Light';
			this.color = new Color(color);
			this.intensity = intensity;
		}

		dispose() {// Empty here in base class; some subclasses override.
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.intensity = source.intensity;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;
			if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
			if (this.distance !== undefined) data.object.distance = this.distance;
			if (this.angle !== undefined) data.object.angle = this.angle;
			if (this.decay !== undefined) data.object.decay = this.decay;
			if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
			if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
			return data;
		}

	}

	Light.prototype.isLight = true;

	class HemisphereLight extends Light {
		constructor(skyColor, groundColor, intensity) {
			super(skyColor, intensity);
			this.type = 'HemisphereLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.groundColor = new Color(groundColor);
		}

		copy(source) {
			Light.prototype.copy.call(this, source);
			this.groundColor.copy(source.groundColor);
			return this;
		}

	}

	HemisphereLight.prototype.isHemisphereLight = true;

	const _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();

	const _lightPositionWorld$1 = /*@__PURE__*/new Vector3();

	const _lookTarget$1 = /*@__PURE__*/new Vector3();

	class LightShadow {
		constructor(camera) {
			this.camera = camera;
			this.bias = 0;
			this.normalBias = 0;
			this.radius = 1;
			this.mapSize = new Vector2(512, 512);
			this.map = null;
			this.mapPass = null;
			this.matrix = new Matrix4();
			this.autoUpdate = true;
			this.needsUpdate = false;
			this._frustum = new Frustum();
			this._frameExtents = new Vector2(1, 1);
			this._viewportCount = 1;
			this._viewports = [new Vector4(0, 0, 1, 1)];
		}

		getViewportCount() {
			return this._viewportCount;
		}

		getFrustum() {
			return this._frustum;
		}

		updateMatrices(light) {
			const shadowCamera = this.camera;
			const shadowMatrix = this.matrix;

			_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);

			shadowCamera.position.copy(_lightPositionWorld$1);

			_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);

			shadowCamera.lookAt(_lookTarget$1);
			shadowCamera.updateMatrixWorld();

			_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);

			this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);

			shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
			shadowMatrix.multiply(shadowCamera.projectionMatrix);
			shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
		}

		getViewport(viewportIndex) {
			return this._viewports[viewportIndex];
		}

		getFrameExtents() {
			return this._frameExtents;
		}

		dispose() {
			if (this.map) {
				this.map.dispose();
			}

			if (this.mapPass) {
				this.mapPass.dispose();
			}
		}

		copy(source) {
			this.camera = source.camera.clone();
			this.bias = source.bias;
			this.radius = source.radius;
			this.mapSize.copy(source.mapSize);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		toJSON() {
			const object = {};
			if (this.bias !== 0) object.bias = this.bias;
			if (this.normalBias !== 0) object.normalBias = this.normalBias;
			if (this.radius !== 1) object.radius = this.radius;
			if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
			object.camera = this.camera.toJSON(false).object;
			delete object.camera.matrix;
			return object;
		}

	}

	class SpotLightShadow extends LightShadow {
		constructor() {
			super(new PerspectiveCamera(50, 1, 0.5, 500));
			this.focus = 1;
		}

		updateMatrices(light) {
			const camera = this.camera;
			const fov = RAD2DEG * 2 * light.angle * this.focus;
			const aspect = this.mapSize.width / this.mapSize.height;
			const far = light.distance || camera.far;

			if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();
			}

			super.updateMatrices(light);
		}

		copy(source) {
			super.copy(source);
			this.focus = source.focus;
			return this;
		}

	}

	SpotLightShadow.prototype.isSpotLightShadow = true;

	class SpotLight extends Light {
		constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {
			super(color, intensity);
			this.type = 'SpotLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.target = new Object3D();
			this.distance = distance;
			this.angle = angle;
			this.penumbra = penumbra;
			this.decay = decay; // for physically correct lights, should be 2.

			this.shadow = new SpotLightShadow();
		}

		get power() {
			// intensity = power per solid angle.
			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
			return this.intensity * Math.PI;
		}

		set power(power) {
			// intensity = power per solid angle.
			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
			this.intensity = power / Math.PI;
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	SpotLight.prototype.isSpotLight = true;

	const _projScreenMatrix = /*@__PURE__*/new Matrix4();

	const _lightPositionWorld = /*@__PURE__*/new Vector3();

	const _lookTarget = /*@__PURE__*/new Vector3();

	class PointLightShadow extends LightShadow {
		constructor() {
			super(new PerspectiveCamera(90, 1, 0.5, 500));
			this._frameExtents = new Vector2(4, 2);
			this._viewportCount = 6;
			this._viewports = [// These viewports map a cube-map onto a 2D texture with the
			// following orientation:
			//
			//	xzXZ
			//	 y Y
			//
			// X - Positive x direction
			// x - Negative x direction
			// Y - Positive y direction
			// y - Negative y direction
			// Z - Positive z direction
			// z - Negative z direction
			// positive X
			new Vector4(2, 1, 1, 1), // negative X
			new Vector4(0, 1, 1, 1), // positive Z
			new Vector4(3, 1, 1, 1), // negative Z
			new Vector4(1, 1, 1, 1), // positive Y
			new Vector4(3, 0, 1, 1), // negative Y
			new Vector4(1, 0, 1, 1)];
			this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
			this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
		}

		updateMatrices(light, viewportIndex = 0) {
			const camera = this.camera;
			const shadowMatrix = this.matrix;
			const far = light.distance || camera.far;

			if (far !== camera.far) {
				camera.far = far;
				camera.updateProjectionMatrix();
			}

			_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);

			camera.position.copy(_lightPositionWorld);

			_lookTarget.copy(camera.position);

			_lookTarget.add(this._cubeDirections[viewportIndex]);

			camera.up.copy(this._cubeUps[viewportIndex]);
			camera.lookAt(_lookTarget);
			camera.updateMatrixWorld();
			shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);

			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

			this._frustum.setFromProjectionMatrix(_projScreenMatrix);
		}

	}

	PointLightShadow.prototype.isPointLightShadow = true;

	class PointLight extends Light {
		constructor(color, intensity, distance = 0, decay = 1) {
			super(color, intensity);
			this.type = 'PointLight';
			this.distance = distance;
			this.decay = decay; // for physically correct lights, should be 2.

			this.shadow = new PointLightShadow();
		}

		get power() {
			// intensity = power per solid angle.
			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
			return this.intensity * 4 * Math.PI;
		}

		set power(power) {
			// intensity = power per solid angle.
			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
			this.intensity = power / (4 * Math.PI);
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.distance = source.distance;
			this.decay = source.decay;
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	PointLight.prototype.isPointLight = true;

	class OrthographicCamera extends Camera {
		constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {
			super();
			this.type = 'OrthographicCamera';
			this.zoom = 1;
			this.view = null;
			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;
			this.near = near;
			this.far = far;
			this.updateProjectionMatrix();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;
			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign({}, source.view);
			return this;
		}

		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
			if (this.view === null) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		}

		clearViewOffset() {
			if (this.view !== null) {
				this.view.enabled = false;
			}

			this.updateProjectionMatrix();
		}

		updateProjectionMatrix() {
			const dx = (this.right - this.left) / (2 * this.zoom);
			const dy = (this.top - this.bottom) / (2 * this.zoom);
			const cx = (this.right + this.left) / 2;
			const cy = (this.top + this.bottom) / 2;
			let left = cx - dx;
			let right = cx + dx;
			let top = cy + dy;
			let bottom = cy - dy;

			if (this.view !== null && this.view.enabled) {
				const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
				const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
				left += scaleW * this.view.offsetX;
				right = left + scaleW * this.view.width;
				top -= scaleH * this.view.offsetY;
				bottom = top - scaleH * this.view.height;
			}

			this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;
			if (this.view !== null) data.object.view = Object.assign({}, this.view);
			return data;
		}

	}

	OrthographicCamera.prototype.isOrthographicCamera = true;

	class DirectionalLightShadow extends LightShadow {
		constructor() {
			super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
		}

	}

	DirectionalLightShadow.prototype.isDirectionalLightShadow = true;

	class DirectionalLight extends Light {
		constructor(color, intensity) {
			super(color, intensity);
			this.type = 'DirectionalLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.target = new Object3D();
			this.shadow = new DirectionalLightShadow();
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	DirectionalLight.prototype.isDirectionalLight = true;

	class AmbientLight extends Light {
		constructor(color, intensity) {
			super(color, intensity);
			this.type = 'AmbientLight';
		}

	}

	AmbientLight.prototype.isAmbientLight = true;

	class RectAreaLight extends Light {
		constructor(color, intensity, width = 10, height = 10) {
			super(color, intensity);
			this.type = 'RectAreaLight';
			this.width = width;
			this.height = height;
		}

		copy(source) {
			super.copy(source);
			this.width = source.width;
			this.height = source.height;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.width = this.width;
			data.object.height = this.height;
			return data;
		}

	}

	RectAreaLight.prototype.isRectAreaLight = true;

	/**
	 * Primary reference:
	 *	 https://graphics.stanford.edu/papers/envmap/envmap.pdf
	 *
	 * Secondary reference:
	 *	 https://www.ppsloan.org/publications/StupidSH36.pdf
	 */
	// 3-band SH defined by 9 coefficients

	class SphericalHarmonics3 {
		constructor() {
			this.coefficients = [];

			for (let i = 0; i < 9; i++) {
				this.coefficients.push(new Vector3());
			}
		}

		set(coefficients) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].copy(coefficients[i]);
			}

			return this;
		}

		zero() {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].set(0, 0, 0);
			}

			return this;
		} // get the radiance in the direction of the normal
		// target is a Vector3


		getAt(normal, target) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z;
			const coeff = this.coefficients; // band 0

			target.copy(coeff[0]).multiplyScalar(0.282095); // band 1

			target.addScaledVector(coeff[1], 0.488603 * y);
			target.addScaledVector(coeff[2], 0.488603 * z);
			target.addScaledVector(coeff[3], 0.488603 * x); // band 2

			target.addScaledVector(coeff[4], 1.092548 * (x * y));
			target.addScaledVector(coeff[5], 1.092548 * (y * z));
			target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
			target.addScaledVector(coeff[7], 1.092548 * (x * z));
			target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
			return target;
		} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
		// target is a Vector3
		// https://graphics.stanford.edu/papers/envmap/envmap.pdf


		getIrradianceAt(normal, target) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z;
			const coeff = this.coefficients; // band 0

			target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
			// band 1

			target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603

			target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);
			target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2

			target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548

			target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);
			target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3

			target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);
			target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274

			return target;
		}

		add(sh) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].add(sh.coefficients[i]);
			}

			return this;
		}

		addScaledSH(sh, s) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].addScaledVector(sh.coefficients[i], s);
			}

			return this;
		}

		scale(s) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].multiplyScalar(s);
			}

			return this;
		}

		lerp(sh, alpha) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].lerp(sh.coefficients[i], alpha);
			}

			return this;
		}

		equals(sh) {
			for (let i = 0; i < 9; i++) {
				if (!this.coefficients[i].equals(sh.coefficients[i])) {
					return false;
				}
			}

			return true;
		}

		copy(sh) {
			return this.set(sh.coefficients);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		fromArray(array, offset = 0) {
			const coefficients = this.coefficients;

			for (let i = 0; i < 9; i++) {
				coefficients[i].fromArray(array, offset + i * 3);
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const coefficients = this.coefficients;

			for (let i = 0; i < 9; i++) {
				coefficients[i].toArray(array, offset + i * 3);
			}

			return array;
		} // evaluate the basis functions
		// shBasis is an Array[ 9 ]


		static getBasisAt(normal, shBasis) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z; // band 0

			shBasis[0] = 0.282095; // band 1

			shBasis[1] = 0.488603 * y;
			shBasis[2] = 0.488603 * z;
			shBasis[3] = 0.488603 * x; // band 2

			shBasis[4] = 1.092548 * x * y;
			shBasis[5] = 1.092548 * y * z;
			shBasis[6] = 0.315392 * (3 * z * z - 1);
			shBasis[7] = 1.092548 * x * z;
			shBasis[8] = 0.546274 * (x * x - y * y);
		}

	}

	SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;

	class LightProbe extends Light {
		constructor(sh = new SphericalHarmonics3(), intensity = 1) {
			super(undefined, intensity);
			this.sh = sh;
		}

		copy(source) {
			super.copy(source);
			this.sh.copy(source.sh);
			return this;
		}

		fromJSON(json) {
			this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();

			this.sh.fromArray(json.sh);
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.sh = this.sh.toArray();
			return data;
		}

	}

	LightProbe.prototype.isLightProbe = true;

	class MaterialLoader extends Loader {
		constructor(manager) {
			super(manager);
			this.textures = {};
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(scope.manager);
			loader.setPath(scope.path);
			loader.setRequestHeader(scope.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const textures = this.textures;

			function getTexture(name) {
				if (textures[name] === undefined) {
					console.warn('THREE.MaterialLoader: Undefined texture', name);
				}

				return textures[name];
			}

			const material = new Materials[json.type]();
			if (json.uuid !== undefined) material.uuid = json.uuid;
			if (json.name !== undefined) material.name = json.name;
			if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
			if (json.roughness !== undefined) material.roughness = json.roughness;
			if (json.metalness !== undefined) material.metalness = json.metalness;
			if (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);
			if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
			if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
			if (json.shininess !== undefined) material.shininess = json.shininess;
			if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
			if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
			if (json.fog !== undefined) material.fog = json.fog;
			if (json.flatShading !== undefined) material.flatShading = json.flatShading;
			if (json.blending !== undefined) material.blending = json.blending;
			if (json.combine !== undefined) material.combine = json.combine;
			if (json.side !== undefined) material.side = json.side;
			if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
			if (json.opacity !== undefined) material.opacity = json.opacity;
			if (json.transparent !== undefined) material.transparent = json.transparent;
			if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
			if (json.depthTest !== undefined) material.depthTest = json.depthTest;
			if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
			if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
			if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
			if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
			if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
			if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
			if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
			if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
			if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
			if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
			if (json.wireframe !== undefined) material.wireframe = json.wireframe;
			if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
			if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
			if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
			if (json.rotation !== undefined) material.rotation = json.rotation;
			if (json.linewidth !== 1) material.linewidth = json.linewidth;
			if (json.dashSize !== undefined) material.dashSize = json.dashSize;
			if (json.gapSize !== undefined) material.gapSize = json.gapSize;
			if (json.scale !== undefined) material.scale = json.scale;
			if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
			if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
			if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
			if (json.skinning !== undefined) material.skinning = json.skinning;
			if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;
			if (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;
			if (json.dithering !== undefined) material.dithering = json.dithering;
			if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
			if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
			if (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;
			if (json.visible !== undefined) material.visible = json.visible;
			if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
			if (json.userData !== undefined) material.userData = json.userData;

			if (json.vertexColors !== undefined) {
				if (typeof json.vertexColors === 'number') {
					material.vertexColors = json.vertexColors > 0 ? true : false;
				} else {
					material.vertexColors = json.vertexColors;
				}
			} // Shader Material


			if (json.uniforms !== undefined) {
				for (const name in json.uniforms) {
					const uniform = json.uniforms[name];
					material.uniforms[name] = {};

					switch (uniform.type) {
						case 't':
							material.uniforms[name].value = getTexture(uniform.value);
							break;

						case 'c':
							material.uniforms[name].value = new Color().setHex(uniform.value);
							break;

						case 'v2':
							material.uniforms[name].value = new Vector2().fromArray(uniform.value);
							break;

						case 'v3':
							material.uniforms[name].value = new Vector3().fromArray(uniform.value);
							break;

						case 'v4':
							material.uniforms[name].value = new Vector4().fromArray(uniform.value);
							break;

						case 'm3':
							material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
							break;

						case 'm4':
							material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
							break;

						default:
							material.uniforms[name].value = uniform.value;
					}
				}
			}

			if (json.defines !== undefined) material.defines = json.defines;
			if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
			if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;

			if (json.extensions !== undefined) {
				for (const key in json.extensions) {
					material.extensions[key] = json.extensions[key];
				}
			} // Deprecated


			if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
			// for PointsMaterial

			if (json.size !== undefined) material.size = json.size;
			if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps

			if (json.map !== undefined) material.map = getTexture(json.map);
			if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
			if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
			if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
			if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
			if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
			if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;

			if (json.normalScale !== undefined) {
				let normalScale = json.normalScale;

				if (Array.isArray(normalScale) === false) {
					// Blender exporter used to export a scalar. See #7459
					normalScale = [normalScale, normalScale];
				}

				material.normalScale = new Vector2().fromArray(normalScale);
			}

			if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
			if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
			if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
			if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
			if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
			if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
			if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
			if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
			if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
			if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
			if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
			if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
			if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
			if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
			if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
			if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
			if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
			if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
			if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
			if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
			if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
			if (json.transmission !== undefined) material.transmission = json.transmission;
			if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
			return material;
		}

		setTextures(value) {
			this.textures = value;
			return this;
		}

	}

	class LoaderUtils {
		static decodeText(array) {
			if (typeof TextDecoder !== 'undefined') {
				return new TextDecoder().decode(array);
			} // Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.


			let s = '';

			for (let i = 0, il = array.length; i < il; i++) {
				// Implicitly assumes little-endian.
				s += String.fromCharCode(array[i]);
			}

			try {
				// merges multi-byte utf-8 characters.
				return decodeURIComponent(escape(s));
			} catch (e) {
				// see #16358
				return s;
			}
		}

		static extractUrlBase(url) {
			const index = url.lastIndexOf('/');
			if (index === -1) return './';
			return url.substr(0, index + 1);
		}

	}

	class InstancedBufferGeometry extends BufferGeometry {
		constructor() {
			super();
			this.type = 'InstancedBufferGeometry';
			this.instanceCount = Infinity;
		}

		copy(source) {
			super.copy(source);
			this.instanceCount = source.instanceCount;
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		toJSON() {
			const data = super.toJSON(this);
			data.instanceCount = this.instanceCount;
			data.isInstancedBufferGeometry = true;
			return data;
		}

	}

	InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	class InstancedBufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized, meshPerAttribute) {
			if (typeof normalized === 'number') {
				meshPerAttribute = normalized;
				normalized = false;
				console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
			}

			super(array, itemSize, normalized);
			this.meshPerAttribute = meshPerAttribute || 1;
		}

		copy(source) {
			super.copy(source);
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.meshPerAttribute = this.meshPerAttribute;
			data.isInstancedBufferAttribute = true;
			return data;
		}

	}

	InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	class BufferGeometryLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(scope.manager);
			loader.setPath(scope.path);
			loader.setRequestHeader(scope.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const interleavedBufferMap = {};
			const arrayBufferMap = {};

			function getInterleavedBuffer(json, uuid) {
				if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
				const interleavedBuffers = json.interleavedBuffers;
				const interleavedBuffer = interleavedBuffers[uuid];
				const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
				const array = getTypedArray(interleavedBuffer.type, buffer);
				const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
				ib.uuid = interleavedBuffer.uuid;
				interleavedBufferMap[uuid] = ib;
				return ib;
			}

			function getArrayBuffer(json, uuid) {
				if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
				const arrayBuffers = json.arrayBuffers;
				const arrayBuffer = arrayBuffers[uuid];
				const ab = new Uint32Array(arrayBuffer).buffer;
				arrayBufferMap[uuid] = ab;
				return ab;
			}

			const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
			const index = json.data.index;

			if (index !== undefined) {
				const typedArray = getTypedArray(index.type, index.array);
				geometry.setIndex(new BufferAttribute(typedArray, 1));
			}

			const attributes = json.data.attributes;

			for (const key in attributes) {
				const attribute = attributes[key];
				let bufferAttribute;

				if (attribute.isInterleavedBufferAttribute) {
					const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
					bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
				} else {
					const typedArray = getTypedArray(attribute.type, attribute.array);
					const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
					bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
				}

				if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
				if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);

				if (attribute.updateRange !== undefined) {
					bufferAttribute.updateRange.offset = attribute.updateRange.offset;
					bufferAttribute.updateRange.count = attribute.updateRange.count;
				}

				geometry.setAttribute(key, bufferAttribute);
			}

			const morphAttributes = json.data.morphAttributes;

			if (morphAttributes) {
				for (const key in morphAttributes) {
					const attributeArray = morphAttributes[key];
					const array = [];

					for (let i = 0, il = attributeArray.length; i < il; i++) {
						const attribute = attributeArray[i];
						let bufferAttribute;

						if (attribute.isInterleavedBufferAttribute) {
							const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
							bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
						} else {
							const typedArray = getTypedArray(attribute.type, attribute.array);
							bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
						}

						if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
						array.push(bufferAttribute);
					}

					geometry.morphAttributes[key] = array;
				}
			}

			const morphTargetsRelative = json.data.morphTargetsRelative;

			if (morphTargetsRelative) {
				geometry.morphTargetsRelative = true;
			}

			const groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if (groups !== undefined) {
				for (let i = 0, n = groups.length; i !== n; ++i) {
					const group = groups[i];
					geometry.addGroup(group.start, group.count, group.materialIndex);
				}
			}

			const boundingSphere = json.data.boundingSphere;

			if (boundingSphere !== undefined) {
				const center = new Vector3();

				if (boundingSphere.center !== undefined) {
					center.fromArray(boundingSphere.center);
				}

				geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
			}

			if (json.name) geometry.name = json.name;
			if (json.userData) geometry.userData = json.userData;
			return geometry;
		}

	}

	class ObjectLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
			this.resourcePath = this.resourcePath || path;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (text) {
				let json = null;

				try {
					json = JSON.parse(text);
				} catch (error) {
					if (onError !== undefined) onError(error);
					console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
					return;
				}

				const metadata = json.metadata;

				if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
					console.error('THREE.ObjectLoader: Can\'t load ' + url);
					return;
				}

				scope.parse(json, onLoad);
			}, onProgress, onError);
		}

		parse(json, onLoad) {
			const animations = this.parseAnimations(json.animations);
			const shapes = this.parseShapes(json.shapes);
			const geometries = this.parseGeometries(json.geometries, shapes);
			const images = this.parseImages(json.images, function () {
				if (onLoad !== undefined) onLoad(object);
			});
			const textures = this.parseTextures(json.textures, images);
			const materials = this.parseMaterials(json.materials, textures);
			const object = this.parseObject(json.object, geometries, materials, animations);
			const skeletons = this.parseSkeletons(json.skeletons, object);
			this.bindSkeletons(object, skeletons); //

			if (onLoad !== undefined) {
				let hasImages = false;

				for (const uuid in images) {
					if (images[uuid] instanceof HTMLImageElement) {
						hasImages = true;
						break;
					}
				}

				if (hasImages === false) onLoad(object);
			}

			return object;
		}

		parseShapes(json) {
			const shapes = {};

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const shape = new Shape().fromJSON(json[i]);
					shapes[shape.uuid] = shape;
				}
			}

			return shapes;
		}

		parseSkeletons(json, object) {
			const skeletons = {};
			const bones = {}; // generate bone lookup table

			object.traverse(function (child) {
				if (child.isBone) bones[child.uuid] = child;
			}); // create skeletons

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const skeleton = new Skeleton().fromJSON(json[i], bones);
					skeletons[skeleton.uuid] = skeleton;
				}
			}

			return skeletons;
		}

		parseGeometries(json, shapes) {
			const geometries = {};
			let geometryShapes;

			if (json !== undefined) {
				const bufferGeometryLoader = new BufferGeometryLoader();

				for (let i = 0, l = json.length; i < l; i++) {
					let geometry;
					const data = json[i];

					switch (data.type) {
						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':
							geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
							geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':
							geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
							break;

						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.detail);
							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':
							geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':
							geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
							break;

						case 'TubeGeometry':
						case 'TubeBufferGeometry':
							// This only works for built-in curves (e.g. CatmullRomCurve3).
							// User defined curves or instances of CurvePath will not be deserialized.
							geometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':
							geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
							break;

						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':
							geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
							break;

						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':
							geometryShapes = [];

							for (let j = 0, jl = data.shapes.length; j < jl; j++) {
								const shape = shapes[data.shapes[j]];
								geometryShapes.push(shape);
							}

							geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
							break;

						case 'ExtrudeGeometry':
						case 'ExtrudeBufferGeometry':
							geometryShapes = [];

							for (let j = 0, jl = data.shapes.length; j < jl; j++) {
								const shape = shapes[data.shapes[j]];
								geometryShapes.push(shape);
							}

							const extrudePath = data.options.extrudePath;

							if (extrudePath !== undefined) {
								data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
							}

							geometry = new Geometries[data.type](geometryShapes, data.options);
							break;

						case 'BufferGeometry':
						case 'InstancedBufferGeometry':
							geometry = bufferGeometryLoader.parse(data);
							break;

						case 'Geometry':
							console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
							break;

						default:
							console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
							continue;
					}

					geometry.uuid = data.uuid;
					if (data.name !== undefined) geometry.name = data.name;
					if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
					geometries[data.uuid] = geometry;
				}
			}

			return geometries;
		}

		parseMaterials(json, textures) {
			const cache = {}; // MultiMaterial

			const materials = {};

			if (json !== undefined) {
				const loader = new MaterialLoader();
				loader.setTextures(textures);

				for (let i = 0, l = json.length; i < l; i++) {
					const data = json[i];

					if (data.type === 'MultiMaterial') {
						// Deprecated
						const array = [];

						for (let j = 0; j < data.materials.length; j++) {
							const material = data.materials[j];

							if (cache[material.uuid] === undefined) {
								cache[material.uuid] = loader.parse(material);
							}

							array.push(cache[material.uuid]);
						}

						materials[data.uuid] = array;
					} else {
						if (cache[data.uuid] === undefined) {
							cache[data.uuid] = loader.parse(data);
						}

						materials[data.uuid] = cache[data.uuid];
					}
				}
			}

			return materials;
		}

		parseAnimations(json) {
			const animations = {};

			if (json !== undefined) {
				for (let i = 0; i < json.length; i++) {
					const data = json[i];
					const clip = AnimationClip.parse(data);
					animations[clip.uuid] = clip;
				}
			}

			return animations;
		}

		parseImages(json, onLoad) {
			const scope = this;
			const images = {};
			let loader;

			function loadImage(url) {
				scope.manager.itemStart(url);
				return loader.load(url, function () {
					scope.manager.itemEnd(url);
				}, undefined, function () {
					scope.manager.itemError(url);
					scope.manager.itemEnd(url);
				});
			}

			function deserializeImage(image) {
				if (typeof image === 'string') {
					const url = image;
					const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
					return loadImage(path);
				} else {
					if (image.data) {
						return {
							data: getTypedArray(image.type, image.data),
							width: image.width,
							height: image.height
						};
					} else {
						return null;
					}
				}
			}

			if (json !== undefined && json.length > 0) {
				const manager = new LoadingManager(onLoad);
				loader = new ImageLoader(manager);
				loader.setCrossOrigin(this.crossOrigin);

				for (let i = 0, il = json.length; i < il; i++) {
					const image = json[i];
					const url = image.url;

					if (Array.isArray(url)) {
						// load array of images e.g CubeTexture
						images[image.uuid] = [];

						for (let j = 0, jl = url.length; j < jl; j++) {
							const currentUrl = url[j];
							const deserializedImage = deserializeImage(currentUrl);

							if (deserializedImage !== null) {
								if (deserializedImage instanceof HTMLImageElement) {
									images[image.uuid].push(deserializedImage);
								} else {
									// special case: handle array of data textures for cube textures
									images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
								}
							}
						}
					} else {
						// load single image
						const deserializedImage = deserializeImage(image.url);

						if (deserializedImage !== null) {
							images[image.uuid] = deserializedImage;
						}
					}
				}
			}

			return images;
		}

		parseTextures(json, images) {
			function parseConstant(value, type) {
				if (typeof value === 'number') return value;
				console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
				return type[value];
			}

			const textures = {};

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const data = json[i];

					if (data.image === undefined) {
						console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
					}

					if (images[data.image] === undefined) {
						console.warn('THREE.ObjectLoader: Undefined image', data.image);
					}

					let texture;
					const image = images[data.image];

					if (Array.isArray(image)) {
						texture = new CubeTexture(image);
						if (image.length === 6) texture.needsUpdate = true;
					} else {
						if (image && image.data) {
							texture = new DataTexture(image.data, image.width, image.height);
						} else {
							texture = new Texture(image);
						}

						if (image) texture.needsUpdate = true; // textures can have undefined image data
					}

					texture.uuid = data.uuid;
					if (data.name !== undefined) texture.name = data.name;
					if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
					if (data.offset !== undefined) texture.offset.fromArray(data.offset);
					if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
					if (data.center !== undefined) texture.center.fromArray(data.center);
					if (data.rotation !== undefined) texture.rotation = data.rotation;

					if (data.wrap !== undefined) {
						texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
						texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
					}

					if (data.format !== undefined) texture.format = data.format;
					if (data.type !== undefined) texture.type = data.type;
					if (data.encoding !== undefined) texture.encoding = data.encoding;
					if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
					if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
					if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
					if (data.flipY !== undefined) texture.flipY = data.flipY;
					if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
					if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
					textures[data.uuid] = texture;
				}
			}

			return textures;
		}

		parseObject(data, geometries, materials, animations) {
			let object;

			function getGeometry(name) {
				if (geometries[name] === undefined) {
					console.warn('THREE.ObjectLoader: Undefined geometry', name);
				}

				return geometries[name];
			}

			function getMaterial(name) {
				if (name === undefined) return undefined;

				if (Array.isArray(name)) {
					const array = [];

					for (let i = 0, l = name.length; i < l; i++) {
						const uuid = name[i];

						if (materials[uuid] === undefined) {
							console.warn('THREE.ObjectLoader: Undefined material', uuid);
						}

						array.push(materials[uuid]);
					}

					return array;
				}

				if (materials[name] === undefined) {
					console.warn('THREE.ObjectLoader: Undefined material', name);
				}

				return materials[name];
			}

			let geometry, material;

			switch (data.type) {
				case 'Scene':
					object = new Scene();

					if (data.background !== undefined) {
						if (Number.isInteger(data.background)) {
							object.background = new Color(data.background);
						}
					}

					if (data.fog !== undefined) {
						if (data.fog.type === 'Fog') {
							object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
						} else if (data.fog.type === 'FogExp2') {
							object.fog = new FogExp2(data.fog.color, data.fog.density);
						}
					}

					break;

				case 'PerspectiveCamera':
					object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
					if (data.focus !== undefined) object.focus = data.focus;
					if (data.zoom !== undefined) object.zoom = data.zoom;
					if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
					if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
					if (data.view !== undefined) object.view = Object.assign({}, data.view);
					break;

				case 'OrthographicCamera':
					object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
					if (data.zoom !== undefined) object.zoom = data.zoom;
					if (data.view !== undefined) object.view = Object.assign({}, data.view);
					break;

				case 'AmbientLight':
					object = new AmbientLight(data.color, data.intensity);
					break;

				case 'DirectionalLight':
					object = new DirectionalLight(data.color, data.intensity);
					break;

				case 'PointLight':
					object = new PointLight(data.color, data.intensity, data.distance, data.decay);
					break;

				case 'RectAreaLight':
					object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
					break;

				case 'SpotLight':
					object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
					break;

				case 'HemisphereLight':
					object = new HemisphereLight(data.color, data.groundColor, data.intensity);
					break;

				case 'LightProbe':
					object = new LightProbe().fromJSON(data);
					break;

				case 'SkinnedMesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					object = new SkinnedMesh(geometry, material);
					if (data.bindMode !== undefined) object.bindMode = data.bindMode;
					if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
					if (data.skeleton !== undefined) object.skeleton = data.skeleton;
					break;

				case 'Mesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					object = new Mesh(geometry, material);
					break;

				case 'InstancedMesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					const count = data.count;
					const instanceMatrix = data.instanceMatrix;
					const instanceColor = data.instanceColor;
					object = new InstancedMesh(geometry, material, count);
					object.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);
					if (instanceColor !== undefined) object.instanceColor = new BufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
					break;

				case 'LOD':
					object = new LOD();
					break;

				case 'Line':
					object = new Line(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'LineLoop':
					object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'LineSegments':
					object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'PointCloud':
				case 'Points':
					object = new Points(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'Sprite':
					object = new Sprite(getMaterial(data.material));
					break;

				case 'Group':
					object = new Group();
					break;

				case 'Bone':
					object = new Bone();
					break;

				default:
					object = new Object3D();
			}

			object.uuid = data.uuid;
			if (data.name !== undefined) object.name = data.name;

			if (data.matrix !== undefined) {
				object.matrix.fromArray(data.matrix);
				if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
				if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
			} else {
				if (data.position !== undefined) object.position.fromArray(data.position);
				if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
				if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
				if (data.scale !== undefined) object.scale.fromArray(data.scale);
			}

			if (data.castShadow !== undefined) object.castShadow = data.castShadow;
			if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;

			if (data.shadow) {
				if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
				if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
				if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
				if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
				if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
			}

			if (data.visible !== undefined) object.visible = data.visible;
			if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
			if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
			if (data.userData !== undefined) object.userData = data.userData;
			if (data.layers !== undefined) object.layers.mask = data.layers;

			if (data.children !== undefined) {
				const children = data.children;

				for (let i = 0; i < children.length; i++) {
					object.add(this.parseObject(children[i], geometries, materials, animations));
				}
			}

			if (data.animations !== undefined) {
				const objectAnimations = data.animations;

				for (let i = 0; i < objectAnimations.length; i++) {
					const uuid = objectAnimations[i];
					object.animations.push(animations[uuid]);
				}
			}

			if (data.type === 'LOD') {
				if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
				const levels = data.levels;

				for (let l = 0; l < levels.length; l++) {
					const level = levels[l];
					const child = object.getObjectByProperty('uuid', level.object);

					if (child !== undefined) {
						object.addLevel(child, level.distance);
					}
				}
			}

			return object;
		}

		bindSkeletons(object, skeletons) {
			if (Object.keys(skeletons).length === 0) return;
			object.traverse(function (child) {
				if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
					const skeleton = skeletons[child.skeleton];

					if (skeleton === undefined) {
						console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
					} else {
						child.bind(skeleton, child.bindMatrix);
					}
				}
			});
		}
		/* DEPRECATED */


		setTexturePath(value) {
			console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
			return this.setResourcePath(value);
		}

	}

	const TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	const TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	const TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipmapNearestFilter: NearestMipmapNearestFilter,
		NearestMipmapLinearFilter: NearestMipmapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipmapNearestFilter: LinearMipmapNearestFilter,
		LinearMipmapLinearFilter: LinearMipmapLinearFilter
	};

	class ImageBitmapLoader extends Loader {
		constructor(manager) {
			super(manager);

			if (typeof createImageBitmap === 'undefined') {
				console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
			}

			if (typeof fetch === 'undefined') {
				console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
			}

			this.options = {
				premultiplyAlpha: 'none'
			};
		}

		setOptions(options) {
			this.options = options;
			return this;
		}

		load(url, onLoad, onProgress, onError) {
			if (url === undefined) url = '';
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const scope = this;
			const cached = Cache.get(url);

			if (cached !== undefined) {
				scope.manager.itemStart(url);
				setTimeout(function () {
					if (onLoad) onLoad(cached);
					scope.manager.itemEnd(url);
				}, 0);
				return cached;
			}

			const fetchOptions = {};
			fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
			fetchOptions.headers = this.requestHeader;
			fetch(url, fetchOptions).then(function (res) {
				return res.blob();
			}).then(function (blob) {
				return createImageBitmap(blob, Object.assign(scope.options, {
					colorSpaceConversion: 'none'
				}));
			}).then(function (imageBitmap) {
				Cache.add(url, imageBitmap);
				if (onLoad) onLoad(imageBitmap);
				scope.manager.itemEnd(url);
			}).catch(function (e) {
				if (onError) onError(e);
				scope.manager.itemError(url);
				scope.manager.itemEnd(url);
			});
			scope.manager.itemStart(url);
		}

	}

	ImageBitmapLoader.prototype.isImageBitmapLoader = true;

	class ShapePath {
		constructor() {
			this.type = 'ShapePath';
			this.color = new Color();
			this.subPaths = [];
			this.currentPath = null;
		}

		moveTo(x, y) {
			this.currentPath = new Path();
			this.subPaths.push(this.currentPath);
			this.currentPath.moveTo(x, y);
			return this;
		}

		lineTo(x, y) {
			this.currentPath.lineTo(x, y);
			return this;
		}

		quadraticCurveTo(aCPx, aCPy, aX, aY) {
			this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
			return this;
		}

		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
			this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
			return this;
		}

		splineThru(pts) {
			this.currentPath.splineThru(pts);
			return this;
		}

		toShapes(isCCW, noHoles) {
			function toShapesNoHoles(inSubpaths) {
				const shapes = [];

				for (let i = 0, l = inSubpaths.length; i < l; i++) {
					const tmpPath = inSubpaths[i];
					const tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push(tmpShape);
				}

				return shapes;
			}

			function isPointInsidePolygon(inPt, inPolygon) {
				const polyLen = inPolygon.length; // inPt on polygon contour => immediate success		or
				// toggling of inside/outside at every single! intersection point of an edge
				//	with the horizontal line through inPt, left of inPt
				//	not counting lowerY endpoints of edges and whole edges on that line

				let inside = false;

				for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
					let edgeLowPt = inPolygon[p];
					let edgeHighPt = inPolygon[q];
					let edgeDx = edgeHighPt.x - edgeLowPt.x;
					let edgeDy = edgeHighPt.y - edgeLowPt.y;

					if (Math.abs(edgeDy) > Number.EPSILON) {
						// not parallel
						if (edgeDy < 0) {
							edgeLowPt = inPolygon[q];
							edgeDx = -edgeDx;
							edgeHighPt = inPolygon[p];
							edgeDy = -edgeDy;
						}

						if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;

						if (inPt.y === edgeLowPt.y) {
							if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!
						} else {
							const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
							if (perpEdge === 0) return true; // inPt is on contour ?

							if (perpEdge < 0) continue;
							inside = !inside; // true intersection left of inPt
						}
					} else {
						// parallel or collinear
						if (inPt.y !== edgeLowPt.y) continue; // parallel
						// edge lies on the same horizontal line as inPt

						if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
						// continue;
					}
				}

				return inside;
			}

			const isClockWise = ShapeUtils.isClockWise;
			const subPaths = this.subPaths;
			if (subPaths.length === 0) return [];
			if (noHoles === true) return toShapesNoHoles(subPaths);
			let solid, tmpPath, tmpShape;
			const shapes = [];

			if (subPaths.length === 1) {
				tmpPath = subPaths[0];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push(tmpShape);
				return shapes;
			}

			let holesFirst = !isClockWise(subPaths[0].getPoints());
			holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);

			const betterShapeHoles = [];
			const newShapes = [];
			let newShapeHoles = [];
			let mainIdx = 0;
			let tmpPoints;
			newShapes[mainIdx] = undefined;
			newShapeHoles[mainIdx] = [];

			for (let i = 0, l = subPaths.length; i < l; i++) {
				tmpPath = subPaths[i];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise(tmpPoints);
				solid = isCCW ? !solid : solid;

				if (solid) {
					if (!holesFirst && newShapes[mainIdx]) mainIdx++;
					newShapes[mainIdx] = {
						s: new Shape(),
						p: tmpPoints
					};
					newShapes[mainIdx].s.curves = tmpPath.curves;
					if (holesFirst) mainIdx++;
					newShapeHoles[mainIdx] = []; //console.log('cw', i);
				} else {
					newShapeHoles[mainIdx].push({
						h: tmpPath,
						p: tmpPoints[0]
					}); //console.log('ccw', i);
				}
			} // only Holes? -> probably all Shapes with wrong orientation


			if (!newShapes[0]) return toShapesNoHoles(subPaths);

			if (newShapes.length > 1) {
				let ambiguous = false;
				const toChange = [];

				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
					betterShapeHoles[sIdx] = [];
				}

				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
					const sho = newShapeHoles[sIdx];

					for (let hIdx = 0; hIdx < sho.length; hIdx++) {
						const ho = sho[hIdx];
						let hole_unassigned = true;

						for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
							if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
								if (sIdx !== s2Idx) toChange.push({
									froms: sIdx,
									tos: s2Idx,
									hole: hIdx
								});

								if (hole_unassigned) {
									hole_unassigned = false;
									betterShapeHoles[s2Idx].push(ho);
								} else {
									ambiguous = true;
								}
							}
						}

						if (hole_unassigned) {
							betterShapeHoles[sIdx].push(ho);
						}
					}
				} // console.log("ambiguous: ", ambiguous);


				if (toChange.length > 0) {
					// console.log("to change: ", toChange);
					if (!ambiguous) newShapeHoles = betterShapeHoles;
				}
			}

			let tmpHoles;

			for (let i = 0, il = newShapes.length; i < il; i++) {
				tmpShape = newShapes[i].s;
				shapes.push(tmpShape);
				tmpHoles = newShapeHoles[i];

				for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
					tmpShape.holes.push(tmpHoles[j].h);
				}
			} //console.log("shape", shapes);


			return shapes;
		}

	}

	class Font {
		constructor(data) {
			this.type = 'Font';
			this.data = data;
		}

		generateShapes(text, size = 100) {
			const shapes = [];
			const paths = createPaths(text, size, this.data);

			for (let p = 0, pl = paths.length; p < pl; p++) {
				Array.prototype.push.apply(shapes, paths[p].toShapes());
			}

			return shapes;
		}

	}

	function createPaths(text, size, data) {
		const chars = Array.from(text);
		const scale = size / data.resolution;
		const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
		const paths = [];
		let offsetX = 0,
				offsetY = 0;

		for (let i = 0; i < chars.length; i++) {
			const char = chars[i];

			if (char === '\n') {
				offsetX = 0;
				offsetY -= line_height;
			} else {
				const ret = createPath(char, scale, offsetX, offsetY, data);
				offsetX += ret.offsetX;
				paths.push(ret.path);
			}
		}

		return paths;
	}

	function createPath(char, scale, offsetX, offsetY, data) {
		const glyph = data.glyphs[char] || data.glyphs['?'];

		if (!glyph) {
			console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.');
			return;
		}

		const path = new ShapePath();
		let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

		if (glyph.o) {
			const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));

			for (let i = 0, l = outline.length; i < l;) {
				const action = outline[i++];

				switch (action) {
					case 'm':
						// moveTo
						x = outline[i++] * scale + offsetX;
						y = outline[i++] * scale + offsetY;
						path.moveTo(x, y);
						break;

					case 'l':
						// lineTo
						x = outline[i++] * scale + offsetX;
						y = outline[i++] * scale + offsetY;
						path.lineTo(x, y);
						break;

					case 'q':
						// quadraticCurveTo
						cpx = outline[i++] * scale + offsetX;
						cpy = outline[i++] * scale + offsetY;
						cpx1 = outline[i++] * scale + offsetX;
						cpy1 = outline[i++] * scale + offsetY;
						path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
						break;

					case 'b':
						// bezierCurveTo
						cpx = outline[i++] * scale + offsetX;
						cpy = outline[i++] * scale + offsetY;
						cpx1 = outline[i++] * scale + offsetX;
						cpy1 = outline[i++] * scale + offsetY;
						cpx2 = outline[i++] * scale + offsetX;
						cpy2 = outline[i++] * scale + offsetY;
						path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
						break;
				}
			}
		}

		return {
			offsetX: glyph.ha * scale,
			path: path
		};
	}

	Font.prototype.isFont = true;

	class FontLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (text) {
				let json;

				try {
					json = JSON.parse(text);
				} catch (e) {
					console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');
					json = JSON.parse(text.substring(65, text.length - 2));
				}

				const font = scope.parse(json);
				if (onLoad) onLoad(font);
			}, onProgress, onError);
		}

		parse(json) {
			return new Font(json);
		}

	}

	let _context;

	const AudioContext = {
		getContext: function () {
			if (_context === undefined) {
				_context = new (window.AudioContext || window.webkitAudioContext)();
			}

			return _context;
		},
		setContext: function (value) {
			_context = value;
		}
	};

	class AudioLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(this.manager);
			loader.setResponseType('arraybuffer');
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (buffer) {
				try {
					// Create a copy of the buffer. The `decodeAudioData` method
					// detaches the buffer when complete, preventing reuse.
					const bufferCopy = buffer.slice(0);
					const context = AudioContext.getContext();
					context.decodeAudioData(bufferCopy, function (audioBuffer) {
						onLoad(audioBuffer);
					});
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

	}

	class HemisphereLightProbe extends LightProbe {
		constructor(skyColor, groundColor, intensity = 1) {
			super(undefined, intensity);
			const color1 = new Color().set(skyColor);
			const color2 = new Color().set(groundColor);
			const sky = new Vector3(color1.r, color1.g, color1.b);
			const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );

			const c0 = Math.sqrt(Math.PI);
			const c1 = c0 * Math.sqrt(0.75);
			this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
			this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
		}

	}

	HemisphereLightProbe.prototype.isHemisphereLightProbe = true;

	class AmbientLightProbe extends LightProbe {
		constructor(color, intensity = 1) {
			super(undefined, intensity);
			const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );

			this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
		}

	}

	AmbientLightProbe.prototype.isAmbientLightProbe = true;

	const _eyeRight = /*@__PURE__*/new Matrix4();

	const _eyeLeft = /*@__PURE__*/new Matrix4();

	class StereoCamera {
		constructor() {
			this.type = 'StereoCamera';
			this.aspect = 1;
			this.eyeSep = 0.064;
			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable(1);
			this.cameraL.matrixAutoUpdate = false;
			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable(2);
			this.cameraR.matrixAutoUpdate = false;
			this._cache = {
				focus: null,
				fov: null,
				aspect: null,
				near: null,
				far: null,
				zoom: null,
				eyeSep: null
			};
		}

		update(camera) {
			const cache = this._cache;
			const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

			if (needsUpdate) {
				cache.focus = camera.focus;
				cache.fov = camera.fov;
				cache.aspect = camera.aspect * this.aspect;
				cache.near = camera.near;
				cache.far = camera.far;
				cache.zoom = camera.zoom;
				cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				const projectionMatrix = camera.projectionMatrix.clone();
				const eyeSepHalf = cache.eyeSep / 2;
				const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
				const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
				let xmin, xmax; // translate xOffset

				_eyeLeft.elements[12] = -eyeSepHalf;
				_eyeRight.elements[12] = eyeSepHalf; // for left eye

				xmin = -ymax * cache.aspect + eyeSepOnProjection;
				xmax = ymax * cache.aspect + eyeSepOnProjection;
				projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
				projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
				this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye

				xmin = -ymax * cache.aspect - eyeSepOnProjection;
				xmax = ymax * cache.aspect - eyeSepOnProjection;
				projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
				projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
				this.cameraR.projectionMatrix.copy(projectionMatrix);
			}

			this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
			this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
		}

	}

	class Clock {
		constructor(autoStart = true) {
			this.autoStart = autoStart;
			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;
			this.running = false;
		}

		start() {
			this.startTime = now();
			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;
		}

		stop() {
			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;
		}

		getElapsedTime() {
			this.getDelta();
			return this.elapsedTime;
		}

		getDelta() {
			let diff = 0;

			if (this.autoStart && !this.running) {
				this.start();
				return 0;
			}

			if (this.running) {
				const newTime = now();
				diff = (newTime - this.oldTime) / 1000;
				this.oldTime = newTime;
				this.elapsedTime += diff;
			}

			return diff;
		}

	}

	function now() {
		return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
	}

	const _position$1 = /*@__PURE__*/new Vector3();

	const _quaternion$1 = /*@__PURE__*/new Quaternion();

	const _scale$1 = /*@__PURE__*/new Vector3();

	const _orientation$1 = /*@__PURE__*/new Vector3();

	class AudioListener extends Object3D {
		constructor() {
			super();
			this.type = 'AudioListener';
			this.context = AudioContext.getContext();
			this.gain = this.context.createGain();
			this.gain.connect(this.context.destination);
			this.filter = null;
			this.timeDelta = 0; // private

			this._clock = new Clock();
		}

		getInput() {
			return this.gain;
		}

		removeFilter() {
			if (this.filter !== null) {
				this.gain.disconnect(this.filter);
				this.filter.disconnect(this.context.destination);
				this.gain.connect(this.context.destination);
				this.filter = null;
			}

			return this;
		}

		getFilter() {
			return this.filter;
		}

		setFilter(value) {
			if (this.filter !== null) {
				this.gain.disconnect(this.filter);
				this.filter.disconnect(this.context.destination);
			} else {
				this.gain.disconnect(this.context.destination);
			}

			this.filter = value;
			this.gain.connect(this.filter);
			this.filter.connect(this.context.destination);
			return this;
		}

		getMasterVolume() {
			return this.gain.gain.value;
		}

		setMasterVolume(value) {
			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
			return this;
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			const listener = this.context.listener;
			const up = this.up;
			this.timeDelta = this._clock.getDelta();
			this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);

			_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);

			if (listener.positionX) {
				// code path for Chrome (see #14393)
				const endTime = this.context.currentTime + this.timeDelta;
				listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
				listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
				listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
				listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
				listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
				listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
				listener.upX.linearRampToValueAtTime(up.x, endTime);
				listener.upY.linearRampToValueAtTime(up.y, endTime);
				listener.upZ.linearRampToValueAtTime(up.z, endTime);
			} else {
				listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
				listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
			}
		}

	}

	class Audio extends Object3D {
		constructor(listener) {
			super();
			this.type = 'Audio';
			this.listener = listener;
			this.context = listener.context;
			this.gain = this.context.createGain();
			this.gain.connect(listener.getInput());
			this.autoplay = false;
			this.buffer = null;
			this.detune = 0;
			this.loop = false;
			this.loopStart = 0;
			this.loopEnd = 0;
			this.offset = 0;
			this.duration = undefined;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.source = null;
			this.sourceType = 'empty';
			this._startedAt = 0;
			this._progress = 0;
			this._connected = false;
			this.filters = [];
		}

		getOutput() {
			return this.gain;
		}

		setNodeSource(audioNode) {
			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();
			return this;
		}

		setMediaElementSource(mediaElement) {
			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource(mediaElement);
			this.connect();
			return this;
		}

		setMediaStreamSource(mediaStream) {
			this.hasPlaybackControl = false;
			this.sourceType = 'mediaStreamNode';
			this.source = this.context.createMediaStreamSource(mediaStream);
			this.connect();
			return this;
		}

		setBuffer(audioBuffer) {
			this.buffer = audioBuffer;
			this.sourceType = 'buffer';
			if (this.autoplay) this.play();
			return this;
		}

		play(delay = 0) {
			if (this.isPlaying === true) {
				console.warn('THREE.Audio: Audio is already playing.');
				return;
			}

			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this._startedAt = this.context.currentTime + delay;
			const source = this.context.createBufferSource();
			source.buffer = this.buffer;
			source.loop = this.loop;
			source.loopStart = this.loopStart;
			source.loopEnd = this.loopEnd;
			source.onended = this.onEnded.bind(this);
			source.start(this._startedAt, this._progress + this.offset, this.duration);
			this.isPlaying = true;
			this.source = source;
			this.setDetune(this.detune);
			this.setPlaybackRate(this.playbackRate);
			return this.connect();
		}

		pause() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			if (this.isPlaying === true) {
				// update current progress
				this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;

				if (this.loop === true) {
					// ensure _progress does not exceed duration with looped audios
					this._progress = this._progress % (this.duration || this.buffer.duration);
				}

				this.source.stop();
				this.source.onended = null;
				this.isPlaying = false;
			}

			return this;
		}

		stop() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this._progress = 0;
			this.source.stop();
			this.source.onended = null;
			this.isPlaying = false;
			return this;
		}

		connect() {
			if (this.filters.length > 0) {
				this.source.connect(this.filters[0]);

				for (let i = 1, l = this.filters.length; i < l; i++) {
					this.filters[i - 1].connect(this.filters[i]);
				}

				this.filters[this.filters.length - 1].connect(this.getOutput());
			} else {
				this.source.connect(this.getOutput());
			}

			this._connected = true;
			return this;
		}

		disconnect() {
			if (this.filters.length > 0) {
				this.source.disconnect(this.filters[0]);

				for (let i = 1, l = this.filters.length; i < l; i++) {
					this.filters[i - 1].disconnect(this.filters[i]);
				}

				this.filters[this.filters.length - 1].disconnect(this.getOutput());
			} else {
				this.source.disconnect(this.getOutput());
			}

			this._connected = false;
			return this;
		}

		getFilters() {
			return this.filters;
		}

		setFilters(value) {
			if (!value) value = [];

			if (this._connected === true) {
				this.disconnect();
				this.filters = value.slice();
				this.connect();
			} else {
				this.filters = value.slice();
			}

			return this;
		}

		setDetune(value) {
			this.detune = value;
			if (this.source.detune === undefined) return; // only set detune when available

			if (this.isPlaying === true) {
				this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
			}

			return this;
		}

		getDetune() {
			return this.detune;
		}

		getFilter() {
			return this.getFilters()[0];
		}

		setFilter(filter) {
			return this.setFilters(filter ? [filter] : []);
		}

		setPlaybackRate(value) {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this.playbackRate = value;

			if (this.isPlaying === true) {
				this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
			}

			return this;
		}

		getPlaybackRate() {
			return this.playbackRate;
		}

		onEnded() {
			this.isPlaying = false;
		}

		getLoop() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return false;
			}

			return this.loop;
		}

		setLoop(value) {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this.loop = value;

			if (this.isPlaying === true) {
				this.source.loop = this.loop;
			}

			return this;
		}

		setLoopStart(value) {
			this.loopStart = value;
			return this;
		}

		setLoopEnd(value) {
			this.loopEnd = value;
			return this;
		}

		getVolume() {
			return this.gain.gain.value;
		}

		setVolume(value) {
			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
			return this;
		}

	}

	const _position = /*@__PURE__*/new Vector3();

	const _quaternion = /*@__PURE__*/new Quaternion();

	const _scale = /*@__PURE__*/new Vector3();

	const _orientation = /*@__PURE__*/new Vector3();

	class PositionalAudio extends Audio {
		constructor(listener) {
			super(listener);
			this.panner = this.context.createPanner();
			this.panner.panningModel = 'HRTF';
			this.panner.connect(this.gain);
		}

		getOutput() {
			return this.panner;
		}

		getRefDistance() {
			return this.panner.refDistance;
		}

		setRefDistance(value) {
			this.panner.refDistance = value;
			return this;
		}

		getRolloffFactor() {
			return this.panner.rolloffFactor;
		}

		setRolloffFactor(value) {
			this.panner.rolloffFactor = value;
			return this;
		}

		getDistanceModel() {
			return this.panner.distanceModel;
		}

		setDistanceModel(value) {
			this.panner.distanceModel = value;
			return this;
		}

		getMaxDistance() {
			return this.panner.maxDistance;
		}

		setMaxDistance(value) {
			this.panner.maxDistance = value;
			return this;
		}

		setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;
			return this;
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			if (this.hasPlaybackControl === true && this.isPlaying === false) return;
			this.matrixWorld.decompose(_position, _quaternion, _scale);

			_orientation.set(0, 0, 1).applyQuaternion(_quaternion);

			const panner = this.panner;

			if (panner.positionX) {
				// code path for Chrome and Firefox (see #14393)
				const endTime = this.context.currentTime + this.listener.timeDelta;
				panner.positionX.linearRampToValueAtTime(_position.x, endTime);
				panner.positionY.linearRampToValueAtTime(_position.y, endTime);
				panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
				panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
				panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
				panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
			} else {
				panner.setPosition(_position.x, _position.y, _position.z);
				panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
			}
		}

	}

	class AudioAnalyser {
		constructor(audio, fftSize = 2048) {
			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize;
			this.data = new Uint8Array(this.analyser.frequencyBinCount);
			audio.getOutput().connect(this.analyser);
		}

		getFrequencyData() {
			this.analyser.getByteFrequencyData(this.data);
			return this.data;
		}

		getAverageFrequency() {
			let value = 0;
			const data = this.getFrequencyData();

			for (let i = 0; i < data.length; i++) {
				value += data[i];
			}

			return value / data.length;
		}

	}

	class PropertyMixer {
		constructor(binding, typeName, valueSize) {
			this.binding = binding;
			this.valueSize = valueSize;
			let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property
			//
			// 'add' is used for additive cumulative results
			//
			// 'work' is optional and is only present for quaternion types. It is used
			// to store intermediate quaternion multiplication results

			switch (typeName) {
				case 'quaternion':
					mixFunction = this._slerp;
					mixFunctionAdditive = this._slerpAdditive;
					setIdentity = this._setAdditiveIdentityQuaternion;
					this.buffer = new Float64Array(valueSize * 6);
					this._workIndex = 5;
					break;

				case 'string':
				case 'bool':
					mixFunction = this._select; // Use the regular mix function and for additive on these types,
					// additive is not relevant for non-numeric types

					mixFunctionAdditive = this._select;
					setIdentity = this._setAdditiveIdentityOther;
					this.buffer = new Array(valueSize * 5);
					break;

				default:
					mixFunction = this._lerp;
					mixFunctionAdditive = this._lerpAdditive;
					setIdentity = this._setAdditiveIdentityNumeric;
					this.buffer = new Float64Array(valueSize * 5);
			}

			this._mixBufferRegion = mixFunction;
			this._mixBufferRegionAdditive = mixFunctionAdditive;
			this._setIdentity = setIdentity;
			this._origIndex = 3;
			this._addIndex = 4;
			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;
			this.useCount = 0;
			this.referenceCount = 0;
		} // accumulate data in the 'incoming' region into 'accu<i>'


		accumulate(accuIndex, weight) {
			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place
			const buffer = this.buffer,
						stride = this.valueSize,
						offset = accuIndex * stride + stride;
			let currentWeight = this.cumulativeWeight;

			if (currentWeight === 0) {
				// accuN := incoming * weight
				for (let i = 0; i !== stride; ++i) {
					buffer[offset + i] = buffer[i];
				}

				currentWeight = weight;
			} else {
				// accuN := accuN + incoming * weight
				currentWeight += weight;
				const mix = weight / currentWeight;

				this._mixBufferRegion(buffer, offset, 0, mix, stride);
			}

			this.cumulativeWeight = currentWeight;
		} // accumulate data in the 'incoming' region into 'add'


		accumulateAdditive(weight) {
			const buffer = this.buffer,
						stride = this.valueSize,
						offset = stride * this._addIndex;

			if (this.cumulativeWeightAdditive === 0) {
				// add = identity
				this._setIdentity();
			} // add := add + incoming * weight


			this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);

			this.cumulativeWeightAdditive += weight;
		} // apply the state of 'accu<i>' to the binding when accus differ


		apply(accuIndex) {
			const stride = this.valueSize,
						buffer = this.buffer,
						offset = accuIndex * stride + stride,
						weight = this.cumulativeWeight,
						weightAdditive = this.cumulativeWeightAdditive,
						binding = this.binding;
			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;

			if (weight < 1) {
				// accuN := accuN + original * ( 1 - cumulativeWeight )
				const originalValueOffset = stride * this._origIndex;

				this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
			}

			if (weightAdditive > 0) {
				// accuN := accuN + additive accuN
				this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
			}

			for (let i = stride, e = stride + stride; i !== e; ++i) {
				if (buffer[i] !== buffer[i + stride]) {
					// value has changed -> update scene graph
					binding.setValue(buffer, offset);
					break;
				}
			}
		} // remember the state of the bound property and copy it to both accus


		saveOriginalState() {
			const binding = this.binding;
			const buffer = this.buffer,
						stride = this.valueSize,
						originalValueOffset = stride * this._origIndex;
			binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original

			for (let i = stride, e = originalValueOffset; i !== e; ++i) {
				buffer[i] = buffer[originalValueOffset + i % stride];
			} // Add to identity for additive


			this._setIdentity();

			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;
		} // apply the state previously taken via 'saveOriginalState' to the binding


		restoreOriginalState() {
			const originalValueOffset = this.valueSize * 3;
			this.binding.setValue(this.buffer, originalValueOffset);
		}

		_setAdditiveIdentityNumeric() {
			const startIndex = this._addIndex * this.valueSize;
			const endIndex = startIndex + this.valueSize;

			for (let i = startIndex; i < endIndex; i++) {
				this.buffer[i] = 0;
			}
		}

		_setAdditiveIdentityQuaternion() {
			this._setAdditiveIdentityNumeric();

			this.buffer[this._addIndex * this.valueSize + 3] = 1;
		}

		_setAdditiveIdentityOther() {
			const startIndex = this._origIndex * this.valueSize;
			const targetIndex = this._addIndex * this.valueSize;

			for (let i = 0; i < this.valueSize; i++) {
				this.buffer[targetIndex + i] = this.buffer[startIndex + i];
			}
		} // mix functions


		_select(buffer, dstOffset, srcOffset, t, stride) {
			if (t >= 0.5) {
				for (let i = 0; i !== stride; ++i) {
					buffer[dstOffset + i] = buffer[srcOffset + i];
				}
			}
		}

		_slerp(buffer, dstOffset, srcOffset, t) {
			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
		}

		_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
			const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset

			Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result

			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
		}

		_lerp(buffer, dstOffset, srcOffset, t, stride) {
			const s = 1 - t;

			for (let i = 0; i !== stride; ++i) {
				const j = dstOffset + i;
				buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
			}
		}

		_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
			for (let i = 0; i !== stride; ++i) {
				const j = dstOffset + i;
				buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
			}
		}

	}

	// Characters [].:/ are reserved for track binding syntax.
	const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

	const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\w` regexp matches
	// only latin characters, and the unicode \p{L} is not yet supported. So
	// instead, we exclude reserved characters and match everything else.


	const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';

	const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
	// be matched to parse the rest of the track name.


	const _directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.


	const _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved
	// characters. Accessor may contain any character except closing bracket.


	const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may
	// contain any non-bracket characters.


	const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);

	const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');

	const _supportedObjectNames = ['material', 'materials', 'bones'];

	class Composite {
		constructor(targetGroup, path, optionalParsedPath) {
			const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_(path, parsedPath);
		}

		getValue(array, offset) {
			this.bind(); // bind all binding

			const firstValidIndex = this._targetGroup.nCachedObjects_,
						binding = this._bindings[firstValidIndex]; // and only call .getValue on the first

			if (binding !== undefined) binding.getValue(array, offset);
		}

		setValue(array, offset) {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].setValue(array, offset);
			}
		}

		bind() {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].bind();
			}
		}

		unbind() {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].unbind();
			}
		}

	} // Note: This class uses a State pattern on a per-method basis:
	// 'bind' sets 'this.getValue' / 'setValue' and shadows the
	// prototype version of these methods with one that represents
	// the bound state. When the property is not found, the methods
	// become no-ops.


	class PropertyBinding {
		constructor(rootNode, path, parsedPath) {
			this.path = path;
			this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
			this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
			this.rootNode = rootNode; // initial state of these methods that calls 'bind'

			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;
		}

		static create(root, path, parsedPath) {
			if (!(root && root.isAnimationObjectGroup)) {
				return new PropertyBinding(root, path, parsedPath);
			} else {
				return new PropertyBinding.Composite(root, path, parsedPath);
			}
		}
		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param {string} name Node name to be sanitized.
		 * @return {string}
		 */


		static sanitizeNodeName(name) {
			return name.replace(/\s/g, '_').replace(_reservedRe, '');
		}

		static parseTrackName(trackName) {
			const matches = _trackRe.exec(trackName);

			if (!matches) {
				throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
			}

			const results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[2],
				objectName: matches[3],
				objectIndex: matches[4],
				propertyName: matches[5],
				// required
				propertyIndex: matches[6]
			};
			const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');

			if (lastDot !== undefined && lastDot !== -1) {
				const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).

				if (_supportedObjectNames.indexOf(objectName) !== -1) {
					results.nodeName = results.nodeName.substring(0, lastDot);
					results.objectName = objectName;
				}
			}

			if (results.propertyName === null || results.propertyName.length === 0) {
				throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
			}

			return results;
		}

		static findNode(root, nodeName) {
			if (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
				return root;
			} // search into skeleton bones.


			if (root.skeleton) {
				const bone = root.skeleton.getBoneByName(nodeName);

				if (bone !== undefined) {
					return bone;
				}
			} // search into node subtree.


			if (root.children) {
				const searchNodeSubtree = function (children) {
					for (let i = 0; i < children.length; i++) {
						const childNode = children[i];

						if (childNode.name === nodeName || childNode.uuid === nodeName) {
							return childNode;
						}

						const result = searchNodeSubtree(childNode.children);
						if (result) return result;
					}

					return null;
				};

				const subTreeNode = searchNodeSubtree(root.children);

				if (subTreeNode) {
					return subTreeNode;
				}
			}

			return null;
		} // these are used to "bind" a nonexistent property


		_getValue_unavailable() {}

		_setValue_unavailable() {} // Getters


		_getValue_direct(buffer, offset) {
			buffer[offset] = this.node[this.propertyName];
		}

		_getValue_array(buffer, offset) {
			const source = this.resolvedProperty;

			for (let i = 0, n = source.length; i !== n; ++i) {
				buffer[offset++] = source[i];
			}
		}

		_getValue_arrayElement(buffer, offset) {
			buffer[offset] = this.resolvedProperty[this.propertyIndex];
		}

		_getValue_toArray(buffer, offset) {
			this.resolvedProperty.toArray(buffer, offset);
		} // Direct


		_setValue_direct(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
		}

		_setValue_direct_setNeedsUpdate(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
			this.targetObject.needsUpdate = true;
		}

		_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
			this.targetObject.matrixWorldNeedsUpdate = true;
		} // EntireArray


		_setValue_array(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}
		}

		_setValue_array_setNeedsUpdate(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}

			this.targetObject.needsUpdate = true;
		}

		_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}

			this.targetObject.matrixWorldNeedsUpdate = true;
		} // ArrayElement


		_setValue_arrayElement(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
		}

		_setValue_arrayElement_setNeedsUpdate(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
			this.targetObject.needsUpdate = true;
		}

		_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
			this.targetObject.matrixWorldNeedsUpdate = true;
		} // HasToFromArray


		_setValue_fromArray(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
		}

		_setValue_fromArray_setNeedsUpdate(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
			this.targetObject.needsUpdate = true;
		}

		_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
			this.targetObject.matrixWorldNeedsUpdate = true;
		}

		_getValue_unbound(targetArray, offset) {
			this.bind();
			this.getValue(targetArray, offset);
		}

		_setValue_unbound(sourceArray, offset) {
			this.bind();
			this.setValue(sourceArray, offset);
		} // create getter / setter pair for a property in the scene graph


		bind() {
			let targetObject = this.node;
			const parsedPath = this.parsedPath;
			const objectName = parsedPath.objectName;
			const propertyName = parsedPath.propertyName;
			let propertyIndex = parsedPath.propertyIndex;

			if (!targetObject) {
				targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
				this.node = targetObject;
			} // set fail state so we can just 'return' on error


			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable; // ensure there is a value node

			if (!targetObject) {
				console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
				return;
			}

			if (objectName) {
				let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....

				switch (objectName) {
					case 'materials':
						if (!targetObject.material) {
							console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
							return;
						}

						if (!targetObject.material.materials) {
							console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
							return;
						}

						targetObject = targetObject.material.materials;
						break;

					case 'bones':
						if (!targetObject.skeleton) {
							console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
							return;
						} // potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.


						targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.

						for (let i = 0; i < targetObject.length; i++) {
							if (targetObject[i].name === objectIndex) {
								objectIndex = i;
								break;
							}
						}

						break;

					default:
						if (targetObject[objectName] === undefined) {
							console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
							return;
						}

						targetObject = targetObject[objectName];
				}

				if (objectIndex !== undefined) {
					if (targetObject[objectIndex] === undefined) {
						console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
						return;
					}

					targetObject = targetObject[objectIndex];
				}
			} // resolve property


			const nodeProperty = targetObject[propertyName];

			if (nodeProperty === undefined) {
				const nodeName = parsedPath.nodeName;
				console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
				return;
			} // determine versioning scheme


			let versioning = this.Versioning.None;
			this.targetObject = targetObject;

			if (targetObject.needsUpdate !== undefined) {
				// material
				versioning = this.Versioning.NeedsUpdate;
			} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
				// node transform
				versioning = this.Versioning.MatrixWorldNeedsUpdate;
			} // determine how the property gets bound


			let bindingType = this.BindingType.Direct;

			if (propertyIndex !== undefined) {
				// access a sub element of the property array (only primitives are supported right now)
				if (propertyName === 'morphTargetInfluences') {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
					// support resolving morphTarget names into indices.
					if (!targetObject.geometry) {
						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
						return;
					}

					if (targetObject.geometry.isBufferGeometry) {
						if (!targetObject.geometry.morphAttributes) {
							console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
							return;
						}

						if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {
							propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
						}
					} else {
						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
						return;
					}
				}

				bindingType = this.BindingType.ArrayElement;
				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;
			} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
				// must use copy for Object3D.Euler/Quaternion
				bindingType = this.BindingType.HasFromToArray;
				this.resolvedProperty = nodeProperty;
			} else if (Array.isArray(nodeProperty)) {
				bindingType = this.BindingType.EntireArray;
				this.resolvedProperty = nodeProperty;
			} else {
				this.propertyName = propertyName;
			} // select getter / setter


			this.getValue = this.GetterByBindingType[bindingType];
			this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
		}

		unbind() {
			this.node = null; // back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'

			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;
		}

	}

	PropertyBinding.Composite = Composite;
	PropertyBinding.prototype.BindingType = {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	};
	PropertyBinding.prototype.Versioning = {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	};
	PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];
	PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct
	PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray
	PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement
	PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray
	PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 *	- Add objects you would otherwise pass as 'root' to the
	 *		constructor or the .clipAction method of AnimationMixer.
	 *
	 *	- Instead pass this object as 'root'.
	 *
	 *	- You can also add and remove objects later when the mixer
	 *		is running.
	 *
	 * Note:
	 *
	 *		Objects of this class appear as one object to the mixer,
	 *		so cache control of the individual objects must be done
	 *		on the group.
	 *
	 * Limitation:
	 *
	 *	- The animated properties must be compatible among the
	 *		all objects in the group.
	 *
	 *	- A single property can either be controlled through a
	 *		target group or directly, but not both.
	 */

	class AnimationObjectGroup {
		constructor() {
			this.uuid = generateUUID(); // cached objects followed by the active ones

			this._objects = Array.prototype.slice.call(arguments);
			this.nCachedObjects_ = 0; // threshold
			// note: read by PropertyBinding.Composite

			const indices = {};
			this._indicesByUUID = indices; // for bookkeeping

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				indices[arguments[i].uuid] = i;
			}

			this._paths = []; // inside: string

			this._parsedPaths = []; // inside: { we don't care, here }

			this._bindings = []; // inside: Array< PropertyBinding >

			this._bindingsIndicesByPath = {}; // inside: indices in these arrays

			const scope = this;
			this.stats = {
				objects: {
					get total() {
						return scope._objects.length;
					},

					get inUse() {
						return this.total - scope.nCachedObjects_;
					}

				},

				get bindingsPerObject() {
					return scope._bindings.length;
				}

			};
		}

		add() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						nBindings = bindings.length;
			let knownObject = undefined,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid;
				let index = indicesByUUID[uuid];

				if (index === undefined) {
					// unknown object -> add it to the ACTIVE region
					index = nObjects++;
					indicesByUUID[uuid] = index;
					objects.push(object); // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
					}
				} else if (index < nCachedObjects) {
					knownObject = objects[index]; // move existing object to the ACTIVE region

					const firstActiveIndex = --nCachedObjects,
								lastCachedObject = objects[firstActiveIndex];
					indicesByUUID[lastCachedObject.uuid] = index;
					objects[index] = lastCachedObject;
					indicesByUUID[uuid] = firstActiveIndex;
					objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						const bindingsForPath = bindings[j],
									lastCached = bindingsForPath[firstActiveIndex];
						let binding = bindingsForPath[index];
						bindingsForPath[index] = lastCached;

						if (binding === undefined) {
							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist
							binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
						}

						bindingsForPath[firstActiveIndex] = binding;
					}
				} else if (objects[index] !== knownObject) {
					console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
				} // else the object is already where we want it to be

			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		}

		remove() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						bindings = this._bindings,
						nBindings = bindings.length;
			let nCachedObjects = this.nCachedObjects_;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid,
							index = indicesByUUID[uuid];

				if (index !== undefined && index >= nCachedObjects) {
					// move existing object into the CACHED region
					const lastCachedIndex = nCachedObjects++,
								firstActiveObject = objects[lastCachedIndex];
					indicesByUUID[firstActiveObject.uuid] = index;
					objects[index] = firstActiveObject;
					indicesByUUID[uuid] = lastCachedIndex;
					objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						const bindingsForPath = bindings[j],
									firstActive = bindingsForPath[lastCachedIndex],
									binding = bindingsForPath[index];
						bindingsForPath[index] = firstActive;
						bindingsForPath[lastCachedIndex] = binding;
					}
				}
			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		} // remove & forget


		uncache() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						bindings = this._bindings,
						nBindings = bindings.length;
			let nCachedObjects = this.nCachedObjects_,
					nObjects = objects.length;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid,
							index = indicesByUUID[uuid];

				if (index !== undefined) {
					delete indicesByUUID[uuid];

					if (index < nCachedObjects) {
						// object is cached, shrink the CACHED region
						const firstActiveIndex = --nCachedObjects,
									lastCachedObject = objects[firstActiveIndex],
									lastIndex = --nObjects,
									lastObject = objects[lastIndex]; // last cached object takes this object's place

						indicesByUUID[lastCachedObject.uuid] = index;
						objects[index] = lastCachedObject; // last object goes to the activated slot and pop

						indicesByUUID[lastObject.uuid] = firstActiveIndex;
						objects[firstActiveIndex] = lastObject;
						objects.pop(); // accounting is done, now do the same for all bindings

						for (let j = 0, m = nBindings; j !== m; ++j) {
							const bindingsForPath = bindings[j],
										lastCached = bindingsForPath[firstActiveIndex],
										last = bindingsForPath[lastIndex];
							bindingsForPath[index] = lastCached;
							bindingsForPath[firstActiveIndex] = last;
							bindingsForPath.pop();
						}
					} else {
						// object is active, just swap with the last and pop
						const lastIndex = --nObjects,
									lastObject = objects[lastIndex];

						if (lastIndex > 0) {
							indicesByUUID[lastObject.uuid] = index;
						}

						objects[index] = lastObject;
						objects.pop(); // accounting is done, now do the same for all bindings

						for (let j = 0, m = nBindings; j !== m; ++j) {
							const bindingsForPath = bindings[j];
							bindingsForPath[index] = bindingsForPath[lastIndex];
							bindingsForPath.pop();
						}
					} // cached or active

				} // if object is known

			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		} // Internal interface used by befriended PropertyBinding.Composite:


		subscribe_(path, parsedPath) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group
			const indicesByPath = this._bindingsIndicesByPath;
			let index = indicesByPath[path];
			const bindings = this._bindings;
			if (index !== undefined) return bindings[index];
			const paths = this._paths,
						parsedPaths = this._parsedPaths,
						objects = this._objects,
						nObjects = objects.length,
						nCachedObjects = this.nCachedObjects_,
						bindingsForPath = new Array(nObjects);
			index = bindings.length;
			indicesByPath[path] = index;
			paths.push(path);
			parsedPaths.push(parsedPath);
			bindings.push(bindingsForPath);

			for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
				const object = objects[i];
				bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
			}

			return bindingsForPath;
		}

		unsubscribe_(path) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'
			const indicesByPath = this._bindingsIndicesByPath,
						index = indicesByPath[path];

			if (index !== undefined) {
				const paths = this._paths,
							parsedPaths = this._parsedPaths,
							bindings = this._bindings,
							lastBindingsIndex = bindings.length - 1,
							lastBindings = bindings[lastBindingsIndex],
							lastBindingsPath = path[lastBindingsIndex];
				indicesByPath[lastBindingsPath] = index;
				bindings[index] = lastBindings;
				bindings.pop();
				parsedPaths[index] = parsedPaths[lastBindingsIndex];
				parsedPaths.pop();
				paths[index] = paths[lastBindingsIndex];
				paths.pop();
			}
		}

	}

	AnimationObjectGroup.prototype.isAnimationObjectGroup = true;

	class AnimationAction {
		constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot;
			this.blendMode = blendMode;
			const tracks = clip.tracks,
						nTracks = tracks.length,
						interpolants = new Array(nTracks);
			const interpolantSettings = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};

			for (let i = 0; i !== nTracks; ++i) {
				const interpolant = tracks[i].createInterpolant(null);
				interpolants[i] = interpolant;
				interpolant.settings = interpolantSettings;
			}

			this._interpolantSettings = interpolantSettings;
			this._interpolants = interpolants; // bound by the mixer
			// inside: PropertyMixer (managed by the mixer)

			this._propertyBindings = new Array(nTracks);
			this._cacheIndex = null; // for the memory manager

			this._byClipCacheIndex = null; // for the memory manager

			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;
			this.loop = LoopRepeat;
			this._loopCount = -1; // global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action

			this._startTime = null; // scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop

			this.time = 0;
			this.timeScale = 1;
			this._effectiveTimeScale = 1;
			this.weight = 1;
			this._effectiveWeight = 1;
			this.repetitions = Infinity; // no. of repetitions when looping

			this.paused = false; // true -> zero effective time scale

			this.enabled = true; // false -> zero effective weight

			this.clampWhenFinished = false; // keep feeding the last frame?

			this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate

			this.zeroSlopeAtEnd = true; // clips for start, loop and end
		} // State & Scheduling


		play() {
			this._mixer._activateAction(this);

			return this;
		}

		stop() {
			this._mixer._deactivateAction(this);

			return this.reset();
		}

		reset() {
			this.paused = false;
			this.enabled = true;
			this.time = 0; // restart clip

			this._loopCount = -1; // forget previous loops

			this._startTime = null; // forget scheduling

			return this.stopFading().stopWarping();
		}

		isRunning() {
			return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
		} // return true when play has been called


		isScheduled() {
			return this._mixer._isActiveAction(this);
		}

		startAt(time) {
			this._startTime = time;
			return this;
		}

		setLoop(mode, repetitions) {
			this.loop = mode;
			this.repetitions = repetitions;
			return this;
		} // Weight
		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing


		setEffectiveWeight(weight) {
			this.weight = weight; // note: same logic as when updated at runtime

			this._effectiveWeight = this.enabled ? weight : 0;
			return this.stopFading();
		} // return the weight considering fading and .enabled


		getEffectiveWeight() {
			return this._effectiveWeight;
		}

		fadeIn(duration) {
			return this._scheduleFading(duration, 0, 1);
		}

		fadeOut(duration) {
			return this._scheduleFading(duration, 1, 0);
		}

		crossFadeFrom(fadeOutAction, duration, warp) {
			fadeOutAction.fadeOut(duration);
			this.fadeIn(duration);

			if (warp) {
				const fadeInDuration = this._clip.duration,
							fadeOutDuration = fadeOutAction._clip.duration,
							startEndRatio = fadeOutDuration / fadeInDuration,
							endStartRatio = fadeInDuration / fadeOutDuration;
				fadeOutAction.warp(1.0, startEndRatio, duration);
				this.warp(endStartRatio, 1.0, duration);
			}

			return this;
		}

		crossFadeTo(fadeInAction, duration, warp) {
			return fadeInAction.crossFadeFrom(this, duration, warp);
		}

		stopFading() {
			const weightInterpolant = this._weightInterpolant;

			if (weightInterpolant !== null) {
				this._weightInterpolant = null;

				this._mixer._takeBackControlInterpolant(weightInterpolant);
			}

			return this;
		} // Time Scale Control
		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing


		setEffectiveTimeScale(timeScale) {
			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;
			return this.stopWarping();
		} // return the time scale considering warping and .paused


		getEffectiveTimeScale() {
			return this._effectiveTimeScale;
		}

		setDuration(duration) {
			this.timeScale = this._clip.duration / duration;
			return this.stopWarping();
		}

		syncWith(action) {
			this.time = action.time;
			this.timeScale = action.timeScale;
			return this.stopWarping();
		}

		halt(duration) {
			return this.warp(this._effectiveTimeScale, 0, duration);
		}

		warp(startTimeScale, endTimeScale, duration) {
			const mixer = this._mixer,
						now = mixer.time,
						timeScale = this.timeScale;
			let interpolant = this._timeScaleInterpolant;

			if (interpolant === null) {
				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;
			}

			const times = interpolant.parameterPositions,
						values = interpolant.sampleValues;
			times[0] = now;
			times[1] = now + duration;
			values[0] = startTimeScale / timeScale;
			values[1] = endTimeScale / timeScale;
			return this;
		}

		stopWarping() {
			const timeScaleInterpolant = this._timeScaleInterpolant;

			if (timeScaleInterpolant !== null) {
				this._timeScaleInterpolant = null;

				this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
			}

			return this;
		} // Object Accessors


		getMixer() {
			return this._mixer;
		}

		getClip() {
			return this._clip;
		}

		getRoot() {
			return this._localRoot || this._mixer._root;
		} // Interna


		_update(time, deltaTime, timeDirection, accuIndex) {
			// called by the mixer
			if (!this.enabled) {
				// call ._updateWeight() to update ._effectiveWeight
				this._updateWeight(time);

				return;
			}

			const startTime = this._startTime;

			if (startTime !== null) {
				// check for scheduled start of action
				const timeRunning = (time - startTime) * timeDirection;

				if (timeRunning < 0 || timeDirection === 0) {
					return; // yet to come / don't decide when delta = 0
				} // start


				this._startTime = null; // unschedule

				deltaTime = timeDirection * timeRunning;
			} // apply time scale and advance time


			deltaTime *= this._updateTimeScale(time);

			const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
			// an effective weight of 0


			const weight = this._updateWeight(time);

			if (weight > 0) {
				const interpolants = this._interpolants;
				const propertyMixers = this._propertyBindings;

				switch (this.blendMode) {
					case AdditiveAnimationBlendMode:
						for (let j = 0, m = interpolants.length; j !== m; ++j) {
							interpolants[j].evaluate(clipTime);
							propertyMixers[j].accumulateAdditive(weight);
						}

						break;

					case NormalAnimationBlendMode:
					default:
						for (let j = 0, m = interpolants.length; j !== m; ++j) {
							interpolants[j].evaluate(clipTime);
							propertyMixers[j].accumulate(accuIndex, weight);
						}

				}
			}
		}

		_updateWeight(time) {
			let weight = 0;

			if (this.enabled) {
				weight = this.weight;
				const interpolant = this._weightInterpolant;

				if (interpolant !== null) {
					const interpolantValue = interpolant.evaluate(time)[0];
					weight *= interpolantValue;

					if (time > interpolant.parameterPositions[1]) {
						this.stopFading();

						if (interpolantValue === 0) {
							// faded out, disable
							this.enabled = false;
						}
					}
				}
			}

			this._effectiveWeight = weight;
			return weight;
		}

		_updateTimeScale(time) {
			let timeScale = 0;

			if (!this.paused) {
				timeScale = this.timeScale;
				const interpolant = this._timeScaleInterpolant;

				if (interpolant !== null) {
					const interpolantValue = interpolant.evaluate(time)[0];
					timeScale *= interpolantValue;

					if (time > interpolant.parameterPositions[1]) {
						this.stopWarping();

						if (timeScale === 0) {
							// motion has halted, pause
							this.paused = true;
						} else {
							// warp done - apply final time scale
							this.timeScale = timeScale;
						}
					}
				}
			}

			this._effectiveTimeScale = timeScale;
			return timeScale;
		}

		_updateTime(deltaTime) {
			const duration = this._clip.duration;
			const loop = this.loop;
			let time = this.time + deltaTime;
			let loopCount = this._loopCount;
			const pingPong = loop === LoopPingPong;

			if (deltaTime === 0) {
				if (loopCount === -1) return time;
				return pingPong && (loopCount & 1) === 1 ? duration - time : time;
			}

			if (loop === LoopOnce) {
				if (loopCount === -1) {
					// just started
					this._loopCount = 0;

					this._setEndings(true, true, false);
				}

				handle_stop: {
					if (time >= duration) {
						time = duration;
					} else if (time < 0) {
						time = 0;
					} else {
						this.time = time;
						break handle_stop;
					}

					if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
					this.time = time;

					this._mixer.dispatchEvent({
						type: 'finished',
						action: this,
						direction: deltaTime < 0 ? -1 : 1
					});
				}
			} else {
				// repetitive Repeat or PingPong
				if (loopCount === -1) {
					// just started
					if (deltaTime >= 0) {
						loopCount = 0;

						this._setEndings(true, this.repetitions === 0, pingPong);
					} else {
						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1
						this._setEndings(this.repetitions === 0, true, pingPong);
					}
				}

				if (time >= duration || time < 0) {
					// wrap around
					const loopDelta = Math.floor(time / duration); // signed

					time -= duration * loopDelta;
					loopCount += Math.abs(loopDelta);
					const pending = this.repetitions - loopCount;

					if (pending <= 0) {
						// have to stop (switch state, clamp time, fire event)
						if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
						time = deltaTime > 0 ? duration : 0;
						this.time = time;

						this._mixer.dispatchEvent({
							type: 'finished',
							action: this,
							direction: deltaTime > 0 ? 1 : -1
						});
					} else {
						// keep running
						if (pending === 1) {
							// entering the last round
							const atStart = deltaTime < 0;

							this._setEndings(atStart, !atStart, pingPong);
						} else {
							this._setEndings(false, false, pingPong);
						}

						this._loopCount = loopCount;
						this.time = time;

						this._mixer.dispatchEvent({
							type: 'loop',
							action: this,
							loopDelta: loopDelta
						});
					}
				} else {
					this.time = time;
				}

				if (pingPong && (loopCount & 1) === 1) {
					// invert time for the "pong round"
					return duration - time;
				}
			}

			return time;
		}

		_setEndings(atStart, atEnd, pingPong) {
			const settings = this._interpolantSettings;

			if (pingPong) {
				settings.endingStart = ZeroSlopeEnding;
				settings.endingEnd = ZeroSlopeEnding;
			} else {
				// assuming for LoopOnce atStart == atEnd == true
				if (atStart) {
					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingStart = WrapAroundEnding;
				}

				if (atEnd) {
					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingEnd = WrapAroundEnding;
				}
			}
		}

		_scheduleFading(duration, weightNow, weightThen) {
			const mixer = this._mixer,
						now = mixer.time;
			let interpolant = this._weightInterpolant;

			if (interpolant === null) {
				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;
			}

			const times = interpolant.parameterPositions,
						values = interpolant.sampleValues;
			times[0] = now;
			values[0] = weightNow;
			times[1] = now + duration;
			values[1] = weightThen;
			return this;
		}

	}

	class AnimationMixer extends EventDispatcher {
		constructor(root) {
			super();
			this._root = root;

			this._initMemoryManager();

			this._accuIndex = 0;
			this.time = 0;
			this.timeScale = 1.0;
		}

		_bindAction(action, prototypeAction) {
			const root = action._localRoot || this._root,
						tracks = action._clip.tracks,
						nTracks = tracks.length,
						bindings = action._propertyBindings,
						interpolants = action._interpolants,
						rootUuid = root.uuid,
						bindingsByRoot = this._bindingsByRootAndName;
			let bindingsByName = bindingsByRoot[rootUuid];

			if (bindingsByName === undefined) {
				bindingsByName = {};
				bindingsByRoot[rootUuid] = bindingsByName;
			}

			for (let i = 0; i !== nTracks; ++i) {
				const track = tracks[i],
							trackName = track.name;
				let binding = bindingsByName[trackName];

				if (binding !== undefined) {
					bindings[i] = binding;
				} else {
					binding = bindings[i];

					if (binding !== undefined) {
						// existing binding, make sure the cache knows
						if (binding._cacheIndex === null) {
							++binding.referenceCount;

							this._addInactiveBinding(binding, rootUuid, trackName);
						}

						continue;
					}

					const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
					binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
					++binding.referenceCount;

					this._addInactiveBinding(binding, rootUuid, trackName);

					bindings[i] = binding;
				}

				interpolants[i].resultBuffer = binding.buffer;
			}
		}

		_activateAction(action) {
			if (!this._isActiveAction(action)) {
				if (action._cacheIndex === null) {
					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind
					const rootUuid = (action._localRoot || this._root).uuid,
								clipUuid = action._clip.uuid,
								actionsForClip = this._actionsByClip[clipUuid];

					this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);

					this._addInactiveAction(action, clipUuid, rootUuid);
				}

				const bindings = action._propertyBindings; // increment reference counts / sort out state

				for (let i = 0, n = bindings.length; i !== n; ++i) {
					const binding = bindings[i];

					if (binding.useCount++ === 0) {
						this._lendBinding(binding);

						binding.saveOriginalState();
					}
				}

				this._lendAction(action);
			}
		}

		_deactivateAction(action) {
			if (this._isActiveAction(action)) {
				const bindings = action._propertyBindings; // decrement reference counts / sort out state

				for (let i = 0, n = bindings.length; i !== n; ++i) {
					const binding = bindings[i];

					if (--binding.useCount === 0) {
						binding.restoreOriginalState();

						this._takeBackBinding(binding);
					}
				}

				this._takeBackAction(action);
			}
		} // Memory manager


		_initMemoryManager() {
			this._actions = []; // 'nActiveActions' followed by inactive ones

			this._nActiveActions = 0;
			this._actionsByClip = {}; // inside:
			// {
			// 	knownActions: Array< AnimationAction > - used as prototypes
			// 	actionByRoot: AnimationAction - lookup
			// }

			this._bindings = []; // 'nActiveBindings' followed by inactive ones

			this._nActiveBindings = 0;
			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >

			this._controlInterpolants = []; // same game as above

			this._nActiveControlInterpolants = 0;
			const scope = this;
			this.stats = {
				actions: {
					get total() {
						return scope._actions.length;
					},

					get inUse() {
						return scope._nActiveActions;
					}

				},
				bindings: {
					get total() {
						return scope._bindings.length;
					},

					get inUse() {
						return scope._nActiveBindings;
					}

				},
				controlInterpolants: {
					get total() {
						return scope._controlInterpolants.length;
					},

					get inUse() {
						return scope._nActiveControlInterpolants;
					}

				}
			};
		} // Memory management for AnimationAction objects


		_isActiveAction(action) {
			const index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;
		}

		_addInactiveAction(action, clipUuid, rootUuid) {
			const actions = this._actions,
						actionsByClip = this._actionsByClip;
			let actionsForClip = actionsByClip[clipUuid];

			if (actionsForClip === undefined) {
				actionsForClip = {
					knownActions: [action],
					actionByRoot: {}
				};
				action._byClipCacheIndex = 0;
				actionsByClip[clipUuid] = actionsForClip;
			} else {
				const knownActions = actionsForClip.knownActions;
				action._byClipCacheIndex = knownActions.length;
				knownActions.push(action);
			}

			action._cacheIndex = actions.length;
			actions.push(action);
			actionsForClip.actionByRoot[rootUuid] = action;
		}

		_removeInactiveAction(action) {
			const actions = this._actions,
						lastInactiveAction = actions[actions.length - 1],
						cacheIndex = action._cacheIndex;
			lastInactiveAction._cacheIndex = cacheIndex;
			actions[cacheIndex] = lastInactiveAction;
			actions.pop();
			action._cacheIndex = null;
			const clipUuid = action._clip.uuid,
						actionsByClip = this._actionsByClip,
						actionsForClip = actionsByClip[clipUuid],
						knownActionsForClip = actionsForClip.knownActions,
						lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
						byClipCacheIndex = action._byClipCacheIndex;
			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[byClipCacheIndex] = lastKnownAction;
			knownActionsForClip.pop();
			action._byClipCacheIndex = null;
			const actionByRoot = actionsForClip.actionByRoot,
						rootUuid = (action._localRoot || this._root).uuid;
			delete actionByRoot[rootUuid];

			if (knownActionsForClip.length === 0) {
				delete actionsByClip[clipUuid];
			}

			this._removeInactiveBindingsForAction(action);
		}

		_removeInactiveBindingsForAction(action) {
			const bindings = action._propertyBindings;

			for (let i = 0, n = bindings.length; i !== n; ++i) {
				const binding = bindings[i];

				if (--binding.referenceCount === 0) {
					this._removeInactiveBinding(binding);
				}
			}
		}

		_lendAction(action) {
			// [ active actions |	inactive actions	]
			// [	active actions >| inactive actions ]
			//								 s				a
			//									<-swap->
			//								 a				s
			const actions = this._actions,
						prevIndex = action._cacheIndex,
						lastActiveIndex = this._nActiveActions++,
						firstInactiveAction = actions[lastActiveIndex];
			action._cacheIndex = lastActiveIndex;
			actions[lastActiveIndex] = action;
			firstInactiveAction._cacheIndex = prevIndex;
			actions[prevIndex] = firstInactiveAction;
		}

		_takeBackAction(action) {
			// [	active actions	| inactive actions ]
			// [ active actions |< inactive actions	]
			//				a				s
			//				 <-swap->
			//				s				a
			const actions = this._actions,
						prevIndex = action._cacheIndex,
						firstInactiveIndex = --this._nActiveActions,
						lastActiveAction = actions[firstInactiveIndex];
			action._cacheIndex = firstInactiveIndex;
			actions[firstInactiveIndex] = action;
			lastActiveAction._cacheIndex = prevIndex;
			actions[prevIndex] = lastActiveAction;
		} // Memory management for PropertyMixer objects


		_addInactiveBinding(binding, rootUuid, trackName) {
			const bindingsByRoot = this._bindingsByRootAndName,
						bindings = this._bindings;
			let bindingByName = bindingsByRoot[rootUuid];

			if (bindingByName === undefined) {
				bindingByName = {};
				bindingsByRoot[rootUuid] = bindingByName;
			}

			bindingByName[trackName] = binding;
			binding._cacheIndex = bindings.length;
			bindings.push(binding);
		}

		_removeInactiveBinding(binding) {
			const bindings = this._bindings,
						propBinding = binding.binding,
						rootUuid = propBinding.rootNode.uuid,
						trackName = propBinding.path,
						bindingsByRoot = this._bindingsByRootAndName,
						bindingByName = bindingsByRoot[rootUuid],
						lastInactiveBinding = bindings[bindings.length - 1],
						cacheIndex = binding._cacheIndex;
			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[cacheIndex] = lastInactiveBinding;
			bindings.pop();
			delete bindingByName[trackName];

			if (Object.keys(bindingByName).length === 0) {
				delete bindingsByRoot[rootUuid];
			}
		}

		_lendBinding(binding) {
			const bindings = this._bindings,
						prevIndex = binding._cacheIndex,
						lastActiveIndex = this._nActiveBindings++,
						firstInactiveBinding = bindings[lastActiveIndex];
			binding._cacheIndex = lastActiveIndex;
			bindings[lastActiveIndex] = binding;
			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[prevIndex] = firstInactiveBinding;
		}

		_takeBackBinding(binding) {
			const bindings = this._bindings,
						prevIndex = binding._cacheIndex,
						firstInactiveIndex = --this._nActiveBindings,
						lastActiveBinding = bindings[firstInactiveIndex];
			binding._cacheIndex = firstInactiveIndex;
			bindings[firstInactiveIndex] = binding;
			lastActiveBinding._cacheIndex = prevIndex;
			bindings[prevIndex] = lastActiveBinding;
		} // Memory management of Interpolants for weight and time scale


		_lendControlInterpolant() {
			const interpolants = this._controlInterpolants,
						lastActiveIndex = this._nActiveControlInterpolants++;
			let interpolant = interpolants[lastActiveIndex];

			if (interpolant === undefined) {
				interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[lastActiveIndex] = interpolant;
			}

			return interpolant;
		}

		_takeBackControlInterpolant(interpolant) {
			const interpolants = this._controlInterpolants,
						prevIndex = interpolant.__cacheIndex,
						firstInactiveIndex = --this._nActiveControlInterpolants,
						lastActiveInterpolant = interpolants[firstInactiveIndex];
			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[firstInactiveIndex] = interpolant;
			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[prevIndex] = lastActiveInterpolant;
		} // return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)


		clipAction(clip, optionalRoot, blendMode) {
			const root = optionalRoot || this._root,
						rootUuid = root.uuid;
			let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;
			const clipUuid = clipObject !== null ? clipObject.uuid : clip;
			const actionsForClip = this._actionsByClip[clipUuid];
			let prototypeAction = null;

			if (blendMode === undefined) {
				if (clipObject !== null) {
					blendMode = clipObject.blendMode;
				} else {
					blendMode = NormalAnimationBlendMode;
				}
			}

			if (actionsForClip !== undefined) {
				const existingAction = actionsForClip.actionByRoot[rootUuid];

				if (existingAction !== undefined && existingAction.blendMode === blendMode) {
					return existingAction;
				} // we know the clip, so we don't have to parse all
				// the bindings again but can just copy


				prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action

				if (clipObject === null) clipObject = prototypeAction._clip;
			} // clip must be known when specified via string


			if (clipObject === null) return null; // allocate all resources required to run it

			const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);

			this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager


			this._addInactiveAction(newAction, clipUuid, rootUuid);

			return newAction;
		} // get an existing action


		existingAction(clip, optionalRoot) {
			const root = optionalRoot || this._root,
						rootUuid = root.uuid,
						clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
						clipUuid = clipObject ? clipObject.uuid : clip,
						actionsForClip = this._actionsByClip[clipUuid];

			if (actionsForClip !== undefined) {
				return actionsForClip.actionByRoot[rootUuid] || null;
			}

			return null;
		} // deactivates all previously scheduled actions


		stopAllAction() {
			const actions = this._actions,
						nActions = this._nActiveActions;

			for (let i = nActions - 1; i >= 0; --i) {
				actions[i].stop();
			}

			return this;
		} // advance the time and update apply the animation


		update(deltaTime) {
			deltaTime *= this.timeScale;
			const actions = this._actions,
						nActions = this._nActiveActions,
						time = this.time += deltaTime,
						timeDirection = Math.sign(deltaTime),
						accuIndex = this._accuIndex ^= 1; // run active actions

			for (let i = 0; i !== nActions; ++i) {
				const action = actions[i];

				action._update(time, deltaTime, timeDirection, accuIndex);
			} // update scene graph


			const bindings = this._bindings,
						nBindings = this._nActiveBindings;

			for (let i = 0; i !== nBindings; ++i) {
				bindings[i].apply(accuIndex);
			}

			return this;
		} // Allows you to seek to a specific time in an animation.


		setTime(timeInSeconds) {
			this.time = 0; // Zero out time attribute for AnimationMixer object;

			for (let i = 0; i < this._actions.length; i++) {
				this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
			}

			return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
		} // return this mixer's root target object


		getRoot() {
			return this._root;
		} // free all resources specific to a particular clip


		uncacheClip(clip) {
			const actions = this._actions,
						clipUuid = clip.uuid,
						actionsByClip = this._actionsByClip,
						actionsForClip = actionsByClip[clipUuid];

			if (actionsForClip !== undefined) {
				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away
				const actionsToRemove = actionsForClip.knownActions;

				for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
					const action = actionsToRemove[i];

					this._deactivateAction(action);

					const cacheIndex = action._cacheIndex,
								lastInactiveAction = actions[actions.length - 1];
					action._cacheIndex = null;
					action._byClipCacheIndex = null;
					lastInactiveAction._cacheIndex = cacheIndex;
					actions[cacheIndex] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction(action);
				}

				delete actionsByClip[clipUuid];
			}
		} // free all resources specific to a particular root target object


		uncacheRoot(root) {
			const rootUuid = root.uuid,
						actionsByClip = this._actionsByClip;

			for (const clipUuid in actionsByClip) {
				const actionByRoot = actionsByClip[clipUuid].actionByRoot,
							action = actionByRoot[rootUuid];

				if (action !== undefined) {
					this._deactivateAction(action);

					this._removeInactiveAction(action);
				}
			}

			const bindingsByRoot = this._bindingsByRootAndName,
						bindingByName = bindingsByRoot[rootUuid];

			if (bindingByName !== undefined) {
				for (const trackName in bindingByName) {
					const binding = bindingByName[trackName];
					binding.restoreOriginalState();

					this._removeInactiveBinding(binding);
				}
			}
		} // remove a targeted clip from the cache


		uncacheAction(clip, optionalRoot) {
			const action = this.existingAction(clip, optionalRoot);

			if (action !== null) {
				this._deactivateAction(action);

				this._removeInactiveAction(action);
			}
		}

	}

	AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);

	class Uniform {
		constructor(value) {
			if (typeof value === 'string') {
				console.warn('THREE.Uniform: Type parameter is no longer needed.');
				value = arguments[1];
			}

			this.value = value;
		}

		clone() {
			return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
		}

	}

	class InstancedInterleavedBuffer extends InterleavedBuffer {
		constructor(array, stride, meshPerAttribute = 1) {
			super(array, stride);
			this.meshPerAttribute = meshPerAttribute || 1;
		}

		copy(source) {
			super.copy(source);
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		}

		clone(data) {
			const ib = super.clone(data);
			ib.meshPerAttribute = this.meshPerAttribute;
			return ib;
		}

		toJSON(data) {
			const json = super.toJSON(data);
			json.isInstancedInterleavedBuffer = true;
			json.meshPerAttribute = this.meshPerAttribute;
			return json;
		}

	}

	InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	class GLBufferAttribute {
		constructor(buffer, type, itemSize, elementSize, count) {
			this.buffer = buffer;
			this.type = type;
			this.itemSize = itemSize;
			this.elementSize = elementSize;
			this.count = count;
			this.version = 0;
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setBuffer(buffer) {
			this.buffer = buffer;
			return this;
		}

		setType(type, elementSize) {
			this.type = type;
			this.elementSize = elementSize;
			return this;
		}

		setItemSize(itemSize) {
			this.itemSize = itemSize;
			return this;
		}

		setCount(count) {
			this.count = count;
			return this;
		}

	}

	GLBufferAttribute.prototype.isGLBufferAttribute = true;

	class Raycaster {
		constructor(origin, direction, near = 0, far = Infinity) {
			this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)

			this.near = near;
			this.far = far;
			this.camera = null;
			this.layers = new Layers();
			this.params = {
				Mesh: {},
				Line: {
					threshold: 1
				},
				LOD: {},
				Points: {
					threshold: 1
				},
				Sprite: {}
			};
		}

		set(origin, direction) {
			// direction is assumed to be normalized (for accurate distance calculations)
			this.ray.set(origin, direction);
		}

		setFromCamera(coords, camera) {
			if (camera && camera.isPerspectiveCamera) {
				this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
				this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
				this.camera = camera;
			} else if (camera && camera.isOrthographicCamera) {
				this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera

				this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
				this.camera = camera;
			} else {
				console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
			}
		}

		intersectObject(object, recursive = false, intersects = []) {
			intersectObject(object, this, intersects, recursive);
			intersects.sort(ascSort);
			return intersects;
		}

		intersectObjects(objects, recursive = false, intersects = []) {
			for (let i = 0, l = objects.length; i < l; i++) {
				intersectObject(objects[i], this, intersects, recursive);
			}

			intersects.sort(ascSort);
			return intersects;
		}

	}

	function ascSort(a, b) {
		return a.distance - b.distance;
	}

	function intersectObject(object, raycaster, intersects, recursive) {
		if (object.layers.test(raycaster.layers)) {
			object.raycast(raycaster, intersects);
		}

		if (recursive === true) {
			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				intersectObject(children[i], raycaster, intersects, true);
			}
		}
	}

	/**
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axis.
	 */

	class Spherical {
		constructor(radius = 1, phi = 0, theta = 0) {
			this.radius = radius;
			this.phi = phi; // polar angle

			this.theta = theta; // azimuthal angle

			return this;
		}

		set(radius, phi, theta) {
			this.radius = radius;
			this.phi = phi;
			this.theta = theta;
			return this;
		}

		copy(other) {
			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;
			return this;
		} // restrict phi to be betwee EPS and PI-EPS


		makeSafe() {
			const EPS = 0.000001;
			this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
			return this;
		}

		setFromVector3(v) {
			return this.setFromCartesianCoords(v.x, v.y, v.z);
		}

		setFromCartesianCoords(x, y, z) {
			this.radius = Math.sqrt(x * x + y * y + z * z);

			if (this.radius === 0) {
				this.theta = 0;
				this.phi = 0;
			} else {
				this.theta = Math.atan2(x, z);
				this.phi = Math.acos(clamp(y / this.radius, -1, 1));
			}

			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	/**
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 */
	class Cylindrical {
		constructor(radius = 1, theta = 0, y = 0) {
			this.radius = radius; // distance from the origin to a point in the x-z plane

			this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis

			this.y = y; // height above the x-z plane

			return this;
		}

		set(radius, theta, y) {
			this.radius = radius;
			this.theta = theta;
			this.y = y;
			return this;
		}

		copy(other) {
			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;
			return this;
		}

		setFromVector3(v) {
			return this.setFromCartesianCoords(v.x, v.y, v.z);
		}

		setFromCartesianCoords(x, y, z) {
			this.radius = Math.sqrt(x * x + z * z);
			this.theta = Math.atan2(x, z);
			this.y = y;
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	const _vector$4 = /*@__PURE__*/new Vector2();

	class Box2 {
		constructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {
			this.min = min;
			this.max = max;
		}

		set(min, max) {
			this.min.copy(min);
			this.max.copy(max);
			return this;
		}

		setFromPoints(points) {
			this.makeEmpty();

			for (let i = 0, il = points.length; i < il; i++) {
				this.expandByPoint(points[i]);
			}

			return this;
		}

		setFromCenterAndSize(center, size) {
			const halfSize = _vector$4.copy(size).multiplyScalar(0.5);

			this.min.copy(center).sub(halfSize);
			this.max.copy(center).add(halfSize);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(box) {
			this.min.copy(box.min);
			this.max.copy(box.max);
			return this;
		}

		makeEmpty() {
			this.min.x = this.min.y = +Infinity;
			this.max.x = this.max.y = -Infinity;
			return this;
		}

		isEmpty() {
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
			return this.max.x < this.min.x || this.max.y < this.min.y;
		}

		getCenter(target) {
			if (target === undefined) {
				console.warn('THREE.Box2: .getCenter() target is now required');
				target = new Vector2();
			}

			return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
		}

		getSize(target) {
			if (target === undefined) {
				console.warn('THREE.Box2: .getSize() target is now required');
				target = new Vector2();
			}

			return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
		}

		expandByPoint(point) {
			this.min.min(point);
			this.max.max(point);
			return this;
		}

		expandByVector(vector) {
			this.min.sub(vector);
			this.max.add(vector);
			return this;
		}

		expandByScalar(scalar) {
			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);
			return this;
		}

		containsPoint(point) {
			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
		}

		containsBox(box) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
		}

		getParameter(point, target) {
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
			if (target === undefined) {
				console.warn('THREE.Box2: .getParameter() target is now required');
				target = new Vector2();
			}

			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
		}

		intersectsBox(box) {
			// using 4 splitting planes to rule out intersections
			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
		}

		clampPoint(point, target) {
			if (target === undefined) {
				console.warn('THREE.Box2: .clampPoint() target is now required');
				target = new Vector2();
			}

			return target.copy(point).clamp(this.min, this.max);
		}

		distanceToPoint(point) {
			const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);

			return clampedPoint.sub(point).length();
		}

		intersect(box) {
			this.min.max(box.min);
			this.max.min(box.max);
			return this;
		}

		union(box) {
			this.min.min(box.min);
			this.max.max(box.max);
			return this;
		}

		translate(offset) {
			this.min.add(offset);
			this.max.add(offset);
			return this;
		}

		equals(box) {
			return box.min.equals(this.min) && box.max.equals(this.max);
		}

	}

	Box2.prototype.isBox2 = true;

	const _startP = /*@__PURE__*/new Vector3();

	const _startEnd = /*@__PURE__*/new Vector3();

	class Line3 {
		constructor(start = new Vector3(), end = new Vector3()) {
			this.start = start;
			this.end = end;
		}

		set(start, end) {
			this.start.copy(start);
			this.end.copy(end);
			return this;
		}

		copy(line) {
			this.start.copy(line.start);
			this.end.copy(line.end);
			return this;
		}

		getCenter(target) {
			if (target === undefined) {
				console.warn('THREE.Line3: .getCenter() target is now required');
				target = new Vector3();
			}

			return target.addVectors(this.start, this.end).multiplyScalar(0.5);
		}

		delta(target) {
			if (target === undefined) {
				console.warn('THREE.Line3: .delta() target is now required');
				target = new Vector3();
			}

			return target.subVectors(this.end, this.start);
		}

		distanceSq() {
			return this.start.distanceToSquared(this.end);
		}

		distance() {
			return this.start.distanceTo(this.end);
		}

		at(t, target) {
			if (target === undefined) {
				console.warn('THREE.Line3: .at() target is now required');
				target = new Vector3();
			}

			return this.delta(target).multiplyScalar(t).add(this.start);
		}

		closestPointToPointParameter(point, clampToLine) {
			_startP.subVectors(point, this.start);

			_startEnd.subVectors(this.end, this.start);

			const startEnd2 = _startEnd.dot(_startEnd);

			const startEnd_startP = _startEnd.dot(_startP);

			let t = startEnd_startP / startEnd2;

			if (clampToLine) {
				t = clamp(t, 0, 1);
			}

			return t;
		}

		closestPointToPoint(point, clampToLine, target) {
			const t = this.closestPointToPointParameter(point, clampToLine);

			if (target === undefined) {
				console.warn('THREE.Line3: .closestPointToPoint() target is now required');
				target = new Vector3();
			}

			return this.delta(target).multiplyScalar(t).add(this.start);
		}

		applyMatrix4(matrix) {
			this.start.applyMatrix4(matrix);
			this.end.applyMatrix4(matrix);
			return this;
		}

		equals(line) {
			return line.start.equals(this.start) && line.end.equals(this.end);
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	class ImmediateRenderObject extends Object3D {
		constructor(material) {
			super();
			this.material = material;

			this.render = function ()
			/* renderCallback */
			{};

			this.hasPositions = false;
			this.hasNormals = false;
			this.hasColors = false;
			this.hasUvs = false;
			this.positionArray = null;
			this.normalArray = null;
			this.colorArray = null;
			this.uvArray = null;
			this.count = 0;
		}

	}

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	const _vector$3 = /*@__PURE__*/new Vector3();

	class SpotLightHelper extends Object3D {
		constructor(light, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			const geometry = new BufferGeometry();
			const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

			for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
				const p1 = i / l * Math.PI * 2;
				const p2 = j / l * Math.PI * 2;
				positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
			}

			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			const material = new LineBasicMaterial({
				fog: false,
				toneMapped: false
			});
			this.cone = new LineSegments(geometry, material);
			this.add(this.cone);
			this.update();
		}

		dispose() {
			this.cone.geometry.dispose();
			this.cone.material.dispose();
		}

		update() {
			this.light.updateMatrixWorld();
			const coneLength = this.light.distance ? this.light.distance : 1000;
			const coneWidth = coneLength * Math.tan(this.light.angle);
			this.cone.scale.set(coneWidth, coneWidth, coneLength);

			_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);

			this.cone.lookAt(_vector$3);

			if (this.color !== undefined) {
				this.cone.material.color.set(this.color);
			} else {
				this.cone.material.color.copy(this.light.color);
			}
		}

	}

	const _vector$2 = /*@__PURE__*/new Vector3();

	const _boneMatrix = /*@__PURE__*/new Matrix4();

	const _matrixWorldInv = /*@__PURE__*/new Matrix4();

	class SkeletonHelper extends LineSegments {
		constructor(object) {
			const bones = getBoneList(object);
			const geometry = new BufferGeometry();
			const vertices = [];
			const colors = [];
			const color1 = new Color(0, 0, 1);
			const color2 = new Color(0, 1, 0);

			for (let i = 0; i < bones.length; i++) {
				const bone = bones[i];

				if (bone.parent && bone.parent.isBone) {
					vertices.push(0, 0, 0);
					vertices.push(0, 0, 0);
					colors.push(color1.r, color1.g, color1.b);
					colors.push(color2.r, color2.g, color2.b);
				}
			}

			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				depthTest: false,
				depthWrite: false,
				toneMapped: false,
				transparent: true
			});
			super(geometry, material);
			this.type = 'SkeletonHelper';
			this.isSkeletonHelper = true;
			this.root = object;
			this.bones = bones;
			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;
		}

		updateMatrixWorld(force) {
			const bones = this.bones;
			const geometry = this.geometry;
			const position = geometry.getAttribute('position');

			_matrixWorldInv.copy(this.root.matrixWorld).invert();

			for (let i = 0, j = 0; i < bones.length; i++) {
				const bone = bones[i];

				if (bone.parent && bone.parent.isBone) {
					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);

					_vector$2.setFromMatrixPosition(_boneMatrix);

					position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);

					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);

					_vector$2.setFromMatrixPosition(_boneMatrix);

					position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
					j += 2;
				}
			}

			geometry.getAttribute('position').needsUpdate = true;
			super.updateMatrixWorld(force);
		}

	}

	function getBoneList(object) {
		const boneList = [];

		if (object && object.isBone) {
			boneList.push(object);
		}

		for (let i = 0; i < object.children.length; i++) {
			boneList.push.apply(boneList, getBoneList(object.children[i]));
		}

		return boneList;
	}

	class PointLightHelper extends Mesh {
		constructor(light, sphereSize, color) {
			const geometry = new SphereGeometry(sphereSize, 4, 2);
			const material = new MeshBasicMaterial({
				wireframe: true,
				fog: false,
				toneMapped: false
			});
			super(geometry, material);
			this.light = light;
			this.light.updateMatrixWorld();
			this.color = color;
			this.type = 'PointLightHelper';
			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.update();
			/*
			// TODO: delete this comment?
			const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
			const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
			const d = light.distance;
			if ( d === 0.0 ) {
				this.lightDistance.visible = false;
			} else {
				this.lightDistance.scale.set( d, d, d );
			}
			this.add( this.lightDistance );
			*/
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

		update() {
			if (this.color !== undefined) {
				this.material.color.set(this.color);
			} else {
				this.material.color.copy(this.light.color);
			}
			/*
			const d = this.light.distance;
				if ( d === 0.0 ) {
					this.lightDistance.visible = false;
				} else {
					this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );
				}
			*/

		}

	}

	const _vector$1 = /*@__PURE__*/new Vector3();

	const _color1 = /*@__PURE__*/new Color();

	const _color2 = /*@__PURE__*/new Color();

	class HemisphereLightHelper extends Object3D {
		constructor(light, size, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			const geometry = new OctahedronGeometry(size);
			geometry.rotateY(Math.PI * 0.5);
			this.material = new MeshBasicMaterial({
				wireframe: true,
				fog: false,
				toneMapped: false
			});
			if (this.color === undefined) this.material.vertexColors = true;
			const position = geometry.getAttribute('position');
			const colors = new Float32Array(position.count * 3);
			geometry.setAttribute('color', new BufferAttribute(colors, 3));
			this.add(new Mesh(geometry, this.material));
			this.update();
		}

		dispose() {
			this.children[0].geometry.dispose();
			this.children[0].material.dispose();
		}

		update() {
			const mesh = this.children[0];

			if (this.color !== undefined) {
				this.material.color.set(this.color);
			} else {
				const colors = mesh.geometry.getAttribute('color');

				_color1.copy(this.light.color);

				_color2.copy(this.light.groundColor);

				for (let i = 0, l = colors.count; i < l; i++) {
					const color = i < l / 2 ? _color1 : _color2;
					colors.setXYZ(i, color.r, color.g, color.b);
				}

				colors.needsUpdate = true;
			}

			mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
		}

	}

	class GridHelper extends LineSegments {
		constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {
			color1 = new Color(color1);
			color2 = new Color(color2);
			const center = divisions / 2;
			const step = size / divisions;
			const halfSize = size / 2;
			const vertices = [],
						colors = [];

			for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
				vertices.push(-halfSize, 0, k, halfSize, 0, k);
				vertices.push(k, 0, -halfSize, k, 0, halfSize);
				const color = i === center ? color1 : color2;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
			}

			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'GridHelper';
		}

	}

	class PolarGridHelper extends LineSegments {
		constructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {
			color1 = new Color(color1);
			color2 = new Color(color2);
			const vertices = [];
			const colors = []; // create the radials

			for (let i = 0; i <= radials; i++) {
				const v = i / radials * (Math.PI * 2);
				const x = Math.sin(v) * radius;
				const z = Math.cos(v) * radius;
				vertices.push(0, 0, 0);
				vertices.push(x, 0, z);
				const color = i & 1 ? color1 : color2;
				colors.push(color.r, color.g, color.b);
				colors.push(color.r, color.g, color.b);
			} // create the circles


			for (let i = 0; i <= circles; i++) {
				const color = i & 1 ? color1 : color2;
				const r = radius - radius / circles * i;

				for (let j = 0; j < divisions; j++) {
					// first vertex
					let v = j / divisions * (Math.PI * 2);
					let x = Math.sin(v) * r;
					let z = Math.cos(v) * r;
					vertices.push(x, 0, z);
					colors.push(color.r, color.g, color.b); // second vertex

					v = (j + 1) / divisions * (Math.PI * 2);
					x = Math.sin(v) * r;
					z = Math.cos(v) * r;
					vertices.push(x, 0, z);
					colors.push(color.r, color.g, color.b);
				}
			}

			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'PolarGridHelper';
		}

	}

	const _v1 = /*@__PURE__*/new Vector3();

	const _v2 = /*@__PURE__*/new Vector3();

	const _v3 = /*@__PURE__*/new Vector3();

	class DirectionalLightHelper extends Object3D {
		constructor(light, size, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			if (size === undefined) size = 1;
			let geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));
			const material = new LineBasicMaterial({
				fog: false,
				toneMapped: false
			});
			this.lightPlane = new Line(geometry, material);
			this.add(this.lightPlane);
			geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
			this.targetLine = new Line(geometry, material);
			this.add(this.targetLine);
			this.update();
		}

		dispose() {
			this.lightPlane.geometry.dispose();
			this.lightPlane.material.dispose();
			this.targetLine.geometry.dispose();
			this.targetLine.material.dispose();
		}

		update() {
			_v1.setFromMatrixPosition(this.light.matrixWorld);

			_v2.setFromMatrixPosition(this.light.target.matrixWorld);

			_v3.subVectors(_v2, _v1);

			this.lightPlane.lookAt(_v2);

			if (this.color !== undefined) {
				this.lightPlane.material.color.set(this.color);
				this.targetLine.material.color.set(this.color);
			} else {
				this.lightPlane.material.color.copy(this.light.color);
				this.targetLine.material.color.copy(this.light.color);
			}

			this.targetLine.lookAt(_v2);
			this.targetLine.scale.z = _v3.length();
		}

	}

	const _vector = /*@__PURE__*/new Vector3();

	const _camera = /*@__PURE__*/new Camera();
	/**
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */


	class CameraHelper extends LineSegments {
		constructor(camera) {
			const geometry = new BufferGeometry();
			const material = new LineBasicMaterial({
				color: 0xffffff,
				vertexColors: true,
				toneMapped: false
			});
			const vertices = [];
			const colors = [];
			const pointMap = {}; // colors

			const colorFrustum = new Color(0xffaa00);
			const colorCone = new Color(0xff0000);
			const colorUp = new Color(0x00aaff);
			const colorTarget = new Color(0xffffff);
			const colorCross = new Color(0x333333); // near

			addLine('n1', 'n2', colorFrustum);
			addLine('n2', 'n4', colorFrustum);
			addLine('n4', 'n3', colorFrustum);
			addLine('n3', 'n1', colorFrustum); // far

			addLine('f1', 'f2', colorFrustum);
			addLine('f2', 'f4', colorFrustum);
			addLine('f4', 'f3', colorFrustum);
			addLine('f3', 'f1', colorFrustum); // sides

			addLine('n1', 'f1', colorFrustum);
			addLine('n2', 'f2', colorFrustum);
			addLine('n3', 'f3', colorFrustum);
			addLine('n4', 'f4', colorFrustum); // cone

			addLine('p', 'n1', colorCone);
			addLine('p', 'n2', colorCone);
			addLine('p', 'n3', colorCone);
			addLine('p', 'n4', colorCone); // up

			addLine('u1', 'u2', colorUp);
			addLine('u2', 'u3', colorUp);
			addLine('u3', 'u1', colorUp); // target

			addLine('c', 't', colorTarget);
			addLine('p', 'c', colorCross); // cross

			addLine('cn1', 'cn2', colorCross);
			addLine('cn3', 'cn4', colorCross);
			addLine('cf1', 'cf2', colorCross);
			addLine('cf3', 'cf4', colorCross);

			function addLine(a, b, color) {
				addPoint(a, color);
				addPoint(b, color);
			}

			function addPoint(id, color) {
				vertices.push(0, 0, 0);
				colors.push(color.r, color.g, color.b);

				if (pointMap[id] === undefined) {
					pointMap[id] = [];
				}

				pointMap[id].push(vertices.length / 3 - 1);
			}

			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			super(geometry, material);
			this.type = 'CameraHelper';
			this.camera = camera;
			if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;
			this.pointMap = pointMap;
			this.update();
		}

		update() {
			const geometry = this.geometry;
			const pointMap = this.pointMap;
			const w = 1,
						h = 1; // we need just camera projection matrix inverse
			// world matrix must be identity

			_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target


			setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
			setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near

			setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
			setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
			setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
			setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far

			setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
			setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
			setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
			setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up

			setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
			setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
			setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross

			setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
			setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
			setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);
			setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);
			setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);
			setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);
			setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);
			setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
			geometry.getAttribute('position').needsUpdate = true;
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

	}

	function setPoint(point, pointMap, geometry, camera, x, y, z) {
		_vector.set(x, y, z).unproject(camera);

		const points = pointMap[point];

		if (points !== undefined) {
			const position = geometry.getAttribute('position');

			for (let i = 0, l = points.length; i < l; i++) {
				position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
			}
		}
	}

	const _box = /*@__PURE__*/new Box3();

	class BoxHelper extends LineSegments {
		constructor(object, color = 0xffff00) {
			const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
			const positions = new Float32Array(8 * 3);
			const geometry = new BufferGeometry();
			geometry.setIndex(new BufferAttribute(indices, 1));
			geometry.setAttribute('position', new BufferAttribute(positions, 3));
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.object = object;
			this.type = 'BoxHelper';
			this.matrixAutoUpdate = false;
			this.update();
		}

		update(object) {
			if (object !== undefined) {
				console.warn('THREE.BoxHelper: .update() has no longer arguments.');
			}

			if (this.object !== undefined) {
				_box.setFromObject(this.object);
			}

			if (_box.isEmpty()) return;
			const min = _box.min;
			const max = _box.max;
			/*
				5____4
			1/___0/|
			| 6__|_7
			2/___3/
				0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			const position = this.geometry.attributes.position;
			const array = position.array;
			array[0] = max.x;
			array[1] = max.y;
			array[2] = max.z;
			array[3] = min.x;
			array[4] = max.y;
			array[5] = max.z;
			array[6] = min.x;
			array[7] = min.y;
			array[8] = max.z;
			array[9] = max.x;
			array[10] = min.y;
			array[11] = max.z;
			array[12] = max.x;
			array[13] = max.y;
			array[14] = min.z;
			array[15] = min.x;
			array[16] = max.y;
			array[17] = min.z;
			array[18] = min.x;
			array[19] = min.y;
			array[20] = min.z;
			array[21] = max.x;
			array[22] = min.y;
			array[23] = min.z;
			position.needsUpdate = true;
			this.geometry.computeBoundingSphere();
		}

		setFromObject(object) {
			this.object = object;
			this.update();
			return this;
		}

		copy(source) {
			LineSegments.prototype.copy.call(this, source);
			this.object = source.object;
			return this;
		}

	}

	class Box3Helper extends LineSegments {
		constructor(box, color = 0xffff00) {
			const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
			const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
			const geometry = new BufferGeometry();
			geometry.setIndex(new BufferAttribute(indices, 1));
			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.box = box;
			this.type = 'Box3Helper';
			this.geometry.computeBoundingSphere();
		}

		updateMatrixWorld(force) {
			const box = this.box;
			if (box.isEmpty()) return;
			box.getCenter(this.position);
			box.getSize(this.scale);
			this.scale.multiplyScalar(0.5);
			super.updateMatrixWorld(force);
		}

	}

	class PlaneHelper extends Line {
		constructor(plane, size = 1, hex = 0xffff00) {
			const color = hex;
			const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			geometry.computeBoundingSphere();
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.type = 'PlaneHelper';
			this.plane = plane;
			this.size = size;
			const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
			const geometry2 = new BufferGeometry();
			geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));
			geometry2.computeBoundingSphere();
			this.add(new Mesh(geometry2, new MeshBasicMaterial({
				color: color,
				opacity: 0.2,
				transparent: true,
				depthWrite: false,
				toneMapped: false
			})));
		}

		updateMatrixWorld(force) {
			let scale = -this.plane.constant;
			if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter

			this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
			this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

			this.lookAt(this.plane.normal);
			super.updateMatrixWorld(force);
		}

	}

	const _axis = /*@__PURE__*/new Vector3();

	let _lineGeometry, _coneGeometry;

	class ArrowHelper extends Object3D {
		// dir is assumed to be normalized
		constructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {
			super();
			this.type = 'ArrowHelper';

			if (_lineGeometry === undefined) {
				_lineGeometry = new BufferGeometry();

				_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));

				_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);

				_coneGeometry.translate(0, -0.5, 0);
			}

			this.position.copy(origin);
			this.line = new Line(_lineGeometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.line.matrixAutoUpdate = false;
			this.add(this.line);
			this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.cone.matrixAutoUpdate = false;
			this.add(this.cone);
			this.setDirection(dir);
			this.setLength(length, headLength, headWidth);
		}

		setDirection(dir) {
			// dir is assumed to be normalized
			if (dir.y > 0.99999) {
				this.quaternion.set(0, 0, 0, 1);
			} else if (dir.y < -0.99999) {
				this.quaternion.set(1, 0, 0, 0);
			} else {
				_axis.set(dir.z, 0, -dir.x).normalize();

				const radians = Math.acos(dir.y);
				this.quaternion.setFromAxisAngle(_axis, radians);
			}
		}

		setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
			this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458

			this.line.updateMatrix();
			this.cone.scale.set(headWidth, headLength, headWidth);
			this.cone.position.y = length;
			this.cone.updateMatrix();
		}

		setColor(color) {
			this.line.material.color.set(color);
			this.cone.material.color.set(color);
		}

		copy(source) {
			super.copy(source, false);
			this.line.copy(source.line);
			this.cone.copy(source.cone);
			return this;
		}

	}

	class AxesHelper extends LineSegments {
		constructor(size = 1) {
			const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];
			const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];
			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'AxesHelper';
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

	}

	const _floatView = new Float32Array(1);

	const _int32View = new Int32Array(_floatView.buffer);

	class DataUtils {
		// Converts float32 to float16 (stored as uint16 value).
		static toHalfFloat(val) {
			// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410

			/* This method is faster than the OpenEXR implementation (very often
			* used, eg. in Ogre), with the additional benefit of rounding, inspired
			* by James Tursa?s half-precision code. */
			_floatView[0] = val;
			const x = _int32View[0];
			let bits = x >> 16 & 0x8000;
			/* Get the sign */

			let m = x >> 12 & 0x07ff;
			/* Keep one extra bit for rounding */

			const e = x >> 23 & 0xff;
			/* Using int is faster here */

			/* If zero, or denormal, or exponent underflows too much for a denormal
				* half, return signed zero. */

			if (e < 103) return bits;
			/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */

			if (e > 142) {
				bits |= 0x7c00;
				/* If exponent was 0xff and one mantissa bit was set, it means NaN,
							* not Inf, so make sure we set one mantissa bit too. */

				bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
				return bits;
			}
			/* If exponent underflows but not too much, return a denormal */


			if (e < 113) {
				m |= 0x0800;
				/* Extra rounding may overflow and set mantissa to 0 and exponent
					* to 1, which is OK. */

				bits |= (m >> 114 - e) + (m >> 113 - e & 1);
				return bits;
			}

			bits |= e - 112 << 10 | m >> 1;
			/* Extra rounding. An overflow will set mantissa to 0 and increment
				* the exponent, which is OK. */

			bits += m & 1;
			return bits;
		}

	}

	const LOD_MIN = 4;
	const LOD_MAX = 8;
	const SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are
	// chosen to approximate a Trowbridge-Reitz distribution function times the
	// geometric shadowing function. These sigma values squared must match the
	// variance #defines in cube_uv_reflection_fragment.glsl.js.

	const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
	const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer
	// samples and exit early, but not recompile the shader.

	const MAX_SAMPLES = 20;
	const ENCODINGS = {
		[LinearEncoding]: 0,
		[sRGBEncoding]: 1,
		[RGBEEncoding]: 2,
		[RGBM7Encoding]: 3,
		[RGBM16Encoding]: 4,
		[RGBDEncoding]: 5,
		[GammaEncoding]: 6
	};
	const backgroundMaterial = new MeshBasicMaterial({
		side: BackSide,
		depthWrite: false,
		depthTest: false
	});
	const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);

	const _flatCamera = /*@__PURE__*/new OrthographicCamera();

	const {
		_lodPlanes,
		_sizeLods,
		_sigmas
	} = /*@__PURE__*/_createPlanes();

	const _clearColor = /*@__PURE__*/new Color();

	let _oldTarget = null; // Golden Ratio

	const PHI = (1 + Math.sqrt(5)) / 2;
	const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the
	// same axis), used as axis directions evenly spread on a sphere.

	const _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];
	/**
	 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
	 * (PMREM) from a cubeMap environment texture. This allows different levels of
	 * blur to be quickly accessed based on material roughness. It is packed into a
	 * special CubeUV format that allows us to perform custom interpolation so that
	 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
	 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
	 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
	 * higher roughness levels. In this way we maintain resolution to smoothly
	 * interpolate diffuse lighting while limiting sampling computation.
	 *
	 * Paper: Fast, Accurate Image-Based Lighting
	 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
	*/

	function convertLinearToRGBE(color) {
		const maxComponent = Math.max(color.r, color.g, color.b);
		const fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);
		color.multiplyScalar(Math.pow(2.0, -fExp));
		const alpha = (fExp + 128.0) / 255.0;
		return alpha;
	}

	class PMREMGenerator {
		constructor(renderer) {
			this._renderer = renderer;
			this._pingPongRenderTarget = null;
			this._blurMaterial = _getBlurShader(MAX_SAMPLES);
			this._equirectShader = null;
			this._cubemapShader = null;

			this._compileMaterial(this._blurMaterial);
		}
		/**
		 * Generates a PMREM from a supplied Scene, which can be faster than using an
		 * image if networking bandwidth is low. Optional sigma specifies a blur radius
		 * in radians to be applied to the scene before PMREM generation. Optional near
		 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
		 * is placed at the origin).
		 */


		fromScene(scene, sigma = 0, near = 0.1, far = 100) {
			_oldTarget = this._renderer.getRenderTarget();

			const cubeUVRenderTarget = this._allocateTargets();

			this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);

			if (sigma > 0) {
				this._blur(cubeUVRenderTarget, 0, 0, sigma);
			}

			this._applyPMREM(cubeUVRenderTarget);

			this._cleanup(cubeUVRenderTarget);

			return cubeUVRenderTarget;
		}
		/**
		 * Generates a PMREM from an equirectangular texture, which can be either LDR
		 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
		 * as this matches best with the 256 x 256 cubemap output.
		 */


		fromEquirectangular(equirectangular) {
			return this._fromTexture(equirectangular);
		}
		/**
		 * Generates a PMREM from an cubemap texture, which can be either LDR
		 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
		 * as this matches best with the 256 x 256 cubemap output.
		 */


		fromCubemap(cubemap) {
			return this._fromTexture(cubemap);
		}
		/**
		 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */


		compileCubemapShader() {
			if (this._cubemapShader === null) {
				this._cubemapShader = _getCubemapShader();

				this._compileMaterial(this._cubemapShader);
			}
		}
		/**
		 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */


		compileEquirectangularShader() {
			if (this._equirectShader === null) {
				this._equirectShader = _getEquirectShader();

				this._compileMaterial(this._equirectShader);
			}
		}
		/**
		 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
		 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
		 * one of them will cause any others to also become unusable.
		 */


		dispose() {
			this._blurMaterial.dispose();

			if (this._cubemapShader !== null) this._cubemapShader.dispose();
			if (this._equirectShader !== null) this._equirectShader.dispose();

			for (let i = 0; i < _lodPlanes.length; i++) {
				_lodPlanes[i].dispose();
			}
		} // private interface


		_cleanup(outputTarget) {
			this._pingPongRenderTarget.dispose();

			this._renderer.setRenderTarget(_oldTarget);

			outputTarget.scissorTest = false;

			_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
		}

		_fromTexture(texture) {
			_oldTarget = this._renderer.getRenderTarget();

			const cubeUVRenderTarget = this._allocateTargets(texture);

			this._textureToCubeUV(texture, cubeUVRenderTarget);

			this._applyPMREM(cubeUVRenderTarget);

			this._cleanup(cubeUVRenderTarget);

			return cubeUVRenderTarget;
		}

		_allocateTargets(texture) {
			// warning: null texture is valid
			const params = {
				magFilter: NearestFilter,
				minFilter: NearestFilter,
				generateMipmaps: false,
				type: UnsignedByteType,
				format: RGBEFormat,
				encoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,
				depthBuffer: false
			};

			const cubeUVRenderTarget = _createRenderTarget(params);

			cubeUVRenderTarget.depthBuffer = texture ? false : true;
			this._pingPongRenderTarget = _createRenderTarget(params);
			return cubeUVRenderTarget;
		}

		_compileMaterial(material) {
			const tmpMesh = new Mesh(_lodPlanes[0], material);

			this._renderer.compile(tmpMesh, _flatCamera);
		}

		_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
			const fov = 90;
			const aspect = 1;
			const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);
			const upSign = [1, -1, 1, 1, 1, 1];
			const forwardSign = [1, 1, 1, -1, -1, -1];
			const renderer = this._renderer;
			const originalAutoClear = renderer.autoClear;
			const outputEncoding = renderer.outputEncoding;
			const toneMapping = renderer.toneMapping;
			renderer.getClearColor(_clearColor);
			renderer.toneMapping = NoToneMapping;
			renderer.outputEncoding = LinearEncoding;
			renderer.autoClear = false;
			let useSolidColor = false;
			const background = scene.background;

			if (background) {
				if (background.isColor) {
					backgroundMaterial.color.copy(background).convertSRGBToLinear();
					scene.background = null;
					const alpha = convertLinearToRGBE(backgroundMaterial.color);
					backgroundMaterial.opacity = alpha;
					useSolidColor = true;
				}
			} else {
				backgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();
				const alpha = convertLinearToRGBE(backgroundMaterial.color);
				backgroundMaterial.opacity = alpha;
				useSolidColor = true;
			}

			for (let i = 0; i < 6; i++) {
				const col = i % 3;

				if (col == 0) {
					cubeCamera.up.set(0, upSign[i], 0);
					cubeCamera.lookAt(forwardSign[i], 0, 0);
				} else if (col == 1) {
					cubeCamera.up.set(0, 0, upSign[i]);
					cubeCamera.lookAt(0, forwardSign[i], 0);
				} else {
					cubeCamera.up.set(0, upSign[i], 0);
					cubeCamera.lookAt(0, 0, forwardSign[i]);
				}

				_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);

				renderer.setRenderTarget(cubeUVRenderTarget);

				if (useSolidColor) {
					renderer.render(backgroundBox, cubeCamera);
				}

				renderer.render(scene, cubeCamera);
			}

			renderer.toneMapping = toneMapping;
			renderer.outputEncoding = outputEncoding;
			renderer.autoClear = originalAutoClear;
		}

		_textureToCubeUV(texture, cubeUVRenderTarget) {
			const renderer = this._renderer;

			if (texture.isCubeTexture) {
				if (this._cubemapShader == null) {
					this._cubemapShader = _getCubemapShader();
				}
			} else {
				if (this._equirectShader == null) {
					this._equirectShader = _getEquirectShader();
				}
			}

			const material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;
			const mesh = new Mesh(_lodPlanes[0], material);
			const uniforms = material.uniforms;
			uniforms['envMap'].value = texture;

			if (!texture.isCubeTexture) {
				uniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);
			}

			uniforms['inputEncoding'].value = ENCODINGS[texture.encoding];
			uniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];

			_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);

			renderer.setRenderTarget(cubeUVRenderTarget);
			renderer.render(mesh, _flatCamera);
		}

		_applyPMREM(cubeUVRenderTarget) {
			const renderer = this._renderer;
			const autoClear = renderer.autoClear;
			renderer.autoClear = false;

			for (let i = 1; i < TOTAL_LODS; i++) {
				const sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);
				const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];

				this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
			}

			renderer.autoClear = autoClear;
		}
		/**
		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
		 * vertically and horizontally, but this breaks down on a cube. Here we apply
		 * the blur latitudinally (around the poles), and then longitudinally (towards
		 * the poles) to approximate the orthogonally-separable blur. It is least
		 * accurate at the poles, but still does a decent job.
		 */


		_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
			const pingPongRenderTarget = this._pingPongRenderTarget;

			this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);

			this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
		}

		_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
			const renderer = this._renderer;
			const blurMaterial = this._blurMaterial;

			if (direction !== 'latitudinal' && direction !== 'longitudinal') {
				console.error('blur direction must be either latitudinal or longitudinal!');
			} // Number of standard deviations at which to cut off the discrete approximation.


			const STANDARD_DEVIATIONS = 3;
			const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);
			const blurUniforms = blurMaterial.uniforms;
			const pixels = _sizeLods[lodIn] - 1;
			const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
			const sigmaPixels = sigmaRadians / radiansPerPixel;
			const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;

			if (samples > MAX_SAMPLES) {
				console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
			}

			const weights = [];
			let sum = 0;

			for (let i = 0; i < MAX_SAMPLES; ++i) {
				const x = i / sigmaPixels;
				const weight = Math.exp(-x * x / 2);
				weights.push(weight);

				if (i == 0) {
					sum += weight;
				} else if (i < samples) {
					sum += 2 * weight;
				}
			}

			for (let i = 0; i < weights.length; i++) {
				weights[i] = weights[i] / sum;
			}

			blurUniforms['envMap'].value = targetIn.texture;
			blurUniforms['samples'].value = samples;
			blurUniforms['weights'].value = weights;
			blurUniforms['latitudinal'].value = direction === 'latitudinal';

			if (poleAxis) {
				blurUniforms['poleAxis'].value = poleAxis;
			}

			blurUniforms['dTheta'].value = radiansPerPixel;
			blurUniforms['mipInt'].value = LOD_MAX - lodIn;
			blurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];
			blurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];
			const outputSize = _sizeLods[lodOut];
			const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);
			const y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);

			_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);

			renderer.setRenderTarget(targetOut);
			renderer.render(blurMesh, _flatCamera);
		}

	}

	function _isLDR(texture) {
		if (texture === undefined || texture.type !== UnsignedByteType) return false;
		return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;
	}

	function _createPlanes() {
		const _lodPlanes = [];
		const _sizeLods = [];
		const _sigmas = [];
		let lod = LOD_MAX;

		for (let i = 0; i < TOTAL_LODS; i++) {
			const sizeLod = Math.pow(2, lod);

			_sizeLods.push(sizeLod);

			let sigma = 1.0 / sizeLod;

			if (i > LOD_MAX - LOD_MIN) {
				sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];
			} else if (i == 0) {
				sigma = 0;
			}

			_sigmas.push(sigma);

			const texelSize = 1.0 / (sizeLod - 1);
			const min = -texelSize / 2;
			const max = 1 + texelSize / 2;
			const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
			const cubeFaces = 6;
			const vertices = 6;
			const positionSize = 3;
			const uvSize = 2;
			const faceIndexSize = 1;
			const position = new Float32Array(positionSize * vertices * cubeFaces);
			const uv = new Float32Array(uvSize * vertices * cubeFaces);
			const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);

			for (let face = 0; face < cubeFaces; face++) {
				const x = face % 3 * 2 / 3 - 1;
				const y = face > 2 ? 0 : -1;
				const coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];
				position.set(coordinates, positionSize * vertices * face);
				uv.set(uv1, uvSize * vertices * face);
				const fill = [face, face, face, face, face, face];
				faceIndex.set(fill, faceIndexSize * vertices * face);
			}

			const planes = new BufferGeometry();
			planes.setAttribute('position', new BufferAttribute(position, positionSize));
			planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
			planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));

			_lodPlanes.push(planes);

			if (lod > LOD_MIN) {
				lod--;
			}
		}

		return {
			_lodPlanes,
			_sizeLods,
			_sigmas
		};
	}

	function _createRenderTarget(params) {
		const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);
		cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
		cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
		cubeUVRenderTarget.scissorTest = true;
		return cubeUVRenderTarget;
	}

	function _setViewport(target, x, y, width, height) {
		target.viewport.set(x, y, width, height);
		target.scissor.set(x, y, width, height);
	}

	function _getBlurShader(maxSamples) {
		const weights = new Float32Array(maxSamples);
		const poleAxis = new Vector3(0, 1, 0);
		const shaderMaterial = new RawShaderMaterial({
			name: 'SphericalGaussianBlur',
			defines: {
				'n': maxSamples
			},
			uniforms: {
				'envMap': {
					value: null
				},
				'samples': {
					value: 1
				},
				'weights': {
					value: weights
				},
				'latitudinal': {
					value: false
				},
				'dTheta': {
					value: 0
				},
				'mipInt': {
					value: 0
				},
				'poleAxis': {
					value: poleAxis
				},
				'inputEncoding': {
					value: ENCODINGS[LinearEncoding]
				},
				'outputEncoding': {
					value: ENCODINGS[LinearEncoding]
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
		return shaderMaterial;
	}

	function _getEquirectShader() {
		const texelSize = new Vector2(1, 1);
		const shaderMaterial = new RawShaderMaterial({
			name: 'EquirectangularToCubeUV',
			uniforms: {
				'envMap': {
					value: null
				},
				'texelSize': {
					value: texelSize
				},
				'inputEncoding': {
					value: ENCODINGS[LinearEncoding]
				},
				'outputEncoding': {
					value: ENCODINGS[LinearEncoding]
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
		return shaderMaterial;
	}

	function _getCubemapShader() {
		const shaderMaterial = new RawShaderMaterial({
			name: 'CubemapToCubeUV',
			uniforms: {
				'envMap': {
					value: null
				},
				'inputEncoding': {
					value: ENCODINGS[LinearEncoding]
				},
				'outputEncoding': {
					value: ENCODINGS[LinearEncoding]
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${_getEncodings()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
		return shaderMaterial;
	}

	function _getCommonVertexShader() {
		return (
			/* glsl */
			`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
		);
	}

	function _getEncodings() {
		return (
			/* glsl */
			`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`
		);
	}

	const LineStrip = 0;
	const LinePieces = 1;
	const NoColors = 0;
	const FaceColors = 1;
	const VertexColors = 2;
	function MeshFaceMaterial(materials) {
		console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
		return materials;
	}
	function MultiMaterial(materials = []) {
		console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
		materials.isMultiMaterial = true;
		materials.materials = materials;

		materials.clone = function () {
			return materials.slice();
		};

		return materials;
	}
	function PointCloud(geometry, material) {
		console.warn('THREE.PointCloud has been renamed to THREE.Points.');
		return new Points(geometry, material);
	}
	function Particle(material) {
		console.warn('THREE.Particle has been renamed to THREE.Sprite.');
		return new Sprite(material);
	}
	function ParticleSystem(geometry, material) {
		console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
		return new Points(geometry, material);
	}
	function PointCloudMaterial(parameters) {
		console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function ParticleBasicMaterial(parameters) {
		console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function ParticleSystemMaterial(parameters) {
		console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function Vertex(x, y, z) {
		console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
		return new Vector3(x, y, z);
	} //

	function DynamicBufferAttribute(array, itemSize) {
		console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');
		return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);
	}
	function Int8Attribute(array, itemSize) {
		console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
		return new Int8BufferAttribute(array, itemSize);
	}
	function Uint8Attribute(array, itemSize) {
		console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
		return new Uint8BufferAttribute(array, itemSize);
	}
	function Uint8ClampedAttribute(array, itemSize) {
		console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
		return new Uint8ClampedBufferAttribute(array, itemSize);
	}
	function Int16Attribute(array, itemSize) {
		console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
		return new Int16BufferAttribute(array, itemSize);
	}
	function Uint16Attribute(array, itemSize) {
		console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
		return new Uint16BufferAttribute(array, itemSize);
	}
	function Int32Attribute(array, itemSize) {
		console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
		return new Int32BufferAttribute(array, itemSize);
	}
	function Uint32Attribute(array, itemSize) {
		console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
		return new Uint32BufferAttribute(array, itemSize);
	}
	function Float32Attribute(array, itemSize) {
		console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
		return new Float32BufferAttribute(array, itemSize);
	}
	function Float64Attribute(array, itemSize) {
		console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
		return new Float64BufferAttribute(array, itemSize);
	} //

	Curve.create = function (construct, getPoint) {
		console.log('THREE.Curve.create() has been deprecated');
		construct.prototype = Object.create(Curve.prototype);
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;
		return construct;
	}; //


	Path.prototype.fromPoints = function (points) {
		console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
		return this.setFromPoints(points);
	}; //


	function AxisHelper(size) {
		console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
		return new AxesHelper(size);
	}
	function BoundingBoxHelper(object, color) {
		console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
		return new BoxHelper(object, color);
	}
	function EdgesHelper(object, hex) {
		console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
		return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
			color: hex !== undefined ? hex : 0xffffff
		}));
	}

	GridHelper.prototype.setColors = function () {
		console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
	};

	SkeletonHelper.prototype.update = function () {
		console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
	};

	function WireframeHelper(object, hex) {
		console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
		return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
			color: hex !== undefined ? hex : 0xffffff
		}));
	} //

	Loader.prototype.extractUrlBase = function (url) {
		console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
		return LoaderUtils.extractUrlBase(url);
	};

	Loader.Handlers = {
		add: function ()
		/* regex, loader */
		{
			console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
		},
		get: function ()
		/* file */
		{
			console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
		}
	};
	function XHRLoader(manager) {
		console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
		return new FileLoader(manager);
	}
	function BinaryTextureLoader(manager) {
		console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
		return new DataTextureLoader(manager);
	} //

	Box2.prototype.center = function (optionalTarget) {
		console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	};

	Box2.prototype.empty = function () {
		console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	};

	Box2.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Box2.prototype.size = function (optionalTarget) {
		console.warn('THREE.Box2: .size() has been renamed to .getSize().');
		return this.getSize(optionalTarget);
	}; //


	Box3.prototype.center = function (optionalTarget) {
		console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	};

	Box3.prototype.empty = function () {
		console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	};

	Box3.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Box3.prototype.isIntersectionSphere = function (sphere) {
		console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
		return this.intersectsSphere(sphere);
	};

	Box3.prototype.size = function (optionalTarget) {
		console.warn('THREE.Box3: .size() has been renamed to .getSize().');
		return this.getSize(optionalTarget);
	}; //


	Sphere.prototype.empty = function () {
		console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	}; //


	Frustum.prototype.setFromMatrix = function (m) {
		console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');
		return this.setFromProjectionMatrix(m);
	}; //


	Line3.prototype.center = function (optionalTarget) {
		console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	}; //


	Matrix3.prototype.flattenToArrayOffset = function (array, offset) {
		console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
		return this.toArray(array, offset);
	};

	Matrix3.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
		return vector.applyMatrix3(this);
	};

	Matrix3.prototype.multiplyVector3Array = function ()
	/* a */
	{
		console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
	};

	Matrix3.prototype.applyToBufferAttribute = function (attribute) {
		console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');
		return attribute.applyMatrix3(this);
	};

	Matrix3.prototype.applyToVector3Array = function ()
	/* array, offset, length */
	{
		console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
	};

	Matrix3.prototype.getInverse = function (matrix) {
		console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
		return this.copy(matrix).invert();
	}; //


	Matrix4.prototype.extractPosition = function (m) {
		console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
		return this.copyPosition(m);
	};

	Matrix4.prototype.flattenToArrayOffset = function (array, offset) {
		console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
		return this.toArray(array, offset);
	};

	Matrix4.prototype.getPosition = function () {
		console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
		return new Vector3().setFromMatrixColumn(this, 3);
	};

	Matrix4.prototype.setRotationFromQuaternion = function (q) {
		console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
		return this.makeRotationFromQuaternion(q);
	};

	Matrix4.prototype.multiplyToArray = function () {
		console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
	};

	Matrix4.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.multiplyVector4 = function (vector) {
		console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.multiplyVector3Array = function ()
	/* a */
	{
		console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
	};

	Matrix4.prototype.rotateAxis = function (v) {
		console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
		v.transformDirection(this);
	};

	Matrix4.prototype.crossVector = function (vector) {
		console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.translate = function () {
		console.error('THREE.Matrix4: .translate() has been removed.');
	};

	Matrix4.prototype.rotateX = function () {
		console.error('THREE.Matrix4: .rotateX() has been removed.');
	};

	Matrix4.prototype.rotateY = function () {
		console.error('THREE.Matrix4: .rotateY() has been removed.');
	};

	Matrix4.prototype.rotateZ = function () {
		console.error('THREE.Matrix4: .rotateZ() has been removed.');
	};

	Matrix4.prototype.rotateByAxis = function () {
		console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
	};

	Matrix4.prototype.applyToBufferAttribute = function (attribute) {
		console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');
		return attribute.applyMatrix4(this);
	};

	Matrix4.prototype.applyToVector3Array = function ()
	/* array, offset, length */
	{
		console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
	};

	Matrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {
		console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
		return this.makePerspective(left, right, top, bottom, near, far);
	};

	Matrix4.prototype.getInverse = function (matrix) {
		console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
		return this.copy(matrix).invert();
	}; //


	Plane.prototype.isIntersectionLine = function (line) {
		console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
		return this.intersectsLine(line);
	}; //


	Quaternion.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
		return vector.applyQuaternion(this);
	};

	Quaternion.prototype.inverse = function () {
		console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');
		return this.invert();
	}; //


	Ray.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Ray.prototype.isIntersectionPlane = function (plane) {
		console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
		return this.intersectsPlane(plane);
	};

	Ray.prototype.isIntersectionSphere = function (sphere) {
		console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
		return this.intersectsSphere(sphere);
	}; //


	Triangle.prototype.area = function () {
		console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
		return this.getArea();
	};

	Triangle.prototype.barycoordFromPoint = function (point, target) {
		console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
		return this.getBarycoord(point, target);
	};

	Triangle.prototype.midpoint = function (target) {
		console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
		return this.getMidpoint(target);
	};

	Triangle.prototypenormal = function (target) {
		console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
		return this.getNormal(target);
	};

	Triangle.prototype.plane = function (target) {
		console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
		return this.getPlane(target);
	};

	Triangle.barycoordFromPoint = function (point, a, b, c, target) {
		console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
		return Triangle.getBarycoord(point, a, b, c, target);
	};

	Triangle.normal = function (a, b, c, target) {
		console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
		return Triangle.getNormal(a, b, c, target);
	}; //


	Shape.prototype.extractAllPoints = function (divisions) {
		console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
		return this.extractPoints(divisions);
	};

	Shape.prototype.extrude = function (options) {
		console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
		return new ExtrudeGeometry(this, options);
	};

	Shape.prototype.makeGeometry = function (options) {
		console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
		return new ShapeGeometry(this, options);
	}; //


	Vector2.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector2.prototype.distanceToManhattan = function (v) {
		console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
		return this.manhattanDistanceTo(v);
	};

	Vector2.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Vector3.prototype.setEulerFromRotationMatrix = function () {
		console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
	};

	Vector3.prototype.setEulerFromQuaternion = function () {
		console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
	};

	Vector3.prototype.getPositionFromMatrix = function (m) {
		console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
		return this.setFromMatrixPosition(m);
	};

	Vector3.prototype.getScaleFromMatrix = function (m) {
		console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
		return this.setFromMatrixScale(m);
	};

	Vector3.prototype.getColumnFromMatrix = function (index, matrix) {
		console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
		return this.setFromMatrixColumn(matrix, index);
	};

	Vector3.prototype.applyProjection = function (m) {
		console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
		return this.applyMatrix4(m);
	};

	Vector3.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector3.prototype.distanceToManhattan = function (v) {
		console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
		return this.manhattanDistanceTo(v);
	};

	Vector3.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Vector4.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector4.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Object3D.prototype.getChildByName = function (name) {
		console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
		return this.getObjectByName(name);
	};

	Object3D.prototype.renderDepth = function () {
		console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
	};

	Object3D.prototype.translate = function (distance, axis) {
		console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
		return this.translateOnAxis(axis, distance);
	};

	Object3D.prototype.getWorldRotation = function () {
		console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
	};

	Object3D.prototype.applyMatrix = function (matrix) {
		console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');
		return this.applyMatrix4(matrix);
	};

	Object.defineProperties(Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
				return this.rotation.order;
			},
			set: function (value) {
				console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
			},
			set: function () {
				console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
			}
		}
	});

	Mesh.prototype.setDrawMode = function () {
		console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
	};

	Object.defineProperties(Mesh.prototype, {
		drawMode: {
			get: function () {
				console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');
				return TrianglesDrawMode;
			},
			set: function () {
				console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
			}
		}
	});

	SkinnedMesh.prototype.initBones = function () {
		console.error('THREE.SkinnedMesh: initBones() has been removed.');
	}; //


	PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {
		console.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');
		if (filmGauge !== undefined) this.filmGauge = filmGauge;
		this.setFocalLength(focalLength);
	}; //


	Object.defineProperties(Light.prototype, {
		onlyShadow: {
			set: function () {
				console.warn('THREE.Light: .onlyShadow has been removed.');
			}
		},
		shadowCameraFov: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function () {
				console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
			}
		},
		shadowBias: {
			set: function (value) {
				console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function () {
				console.warn('THREE.Light: .shadowDarkness has been removed.');
			}
		},
		shadowMapWidth: {
			set: function (value) {
				console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function (value) {
				console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
				this.shadow.mapSize.height = value;
			}
		}
	}); //

	Object.defineProperties(BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
				return this.array.length;
			}
		},
		dynamic: {
			get: function () {
				console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
				return this.usage === DynamicDrawUsage;
			},
			set: function ()
			/* value */
			{
				console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
				this.setUsage(DynamicDrawUsage);
			}
		}
	});

	BufferAttribute.prototype.setDynamic = function (value) {
		console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');
		this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
		return this;
	};

	BufferAttribute.prototype.copyIndicesArray = function ()
	/* indices */
	{
		console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
	}, BufferAttribute.prototype.setArray = function ()
	/* array */
	{
		console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
	}; //

	BufferGeometry.prototype.addIndex = function (index) {
		console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
		this.setIndex(index);
	};

	BufferGeometry.prototype.addAttribute = function (name, attribute) {
		console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');

		if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
			console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
			return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
		}

		if (name === 'index') {
			console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
			this.setIndex(attribute);
			return this;
		}

		return this.setAttribute(name, attribute);
	};

	BufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {
		if (indexOffset !== undefined) {
			console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
		}

		console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
		this.addGroup(start, count);
	};

	BufferGeometry.prototype.clearDrawCalls = function () {
		console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
		this.clearGroups();
	};

	BufferGeometry.prototype.computeOffsets = function () {
		console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
	};

	BufferGeometry.prototype.removeAttribute = function (name) {
		console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');
		return this.deleteAttribute(name);
	};

	BufferGeometry.prototype.applyMatrix = function (matrix) {
		console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');
		return this.applyMatrix4(matrix);
	};

	Object.defineProperties(BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
				return this.groups;
			}
		}
	});

	InterleavedBuffer.prototype.setDynamic = function (value) {
		console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');
		this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
		return this;
	};

	InterleavedBuffer.prototype.setArray = function ()
	/* array */
	{
		console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
	}; //


	ExtrudeGeometry.prototype.getArrays = function () {
		console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');
	};

	ExtrudeGeometry.prototype.addShapeList = function () {
		console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');
	};

	ExtrudeGeometry.prototype.addShape = function () {
		console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');
	}; //


	Scene.prototype.dispose = function () {
		console.error('THREE.Scene: .dispose() has been removed.');
	}; //


	Uniform.prototype.onUpdate = function () {
		console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
		return this;
	}; //


	Object.defineProperties(Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn('THREE.Material: .wrapAround has been removed.');
			},
			set: function () {
				console.warn('THREE.Material: .wrapAround has been removed.');
			}
		},
		overdraw: {
			get: function () {
				console.warn('THREE.Material: .overdraw has been removed.');
			},
			set: function () {
				console.warn('THREE.Material: .overdraw has been removed.');
			}
		},
		wrapRGB: {
			get: function () {
				console.warn('THREE.Material: .wrapRGB has been removed.');
				return new Color();
			}
		},
		shading: {
			get: function () {
				console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
			},
			set: function (value) {
				console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
				this.flatShading = value === FlatShading;
			}
		},
		stencilMask: {
			get: function () {
				console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
				return this.stencilFuncMask;
			},
			set: function (value) {
				console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
				this.stencilFuncMask = value;
			}
		}
	});
	Object.defineProperties(ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
				return this.extensions.derivatives;
			},
			set: function (value) {
				console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
				this.extensions.derivatives = value;
			}
		}
	}); //

	WebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {
		console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
		this.setRenderTarget(renderTarget);
		this.clear(color, depth, stencil);
	};

	WebGLRenderer.prototype.animate = function (callback) {
		console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
		this.setAnimationLoop(callback);
	};

	WebGLRenderer.prototype.getCurrentRenderTarget = function () {
		console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
		return this.getRenderTarget();
	};

	WebGLRenderer.prototype.getMaxAnisotropy = function () {
		console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
		return this.capabilities.getMaxAnisotropy();
	};

	WebGLRenderer.prototype.getPrecision = function () {
		console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
		return this.capabilities.precision;
	};

	WebGLRenderer.prototype.resetGLState = function () {
		console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
		return this.state.reset();
	};

	WebGLRenderer.prototype.supportsFloatTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
		return this.extensions.get('OES_texture_float');
	};

	WebGLRenderer.prototype.supportsHalfFloatTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
		return this.extensions.get('OES_texture_half_float');
	};

	WebGLRenderer.prototype.supportsStandardDerivatives = function () {
		console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
		return this.extensions.get('OES_standard_derivatives');
	};

	WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {
		console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
		return this.extensions.get('WEBGL_compressed_texture_s3tc');
	};

	WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {
		console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
		return this.extensions.get('WEBGL_compressed_texture_pvrtc');
	};

	WebGLRenderer.prototype.supportsBlendMinMax = function () {
		console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
		return this.extensions.get('EXT_blend_minmax');
	};

	WebGLRenderer.prototype.supportsVertexTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
		return this.capabilities.vertexTextures;
	};

	WebGLRenderer.prototype.supportsInstancedArrays = function () {
		console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
		return this.extensions.get('ANGLE_instanced_arrays');
	};

	WebGLRenderer.prototype.enableScissorTest = function (boolean) {
		console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
		this.setScissorTest(boolean);
	};

	WebGLRenderer.prototype.initMaterial = function () {
		console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
	};

	WebGLRenderer.prototype.addPrePlugin = function () {
		console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
	};

	WebGLRenderer.prototype.addPostPlugin = function () {
		console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
	};

	WebGLRenderer.prototype.updateShadowMap = function () {
		console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
	};

	WebGLRenderer.prototype.setFaceCulling = function () {
		console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
	};

	WebGLRenderer.prototype.allocTextureUnit = function () {
		console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
	};

	WebGLRenderer.prototype.setTexture = function () {
		console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
	};

	WebGLRenderer.prototype.setTexture2D = function () {
		console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
	};

	WebGLRenderer.prototype.setTextureCube = function () {
		console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
	};

	WebGLRenderer.prototype.getActiveMipMapLevel = function () {
		console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');
		return this.getActiveMipmapLevel();
	};

	Object.defineProperties(WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function ()
			/* value */
			{
				console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
			}
		},
		context: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');
				return this.getContext();
			}
		},
		vr: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');
				return this.xr;
			}
		},
		gammaInput: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
				return false;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
			}
		},
		gammaOutput: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
				return false;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
				this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
			}
		},
		toneMappingWhitePoint: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
				return 1.0;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
			}
		}
	});
	Object.defineProperties(WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function ()
			/* cullFace */
			{
				console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
			}
		},
		renderReverseSided: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
			}
		},
		renderSingleSided: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
			}
		}
	});
	function WebGLRenderTargetCube(width, height, options) {
		console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');
		return new WebGLCubeRenderTarget(width, options);
	} //

	Object.defineProperties(WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
				return this.texture.wrapS;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
				return this.texture.wrapT;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
				return this.texture.magFilter;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
				return this.texture.minFilter;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
				return this.texture.anisotropy;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
				return this.texture.offset;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
				return this.texture.repeat;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
				return this.texture.format;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
				return this.texture.type;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
				return this.texture.generateMipmaps;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
				this.texture.generateMipmaps = value;
			}
		}
	}); //

	Audio.prototype.load = function (file) {
		console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
		const scope = this;
		const audioLoader = new AudioLoader();
		audioLoader.load(file, function (buffer) {
			scope.setBuffer(buffer);
		});
		return this;
	};

	AudioAnalyser.prototype.getData = function () {
		console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
		return this.getFrequencyData();
	}; //


	CubeCamera.prototype.updateCubeMap = function (renderer, scene) {
		console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
		return this.update(renderer, scene);
	};

	CubeCamera.prototype.clear = function (renderer, color, depth, stencil) {
		console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');
		return this.renderTarget.clear(renderer, color, depth, stencil);
	};

	ImageUtils.crossOrigin = undefined;

	ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {
		console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
		const loader = new TextureLoader();
		loader.setCrossOrigin(this.crossOrigin);
		const texture = loader.load(url, onLoad, undefined, onError);
		if (mapping) texture.mapping = mapping;
		return texture;
	};

	ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {
		console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
		const loader = new CubeTextureLoader();
		loader.setCrossOrigin(this.crossOrigin);
		const texture = loader.load(urls, onLoad, undefined, onError);
		if (mapping) texture.mapping = mapping;
		return texture;
	};

	ImageUtils.loadCompressedTexture = function () {
		console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
	};

	ImageUtils.loadCompressedTextureCube = function () {
		console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
	}; //


	function CanvasRenderer() {
		console.error('THREE.CanvasRenderer has been removed');
	} //

	function JSONLoader() {
		console.error('THREE.JSONLoader has been removed.');
	} //

	const SceneUtils = {
		createMultiMaterialObject: function ()
		/* geometry, materials */
		{
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		},
		detach: function ()
		/* child, parent, scene */
		{
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		},
		attach: function ()
		/* child, scene, parent */
		{
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		}
	}; //

	function LensFlare() {
		console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
	}

	if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
		/* eslint-disable no-undef */
		__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
			detail: {
				revision: REVISION
			}
		}));
		/* eslint-enable no-undef */

	}

	if (typeof window !== 'undefined') {
		if (window.__THREE__) {
			console.warn('WARNING: Multiple instances of Three.js being imported.');
		} else {
			window.__THREE__ = REVISION;
		}
	}

	exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
	exports.AddEquation = AddEquation;
	exports.AddOperation = AddOperation;
	exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;
	exports.AdditiveBlending = AdditiveBlending;
	exports.AlphaFormat = AlphaFormat;
	exports.AlwaysDepth = AlwaysDepth;
	exports.AlwaysStencilFunc = AlwaysStencilFunc;
	exports.AmbientLight = AmbientLight;
	exports.AmbientLightProbe = AmbientLightProbe;
	exports.AnimationClip = AnimationClip;
	exports.AnimationLoader = AnimationLoader;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationUtils = AnimationUtils;
	exports.ArcCurve = ArcCurve;
	exports.ArrayCamera = ArrayCamera;
	exports.ArrowHelper = ArrowHelper;
	exports.Audio = Audio;
	exports.AudioAnalyser = AudioAnalyser;
	exports.AudioContext = AudioContext;
	exports.AudioListener = AudioListener;
	exports.AudioLoader = AudioLoader;
	exports.AxesHelper = AxesHelper;
	exports.AxisHelper = AxisHelper;
	exports.BackSide = BackSide;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.BasicShadowMap = BasicShadowMap;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.Bone = Bone;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.Box2 = Box2;
	exports.Box3 = Box3;
	exports.Box3Helper = Box3Helper;
	exports.BoxBufferGeometry = BoxGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxHelper = BoxHelper;
	exports.BufferAttribute = BufferAttribute;
	exports.BufferGeometry = BufferGeometry;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.ByteType = ByteType;
	exports.Cache = Cache;
	exports.Camera = Camera;
	exports.CameraHelper = CameraHelper;
	exports.CanvasRenderer = CanvasRenderer;
	exports.CanvasTexture = CanvasTexture;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CineonToneMapping = CineonToneMapping;
	exports.CircleBufferGeometry = CircleGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.Clock = Clock;
	exports.Color = Color;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.CompressedTexture = CompressedTexture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.ConeBufferGeometry = ConeGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.CubeCamera = CubeCamera;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.CubeTexture = CubeTexture;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.CubicInterpolant = CubicInterpolant;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.CullFaceNone = CullFaceNone;
	exports.Curve = Curve;
	exports.CurvePath = CurvePath;
	exports.CustomBlending = CustomBlending;
	exports.CustomToneMapping = CustomToneMapping;
	exports.CylinderBufferGeometry = CylinderGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.Cylindrical = Cylindrical;
	exports.DataTexture = DataTexture;
	exports.DataTexture2DArray = DataTexture2DArray;
	exports.DataTexture3D = DataTexture3D;
	exports.DataTextureLoader = DataTextureLoader;
	exports.DataUtils = DataUtils;
	exports.DecrementStencilOp = DecrementStencilOp;
	exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.DepthTexture = DepthTexture;
	exports.DirectionalLight = DirectionalLight;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.DodecahedronBufferGeometry = DodecahedronGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DoubleSide = DoubleSide;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.DynamicCopyUsage = DynamicCopyUsage;
	exports.DynamicDrawUsage = DynamicDrawUsage;
	exports.DynamicReadUsage = DynamicReadUsage;
	exports.EdgesGeometry = EdgesGeometry;
	exports.EdgesHelper = EdgesHelper;
	exports.EllipseCurve = EllipseCurve;
	exports.EqualDepth = EqualDepth;
	exports.EqualStencilFunc = EqualStencilFunc;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.Euler = Euler;
	exports.EventDispatcher = EventDispatcher;
	exports.ExtrudeBufferGeometry = ExtrudeGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.FaceColors = FaceColors;
	exports.FileLoader = FileLoader;
	exports.FlatShading = FlatShading;
	exports.Float16BufferAttribute = Float16BufferAttribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.FloatType = FloatType;
	exports.Fog = Fog;
	exports.FogExp2 = FogExp2;
	exports.Font = Font;
	exports.FontLoader = FontLoader;
	exports.FrontSide = FrontSide;
	exports.Frustum = Frustum;
	exports.GLBufferAttribute = GLBufferAttribute;
	exports.GLSL1 = GLSL1;
	exports.GLSL3 = GLSL3;
	exports.GammaEncoding = GammaEncoding;
	exports.GreaterDepth = GreaterDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
	exports.GreaterStencilFunc = GreaterStencilFunc;
	exports.GridHelper = GridHelper;
	exports.Group = Group;
	exports.HalfFloatType = HalfFloatType;
	exports.HemisphereLight = HemisphereLight;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.HemisphereLightProbe = HemisphereLightProbe;
	exports.IcosahedronBufferGeometry = IcosahedronGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageUtils = ImageUtils;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.IncrementStencilOp = IncrementStencilOp;
	exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InstancedMesh = InstancedMesh;
	exports.Int16Attribute = Int16Attribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.IntType = IntType;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.Interpolant = Interpolant;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.InvertStencilOp = InvertStencilOp;
	exports.JSONLoader = JSONLoader;
	exports.KeepStencilOp = KeepStencilOp;
	exports.KeyframeTrack = KeyframeTrack;
	exports.LOD = LOD;
	exports.LatheBufferGeometry = LatheGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.Layers = Layers;
	exports.LensFlare = LensFlare;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.LessEqualStencilFunc = LessEqualStencilFunc;
	exports.LessStencilFunc = LessStencilFunc;
	exports.Light = Light;
	exports.LightProbe = LightProbe;
	exports.Line = Line;
	exports.Line3 = Line3;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineLoop = LineLoop;
	exports.LinePieces = LinePieces;
	exports.LineSegments = LineSegments;
	exports.LineStrip = LineStrip;
	exports.LinearEncoding = LinearEncoding;
	exports.LinearFilter = LinearFilter;
	exports.LinearInterpolant = LinearInterpolant;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
	exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
	exports.LinearToneMapping = LinearToneMapping;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.LoadingManager = LoadingManager;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.LoopOnce = LoopOnce;
	exports.LoopPingPong = LoopPingPong;
	exports.LoopRepeat = LoopRepeat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.MOUSE = MOUSE;
	exports.Material = Material;
	exports.MaterialLoader = MaterialLoader;
	exports.Math = MathUtils;
	exports.MathUtils = MathUtils;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.MaxEquation = MaxEquation;
	exports.Mesh = Mesh;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshMatcapMaterial = MeshMatcapMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MinEquation = MinEquation;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.MixOperation = MixOperation;
	exports.MultiMaterial = MultiMaterial;
	exports.MultiplyBlending = MultiplyBlending;
	exports.MultiplyOperation = MultiplyOperation;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
	exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
	exports.NeverDepth = NeverDepth;
	exports.NeverStencilFunc = NeverStencilFunc;
	exports.NoBlending = NoBlending;
	exports.NoColors = NoColors;
	exports.NoToneMapping = NoToneMapping;
	exports.NormalAnimationBlendMode = NormalAnimationBlendMode;
	exports.NormalBlending = NormalBlending;
	exports.NotEqualDepth = NotEqualDepth;
	exports.NotEqualStencilFunc = NotEqualStencilFunc;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.Object3D = Object3D;
	exports.ObjectLoader = ObjectLoader;
	exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
	exports.OctahedronBufferGeometry = OctahedronGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OneFactor = OneFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.OrthographicCamera = OrthographicCamera;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.PMREMGenerator = PMREMGenerator;
	exports.ParametricBufferGeometry = ParametricGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.Particle = Particle;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystem = ParticleSystem;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Path = Path;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.Plane = Plane;
	exports.PlaneBufferGeometry = PlaneGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneHelper = PlaneHelper;
	exports.PointCloud = PointCloud;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.PointLight = PointLight;
	exports.PointLightHelper = PointLightHelper;
	exports.Points = Points;
	exports.PointsMaterial = PointsMaterial;
	exports.PolarGridHelper = PolarGridHelper;
	exports.PolyhedronBufferGeometry = PolyhedronGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PositionalAudio = PositionalAudio;
	exports.PropertyBinding = PropertyBinding;
	exports.PropertyMixer = PropertyMixer;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.Quaternion = Quaternion;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.REVISION = REVISION;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.RGBAFormat = RGBAFormat;
	exports.RGBAIntegerFormat = RGBAIntegerFormat;
	exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
	exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
	exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
	exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
	exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
	exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
	exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
	exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
	exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
	exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
	exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
	exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
	exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
	exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
	exports.RGBA_BPTC_Format = RGBA_BPTC_Format;
	exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGBDEncoding = RGBDEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.RGBEFormat = RGBEFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBIntegerFormat = RGBIntegerFormat;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.RGB_ETC2_Format = RGB_ETC2_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGFormat = RGFormat;
	exports.RGIntegerFormat = RGIntegerFormat;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.Ray = Ray;
	exports.Raycaster = Raycaster;
	exports.RectAreaLight = RectAreaLight;
	exports.RedFormat = RedFormat;
	exports.RedIntegerFormat = RedIntegerFormat;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ReplaceStencilOp = ReplaceStencilOp;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.RingBufferGeometry = RingGeometry;
	exports.RingGeometry = RingGeometry;
	exports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;
	exports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;
	exports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;
	exports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;
	exports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;
	exports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;
	exports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;
	exports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;
	exports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;
	exports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;
	exports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;
	exports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;
	exports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;
	exports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;
	exports.Scene = Scene;
	exports.SceneUtils = SceneUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.ShaderLib = ShaderLib;
	exports.ShaderMaterial = ShaderMaterial;
	exports.ShadowMaterial = ShadowMaterial;
	exports.Shape = Shape;
	exports.ShapeBufferGeometry = ShapeGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapePath = ShapePath;
	exports.ShapeUtils = ShapeUtils;
	exports.ShortType = ShortType;
	exports.Skeleton = Skeleton;
	exports.SkeletonHelper = SkeletonHelper;
	exports.SkinnedMesh = SkinnedMesh;
	exports.SmoothShading = SmoothShading;
	exports.Sphere = Sphere;
	exports.SphereBufferGeometry = SphereGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.Spherical = Spherical;
	exports.SphericalHarmonics3 = SphericalHarmonics3;
	exports.SplineCurve = SplineCurve;
	exports.SpotLight = SpotLight;
	exports.SpotLightHelper = SpotLightHelper;
	exports.Sprite = Sprite;
	exports.SpriteMaterial = SpriteMaterial;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.StaticCopyUsage = StaticCopyUsage;
	exports.StaticDrawUsage = StaticDrawUsage;
	exports.StaticReadUsage = StaticReadUsage;
	exports.StereoCamera = StereoCamera;
	exports.StreamCopyUsage = StreamCopyUsage;
	exports.StreamDrawUsage = StreamDrawUsage;
	exports.StreamReadUsage = StreamReadUsage;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.SubtractEquation = SubtractEquation;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.TOUCH = TOUCH;
	exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
	exports.TetrahedronBufferGeometry = TetrahedronGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TextBufferGeometry = TextGeometry;
	exports.TextGeometry = TextGeometry;
	exports.Texture = Texture;
	exports.TextureLoader = TextureLoader;
	exports.TorusBufferGeometry = TorusGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.Triangle = Triangle;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TubeBufferGeometry = TubeGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.UVMapping = UVMapping;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uniform = Uniform;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.UnsignedByteType = UnsignedByteType;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.UnsignedIntType = UnsignedIntType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedShortType = UnsignedShortType;
	exports.VSMShadowMap = VSMShadowMap;
	exports.Vector2 = Vector2;
	exports.Vector3 = Vector3;
	exports.Vector4 = Vector4;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.Vertex = Vertex;
	exports.VertexColors = VertexColors;
	exports.VideoTexture = VideoTexture;
	exports.WebGL1Renderer = WebGL1Renderer;
	exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;
	exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderer = WebGLRenderer;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.WireframeHelper = WireframeHelper;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.XHRLoader = XHRLoader;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroFactor = ZeroFactor;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.ZeroStencilOp = ZeroStencilOp;
	exports.sRGBEncoding = sRGBEncoding;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
  })();
});
require.register("BackdropPalette.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackdropPalette = void 0;

var _MarbleGarden = require("backdrop/MarbleGarden");

var _ProtoLabrynth = require("backdrop/ProtoLabrynth");

var _Industrial = require("backdrop/Industrial");

var _MysticCave = require("backdrop/MysticCave");

var _WestSideCloudy = require("backdrop/WestSideCloudy");

var _WestSide = require("backdrop/WestSide");

var _Wood = require("backdrop/Wood");

var _Underground = require("backdrop/Underground");

var _Moon = require("backdrop/Moon");

var _SouthRidge = require("backdrop/SouthRidge");

var BackdropPalette = {
  'west-side-cloudy': _WestSideCloudy.WestSideCloudy,
  'west-side': _WestSide.WestSide,
  'wood': _Wood.Wood,
  'moon': _Moon.Moon,
  'south-ridge': _SouthRidge.SouthRidge,
  'proto-labrynth': _ProtoLabrynth.ProtoLabrynth,
  'marble-garden': _MarbleGarden.MarbleGarden,
  'industrial': _Industrial.Industrial,
  'mystic-cave': _MysticCave.MysticCave,
  'underground': _Underground.Underground
};
exports.BackdropPalette = BackdropPalette;
});

;require.register("Classifier.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Classifier = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Classifier = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Classifier, _Mixin$with);

  var _super = _createSuper(Classifier);

  function Classifier(criteria) {
    var _this;

    var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (criterion, item) {
      return item instanceof criterion;
    };

    _classCallCheck(this, Classifier);

    _this = _super.call(this);
    _this.compare = comparator;
    _this.index = new Map();

    for (var i in criteria) {
      _this.index.set(criteria[i], new Set());
    }

    return _this;
  }

  _createClass(Classifier, [{
    key: "add",
    value: function add(object) {
      var before = new CustomEvent('adding', {
        detail: {
          object: object
        }
      });

      if (!this.dispatchEvent(before)) {
        return;
      }

      var indexes = new Set();

      var _iterator = _createForOfIteratorHelper(this.index.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              index = _step$value[0],
              list = _step$value[1];

          if (this.compare(index, object)) {
            indexes.add(index);
            list.add(object);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var after = new CustomEvent('added', {
        detail: {
          object: object,
          indexes: indexes
        }
      });
      this.dispatchEvent(after);
    }
  }, {
    key: "remove",
    value: function remove(object) {
      var before = new CustomEvent('removing', {
        detail: {
          object: object
        }
      });

      if (!this.dispatchEvent(before)) {
        return;
      }

      var indexes = new Set();

      var _iterator2 = _createForOfIteratorHelper(this.index.entries()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
              index = _step2$value[0],
              list = _step2$value[1];

          if (this.compare(index, object)) {
            indexes.add(index);
            list["delete"](object);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var after = new CustomEvent('added', {
        detail: {
          object: object,
          indexes: indexes
        }
      });
      this.dispatchEvent(after);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.index.clear();
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.index.get(key);
    }
  }, {
    key: "count",
    value: function count(key) {
      return this.index.has(key) && this.get(key).size;
    }
  }, {
    key: "has",
    value: function has(key) {
      return !!this.count(key);
    }
  }]);

  return Classifier;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.Classifier = Classifier;
});

;require.register("Menu/CharacterPreview.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CharacterPreview = void 0;

var _View2 = require("curvature/base/View");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CharacterPreview = /*#__PURE__*/function (_View) {
  _inherits(CharacterPreview, _View);

  var _super = _createSuper(CharacterPreview);

  function CharacterPreview(args, parent) {
    var _this;

    _classCallCheck(this, CharacterPreview);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "preserve", true);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"character-preview\" data-character = \"[[setting]]\">\n\t<div class = \"character\"></div>\n\t<div class = \"emeralds\" cv-each = \"emeralds:emerald\">[[emerald]]</div>\n\t<div class = \"rings\"></div>\n\t<div class = \"score\"></div>\n</div>");

    _this.args.emeralds = [_View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-red-alt-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-purple-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-pink-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-yellow-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-cyan-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-green-mini.png" />'), _View2.View.from('<img style = "--x:[[x]];--y:[[y]];" src = "/Sonic/emerald-super-white-mini.png" />')];

    _this.onFrame(function () {
      var e = 0;

      _this.args.emeralds.forEach(function (emerald) {
        var time = Date.now() / 300;
        var roll = e++ * (Math.PI * 2) / 7 + time;
        emerald.args.x = Math.cos(roll);
        emerald.args.y = Math.sin(roll);
      });
    });

    return _this;
  }

  return _createClass(CharacterPreview);
}(_View2.View);

exports.CharacterPreview = CharacterPreview;
});

;require.register("Menu/MainMenu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MainMenu = void 0;

var _Bgm = require("../audio/Bgm");

var _Card = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Droop = require("../effects/Droop");

var _Twist = require("../effects/Twist");

var _Menu2 = require("./Menu");

var _SavestateMenu = require("./SavestateMenu");

var _SettingsMenu = require("./SettingsMenu");

var _TileMap = require("../tileMap/TileMap");

var _CharacterString = require("../ui/CharacterString");

var _CharacterPreview = require("./CharacterPreview");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MainMenu = /*#__PURE__*/function (_Menu) {
  _inherits(MainMenu, _Menu);

  var _super = _createSuper(MainMenu);

  function MainMenu(args, parent) {
    var _this;

    _classCallCheck(this, MainMenu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./main-menu.html'));

    _this.args.cardName = 'main-menu';
    _this.args.haveToken = false;
    _this.args.joinGame = false;
    _this.args.hostGame = false;
    _this.args.copy = 'copy';
    _this.font = 'small-menu-font'; // this.font = 'font';

    _this.args.title = new _CharacterString.CharacterString({
      value: 'Sonic 3000',
      font: _this.font
    });
    _this.args.ok = new _CharacterString.CharacterString({
      value: '⓿ ok',
      font: _this.font
    });
    _this.args.back = new _CharacterString.CharacterString({
      value: '❶ back',
      font: _this.font
    });
    _this.args.select = new _CharacterString.CharacterString({
      value: '✚ select',
      font: _this.font
    });

    _this.refreshConnection();

    var Character = {
      input: 'select',
      options: ['Sonic', 'Tails', 'Knuckles', 'Robotnik', 'EggRobo', 'Mecha-Sonic', 'Seymour', 'Chalmers', 'Sean'],
      locked: ['Robotnik', 'EggRobo', 'Mecha-Sonic', 'Seymour', 'Chalmers', 'Sean'],
      set: function set(value) {
        return _this.parent.args.selectedChar = value;
      },
      get: function get() {
        var _this$parent$args$sel;

        return (_this$parent$args$sel = _this.parent.args.selectedChar) !== null && _this$parent$args$sel !== void 0 ? _this$parent$args$sel : 'Sonic';
      }
    };
    var Follower = {
      input: 'select',
      options: ['Sonic', 'Tails', 'Knuckles' // , 'Robotnik'
      // , 'EggRobo'
      // , 'Mecha-Sonic'
      // , 'Seymour'
      // , 'Chalmers'
      // , 'Sean'
      ],
      locked: ['Robotnik', 'EggRobo', 'Mecha-Sonic', 'Seymour', 'Chalmers', 'Sean'],
      set: function set(value) {
        return _this.parent.args.followerChar = value;
      },
      get: function get() {
        var _this$parent$args$fol;

        return (_this$parent$args$fol = _this.parent.args.followerChar) !== null && _this$parent$args$fol !== void 0 ? _this$parent$args$fol : 'Tails';
      }
    };
    Character.prefix = new _CharacterPreview.CharacterPreview(Character); // Follower.prefix = new CharacterPreview(Follower);

    _this.items = _this.args.items = {
      'Single Player': {
        available: 'available',
        children: {
          Character: Character // , Follower
          ,
          'Sonic Control Tutorial': {
            subtext: 'Learn the controls for Sonic',
            characters: ['Sonic'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/sonic-movement.json'
              });

              _this.accept();
            }
          },
          'Tails Control Tutorial': {
            subtext: 'Learn the controls for Tails',
            characters: ['Tails'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/tails-movement.json'
              });

              _this.accept();
            }
          },
          'Knuckles Control Tutorial': {
            subtext: 'Learn the controls for Knuckles',
            characters: ['Knuckles'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/knuckles-movement.json'
              });

              _this.accept();
            }
          },
          'Radical City Zone': {
            subtext: 'Gotta go fast!',
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            children: {
              'Act 1': {
                callback: function callback() {
                  _this.parent.loadMap({
                    mapUrl: '/map/empty-zone.json'
                  });

                  _this.accept();
                }
              },
              'Act 2': {
                subtext: 'Incomplete!!!',
                callback: function callback() {
                  _this.parent.loadMap({
                    mapUrl: '/map/empty-zone-2.json'
                  });

                  _this.accept();
                }
              }
            }
          },
          'Seaview Park Zone': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/west-side-zone.json'
              });

              _this.accept();
            }
          },
          'Misty Ruins Test Zone': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            subtext: 'Testing art, layout and physics for Misty Ruins Zone',
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/ruins-test.json'
              });

              _this.accept();
            }
          },
          'Underground Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            subtext: 'Testing art, layout and physics for Underground Zone',
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/underground-test.json'
              });

              _this.accept();
            }
          },
          'Terrain Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            subtext: 'Testing different terrain types',
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/bendy-bridges.json'
              });

              _this.accept();
            }
          } // , 'Pixel Hill Zone': {
          // 	characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik']
          // 	, subtext: 'Movement Sandbox - all characters'
          // 	, callback: () => {
          // 		this.parent.loadMap({mapUrl: '/map/pixel-hill-zone.json'});
          // 		this.accept();
          // 	}
          // }
          ,
          'Moon Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/moon-test.json'
              });

              _this.accept();
            }
          },
          'Space Pinball Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/pinball-test.json'
              });

              _this.accept();
            }
          },
          'Belt and Wheel Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/belt-test.json'
              });

              _this.accept();
            }
          },
          'See-Saw Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/see-saw-test.json'
              });

              _this.accept();
            }
          },
          'Vehicle Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/vehicle-test.json'
              });

              _this.accept();
            }
          },
          'Spotlight Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/visor-test.json'
              });

              _this.accept();
            }
          },
          'Flickie Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/flickie-test.json'
              });

              _this.accept();
            }
          },
          'Light Dash Test': {
            characters: ['Sonic'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/light-dash-test.json'
              });

              _this.accept();
            }
          },
          'Block Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/block-test.json'
              });

              _this.accept();
            }
          },
          'Half Pipe Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/half-pipe-test.json'
              });

              _this.accept();
            }
          },
          'Water Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/water-test.json'
              });

              _this.accept();
            }
          },
          'Arch Test': {
            characters: ['Sonic', 'Tails', 'Knuckles', 'Robotnik'],
            callback: function callback() {
              _this.parent.loadMap({
                mapUrl: '/map/arc-test.json'
              });

              _this.accept();
            }
          }
        } // , callback: () => {
        // 	this.parent.args.networked = false;
        // 	this.remove()
        // }

      },
      '2 Player P2P': {
        children: {
          'Host a game': {
            callback: function callback() {
              _this.args.hostOutput = '';
              _this.args.hostGame = true;
              _this.args.copy = 'copy';
            }
          },
          'Join a game': {
            callback: function callback() {
              _this.args.joinOutput = '';
              _this.args.joinGame = true;
              _this.args.copy = 'copy';

              _this.client.offer().then(function (token) {
                var tokenString = JSON.stringify(token);
                var encodedToken = "s3ktp://request/".concat(btoa(tokenString));
                _this.args.joinOutput = encodedToken;
                _this.args.haveToken = true;
              });
            }
          }
        }
      },
      'Connect To Server': {
        available: 'unavailable'
      },
      Settings: (0, _SettingsMenu.SettingsMenu)(parent) // , Load: SavestateMenu(parent)
      ,
      'Back': {
        callback: function callback() {
          return parent.quit(true);
        }
      }
    }; // this.bgm = new Audio('/Sonic/s3k-competition.mp3');
    // this.bgm.volume = 0.5;
    // this.bgm.playbackRate = 1;
    // this.bgm.loop = true;

    return _this;
  }

  _createClass(MainMenu, [{
    key: "clear",
    value: function clear() {
      this.args.input = '';
      this.args.joinOutput = '';
      this.args.hostOutput = '';
    }
  }, {
    key: "input",
    value: function input(controller) {
      _get(_getPrototypeOf(MainMenu.prototype), "input", this).call(this, controller);

      if (this.args.pinch) {
        var xAxis = controller.axes[2] ? controller.axes[2].magnitude : 0;
        var yAxis = controller.axes[3] ? controller.axes[3].magnitude : 0;
        var pressure = 0;

        if (controller.buttons[6]) {
          pressure = 0.25 + controller.buttons[6].pressure - controller.buttons[7].pressure;
        }

        this.args.pinch.args.scale = pressure * 256;
        this.args.pinch.args.dx = 64 * 1.618 * xAxis;
        this.args.pinch.args.dy = 64 * 1.000 * yAxis;
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.clear();

      if (this.args.hostGame) {
        this.server.close();
      } else if (this.args.joinGame) {
        this.client.close();
      }

      this.args.connected = false;
      this.args.hostGame = false;
      this.args.joinGame = false;
      this.refreshConnection();
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      // const debind = this.parent.args.bindTo('audio', (v) => {
      // 	v ? this.onTimeout(500, () => this.bgm.play()) : this.bgm.pause();
      // });
      _Bgm.Bgm.play('MENU_THEME', true);

      _get(_getPrototypeOf(MainMenu.prototype), "onRendered", this).call(this, event); // this.onRemove(debind);


      this.args.pinch = new _Twist.Twist({
        id: 'menu-twist',
        scale: 64,
        width: Math.floor(64 * 1.618),
        height: 64
      });
      this.args.pinch = new _Pinch.Pinch({
        id: 'menu-pinch',
        scale: 64,
        width: Math.floor(64 * 1.618),
        height: 64
      });
    }
  }, {
    key: "back",
    value: function back() {
      _get(_getPrototypeOf(MainMenu.prototype), "back", this).call(this);

      this.disconnect();
    }
  }, {
    key: "focus",
    value: function focus(element) {
      _get(_getPrototypeOf(MainMenu.prototype), "focus", this).call(this, element);

      element.scrollIntoView({
        behavior: 'smooth',
        block: 'center'
      });
    }
  }, {
    key: "answer",
    value: function answer() {
      var _this2 = this;

      var offerString = this.args.input;
      var isEncoded = /^s3ktp:\/\/request\/(.+)/.exec(offerString);

      if (isEncoded) {
        offerString = atob(isEncoded[1]);
      }

      var offer = JSON.parse(offerString);
      var answer = this.server.answer(offer);
      answer.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://accept/".concat(btoa(tokenString));
        _this2.args.hostOutput = encodedToken;
        _this2.args.haveToken = true;
      });
      return answer;
    }
  }, {
    key: "acceptRtp",
    value: function acceptRtp() {
      var answerString = this.args.input;
      var isEncoded = /^s3ktp:\/\/accept\/(.+)/.exec(answerString);

      if (isEncoded) {
        answerString = atob(isEncoded[1]);
      }

      var answer = JSON.parse(answerString);
      this.client.accept(answer);
    }
  }, {
    key: "select",
    value: function select() {
      if (this.args.hostGame) {
        this.tags.hostOutput.select();
      } else if (this.args.joinGame) {
        this.tags.joinOutput.select();
      }
    }
  }, {
    key: "copy",
    value: function copy() {
      if (this.args.hostGame) {
        if (!this.args.input) {
          return;
        }

        this.tags.hostOutput.select();
      } else if (this.args.joinGame) {
        if (!this.args.joinOutput) {
          return;
        }

        this.tags.joinOutput.select();
      }

      document.execCommand("copy");
      this.args.copy = 'copied!';
    }
  }, {
    key: "paste",
    value: function paste(event) {
      var _this3 = this;

      navigator.clipboard.readText().then(function (copied) {
        if (_this3.args.hostGame && copied.match(/^s3ktp:\/\/request\//)) {
          _this3.args.input = copied;

          _this3.answer().then(function (token) {
            _this3.copy();
          });
        }

        if (_this3.args.joinGame && copied.match(/^s3ktp:\/\/accept\//)) {
          _this3.args.input = copied;

          _this3.acceptRtp();
        }
      });
    }
  }, {
    key: "refreshConnection",
    value: function refreshConnection() {
      var _this4 = this;

      this.server = this.parent.getServer(true);
      this.client = this.parent.getClient(true);
      var server = this.server;
      var client = this.client;

      var onOpen = function onOpen(event) {
        _this4.parent.loadMap({
          mapUrl: '/map/empty-zone-2.json',
          networked: true
        }).then(function () {
          return console.log('Peer connection opened!');
        });
      };

      var onClose = function onClose(event) {
        return _this4.disconnect();
      };

      this.listen(server, 'open', onOpen);
      this.listen(server, 'close', onClose);
      this.listen(client, 'open', onOpen);
      this.listen(client, 'close', onClose);
    }
  }, {
    key: "play",
    value: function play() {
      var _this5 = this;

      _get(_getPrototypeOf(MainMenu.prototype), "play", this).call(this);

      var done = this.done;
      done.then(function () {
        return _this5.onTimeout(250, function () {
          return _this5.remove();
        });
      });
      return done;
    }
  }]);

  return MainMenu;
}(_Menu2.Menu);

exports.MainMenu = MainMenu;
});

;require.register("Menu/Menu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = void 0;

var _Card2 = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _CharacterString = require("../ui/CharacterString");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Menu = /*#__PURE__*/function (_Card) {
  _inherits(Menu, _Card);

  var _super = _createSuper(Menu);

  function Menu(args, parent) {
    var _this;

    _classCallCheck(this, Menu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./main-menu.html'));

    _this.font = 'small-menu-font'; // this.font = 'font';

    _this.args.cardName = 'menu';
    _this.args.items = {};
    _this.currentItem = null;
    _this.include = 'a, button, input, textarea, select, details, [tabindex]';
    _this.exclude = '[tabindex="-1"]';

    _this.onRemove(function () {
      return parent.focus();
    });

    _this.tickSample = new Audio('/Sonic/switch-activated.wav');
    return _this;
  }

  _createClass(Menu, [{
    key: "onRendered",
    value: function onRendered(event) {
      var _this2 = this;

      this.args.bindTo('items', function (v) {
        for (var i in v) {
          var item = v[i];
          item._title = new _CharacterString.CharacterString({
            value: i,
            font: _this2.font
          });
          item._value = new _CharacterString.CharacterString({
            value: '',
            font: _this2.font
          });

          if (item.get) {
            item.setting = item.get();
          }

          if (item.input === 'boolean') {
            item._value.args.value = item.setting ? 'ON' : 'OFF';
            item._boolValue = item._value;
          } else if (item.input === 'select') {
            item._selectValue = item._value;
          }
        }
      });
      this.args.bindTo('items', function (v) {
        if (!v || !Object.keys(v).length) {
          return;
        }

        if (_this2.args.items) {
          _this2.currentItem = null;
        }

        var next = _this2.findNext(_this2.currentItem, _this2.tags.bound.node);

        if (next) {
          _this2.focus(next);
        }
      }, {
        wait: 10
      });
      this.focusFirst();
    }
  }, {
    key: "focusFirst",
    value: function focusFirst() {
      if (!this.tags.bound) {
        return;
      }

      var element = this.findNext(null, this.tags.bound);
      element && this.focus(element);
    }
  }, {
    key: "findNext",
    value: function findNext(current, bounds) {
      var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var elements = bounds.querySelectorAll(this.include);

      if (!elements.length) {
        return;
      }

      var found = false;
      var first = null;
      var last = null;

      var _iterator = _createForOfIteratorHelper(elements),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var element = _step.value;

          if (element.matches(this.exclude)) {
            continue;
          }

          if (!first) {
            if (!current && !reverse) {
              return element;
            }

            first = element;
          }

          if (!reverse && found) {
            return element;
          }

          if (element === current) {
            if (reverse && last) {
              return last;
            }

            found = true;
          }

          last = element;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (reverse) {
        return last;
      }

      return this.findNext(undefined, bounds, reverse);
    }
  }, {
    key: "focus",
    value: function focus(element) {
      if (this.currentItem && this.currentItem !== element) {
        this.blur(this.currentItem);
      }

      if (element) {
        element.classList.add('focused');
        element.focus();
      }

      this.currentItem = element;
    }
  }, {
    key: "blur",
    value: function blur(element) {
      element.classList.remove('focused');
      element.blur();
    }
  }, {
    key: "input",
    value: function input(controller) {
      var _this3 = this;

      this.zeroMe = controller;

      if (!this.tags.bound) {
        return;
      }

      var next;

      if (controller.buttons[12] && controller.buttons[12].time === 1) {
        next = this.findNext(this.currentItem, this.tags.bound.node, true);

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }
      } else if (controller.buttons[13] && controller.buttons[13].time === 1) {
        next = this.findNext(this.currentItem, this.tags.bound.node);

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }

        this.focus(next);
      } else if (controller.buttons[14] && controller.buttons[14].time === 1) {
        this.currentItem && this.contract(this.currentItem);

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }
      } else if (controller.buttons[15] && controller.buttons[15].time === 1) {
        this.currentItem && this.expand(this.currentItem);

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }
      }

      if (controller.buttons[0] && controller.buttons[0].time === 1) {
        this.currentItem && this.currentItem.click();
        this.args.last = 'A';

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }
      } else if (controller.buttons[1] && controller.buttons[1].time === 1) {
        this.back();
        this.args.last = 'B';

        if (this.parent.args.audio) {
          this.tickSample.currentTime = 0;
          this.tickSample.volume = 0.2 + 0.2 * Math.random();
          this.tickSample.play();
        }
      }

      next && this.onTimeout(100, function () {
        return _this3.focus(next);
      });
    }
  }, {
    key: "run",
    value: function run(item, event) {
      var _this4 = this;

      if (this.zeroMe) {
        this.zeroMe.zero();
      }

      if (item.available === 'unavailable') {
        return;
      }

      if (item.input) {
        event.currentTarget.focus();
        this.focus(event.currentTarget);
      }

      if (item.children) {
        var prev = this.args.items;
        var back = {
          _title: new _CharacterString.CharacterString({
            value: 'back',
            font: 'small-menu-font'
          }),
          callback: function callback() {
            _this4.args.items = prev;
            _this4.args.currentKey = prev._title ? prev._title.args.value : '';

            _this4.onNextFrame(function () {
              return _this4.focusFirst();
            });
          }
        };
        this.args.items = item.children;
        this.args.currentKey = item._title.args.value;
        this.args.items['back'] = this.args.items['back'] || back;
        this.onNextFrame(function () {
          return _this4.focusFirst();
        });
      }

      if (item.callback) {
        item.callback();
      }
    }
  }, {
    key: "back",
    value: function back() {
      if (this.args.items['back']) {
        this.args.items['back'].callback();
      }
    }
  }, {
    key: "expand",
    value: function expand(element) {
      var input = element.querySelector('input');
      var title = element.getAttribute('data-title');
      var item = this.args.items[title];

      if (!item) {
        return;
      }

      if (item.input === 'number') {
        item.setting = Number(item.setting) + 1;

        if (item.setting > item.max) {
          item.setting = item.max;
        }

        item.set && item.set(item.setting);
      } else if (item.input === 'boolean') {
        item.setting = !item.setting;
        item._value.args.value = item.setting ? 'ON' : 'OFF';
        item.set && item.set(item.setting);
      } else if (item && item.input === 'select') {
        this.cycleSelect(item, title, 1);
      } else if (input) {
        input.focus();
      }
    }
  }, {
    key: "contract",
    value: function contract(element) {
      var title = element.getAttribute('data-title');
      var item = this.args.items[title]; // console.log(element, this.args.items, title, item);

      if (item.input === 'number') {
        item.setting = Number(item.setting) - 1;

        if (item.setting < item.min) {
          item.setting = item.min;
        }

        item.set && item.set(item.setting);
      } else if (item.input === 'boolean') {
        item.setting = !item.setting;
        item._value.args.value = item.setting ? 'ON' : 'OFF';
        item.set && item.set(item.setting);
      } else if (item && item.input === 'select') {
        this.cycleSelect(item, title, -1);
      } else {
        this.focus(element);
      }
    }
  }, {
    key: "keyup",
    value: function keyup(event, item) {
      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        if (event.currentTarget.tagName === 'INPUT') {
          var next = this.findNext(this.currentItem, this.tags.bound.node, event.key === 'ArrowUp');

          if (next) {
            this.focus(next);
            return;
          }
        }
      } // if(item && item.input === 'select')
      // {
      // 	event.preventDefault();
      // 	event.stopPropagation();
      // 	event.stopImmediatePropagation();
      // 	if(event.key === 'ArrowLeft')
      // 	{
      // 		this.cycleSelect(item, -1);
      // 	}
      // 	if(event.key === 'ArrowRight')
      // 	{
      // 		this.cycleSelect(item, 1);
      // 	}
      // }

    }
  }, {
    key: "change",
    value: function change(event, title) {
      // if(!this.currentItem)
      // {
      // 	return;
      // }
      // const title  = this.currentItem.getAttribute('data-title');
      var item = this.args.items[title];
      item.setting = event.target.value;
      this.selectListChanged(item, title);
      item.set(item.setting);
    }
  }, {
    key: "toggle",
    value: function toggle(event, item, $view, $subview, $parent) {
      event.preventDefault(); // item.setting = !item.setting;
      // this.selectListChanged(item, title);
      // item.set(item.setting);

      item.setting = !item.setting;
      item._value.args.value = item.setting ? 'ON' : 'OFF';
      item.set && item.set(item.setting);
    }
  }, {
    key: "cycleSelect",
    value: function cycleSelect(item, title) {
      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var found = false;
      var first = undefined;
      var last = undefined;
      var options = [];
      Object.assign(options, item.options);

      if (direction === -1) {
        options.reverse();
      } else if (direction !== 1) {
        return;
      }

      for (var _i = 0, _options = options; _i < _options.length; _i++) {
        var _first;

        var option = _options[_i];
        first = (_first = first) !== null && _first !== void 0 ? _first : option;

        if (option === item.setting) {
          found = true;
          continue;
        }

        if (found) {
          item.setting = option;
          last = undefined;
          break;
        }

        last = option;
      }

      if (last !== undefined) {
        item.setting = first;
      }

      this.selectListChanged(item, title);
      item.set(item.setting);
    }
  }, {
    key: "selectListRendered",
    value: function selectListRendered(event, item, title, $view, $subview, $parent) {
      console.log(item.input);

      if (item.input === 'select') {
        var _ref;

        item.setting = (_ref = item.get ? item.get() : 'Sonic') !== null && _ref !== void 0 ? _ref : 'Sonic';
        var selectedIndex = 0;

        for (var i in item.options) {
          if (item.options[i] === item.setting) {
            selectedIndex = i;
          }
        }

        var selectTag = $subview.findTag('select');
        var optionTag = $subview.findTag('option');
        selectTag.selectedIndex = selectedIndex;
        item._value.args.value = item.setting;
        this.selectListChanged(item, title, true);
      } else if (item.input === 'boolean') {
        item.element.selectedIndex = item.setting ? 0 : 1;
        item._value.args.value = item.setting ? 'ON' : 'OFF';
      }
    }
  }, {
    key: "selectListChanged",
    value: function selectListChanged(item, title) {
      var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (item.input === 'boolean') {
        item._value.args.value = item.setting ? 'ON' : 'OFF';
        this.selectListChanged(item, title, true);
      } else if (item.input === 'select') {
        if (item._value) {
          if (item.locked && item.locked.includes(item.setting)) {
            item._value.args.value = 'Locked';
          } else {
            item._value.args.value = item.setting;
          }
        }
      }

      if (title === 'Character') {
        for (var _i2 = 0, _Object$values = Object.values(this.args.items); _i2 < _Object$values.length; _i2++) {
          var _ref2, _item$_available;

          var _item = _Object$values[_i2];
          _item._available = (_ref2 = (_item$_available = _item._available) !== null && _item$_available !== void 0 ? _item$_available : _item.available) !== null && _ref2 !== void 0 ? _ref2 : 'available';

          if (_item.characters && !_item.characters.includes(item.setting)) {
            _item.available = 'unavailable';
          } else {
            _item.available = _item._available;
          }
        }
      }

      if (this.parent.args.audio && !silent) {
        this.tickSample.currentTime = 0;
        this.tickSample.volume = 0.2 + 0.2 * Math.random();
        this.tickSample.play();
      }
    }
  }]);

  return Menu;
}(_Card2.Card);

exports.Menu = Menu;
});

;require.register("Menu/PauseMenu.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PauseMenu = void 0;

var _Card = require("../intro/Card");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Menu2 = require("./Menu");

var _SettingsMenu = require("./SettingsMenu");

var _SaveMenu = require("./SaveMenu");

var _CharacterString = require("../ui/CharacterString");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PauseMenu = /*#__PURE__*/function (_Menu) {
  _inherits(PauseMenu, _Menu);

  var _super = _createSuper(PauseMenu);

  function PauseMenu(args, parent) {
    var _this;

    _classCallCheck(this, PauseMenu);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./pause-menu.html'));

    _this.args.cardName = 'pause-menu';
    _this.args.animation = '';
    _this.args.title = new _CharacterString.CharacterString({
      value: 'Sonic 3000',
      font: 'small-menu-font'
    });
    _this.items = _this.args.items = {
      Continue: {
        callback: function callback() {
          return parent.unpauseGame();
        }
      },
      Reset: {
        children: {
          'Last Checkpoint': {
            subtext: 'Restart and record your run.',
            callback: function callback() {
              parent.unpauseGame();
              parent.reset();
              parent.startLevel();
            }
          },
          'Level Start': {
            subtext: 'Restart and record your run.',
            callback: function callback() {
              parent.clearCheckpoints();
              parent.unpauseGame();
              parent.reset();
              parent.startLevel();
            }
          }
        }
      },
      Demos: {
        children: {
          record: {
            callback: function callback() {
              return _this.parent.record();
            },
            subtext: 'Restart and record your run.'
          },
          stop: {
            callback: function callback() {
              return _this.parent.stop();
            },
            subtext: 'Replay your run.'
          },
          replay: {
            callback: function callback() {
              return _this.parent.playback();
            },
            subtext: 'Replay your run.'
          }
        }
      },
      Settings: (0, _SettingsMenu.SettingsMenu)(parent) // , Save: SaveMenu(parent)
      ,
      Quit: {
        children: {
          'No': {
            callback: function callback() {
              return _this.args.items.back.callback();
            }
          },
          'Yes': {
            callback: function callback() {
              _this.args.items.back.callback();

              parent.unpauseGame();
              parent.quit();
            }
          }
        }
      }
    };
    return _this;
  }

  _createClass(PauseMenu, [{
    key: "run",
    value: function run(event, item) {
      event.stopPropagation();
      event.stopImmediatePropagation();

      _get(_getPrototypeOf(PauseMenu.prototype), "run", this).call(this, item);
    }
  }, {
    key: "input",
    value: function input(controller) {
      if (controller.buttons[1011] && controller.buttons[1011].active) {
        var time = controller.buttons[1011].time;

        if (time === 1 || time > 30 && time % 15 === 1) {
          this.parent.focus();
          this.parent.args.paused = 1;
          this.args.hideMenu = 'pause-menu-hide';
        }
      }

      if (!this.args.hideMenu) {
        _get(_getPrototypeOf(PauseMenu.prototype), "input", this).call(this, controller);
      } else if (controller.buttons[9] && controller.buttons[9].active) {
        this.args.hideMenu = '';
      }

      if (controller.buttons[1012] && controller.buttons[1012].time > 0) {
        this.parent.focus();
        this.args.hideMenu = 'pause-menu-hide';
      } else if (controller.buttons[1012] && controller.buttons[1012].time < 0) {
        this.args.hideMenu = '';
      }
    }
  }]);

  return PauseMenu;
}(_Menu2.Menu);

exports.PauseMenu = PauseMenu;
});

;require.register("Menu/SaveMenu.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveMenu = void 0;

var _SavestateDatabase = require("../savestates/SavestateDatabase");

var SaveMenu = function SaveMenu(parent) {
  return {
    children: {
      Save: {
        callback: function callback() {
          if (!parent.controlActor) {
            return;
          }

          var controlActor = parent.controlActor;
          var currentMap = parent.currentMap;
          var character = controlActor.args.canonical;
          var checkpoint = parent.getCheckpoint(controlActor.args.id);
          var savestate = {
            currentMap: currentMap,
            character: character,
            checkpoint: checkpoint
          };
          console.log(savestate);

          _SavestateDatabase.SavestateDatabase.open('savestates', 1).then(function (database) {
            var store = 'savestates';
            database.insert(store, savestate).then(function (result) {
              console.log(result);
              var index = 'id';
              var query = {
                store: store,
                index: index
              };
              database.select(query).each(function (savestate) {
                return console.log(savestate);
              }).then(function (results) {
                return console.log(results);
              });
            });
          });
        }
      }
    }
  };
};

exports.SaveMenu = SaveMenu;
});

require.register("Menu/SavestateMenu.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SavestateMenu = void 0;

var _SavestateDatabase = require("../savestates/SavestateDatabase");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SavestateMenu = function SavestateMenu(parent) {
  var children = {};

  _SavestateDatabase.SavestateDatabase.open('savestates', 1).then(function (database) {
    var store = 'savestates';
    var index = 'id';
    var query = {
      store: store,
      index: index
    };
    database.select(query).each(function (savestate) {
      var id = savestate.id;
      var character = savestate.character;
      children["".concat(id, " ").concat(character)] = {
        callback: function callback() {
          console.log(savestate);
          parent.setCheckpoint(savestate.currentMap, _defineProperty({}, character, savestate.checkpoint));
          parent.loadMap({
            mapUrl: savestate.currentMap
          });
        }
      };
    }).then(function (results) {
      return console.log(results);
    });
  });

  return {
    children: children
  };
};

exports.SavestateMenu = SavestateMenu;
});

require.register("Menu/SettingsMenu.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SettingsMenu = void 0;

var SettingsMenu = function SettingsMenu(parent) {
  return {
    children: {
      Video: {
        children: {
          'Motion Blur Effects': {
            input: 'boolean',
            subtext: 'Enable/Disable motion blur effects',
            set: function set(value) {
              return parent.settings.blur = value;
            },
            get: function get() {
              return parent.settings.blur;
            }
          },
          'Displacement Effects': {
            input: 'boolean',
            subtext: 'Enable/Disable displacement effects',
            set: function set(value) {
              return parent.settings.displace = value;
            },
            get: function get() {
              return parent.settings.displace;
            }
          },
          'Outline Thickness': {
            input: 'number',
            subtext: 'Change the outline thickness',
            set: function set(value) {
              return parent.settings.outline = value;
            },
            get: function get() {
              return parent.settings.outline;
            },
            max: 15,
            min: 0
          },
          'Display HUD': {
            input: 'boolean',
            subtext: 'Enable/Disable the HUD',
            set: function set(value) {
              return parent.settings.showHud = value;
            },
            get: function get() {
              return parent.settings.showHud;
            }
          },
          'Debug OSD': {
            input: 'boolean',
            subtext: 'Enable/Disable debug OSD',
            set: function set(value) {
              return parent.settings.debugOsd = value;
            },
            get: function get() {
              return parent.settings.debugOsd;
            }
          },
          'FPS Meter': {
            input: 'boolean',
            subtext: 'Enable/Disable the FPS meter',
            set: function set(value) {
              return parent.settings.showFps = value;
            },
            get: function get() {
              return parent.settings.showFps;
            }
          },
          'Mute/Fullscreen': {
            input: 'boolean',
            subtext: 'Show the mute & fullscreen controls in the bottom right.',
            set: function set(value) {
              return parent.settings.shortcuts = value;
            },
            get: function get() {
              return parent.settings.shortcuts;
            }
          }
        }
      },
      'Rumble': {
        input: 'boolean',
        subtext: 'Enable/Disable controller vibration',
        set: function set(value) {
          return parent.settings.rumble = value;
        },
        get: function get() {
          return parent.settings.rumble;
        }
      },
      Network: {
        children: {
          'Username': {
            input: 'string',
            subtext: 'Name to display in online games',
            set: function set(value) {
              return parent.settings.username = value;
            },
            get: function get() {
              return parent.settings.username;
            },
            max: 15,
            min: 0
          },
          'Subspace Hub Servers': {},
          'ICE Servers': {
            children: {
              'ICE Server #1': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #2': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #3': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              },
              'ICE Server #4': {
                input: 'string',
                subtext: 'ICE candidate server.',
                available: 'unavailable'
              }
            }
          }
        }
      },
      Audio: {
        children: {
          'Music Volume': {
            input: 'number',
            subtext: 'Background music volume - 0% - 100%',
            available: 'unavailable',
            set: function set(value) {
              return parent.settings.musicVol = value;
            },
            get: function get() {
              return parent.settings.musicVol;
            },
            max: 100,
            min: 0
          },
          'SFX': {
            input: 'number',
            subtext: 'Sound effect music volume - 0% - 100%',
            available: 'unavailable',
            set: function set(value) {
              return parent.settings.sfxVol = value;
            },
            get: function get() {
              return parent.settings.sfxVol;
            },
            max: 100,
            min: 0
          },
          'Mono / Stereo': {
            available: 'unavailable'
          }
        }
      }
    }
  };
};

exports.SettingsMenu = SettingsMenu;
});

;require.register("Menu/main-menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[pinch]]\n\t[[twist]]\n\n\t<section class = \"buttons\">\n\t\t<span>[[select]]</span>\n\t\t<span>[[ok]]</span>\n\t\t<span>[[back]]</span>\n\t</section>\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\t\t<div class = \"menu-container\" data-current-menu = \"[[currentKey]]\">\n\n\t\t\t<div>\n\t\t\t\t[[title]]\n\t\t\t</div>\n\n\t\t\t<div>\n\n\t\t\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\n\t\t\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(item, event); keyup(event, item):c\" tabindex=\"0\">\n\t\t\t\t\t\t[[item.prefix]]\n\t\t\t\t\t\t<span class = \"title\">[[item._title]]</span>\n\t\t\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\" class = \"field\">\n\t\t\t\t\t\t\t: <span data-wraps = \"string\"><input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event, title)\" tabindex=\"-1\" /></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\" class = \"field\">\n\t\t\t\t\t\t\t: <span data-wraps = \"number\"><input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event, title)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" /></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\" class = \"field\">\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<span data-wraps = \"select\">\n\t\t\t\t\t\t\t\t[[item._boolValue]]\n\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\tcv-on    = \"cvDomAttached:selectListRendered(event, item, title, $view, $subview, $parent);mousedown:toggle(event, item, $view, $subview, $parent); input:change(event, title)\" cv-ref = \"boolean\"\n\t\t\t\t\t\t\t\t\tcv-bind = \"item.setting\"\n\t\t\t\t\t\t\t\t\ttabindex=\"-1\">\n\t\t\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t\t\t</select></span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"select\" class = \"field\">\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<span data-wraps = \"select\">\n\t\t\t\t\t\t\t\t[[item._selectValue]]\n\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\tcv-on    = \"input:change(event, title); listRendered:selectListRendered(event, item, title, $view, $subview, $parent);\"\n\t\t\t\t\t\t\t\t\tcv-ref   = \"options\"\n\t\t\t\t\t\t\t\t\tcv-bind  = \"item.setting\"\n\t\t\t\t\t\t\t\t\ttabindex = \"-1\"\n\t\t\t\t\t\t\t\t\tcv-each  = \"item.options:option\">\n\t\t\t\t\t\t\t\t\t<option value = \"[[option]]\">[[option]]</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t[[item.suffix]]\n\t\t\t\t\t</li>\n\n\n\t\t\t\t</ul>\n\n\t\t\t</div>\n\n\t\t</div>\n\t</section>\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\n\t\t<section class = \"contents\" cv-if = \"hostGame\">\n\t\t\t<div class = \"token-exchange\" data-have-token = \"[[haveToken]]\">\n\n\t\t\t\t<label>\n\t\t\t\t\t<p>Input the token from your friend here.</p>\n\t\t\t\t\t<textarea cv-bind = \"input\" cv-on = \"click:paste(event)\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:answer\">go!</button>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\t<p>Send this token to your friend to get started.</p>\n\t\t\t\t\t<textarea cv-on = \"click:copy\" cv-ref = \"hostOutput\" cv-bind = \"hostOutput\" readonly = \"true\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:copy\">[[copy]]</button>\n\n\t\t\t\t\t<div class = \"close\" cv-on = \"click:disconnect\"></div>\n\t\t\t\t</label>\n\n\t\t\t</div>\n\t\t</section>\n\n\t\t<section class = \"contents\" cv-if = \"joinGame\">\n\t\t\t<div class = \"token-exchange\">\n\n\t\t\t\t<label cv-if = \"haveToken\">\n\t\t\t\t\t<p>Send this token to your friend to get started.</p>\n\t\t\t\t\t<textarea cv-on = \"click:copy\" cv-ref = \"joinOutput\" cv-bind = \"joinOutput\" readonly = \"true\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:copy\">[[copy]]</button>\n\t\t\t\t</label>\n\n\t\t\t\t<label cv-if = \"haveToken\">\n\t\t\t\t\t<p>Input the token they send back here.</p>\n\t\t\t\t\t<textarea cv-bind = \"input\" cv-on = \"click:paste(event)\"></textarea>\n\t\t\t\t\t<button cv-on = \"click:acceptRtp\">go!</button>\n\t\t\t\t\t<div class = \"close\" cv-on = \"click:disconnect\"></div>\n\t\t\t\t</label>\n\n\t\t\t</div>\n\t\t</section>\n\n\t</section>\n</div>\n"
});

;require.register("Menu/menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[warp]]\n\n\t<div class = \"menu-container\" data-current-menu = \"[[currentKey]]\">\n\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(item);\" tabindex=\"0\">\n\t\t\t\t<span class = \"title\">[[item._title]]</span>\n\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\">\n\t\t\t\t\t: <span data-wraps = \"string\"><input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event)\" tabindex=\"-1\" /></span>\n\t\t\t\t</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\">\n\t\t\t\t\t: <span data-wraps = \"number\"><input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" /></span>\n\t\t\t\t</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\">\n\t\t\t\t\t: <span data-wraps = \"select\"><select cv-on = \"mousedown:toggle(event, item);change(event)\" cv-ref = \"boolean\" cv-bind = \"item.setting\" tabindex=\"-1\">\n\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t</select></span>\n\t\t\t\t</span>\n\t\t\t\t<span cv-if = \"item.input\" cv-is = \"select\">\n\t\t\t\t\t: <span data-wraps = \"select\"><select cv-on = \"change(event)\" cv-ref = \"select\" cv-bind = \"item.setting\" tabindex=\"-1\" cv-each = \"options:option:o\">\n\t\t\t\t\t\t<option value = \"[[o]]\">[[o]]</option>\n\t\t\t\t\t</select></span>\n\t\t\t\t</span>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\n</div>\n"
});

;require.register("Menu/pause-menu.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[hideMenu]]\">\n\n\t<div class = \"menu-scroller\"></div>\n\n\t[[warp]]\n\n\t<section class = \"contents\" cv-if = \"!connected\">\n\n\t\t<div class = \"menu-container\" data-current-menu = \"[[currentKey]]\">\n\n\t\t\t<div>[[title]]</div>\n\n\t\t\t<ul cv-ref = \"bound\" cv-each = \"items:item:title\">\n\n\t\t\t\t<li data-title = \"[[title]]\" class = \"[[item.available]]\" cv-on = \"click:run(event, item):c;\" tabindex=\"0\">\n\t\t\t\t\t<span class = \"title\">[[item._title]]</span>\n\t\t\t\t\t<span class = \"subtext\">[[item.subtext]]</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"string\">\n\t\t\t\t\t\t: <input cv-ref = \"string\" cv-bind = \"item.setting\" cv-on = \"keyup(event);input:change(event)\" tabindex=\"-1\" />\n\t\t\t\t\t</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"number\">\n\t\t\t\t\t\t: <input cv-ref = \"number\" cv-bind = \"item.setting\" type = \"number\" cv-on = \"keyup(event);change(event)\" tabindex=\"-1\" max = \"[[item.max]]\" min = \"[[item.min]]\" />\n\t\t\t\t\t</span>\n\t\t\t\t\t<span cv-if = \"item.input\" cv-is = \"boolean\">\n\t\t\t\t\t\t: <select cv-on = \"mousedown:toggle(event, item);change(event)\" cv-ref = \"boolean\" cv-bind = \"item.setting\" tabindex=\"-1\">\n\t\t\t\t\t\t\t<option value = \"1\">on</option>\n\t\t\t\t\t\t\t<option value = \"0\">off</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</span>\n\t\t\t\t</li>\n\n\t\t</ul>\n\n\t\t</div>\n\n\t</section>\n\n</div>\n"
});

;require.register("ObjectPalette.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectPalette = void 0;

var _PointActor = require("./actor/PointActor");

var _LayerSwitch = require("./actor/LayerSwitch");

var _Region = require("./region/Region");

var _ShadeRegion = require("./region/ShadeRegion");

var _BgShadeRegion = require("./region/BgShadeRegion");

var _FgShadeRegion = require("./region/FgShadeRegion");

var _WaterRegion = require("./region/WaterRegion");

var _DarkRegion = require("./region/DarkRegion");

var _LavaRegion = require("./region/LavaRegion");

var _RollingRegion = require("./region/RollingRegion");

var _GrindingRegion = require("./region/GrindingRegion");

var _ForceRegion = require("./region/ForceRegion");

var _CorkscrewRegion = require("./region/CorkscrewRegion");

var _BossRegion = require("./region/BossRegion");

var _ExitRegion = require("./region/ExitRegion");

var _ExplodingRegion = require("./region/ExplodingRegion");

var _SwitchRegion = require("./region/SwitchRegion");

var _RainRegion = require("./region/RainRegion");

var _WaterfallRegion = require("./region/WaterfallRegion");

var _CompanionBlock = require("./actor/CompanionBlock");

var _QuestionBlock = require("./actor/QuestionBlock");

var _MarbleBlock = require("./actor/MarbleBlock");

var _BreakableBlock = require("./actor/BreakableBlock");

var _Stopper = require("./actor/Stopper");

var _Zipline = require("./actor/Zipline");

var _Block = require("./actor/Block");

var _Monitor = require("./actor/Monitor");

var _WebMonitor = require("./actor/monitor/WebMonitor");

var _RingMonitor = require("./actor/monitor/RingMonitor");

var _SheildStarMonitor = require("./actor/monitor/SheildStarMonitor");

var _SheildNormalMonitor = require("./actor/monitor/SheildNormalMonitor");

var _SheildFireMonitor = require("./actor/monitor/SheildFireMonitor");

var _SheildWaterMonitor = require("./actor/monitor/SheildWaterMonitor");

var _SheildElectricMonitor = require("./actor/monitor/SheildElectricMonitor");

var _Bumper = require("./actor/Bumper");

var _Flipper = require("./actor/Flipper");

var _SeeSaw = require("./actor/SeeSaw");

var _Cinematic = require("./actor/Cinematic");

var _Flickie = require("./actor/Flickie");

var _Bubbles = require("./actor/Bubbles");

var _Redz = require("./actor/Redz");

var _GuardBot = require("./actor/GuardBot");

var _CrabMeat = require("./actor/CrabMeat");

var _BuzzBomber = require("./actor/BuzzBomber");

var _MechaFroggy = require("./actor/MechaFroggy");

var _DrainFly = require("./actor/DrainFly");

var _GohlaBall = require("./actor/GohlaBall");

var _Voltorb = require("./actor/Voltorb");

var _Explosion = require("./actor/Explosion");

var _StarPost = require("./actor/StarPost");

var _ArrowSign = require("./actor/ArrowSign");

var _Emerald = require("./actor/Emerald");

var _FakeEmerald = require("./actor/FakeEmerald");

var _Window = require("./actor/Window");

var _Spring = require("./actor/Spring");

var _BrokenMonitor = require("./actor/BrokenMonitor");

var _Ring = require("./actor/Ring");

var _Coin = require("./actor/Coin");

var _WaterFall = require("./actor/WaterFall");

var _WaterJet = require("./actor/WaterJet");

var _PowerupGlow = require("./actor/PowerupGlow");

var _Projectile = require("./actor/Projectile");

var _TextActor = require("./actor/TextActor");

var _EggMobile = require("./actor/EggMobile");

var _SnowBoard = require("./actor/SnowBoard");

var _DrillCar = require("./actor/DrillCar");

var _Tornado = require("./actor/Tornado");

var _RailCar = require("./actor/RailCar");

var _EggWalker = require("./actor/EggWalker");

var _EggShuttle = require("./actor/EggShuttle");

var _NuclearSuperball = require("./actor/NuclearSuperball");

var _MechaSonic = require("./actor/MechaSonic");

var _Eggrobo = require("./actor/Eggrobo");

var _Eggman = require("./actor/Eggman");

var _Sonic = require("./actor/Sonic");

var _Tails = require("./actor/Tails");

var _Knuckles = require("./actor/Knuckles");

var _Seymour = require("./actor/Seymour");

var _Chalmers = require("./actor/Chalmers");

var _Sean = require("./actor/Sean");

var _Rocks = require("./actor/Rocks");

var _Switch = require("./actor/Switch");

var _HeavyDutySwitch = require("./actor/HeavyDutySwitch");

var _Balloon = require("./actor/Balloon");

var _StarBalloon = require("./actor/StarBalloon");

var _Spinner = require("./actor/Spinner");

var _Springboard = require("./actor/Springboard");

var _GrapplePoint = require("./actor/GrapplePoint");

var _WoodenCrate = require("./actor/WoodenCrate");

var _SteelCrate = require("./actor/SteelCrate");

var _ChaoCrate = require("./actor/ChaoCrate");

var _UnbreakableCrate = require("./actor/UnbreakableCrate");

var _Rocket = require("./actor/Rocket");

var _WindStone = require("./actor/WindStone");

var _RoadBarrier = require("./actor/RoadBarrier");

var _Spikes = require("./actor/Spikes");

var _SpikesSmall = require("./actor/SpikesSmall");

var _Cone = require("./actor/Cone");

var _Fountain = require("./actor/Fountain");

var _CautionSign = require("./actor/CautionSign");

var _RollingSign = require("./actor/RollingSign");

var _Bell = require("./actor/Bell");

var _Torch = require("./actor/Torch");

var _Signpost = require("./actor/Signpost");

var _RedEyeJet = require("./actor/RedEyeJet");

var _MiniMace = require("./actor/MiniMace");

var _MegaMace = require("./actor/MegaMace");

var _Beelzebub = require("./actor/Beelzebub");

var _MiniBoss = require("./actor/MiniBoss");

var _Magnet = require("./actor/Magnet");

var _Pulley = require("./actor/Pulley");

var _PulleySmall = require("./actor/PulleySmall");

var _Orb = require("./actor/Orb");

var _Egg = require("./actor/Egg");

var _Chao = require("./actor/Chao");

var _EggShellTop = require("./actor/EggShellTop");

var _EggShellBottom = require("./actor/EggShellBottom");

var _BackdropSwapper = require("./actor/BackdropSwapper");

var _LayerController = require("./actor/LayerController");

var _WaterController = require("./actor/WaterController");

var _TilesetSwapper = require("./actor/TilesetSwapper");

var _CutScene = require("./actor/CutScene");

var _HtmlFrame = require("./actor/HtmlFrame");

var _Panel = require("./actor/Panel");

var _Tester = require("./actor/Tester");

var _Cursor = require("./actor/Cursor");

var _Spawner = require("./actor/Spawner");

// import { SuperRing }   from './actor/SuperRing';
var ObjectPalette = {
  player: _NuclearSuperball.NuclearSuperball,
  cinematic: _Cinematic.Cinematic,
  spring: _Spring.Spring,
  'layer-switch': _LayerSwitch.LayerSwitch,
  'layer-controller': _LayerController.LayerController,
  'water-controller': _WaterController.WaterController,
  'backdrop-swapper': _BackdropSwapper.BackdropSwapper,
  'tileset-swapper': _TilesetSwapper.TilesetSwapper,
  'star-post': _StarPost.StarPost,
  'arrow-sign': _ArrowSign.ArrowSign,
  'projectile': _Projectile.Projectile,
  'block': _Block.Block,
  'q-block': _QuestionBlock.QuestionBlock,
  'marble-block': _MarbleBlock.MarbleBlock,
  'companion-block': _CompanionBlock.CompanionBlock,
  'breakable-block': _BreakableBlock.BreakableBlock,
  'stopper': _Stopper.Stopper,
  'zipline': _Zipline.Zipline,
  'bumper': _Bumper.Bumper,
  'flipper': _Flipper.Flipper,
  'see-saw': _SeeSaw.SeeSaw,
  'drill-car': _DrillCar.DrillCar,
  'rail-car': _RailCar.RailCar,
  'tornado': _Tornado.Tornado,
  'egg-walker': _EggWalker.EggWalker,
  'snow-board': _SnowBoard.SnowBoard,
  'egg-mobile': _EggMobile.EggMobile,
  'egg-shuttle': _EggShuttle.EggShuttle,
  'rocks-tall': _Rocks.Rocks,
  'rocks-med': _Rocks.Rocks,
  'rocks-short': _Rocks.Rocks,
  'mecha-sonic': _MechaSonic.MechaSonic,
  'sonic': _Sonic.Sonic,
  'tails': _Tails.Tails,
  'knuckles': _Knuckles.Knuckles,
  'eggman': _Eggman.Eggman,
  'robotnik': _Eggman.Eggman,
  'eggrobo': _Eggrobo.Eggrobo,
  'seymour': _Seymour.Seymour,
  'chalmers': _Chalmers.Chalmers,
  'sean': _Sean.Sean,
  'switch': _Switch.Switch,
  'heavy-duty-switch': _HeavyDutySwitch.HeavyDutySwitch,
  'window': _Window.Window,
  'emerald': _Emerald.Emerald,
  'fake-emerald': _FakeEmerald.FakeEmerald,
  'base-region': _Region.Region,
  'region': _WaterRegion.WaterRegion,
  'lava-region': _LavaRegion.LavaRegion,
  'dark-region': _DarkRegion.DarkRegion,
  'shade-region': _ShadeRegion.ShadeRegion,
  'force-region': _ForceRegion.ForceRegion,
  'corkscrew-region': _CorkscrewRegion.CorkscrewRegion,
  'rolling-region': _RollingRegion.RollingRegion,
  'grinding-region': _GrindingRegion.GrindingRegion,
  'exploding-region': _ExplodingRegion.ExplodingRegion,
  'boss-region': _BossRegion.BossRegion,
  'exit-region': _ExitRegion.ExitRegion,
  'switch-region': _SwitchRegion.SwitchRegion,
  'rain-region': _RainRegion.RainRegion,
  'waterfall-region': _WaterfallRegion.WaterfallRegion,
  'ring': _Ring.Ring // , 'super-ring':   SuperRing
  ,
  'coin': _Coin.Coin,
  'powerup-glow': _PowerupGlow.PowerupGlow,
  'explosion': _Explosion.Explosion,
  'text-actor': _TextActor.TextActor,
  'water-jet': _WaterJet.WaterJet,
  'water-fall': _WaterFall.WaterFall,
  'balloon': _Balloon.Balloon,
  'star-balloon': _StarBalloon.StarBalloon,
  'web-monitor': _WebMonitor.WebMonitor,
  'ring-monitor': _RingMonitor.RingMonitor,
  'sheild-fire-monitor': _SheildFireMonitor.SheildFireMonitor,
  'sheild-normal-monitor': _SheildNormalMonitor.SheildNormalMonitor,
  'sheild-star-monitor': _SheildStarMonitor.SheildStarMonitor,
  'sheild-water-monitor': _SheildWaterMonitor.SheildWaterMonitor,
  'sheild-electric-monitor': _SheildElectricMonitor.SheildElectricMonitor,
  'flickie': _Flickie.Flickie,
  'crabmeat': _CrabMeat.CrabMeat,
  'redz': _Redz.Redz,
  'guard-bot': _GuardBot.GuardBot,
  'mecha-froggy': _MechaFroggy.MechaFroggy,
  'buzz-bomber': _BuzzBomber.BuzzBomber,
  'bubbles': _Bubbles.Bubbles,
  'drainfly': _DrainFly.DrainFly,
  'gohla-ball': _GohlaBall.GohlaBall,
  'voltorb': _Voltorb.Voltorb,
  'grapple-point': _GrapplePoint.GrapplePoint,
  'rocket': _Rocket.Rocket,
  'spinner': _Spinner.Spinner,
  'springboard': _Springboard.Springboard,
  'wooden-crate': _WoodenCrate.WoodenCrate,
  'steel-crate': _SteelCrate.SteelCrate,
  'chao-crate': _ChaoCrate.ChaoCrate,
  'unbreakable-crate': _UnbreakableCrate.UnbreakableCrate,
  'road-barrier': _RoadBarrier.RoadBarrier,
  'signpost': _Signpost.Signpost,
  'red-eye-jet': _RedEyeJet.RedEyeJet,
  'beelzebub': _Beelzebub.Beelzebub,
  'mini-boss': _MiniBoss.MiniBoss,
  'mini-mace': _MiniMace.MiniMace,
  'mega-mace': _MegaMace.MegaMace,
  'magnet': _Magnet.Magnet,
  'pulley': _Pulley.Pulley,
  'pulley-small': _PulleySmall.PulleySmall,
  'spikes': _Spikes.Spikes,
  'spikes-small': _SpikesSmall.SpikesSmall,
  'cone': _Cone.Cone,
  'wind-stone': _WindStone.WindStone,
  'fountain': _Fountain.Fountain,
  'caution-sign': _CautionSign.CautionSign,
  'rolling-sign': _RollingSign.RollingSign,
  'bell': _Bell.Bell,
  'torch': _Torch.Torch,
  'orb': _Orb.Orb,
  'chao': _Chao.Chao,
  'egg': _Egg.Egg,
  'egg-shell-top': _EggShellTop.EggShellTop,
  'egg-shell-bottom': _EggShellBottom.EggShellBottom,
  'cut-scene': _CutScene.CutScene,
  'html-frame': _HtmlFrame.HtmlFrame,
  'panel': _Panel.Panel,
  'tester': _Tester.Tester,
  'spawner': _Spawner.Spawner
};
exports.ObjectPalette = ObjectPalette;
});

require.register("QuadCell.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuadCell = void 0;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CellRef = Symbol('CellRef');

var QuadCell = /*#__PURE__*/function () {
  function QuadCell() {
    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      x: 0,
      y: 0
    };
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      x: 0,
      y: 0
    };
    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, QuadCell);

    _defineProperty(this, "position", {});

    _defineProperty(this, "size", {});

    _defineProperty(this, "divided", false);

    _defineProperty(this, "parent", null);

    _defineProperty(this, "leafPoint", {
      x: null,
      y: null
    });

    _defineProperty(this, "leafRefs", null);

    _defineProperty(this, "ld", null);

    _defineProperty(this, "rd", null);

    _defineProperty(this, "lu", null);

    _defineProperty(this, "ru", null);

    _defineProperty(this, "cells", []);

    this.parent = parent;
    this.position.x = position.x;
    this.position.y = position.y;
    this.size.x = size.x;
    this.size.y = size.y;
    Object.seal(this);
  }

  _createClass(QuadCell, [{
    key: "empty",
    value: function empty() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (!this.divided) {
        if (!this.leafRefs) {
          return true;
        }

        return !this.leafRefs.size;
      }

      for (var c in this.cells) {
        if (!this.cells[c].empty(depth + 1)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "insert",
    value: function insert(object) {
      var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        x: 0,
        y: 0
      };

      if (!this.contains(point)) {
        return false;
      }

      if (!this.leafRefs && !this.divided) {
        this.leafRefs = new Set();
        this.leafPoint.x = point.x;
        this.leafPoint.y = point.y;
        this.leafRefs.add(object);
        object[CellRef] = this;
        return true;
      } else if (this.leafRefs && point.x === this.leafPoint.x && point.y === this.leafPoint.y) {
        this.leafRefs.add(object);
        object[CellRef] = this;
      } else if (!this.divided) {
        this.divide();
      }

      var _iterator = _createForOfIteratorHelper(this.cells),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cell = _step.value;

          if (cell.insert(object, point)) {
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return false;
    }
  }, {
    key: "move",
    value: function move(object, point) {
      var cell = object[CellRef];

      if (cell) {
        if (cell.leafPoint.x === point.x && cell.leafPoint.y === point.y) {
          return;
        }

        object[CellRef] = null;
        cell.leafRefs["delete"](object);

        if (cell.parent) {
          cell.parent.join();
        }
      }

      this.insert(object, point);
    }
  }, {
    key: "remove",
    value: function remove(object) {
      var cell = object[CellRef];

      if (!cell) {
        return;
      }

      object[CellRef] = null;
      cell.leafRefs["delete"](object);

      if (cell.parent) {
        cell.parent.join();
      }
    }
  }, {
    key: "join",
    value: function join() {
      var _this = this;

      if (!this.empty()) {
        return false;
      }

      var nonEmpty = null;

      var _iterator2 = _createForOfIteratorHelper(this.cells),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var cell = _step2.value;

          if (!cell.empty()) {
            if (nonEmpty) {
              return false;
            }

            nonEmpty = cell;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this.ld = null;
      this.rd = null;
      this.lu = null;
      this.ru = null;
      this.cells = [];
      this.divided = false;

      if (nonEmpty) {
        nonEmpty.leafRefs.forEach(function (l) {
          return _this.insert(l);
        });
      }

      if (this.parent) {
        this.parent.join();
      }
    }
  }, {
    key: "divide",
    value: function divide() {
      if (this.divided) {
        return false;
      }

      var p = this.position;
      var s = this.size;
      this.ld = new this.constructor({
        x: p.x - s.x / 4,
        y: p.y - s.y / 4
      }, {
        x: s.x / 2,
        y: s.y / 2
      }, this);
      this.rd = new this.constructor({
        x: p.x + s.x / 4,
        y: p.y - s.y / 4
      }, {
        x: s.x / 2,
        y: s.y / 2
      }, this);
      this.lu = new this.constructor({
        x: p.x - s.x / 4,
        y: p.y + s.y / 4
      }, {
        x: s.x / 2,
        y: s.y / 2
      }, this);
      this.ru = new this.constructor({
        x: p.x + s.x / 4,
        y: p.y + s.y / 4
      }, {
        x: s.x / 2,
        y: s.y / 2
      }, this);
      this.cells.push(this.ld, this.rd, this.lu, this.ru);
      this.divided = true;

      if (!this.leafRefs.size) {
        return true;
      }

      var _iterator3 = _createForOfIteratorHelper(this.leafRefs),
          _step3;

      try {
        refs: for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var ref = _step3.value;

          var _iterator4 = _createForOfIteratorHelper(this.cells),
              _step4;

          try {
            cells: for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var cell = _step4.value;
              var inserted = cell.insert(ref, this.leafPoint);

              if (inserted) {
                this.leafRefs["delete"](ref);
                continue refs;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "contains",
    value: function contains() {
      var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        x: 0,
        y: 0
      };
      var xMin = this.position.x - this.size.x / 2;
      var xMax = this.position.x + this.size.x / 2;

      if (point.x < xMin || point.x > xMax) {
        return false;
      }

      var yMin = this.position.y - this.size.y / 2;
      var yMax = this.position.y + this.size.y / 2;

      if (point.y < yMin || point.y > yMax) {
        return false;
      }

      return true;
    }
  }, {
    key: "select",
    value: function select(xPos, yPos, xSize, ySize) {
      var depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

      if (this.empty()) {
        return [];
      }

      var xMax = xSize / 2 + this.size.x / 2;

      if (xMax < Math.abs(xPos - this.position.x)) {
        return [];
      }

      var yMax = ySize / 2 + this.size.y / 2;

      if (yMax < Math.abs(yPos - this.position.y)) {
        return [];
      }

      if (this.divided) {
        var results = new Set();

        var _iterator5 = _createForOfIteratorHelper(this.cells),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var cell = _step5.value;

            var _iterator6 = _createForOfIteratorHelper(cell.select(xPos, yPos, xSize, ySize, depth + 1)),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var result = _step6.value;
                results.add(result);
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return results;
      }

      return this.leafRefs ? this.leafRefs : [];
    }
  }]);

  return QuadCell;
}();

exports.QuadCell = QuadCell;
});

;require.register("World.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.World = void 0;

var _Bag = require("curvature/base/Bag");

var _Bindable = require("curvature/base/Bindable");

var _TileMap = require("tileMap/TileMap");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var World = /*#__PURE__*/function () {
  function World() {
    var _this = this;

    _classCallCheck(this, World);

    _defineProperty(this, "tileMap", new _TileMap.TileMap());

    this.viewports = new _Bag.Bag(function (i, s, a) {
      switch (a) {
        case BAG.ITEM_ADDED:
          i.world = _this;
          break;

        case BAG.ITEM_REMOVED:
          i.world = null;
          break;
      }
    });
    this.actors = new _Bag.Bag(function (i, s, a) {
      switch (a) {
        case BAG.ITEM_ADDED:
          i.world = _this;
          break;

        case BAG.ITEM_REMOVED:
          i.world = null;
          break;
      }
    });
  }

  _createClass(World, [{
    key: "getOnScreenObjects",
    value: function getOnScreenObjects(tolerance) {}
  }, {
    key: "update",
    value: function update() {}
  }]);

  return World;
}();

exports.World = World;

_defineProperty(World, "globals", _Bindable.Bindable.make({}));
});

;require.register("abilities/LightDash.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightDash = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LightDash = /*#__PURE__*/_createClass(function LightDash() {
  _classCallCheck(this, LightDash);
});

exports.LightDash = LightDash;
});

;require.register("actor/ArrowSign.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrowSign = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Projectile = require("../actor/Projectile");

var _Monitor = require("./Monitor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildFireMonitor = require("./monitor/SheildFireMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

var _SheildElectricMonitor = require("./monitor/SheildElectricMonitor");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArrowSign = /*#__PURE__*/function (_PointActor) {
  _inherits(ArrowSign, _PointActor);

  var _super = _createSuper(ArrowSign);

  function ArrowSign(args, parent) {
    var _this$args$float, _this$args$static;

    var _this;

    _classCallCheck(this, ArrowSign);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-arrow-sign';
    _this.args["float"] = (_this$args$float = _this.args["float"]) !== null && _this$args$float !== void 0 ? _this$args$float : -1;
    _this.args["static"] = (_this$args$static = _this.args["static"]) !== null && _this$args$static !== void 0 ? _this$args$static : true;
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 64;
    return _this;
  }

  _createClass(ArrowSign, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      if (this.headBox) {
        return;
      }

      this.sprite = this.findTag('div.sprite');
      this.box = this.findTag('div');
      this.headBox = new _Tag.Tag('<div class = "arrow-sign-head-box">');
      this.post = new _Tag.Tag('<div class = "arrow-sign-post">');
      this.head = new _Tag.Tag('<div class = "arrow-sign-head">');
      this.sprite.appendChild(this.post.node);
      this.headBox.appendChild(this.head.node);
      this.sprite.appendChild(this.headBox.node);
      this.args.bindTo(['point', 'height'], function (v, k) {
        _this2.headBox.style(_defineProperty({}, '--' + k, v));
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(ArrowSign), "fromDef", this).call(this, objDef);

      obj.args.rotation = objDef.rotation;
      obj.args.height = objDef.height;
      return obj;
    }
  }]);

  return ArrowSign;
}(_PointActor2.PointActor);

exports.ArrowSign = ArrowSign;
});

;require.register("actor/BackdropController.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackdropController = void 0;

var _PointActor2 = require("./PointActor");

var _BackdropPalette = require("../BackdropPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BackdropController = /*#__PURE__*/function (_PointActor) {
  _inherits(BackdropController, _PointActor);

  var _super = _createSuper(BackdropController);

  function BackdropController(args, parent) {
    var _this;

    _classCallCheck(this, BackdropController);

    _this = _super.call(this, args, parent);
    _this.args.hidden = true;
    return _this;
  }

  _createClass(BackdropController, [{
    key: "activate",
    value: function activate(other, button) {// this.viewport.tilemap.replacements.set(
      // 	this.args.original//'../Sonic/tiles/azure-lake/azure-lake.png'
      // 	, this.args.replacement//'../Sonic/tiles/azure-lake/azure-lake-burnt.png'
      // );
    }
  }]);

  return BackdropController;
}(_PointActor2.PointActor);

exports.BackdropController = BackdropController;
});

;require.register("actor/BackdropSwapper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BackdropSwapper = void 0;

var _PointActor2 = require("./PointActor");

var _BackdropPalette = require("../BackdropPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BackdropSwapper = /*#__PURE__*/function (_PointActor) {
  _inherits(BackdropSwapper, _PointActor);

  var _super = _createSuper(BackdropSwapper);

  function BackdropSwapper(args, parent) {
    var _this;

    _classCallCheck(this, BackdropSwapper);

    _this = _super.call(this, args, parent);
    _this.args.hidden = true;
    return _this;
  }

  _createClass(BackdropSwapper, [{
    key: "activate",
    value: function activate(other, button) {// this.viewport.tilemap.replacements.set(
      // 	this.args.original//'../Sonic/tiles/azure-lake/azure-lake.png'
      // 	, this.args.replacement//'../Sonic/tiles/azure-lake/azure-lake-burnt.png'
      // );
    }
  }]);

  return BackdropSwapper;
}(_PointActor2.PointActor);

exports.BackdropSwapper = BackdropSwapper;
});

;require.register("actor/Balloon.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Balloon = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Balloon = /*#__PURE__*/function (_PointActor) {
  _inherits(Balloon, _PointActor);

  var _super = _createSuper(Balloon);

  function Balloon() {
    var _this;

    _classCallCheck(this, Balloon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-balloon';
    _this.args.width = 32;
    _this.args.height = 33;
    _this.args["float"] = -1;
    _this.args.airAngle = -Math.PI;
    return _this;
  }

  _createClass(Balloon, [{
    key: "collideA",
    value: function collideA(other) {
      if (!other.controllable) {
        return;
      }
    }
  }]);

  return Balloon;
}(_PointActor2.PointActor);

exports.Balloon = Balloon;
});

;require.register("actor/Beelzebub.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Beelzebub = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _CanPop = require("../mixin/CanPop");

var _CutScene = require("./CutScene");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Beelzebub = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Beelzebub, _Mixin$from);

  var _super = _createSuper(Beelzebub);

  function Beelzebub(args, parent) {
    var _this;

    _classCallCheck(this, Beelzebub);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-beelzebub';
    _this.args.width = 64;
    _this.args.height = 32;
    _this.args["float"] = -1;
    _this.args.damagers = new Map();
    _this.args.phase = 'idle';
    _this.dieSound = new Audio('/Sonic/object-destroyed.wav');
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    _this.dudSound = new Audio('/Sonic/S2_59.wav');
    _this.args.hitPoints = 8;
    _this.args.noseAngle = Math.PI / 2 * 3;
    _this.args.drillPush = 0;
    _this.args.phaseFrameId = 0;
    _this.args.frameId = 0;
    _this.args.direction = -1;
    _this.args.facing = 'left';

    _this.args.bindTo('phase', function (v) {
      return _this.args.phaseFrameId = 0;
    });

    _this.clearScene = new _CutScene.CutScene({
      src: '/cutscenes/clear-seaview.json'
    });
    return _this;
  }

  _createClass(Beelzebub, [{
    key: "onAttached",
    value: function onAttached() {
      this.autoStyle.get(this.box)['--nose-angle'] = 'noseAngle';
      this.autoStyle.get(this.box)['--drill-push'] = 'drillPush';
      this.autoAttr.get(this.box)['data-phase'] = 'phase';
      this.drill = new _Tag.Tag("<div class = \"drill\">");
      this.body = new _Tag.Tag("<div class = \"body\">");
      this.nose = new _Tag.Tag("<div class = \"nose\">");
      this.eyeBack = new _Tag.Tag("<div class = \"eye-back\">");
      this.eyeFore = new _Tag.Tag("<div class = \"eye-fore\">");
      this.body.appendChild(this.eyeBack.node);
      this.body.appendChild(this.eyeFore.node);
      this.body.appendChild(this.nose.node);
      this.sprite.appendChild(this.body.node);
      this.nose.appendChild(this.drill.node);
      this.attractor = null;
      this.clearScene.viewport = this.viewport;
    }
  }, {
    key: "update",
    value: function update() {
      this.args.phaseFrameId++;
      this.args.frameId++;

      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      viewport.auras.add(this);
      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      if (!this.attractor) {
        this.attractor = {};
        this.attractor.x = this.x;
        this.attractor.y = this.y;
      }

      var xDiff = Math.abs(this.x - this.attractor.x);
      var yDiff = Math.abs(this.y - this.attractor.y);
      var xSign = Math.sign(this.x - this.attractor.x);
      var ySign = Math.sign(this.y - this.attractor.y);

      switch (this.args.phase) {
        case 'idle':
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;
          break;

        case 'intro':
          if (this.args.phaseFrameId > 30) {
            this.args.phase = 'stalking';
          }

          break;

        case 'alert':
          if (this.args.phaseFrameId > 4) {
            this.args.drillPush = 1;
            this.args.falling = true;
            this.args["float"] = -1;

            if (this.y > this.args.alertTo) {
              this.args.ySpeed--;
            } else {
              this.args.y = this.args.alertTo;
              this.args.ySpeed = 0;
            }
          }

          if (this.args.phaseFrameId > 0) {
            this.args.phase = 'stalking';
          }

          break;

        case 'damaged':
          if (this.args.hitPoints > 0) {
            if (this.args.phaseFrameId > 20) {
              this.args.phase = 'stalking';
            }
          } else {
            if (this.args.phaseFrameId > 6) {
              this.args.phase = 'dead';
            }
          }

          break;

        case 'knocked':
          this.args.xSpeed = 0;

          if (this.args.phaseFrameId > 30) {
            this.args.phase = 'stalking';
          }

          break;

        case 'dead':
          this.args["float"] = 0;
          break;

        case 'stalking':
          {
            this.args.xSpeed = -xSign * Math.max(1, xDiff / 25);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 25);
            this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;

            if (this.pointIsSafe(mainChar.x, mainChar.y - 128)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y - 128;
            }

            this.args.noseAngle = Math.PI / 2 * 3;
            this.args.drillPush = 0;

            if (this.args.phaseFrameId > 10) {
              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            if (this.args.phaseFrameId > 20) {
              this.args.drillPush = 0.5;
            }

            if (this.args.phaseFrameId > 25) {
              this.args.phase = 'ready';
            }

            break;
          }

        case 'buzzing':
          {
            if (this.pointIsSafe(mainChar.x, mainChar.y + -mainChar.args.height + -34)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y + -mainChar.args.height + -34;
            }

            this.args.xSpeed = -xSign * Math.max(1, xDiff / 15);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 15);
            this.args.noseAngle = Math.PI / 2 * 3;
            this.args.drillPush = 1;

            if (this.args.phaseFrameId > 10) {
              this.args.drillPush = 0.5;
            }

            if (this.args.phaseFrameId > 20) {
              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            if (this.args.phaseFrameId > 30) {
              this.args.phase = 'ready';
            }

            break;
          }

        case 'ready':
          {
            if (this.args.phaseFrameId < 10) {
              this.readySide = Math.sign(mainChar.xSpeedLast || mainChar.gSpeedLast);
            }

            if (this.pointIsSafe(mainChar.x + 128 * this.readySide, mainChar.y + -mainChar.args.height + -128)) {
              this.attractor.x = mainChar.x + 128 * this.readySide;
              this.attractor.y = mainChar.y + -mainChar.args.height + -128;
            }

            this.args.xSpeed = -xSign * Math.max(1, xDiff / 15);
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 15);
            this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;
            this.args.drillPush = 0.75;

            if (this.args.phaseFrameId > 30) {
              var dieRoll = Math.random();

              if (!mainChar.args.falling) {
                if (dieRoll > 0.5) {
                  this.args.phase = 'swooping';
                } else {
                  this.args.phase = 'attacking';
                }
              } else {
                if (dieRoll > 0.5) {
                  this.args.phase = 'buzzing';
                } else {
                  this.args.phase = 'stalking';
                }
              }
            }

            break;
          }

        case 'attacking':
          {
            this.args["float"] = -1;
            this.args.falling = true;

            if (this.args.phaseFrameId > 100) {
              this.args.phase = 'stalking';
            }

            if (this.args.phaseFrameId < 50) {
              if (this.pointIsSafe(mainChar.x + 256 * (this.readySide || 1), mainChar.y - 32)) {
                this.attractor.x = mainChar.x + 256 * (this.readySide || 1);
                this.attractor.y = mainChar.y - 32;
              }

              this.args.noseAngle = 0;
            } else {
              if (this.pointIsSafe(mainChar.x + 256 * (-this.readySide || -1), mainChar.y - 16)) {
                this.attractor.x = mainChar.x + 256 * (-this.readySide || -1);
                this.attractor.y = mainChar.y - 16;
              }

              this.args.noseAngle = this.angleTo({
                x: mainChar.x,
                y: Math.max(this.y, mainChar.y)
              });
            }

            this.args.drillPush = 1;
            this.args["float"] = -1;
            var mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;
            this.args.xSpeed = -xSign * Math.max(1, xDiff / 10) + mainSpeed * 1.1;
            this.args.ySpeed = -ySign * Math.max(1, yDiff / 10);
            break;
          }

        case 'swooping':
          {
            if (this.pointIsSafe(mainChar.x, mainChar.y - 32)) {
              this.attractor.x = mainChar.x;
              this.attractor.y = mainChar.y - 32;
            }

            this.args.xSpeed += -xSign * Math.max(1, xDiff / 10000);
            this.args.ySpeed += -ySign * Math.max(1, yDiff / 10000);
            this.args.noseAngle = this.angleTo({
              x: mainChar.x,
              y: Math.max(this.y, mainChar.y)
            });
            this.args.drillPush = 1;
            this.args["float"] = -1;

            if (this.args.phaseFrameId > 180) {
              this.args.phase = 'stalking';
            }

            var _mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;

            break;
          }

        case 'exploding':
          if (this.args.phaseFrameId === 90) {
            this.args.falling = true;
            this.args.ySpeed = -14;
            this.args.xSpeed = 0;
            this.args.gSpeed = 0;
            this.noClip = true;
            this.viewport.auras["delete"](this);
            this.args.phase = 'exploded';
            this.clearScene.activate(mainChar, this, true);

            if (this.viewport.args.audio) {
              this.dieSound.volume = 0.5;
              this.dieSound.play();
            }
          }

          if (this.args.phaseFrameId > 90) {
            return;
          }

          if (viewport && viewport.args.frameId % 3 === 0) {
            var explosion = new _Tag.Tag('<div class = "particle-explosion">');

            if (viewport.args.audio) {
              this.hitSound.currentTime = 0;
              this.hitSound.volume = 0.35 + Math.random() * -0.15;
              this.hitSound.play();
            }

            var xOff = this.args.width * Math.random() - this.args.width / 2;
            var yOff = this.args.height * Math.random() - this.args.height / 2;
            explosion.style({
              '--x': this.x + xOff,
              '--y': this.y + yOff + -16
            });
            viewport.particles.add(explosion);
            setTimeout(function () {
              return viewport.particles.remove(explosion);
            }, 512);
          }

          break;
      }

      if (this.args.phase !== 'knocked') {
        if (this.args.ySpeed < 0 && !this.pointIsSafe(this.x, this.y + -this.args.height + this.args.ySpeed + -1)) {
          this.args.ySpeed = 0;
        }
      }

      _get(_getPrototypeOf(Beelzebub.prototype), "update", this).call(this);
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(Beelzebub.prototype), "updateEnd", this).call(this);

      if (!this.viewport) {
        return;
      }

      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      var xDiff = Math.abs(this.args.x - mainChar.x);
      var yDiff = Math.abs(this.args.y - mainChar.y);
      var xSign = Math.sign(this.args.x - mainChar.x);
      var ySign = Math.sign(this.args.y - mainChar.y);

      switch (this.args.phase) {
        case 'attacking':
        case 'swooping':
        case 'stalking':
        case 'knocked':
        case 'damaged':
        case 'ready':
          {
            if (xDiff > 384) {
              this.args.x = mainChar.x + 384 * xSign;
            }

            if (yDiff > 192) {
              this.args.y = mainChar.y + 192 * ySign;
            }

            if (this.args.hitPoints <= 0) {
              this.viewport.auras["delete"](this);
              this.args.phase = 'dead';
              this.noClip = false;
              this.args["float"] = 0;

              if (typeof ga === 'function') {
                ga('send', 'event', {
                  eventCategory: 'boss',
                  eventAction: 'defeated',
                  eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
                });
              }
            }

            break;
          }
      }

      if (this.args.xSpeed < 0) {
        this.args.facing = 'left';
      } else if (this.args.xSpeed > 0) {
        this.args.facing = 'right';
      }

      this.args.groundAngle = 0;

      switch (this.args.phase) {
        case 'attacking':
        case 'swooping':
        case 'stalking':
        case 'ready':
          {
            if (this.checkBelow(this.x, this.y)) {
              this.args.falling = true;
              this.args.ySpeed = -4;
              this.args.y--;
            }
          }
          break;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.args.phase === 'exploded' || other.args.mercy) {
        return false;
      }

      if (!other.controllable && !other.hazard) {
        return true;
      }

      if (type === -1) {
        return;
      }

      var xSign = Math.sign(this.x - other.x);
      var ySign = Math.sign(this.y - other.y);
      var impactSpeed = Math.max(Math.abs(other.args.xSpeed), 5);
      var impactSign = Math.sign(other.args.xSpeed);

      if (this.args.hitPoints > 0 && other.controllable) {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          other.damage();
          this.args.phase = 'ready';

          if (typeof ga === 'function') {
            ga('send', 'event', {
              eventCategory: 'boss',
              eventAction: 'damaged-player',
              eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id, "::").concat(other.args.id)
            });
          }

          return true;
        }
      }

      if (this.args.phase === 'dead') {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          return true;
        }

        this.args.explodeFrame = this.viewport.args.frameId;
        this.args.phase = 'exploding';
      }

      if (type === 1 || type === 3) // Side collisions
        {
          if (other.args.falling) {
            this.ignores.set(other, 15);
          } else {
            other.args.gSpeed = 4 * -Math.sign(this.x - other.x);

            if (other.args.rolling) {
              this.onNextFrame(function () {
                other.args.gSpeed = -Math.sign(_this2.x - other.x);
                other.args.rolling = true;
                other.args.direction = Math.sign(other.args.gSpeed);
              });
            }
          }

          this.args.ySpeed = 0;

          if (this.args.hitPoints > 0) {
            this.damage(other);
          }

          if (this.args.hitPoints > 0) {
            other.args.xSpeed = -xSign * impactSpeed;
            this.args.xSpeed = xSign * impactSpeed;
          } else {
            other.args.xSpeed = -xSign;
            this.args.xSpeed = xSign;
          }
        }

      if (type === 2) // Collide from bottom
        {
          if (this.viewport.args.audio) {
            this.dudSound.currentTime = 0;
            this.dudSound.volume = 0.35 + Math.random() * -0.15;
            this.dudSound.play();
          }

          if (other.args.falling) {
            this.args.ySpeed = other.args.ySpeed * 2.5;

            if (other.args.controllable) {
              other.args.ySpeed = Math.max(7, Math.abs(other.args.ySpeed));
            }
          }

          this.args.xSpeed = 0;

          if (this.args.hitPoints > 0) {
            this.args.phase = 'knocked';
          }

          this.ignores.set(other, 15);
        }

      if (type === 0) // Collide from top
        {
          if (other.args.falling) {
            this.ignores.set(other, 15);
          }

          if (other.controllable) {
            other.args.y = this.y - this.args.height;
            var animation = other.args.animation;
            var ySpeed = other.args.ySpeed;
            this.onNextFrame(function () {
              other.args.ySpeed = -Math.floor(Math.abs(ySpeed)) || -4;
            });
          }

          this.args.xSpeed = 0;
          this.damage(other);
        }

      other.args.ignore = 1;

      if (!this.args.hitPoints) {
        other.args.ignore = -2;
      }

      return true;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

      if (this.args.hitPoints <= 0) {
        return;
      }

      var lastHit = this.args.damagers.get(other);

      if (this.args.frameId - lastHit < 5) {
        return;
      }

      this.args.hitPoints--;
      this.args.damagers.set(other, this.args.frameId);
      this.args.phase = 'damaged';

      if (this.viewport.args.audio) {
        this.hitSound.currentTime = 0;
        this.hitSound.volume = 0.35 + Math.random() * -0.15;
        this.hitSound.play();
      }
    }
  }, {
    key: "pointIsSafe",
    value: function pointIsSafe(x, y) {
      var hazards = this.viewport.actorsAtPoint(x, y).filter(function (a) {
        return a.hazard;
      });

      if (hazards.length) {
        return false;
      }

      return true;
    } // get solid() { return this.args.hitPoints > 0; }

  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return Beelzebub;
}(_Mixin.Mixin.from(_PointActor.PointActor));

exports.Beelzebub = Beelzebub;
});

;require.register("actor/Bell.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bell = void 0;

var _Mixin = require("curvature/base/Mixin");

var _PointActor = require("./PointActor");

var _Constrainable = require("../mixin/Constrainable");

var _Ring = require("./Ring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Bell = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Bell, _Mixin$from);

  var _super = _createSuper(Bell);

  function Bell() {
    var _this;

    _classCallCheck(this, Bell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.z = 100;
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args.type = 'actor-item actor-bell'; // this.args.ropeLength = this.args._tiedTo ? this.args.ropeLength : 0;

    _this.cooldown = 0;
    _this.noClip = true;
    _this.args.gravity = 0.40;
    return _this;
  }

  _createClass(Bell, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      this.xLast = this.x;
      this.yLast = this.y;

      _get(_getPrototypeOf(Bell.prototype), "update", this).call(this);

      if (this.cooldown > 0) {
        this.cooldown--;
      }

      if (this.cooldown < 1) {
        this.cooldown = 0;
      }

      var tiedTo = this.args.tiedTo;
      this.setPos();
      this.args.falling = true;
      var moved = this.x - this.xLast;

      if (Math.abs(moved) > 1) {
        this.args.animation = ['ring-left', '', 'ring-right'][1 + Math.sign(this.x - this.xLast)];
      } else {
        this.args.animation = '';
      }

      if (!this.cooldown && (Math.abs(this.args.xSpeed) > 2 || Math.abs(this.args.ySpeed) > 6)) {
        var ring = new _Ring.Ring({
          x: this.x,
          y: this.y
        });
        ring.dropped = true;
        ring.delay = 15;
        ring.args["static"] = false;
        ring.args.ignore = 10;
        ring.args.xSpeed = this.args.xSpeed * 0.75;
        ring.args.ySpeed = this.args.ySpeed;
        var spawnOffset = this.rotatePoint(0, 32);
        ring.args.x += spawnOffset[0];
        ring.args.y += spawnOffset[1];
        this.viewport.spawn.add({
          object: ring
        });
        this.cooldown = 45 * Math.random() + 15;
        this.viewport.onFrameOut(120, function () {
          _this2.viewport.actors.remove(ring);
        });
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (Math.abs(this.args.xSpeed) < 3 && Math.abs(this.args.ySpeed) < 3) {
        if (this.viewport && !this.viewport.auras.has(this)) {
          this.viewport.auras.add(this);
        }
      } else {
        this.viewport.auras["delete"](this);
      } // if(this.args.tiedTo)
      // {
      // 	super.update();
      // 	if(this.args.tiedTo && this.args._tiedTo.args.hitPoints)
      // 	{
      // 		this.setPos();
      // 	}
      // 	else
      // 	{
      // 		this.noClip = true;
      // 	}
      // }


      _get(_getPrototypeOf(Bell.prototype), "updateEnd", this).call(this);
    }
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (!other.controllable) {
        return;
      }

      this.args.xSpeed = other.args.xSpeed;
      this.args.ySpeed = other.args.ySpeed;
      other.args.xSpeed *= 0.99;
      this.viewport.args.backdrop.args.sunrise = 1;
    }
  }]);

  return Bell;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.Bell = Bell;
});

;require.register("actor/Block.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Block = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Ring = require("./Ring");

var _QuintInOut = require("curvature/animate/ease/QuintInOut");

var _CubicInOut = require("curvature/animate/ease/CubicInOut");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Block = /*#__PURE__*/function (_PointActor) {
  _inherits(Block, _PointActor);

  var _super = _createSuper(Block);

  function Block() {
    var _this$args$z, _args$convey, _this$args$solid, _args$collapse;

    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Block);

    _this = _super.call(this, args, parent);
    _this.args.yForce = 0;
    _this.args.yLean = 0;
    _this.args.z = (_this$args$z = _this.args.z) !== null && _this$args$z !== void 0 ? _this$args$z : 100;
    _this.args.type = 'actor-item actor-block';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.args.convey = (_args$convey = args.convey) !== null && _args$convey !== void 0 ? _args$convey : 0;
    _this.args.conveyed = 0;
    _this.args.ySpeedMax = 16;
    _this.originalX = _this.args.x;
    _this.originalY = _this.args.y;
    _this.args.solid = (_this$args$solid = _this.args.solid) !== null && _this$args$solid !== void 0 ? _this$args$solid : true;
    _this.args.gravity = 0.4;
    _this.args.collapse = (_args$collapse = args.collapse) !== null && _args$collapse !== void 0 ? _args$collapse : false;
    _this.args.active = -1;
    _this.weighted = false; // this.args.bindTo('spriteSheet', v => console.trace(v));

    return _this;
  }

  _createClass(Block, [{
    key: "onAttached",
    value: function onAttached(event) {
      if (!this.viewport) {
        return;
      }

      if (this.args.match) {
        this.match = this.viewport.actorsById[this.args.match];
      } // if(this.screen)
      // {
      // 	return;
      // }
      // this.screen = new Tag(`<input type = "text" placeholder = "this effect is dynamic">`);
      // this.screen2 = new Tag(`<input tabindex = "0" type = "button" value = "submit">`);
      // this.sprite.appendChild(this.screen.node);
      // this.sprite.appendChild(this.screen2.node);
      // this.screen.style({'pointer-events':'initial', 'z-index': 1000});


      if (!this.viewport) {
        event.preventDefault();
        return false;
      }

      this.args.spriteSheet = this.args.spriteSheet || '/Sonic/marble-zone-block.png';
      this.droop(0);
      this.args.collapse && this.tags.sprite.classList.add('collapse');
      this.args.platform && this.tags.sprite.classList.add('platform');

      if (this.args.hidden) {
        event && event.preventDefault();
        return false;
      }

      this.setTile();
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (other.isRegion || other.noClip) {
        return false;
      }

      if (other.args.standingOn === this) {
        this.weighted = true;
      }

      if (other instanceof this.constructor && !other.args.falling) {
        return false;
      }

      if (!other.args.falling && this.args.droop && other.args.ySpeed >= 0 && other.args.standingOn !== this) {
        return true;
      }

      if (this.args.droop && other.controllable && (type === 0 || type === 2) && other.args.ySpeed >= 0) {
        var blockTop = this.originalY + -this.args.height;
        var half = Math.floor(this.args.width / 2);
        var speed = other.args.gSpeed;
        var absSpeed = Math.abs(speed);

        if (absSpeed > half) {
          this.args.y = this.originalY;
          other.args.y = blockTop + -1;
          this.args.yForce = 0;
          this.args.yLean = 0;
          return true;
        }

        var pos = (this.x + -other.x + -(speed * 2)) / half;
        var droop = Number(this.args.droop) * 0.9;
        var absPos = Math.abs(pos); // this.screen.placeholder = `drooping at ${pos.toFixed(2)}`;

        if (absPos >= 0.9) {
          this.args.yForce = 0;
          this.args.yLean = this.args.yLean / 100;
          return true;
        }

        var yForceMax = Math.round(droop * (1 - Math.abs(pos)) / 2);
        this.args.yForce += Math.max(other.ySpeedLast, 0);
        this.args.yForce = Math.min(yForceMax, this.args.yForce);
        this.args.yForce = Math.max(this.args.yForce, -yForceMax);
        this.droopPos = this.x - other.x; // if(this.args.output)
        // {
        // 	const output = this.viewport.actorsById[ this.args.output ];
        // 	if(output)
        // 	{
        // 		output.args.content = this.screen.value;
        // 	}
        // }
      }

      if (type === -1 && !this.args.platform && other.controllable && other.args.ySpeed) {
        // if(other.args.y < this.args.y)
        // {
        // 	other.args.y = this.y + -this.args.height + this.args.ySpeed + -1
        // 	if(other.args.ySpeed < 0)
        // 	{
        // 		other.args.ySpeed = this.args.ySpeed
        // 	}
        // 	else
        // 	{
        // 		other.args.y = this.y + other.args.height + -this.args.ySpeed + 1;
        // 		other.args.ySpeed = this.args.ySpeed;
        // 	}
        // }
        if (other.args.y < this.args.y) {
          other.args.y = this.y + -this.args.height + this.args.ySpeed;
          other.args.ySpeed = this.args.ySpeed;
        }

        this.onNextFrame(function () {
          other.args.y = _this2.y + -_this2.args.height;
          other.args.falling = false;
        });
        return;
      }

      if (this.args.platform && !(other instanceof _Ring.Ring)) {
        // if(other.willStick)
        // {
        // 	return false;
        // }
        var otherTop = other.y - other.args.height;

        var _blockTop = this.y - this.args.height;

        var halfWidth = this.args.width / 2;

        if (other.args.falling && other.y - _blockTop < 16 && other.args.ySpeed >= 0 && !other.args["float"] && Math.abs(other.x - this.x) < halfWidth - 16) {
          if (other.controllable) {
            other.args.y = -1 + _blockTop;
          } else {
            other.args.y = _blockTop;
          }
        }

        if (other.y <= _blockTop && (other.args.falling === false || other.args.ySpeed > 0)) {
          return true;
        }

        if (other.args.npc && !other.args.falling && this.args.falling && !this.args["float"]) {
          other.startle();
        }

        return false;
      }

      if (!other.controllable && !other.isVehicle) {
        return true;
      }

      if (!this["switch"] && this.args.collapse && (type === 0 || type === 2) && this.args["float"] <= 0) {
        if (other.args.ySpeed > 15) {
          this.args["float"] = 1;
          this.args.goBack = false;
          var ySpeed = other.args.ySpeed;
          this.onNextFrame(function () {
            if (_this2.args.falling || _this2.args["float"]) {
              _this2.args.ySpeed = ySpeed;
              _this2.args["float"] = 1;
            } else {
              _this2.args.ySpeed = -1;
              _this2.args["float"] = 1;
            }

            _this2.args.falling = true;
          });
        } else if (other.args.ySpeed > 0 || other.args.gSpeed) {
          this.args["float"] = this.args["float"] >= 0 ? this.args["float"] : this.args.delay || 0;
        }
      }

      return true;
    }
  }, {
    key: "onAttach",
    value: function onAttach(event) {}
  }, {
    key: "activate",
    value: function activate() {
      this.args.active = true;
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.args.active = false;
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (!this.viewport) {
        return;
      }

      if (this.args["switch"] && !this["switch"]) {
        this["switch"] = this.viewport.actorsById[this.args["switch"]];
      }

      if (this.args.collapse) {
        this.args.gSpeed = 0;

        if (this["switch"] && this["switch"].args.active) {
          this.args["float"] = this.args["float"] >= 0 ? this.args["float"] : this.args.delay || 0;

          if (!this.args["float"]) {
            this.args.ySpeed = this.args.ySpeed || 12;
          }
        }
      }

      if (this.match) {
        this.args.convey = -this.match.args.convey;
      }

      this.xLast = this.args.x;
      this.yLast = this.args.y;

      if (this.args["float"] && (this.args.oscillateX || this.args.oscillateY)) {
        var current = Math.pow(Math.cos(Math.pow(Math.sin(this.viewport.args.frameId / 90), 5)), 5 * 3.333);

        if (this.args.oscillateX) {
          var moveX = Math.round(current * this.args.oscillateX);
          this.args.x = this.originalX - moveX;
        }

        if (this.args.oscillateY) {
          var moveY = Math.round(current * this.args.oscillateY);
          this.args.y = this.originalY - moveY;
        }
      }

      if (!this["switch"] && this.args.collapse) {
        if (!this.reset && !this.args.once) {
          this.reset = true;
          this.viewport.onFrameOut(300, function () {
            _this3.args.groundAngle = 0;
            _this3.args.falling = true;
            _this3.args.goBack = true;
            _this3.args["float"] = -1;
            _this3.reset = false;
          });
        }

        if (!this.args.worm && this.args.goBack) {
          this.args["float"] = -1;
          this.noClip = true;
          var distX = this.originalX - this.args.x;
          var distY = this.originalY - this.args.y;
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;
          this.args.gSpeed = 0;

          if (Math.abs(distX) > 3) {
            this.args.x += Math.sign(distX) * 3;
          } else {
            this.args.x = this.originalX;
          }

          if (Math.abs(distY) > 3) {
            this.args.y += Math.sign(distY) * 3;
          } else {
            this.args.y = this.originalY;
          }

          if (this.args.x === this.originalX && this.args.y === this.originalY) {
            this.args.goBack = false;
            this.noClip = false;
          }

          this.args.groundAngle = 0;
          this.args.airAngle = 0;
        }
      } else if (this.args.droop) {
        this.snapBack = this.snapBack || false;

        if (!this.args.colliding && this.args.yForce && this.viewport) {
          this.viewport.onFrameOut(4, function () {
            if (!_this3.args.colliding) {
              _this3.snapBack = true;
            }
          });
        }

        if (!this.args.colliding && this.args.yForce && this.snapBack) {
          this.args.yForce *= 0.15;
        }

        if (Math.abs(this.args.yForce) <= 1) {
          // this.screen.placeholder = `flat.`;
          this.snapBack = false;
        }

        if (this.args.yForce !== this.args.yLean) {
          var diff = this.args.yLean - this.args.yForce;
          var step = this.args.yForce > this.args.yLean ? Math.abs(diff) * 0.666 : Math.abs(diff) * 0.333;
          this.args.yLean -= Math.sign(diff) * step;

          if (Math.abs(diff) < step) {
            this.args.yLean = this.args.yForce;
          }
        }

        if (!this.args.yLean) {
          this.args.y = this.originalY;
        } else {
          this.args.y = Math.ceil(this.originalY + this.args.yLean) || this.originalY;
          this.droop(-1 * this.args.yLean, this.droopPos || 0); // this.onNextFrame(() => {
          // 	this.args.y = Math.ceil(this.originalY + this.args.yLean) || this.originalY;
          // 	this.droop(-1 * this.args.yLean, this.droopPos || 0);
          // });
        }
      }

      this.box && this.box.style({
        '--convey': Math.abs(this.args.convey)
      });
      this.box && this.box.style({
        '--conveyDir': Math.sign(this.args.conveyed)
      });
      this.args.conveyed += this.args.convey;
      this.box && this.box.style({
        '--conveyed': this.args.conveyed * 0.8
      });

      _get(_getPrototypeOf(Block.prototype), "update", this).call(this);
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      this.weighted = false;
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(Block.prototype), "updateEnd", this).call(this); // if(!this.viewport.collisions.has(this))
      // {
      // 	return;
      // }


      if (this.args["float"] && this.args.settle) {
        if (this.weighted && this.args.y < this.def.get('y') + this.args.settle) {
          this.args.y += Math.min(Math.abs(this.args.settle), 64) / 8 * Math.sign(this.args.settle);
        }

        if (!this.weighted && this.y > this.def.get('y')) {
          this.args.y -= Math.min(Math.abs(this.args.settle), 32) / 8 * Math.sign(this.args.settle);
        }
      }

      if (!this.viewport || !this.viewport.collisions.has(this)) {
        return;
      }

      var collidees = this.viewport.collisions.get(this);

      if (this.args.treadmill) {
        this.args.convey = 0;
        var speedCount = 0;
        var speedSum = 0;

        var _iterator = _createForOfIteratorHelper(collidees),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                collidee = _step$value[0],
                type = _step$value[1];

            if (collidee.args.standingOn !== this) {
              continue;
            }

            if (collidee.args.gSpeed) {
              speedCount++;
              speedSum += collidee.args.gSpeed;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (speedCount) {
          this.args.convey = -speedSum / speedCount;
        }
      }

      if (this.args.convey) {
        var _iterator2 = _createForOfIteratorHelper(collidees),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                _collidee = _step2$value[0],
                _type = _step2$value[1];

            if (!_collidee.controllable || _collidee.args.falling) {
              continue;
            }

            var conveyTo = _collidee.findNextStep(this.args.convey);

            if (conveyTo[3]) {
              continue;
            }

            if (conveyTo[2]) {
              _collidee.args.xSpeed = this.args.convey;
              _collidee.args.ySpeed = 0;
              _collidee.args.falling = true;
              _collidee.args.y = -1 + this.y - this.args.height;
            }

            _collidee.args.x += conveyTo[0];
            _collidee.args.y += conveyTo[1];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (this.args.collapse && this.args.once && !this.args["float"]) {
        this.viewport.actors.remove(this);
      }
    }
  }, {
    key: "popOut",
    value: function popOut(other) {
      if (this.args.platform) {
        return;
      }

      _get(_getPrototypeOf(Block.prototype), "popOut", this).call(this, other);
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return !this.args.platform;
    }
  }, {
    key: "solid",
    get: function get() {
      return this.args.solid && (!this.args.collapse || this.args["float"] !== 0 || !this.args.goBack);
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Block), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height; // obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);

      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return Block;
}(_PointActor2.PointActor);

exports.Block = Block;
});

;require.register("actor/Block3d.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Block3d = void 0;

var _MarbleBlock2 = require("./MarbleBlock");

var _LavaRegion = require("../region/LavaRegion");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Block3d = /*#__PURE__*/function (_MarbleBlock) {
  _inherits(Block3d, _MarbleBlock);

  var _super = _createSuper(Block3d);

  function Block3d() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Block3d);

    _this = _super.call(this, args);
    _this.args.type = 'actor-item actor-block-3d';
    return _this;
  }

  return _createClass(Block3d);
}(_MarbleBlock2.MarbleBlock);

exports.Block3d = Block3d;
});

;require.register("actor/BreakableBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BreakableBlock = void 0;

var _Block2 = require("./Block");

var _Orb = require("./Orb");

var _Tag = require("curvature/base/Tag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BreakableBlock = /*#__PURE__*/function (_Block) {
  _inherits(BreakableBlock, _Block);

  var _super = _createSuper(BreakableBlock);

  function BreakableBlock() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, BreakableBlock);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-breakable-block';

    if (_this.args.collapse) {
      _this.args.type = 'actor-item actor-breakable-block collapsible-block';
    }

    _this.args["static"] = true;
    _this.args.strength = 0 || Number(_this.args.strength);
    _this.fragmentsX = new _Tag.Tag('<div class = "fragmentsX">');
    _this.fragmentsY = new _Tag.Tag('<div class = "fragmentsY">');
    _this.fragmentTopLeft = new _Tag.Tag('<div class = "fragment fragment-top-left">');
    _this.fragmentTopRight = new _Tag.Tag('<div class = "fragment fragment-top-right">');
    _this.fragmentBottomLeft = new _Tag.Tag('<div class = "fragment fragment-bottom-left">');
    _this.fragmentBottomRight = new _Tag.Tag('<div class = "fragment fragment-bottom-right">');

    _this.fragmentsY.append(_this.fragmentTopLeft.node);

    _this.fragmentsY.append(_this.fragmentTopRight.node);

    _this.fragmentsY.append(_this.fragmentBottomLeft.node);

    _this.fragmentsY.append(_this.fragmentBottomRight.node);

    _this.fragmentsX.append(_this.fragmentsY.node);

    _this.broken = false;
    return _this;
  }

  _createClass(BreakableBlock, [{
    key: "onRendered",
    value: function onRendered() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.box.append(this.fragmentsX.node);

      _get(_getPrototypeOf(BreakableBlock.prototype), "onRendered", this).call(this);
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      _get(_getPrototypeOf(BreakableBlock.prototype), "updateStart", this).call(this);

      if (this["switch"]) {
        if (this["switch"].args.active && !this.broken) {
          this["break"]();
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/0A3H.wav');
      }

      _get(_getPrototypeOf(BreakableBlock.prototype), "update", this).call(this);
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler() {
      var _get2;

      if (this.broken) {
        return false;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_get2 = _get(_getPrototypeOf(BreakableBlock.prototype), "callCollideHandler", this)).call.apply(_get2, [this].concat(args));
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other instanceof _Block2.Block && (other.args["float"] || this.args["float"])) {
        return false;
      }

      if (!(other instanceof _Orb.Orb) && !other.isVehicle && !other.controllable && !other.args.rolling) {
        return !this.broken;
      }

      if (this.args.collapse) {
        if (!this.broken && other.y <= this.y - this.args.height) {
          this.fragmentsX.style({
            '--xSpeed': 0
          });

          if (!other.args.falling) {
            if (this.args.worm) {
              this.delayedBreak(5);
            } else {
              this.delayedBreak(25);
            }
          }

          return true;
        }

        if (!this.broken) {
          if (!other.args.falling || other.args.ySpeed > 0 && other.y < this.y - this.args.height) {
            return true;
          }
        }

        return false;
      }

      if (this.args.strength === -1) {
        return true;
      }

      if (this.args.strength === 1 && other.args.name === 'knuckles') {
        if (other.args.falling || Math.abs(other.args.gSpeed) > 4) {
          this.broken || this["break"](other);
          return false;
        }
      }

      if (this.args.strength === 1) {
        if (other.args.name !== 'knuckles' && !other.isVehicle) {
          return true;
        } else if (other.args.name !== 'knuckles' || other.args.falling || Math.abs(other.args.gSpeed) > 4) {
          this.broken || this["break"](other);
          return false;
        }
      }

      if (this.args.strength === 2) {
        if (!other.isVehicle) {
          return true;
        } else {
          this.broken || this["break"](other);
          return false;
        }
      }

      if (!(other.args.rolling && other.args.mode) && !other.isVehicle && !other.args.spinning) {
        if (other.args.falling && !(other.dashed || other.args.jumping) || !other.args.falling && type === 0) {
          return !this.broken;
        }
      }

      if (!(other instanceof _Orb.Orb) && !other.falling && !other.isVehicle && !other.args.gSpeed && !other.args.xSpeed && !other.args.ySpeed) {
        return !this.broken;
      }

      if (other instanceof _Orb.Orb || other.args.spinning || other.args.dashed || other.punching) {
        var top = this.y - this.args.height;

        if (this.args.bounceBack && other.args.jumping && other.y < top) {
          other.args.ySpeed *= -bounceBack;
          other.args.y = top;
        }

        this["break"](other);
        return false;
      }

      return !this.broken;
    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (!this.viewport) {
        return;
      }

      if (this.args.dontRestore) {
        return;
      }

      if (this.args.collapse) {
        this.args["static"] = true;
        this.args.falling = false;
        this.args["float"] = -1;
        this.args.ySpeed = 0;
        this.noClip = false;
        this.args.ySpeed = 0;
        this.box.classList.remove('broken');
        this.box.classList.remove('breaking');
        this.broken = false;
      }

      if (this.args.worm) {
        this.args.x += this.args.worm;
      } else {
        this.args.x = this.def.get('x');
      }

      this.args.y = this.def.get('y') + 1;
      this.box.classList.remove('broken'); // this.args.y = this.def.get('y') + 1;

      this.args.active = 0;
      this.broken = false;
      this.viewport.setColCell(this);
    }
  }, {
    key: "delayedBreak",
    value: function delayedBreak() {
      var _this2 = this;

      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
      var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (other && other.args.falling) {
        return;
      }

      this.viewport.onFrameOut(delay, function () {
        return _this2["break"](other);
      });
    }
  }, {
    key: "break",
    value: function _break(other) {
      var _this3 = this;

      if (this.box) {
        this.box.classList.add('breaking');
        this.box.classList.add('broken');
      }

      if (this.sample && !this.broken) {
        this.sample.volume = 0.7 + Math.random() * -0.2;
        this.sample.currentTime = 0.4 + Math.random() * -0.1;
        this.sample.play();
      }

      this.viewport.onFrameOut(4, function () {
        _this3.box && _this3.box.classList.remove('breaking');
      });

      if (!this.args.collapse && other && other.args.mode % 2 === 0) {
        var x = other.args.xSpeed || other.args.gSpeed;

        if (other.isVehicle) {
          this.fragmentsX.style({
            '--xSpeed': Math.round(x * 1.1)
          });
        } else {
          this.fragmentsX.style({
            '--xSpeed': Math.round(x)
          });
        }
      }

      if (!this.refresher) {
        this.refresher = true;
      }

      this.args.active = 1;

      if (this.args.collapse && !this.broken) {
        var left = this.viewport.actorsAtPoint(this.x - this.args.width, this.y);
        var right = this.viewport.actorsAtPoint(this.x + this.args.width, this.y);

        if (Array.isArray(left) && !Math.sign(this.args.worm)) {
          var _iterator = _createForOfIteratorHelper(left),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var actor = _step.value;

              if (!(actor instanceof BreakableBlock)) {
                continue;
              }

              if (!actor.args.collapse) {
                continue;
              }

              if (actor.broken) {
                continue;
              }

              actor.delayedBreak(8);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        if (Array.isArray(right) && !Math.sign(this.args.worm)) {
          var _iterator2 = _createForOfIteratorHelper(right),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _actor = _step2.value;

              if (!(_actor instanceof BreakableBlock)) {
                continue;
              }

              if (!_actor.args.collapse) {
                continue;
              }

              if (_actor.broken) {
                continue;
              }

              _actor.delayedBreak(8);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }

      if (this.viewport.settings.rumble && !this.broken && other && other.controller && other.controller.rumble) {
        other.controller && other.controller.rumble && other.controller.rumble({
          duration: 140,
          strongMagnitude: 1.0,
          weakMagnitude: 1.0
        });
        this.onTimeout(140, function () {
          other.controller.rumble({
            duration: 100,
            strongMagnitude: 0.0,
            weakMagnitude: 0.25
          });
        });
      }

      this.broken = true;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';
      this["break"](other);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.broken;
    }
  }]);

  return BreakableBlock;
}(_Block2.Block);

exports.BreakableBlock = BreakableBlock;
});

;require.register("actor/BrokenMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrokenMonitor = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Monitor = require("../actor/Monitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BrokenMonitor = /*#__PURE__*/function (_PointActor) {
  _inherits(BrokenMonitor, _PointActor);

  var _super = _createSuper(BrokenMonitor);

  function BrokenMonitor() {
    var _this;

    _classCallCheck(this, BrokenMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-monitor actor-monitor-broken';
    _this.args.width = 28;
    _this.args.height = 32;
    return _this;
  }

  _createClass(BrokenMonitor, [{
    key: "collideA",
    value: function collideA(other) {
      // if(other instanceof Monitor)
      // {
      // 	this.viewport && this.viewport.actors.remove(this);
      // 	return false;
      // }
      _get(_getPrototypeOf(BrokenMonitor.prototype), "collideA", this).call(this, other);

      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return BrokenMonitor;
}(_PointActor2.PointActor);

exports.BrokenMonitor = BrokenMonitor;
});

;require.register("actor/Bubbles.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bubbles = void 0;

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _Flickie = require("./Flickie");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var _ElectricSheild = require("../powerups/ElectricSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Bubbles = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Bubbles, _Mixin$from);

  var _super = _createSuper(Bubbles);

  function Bubbles() {
    var _this;

    _classCallCheck(this, Bubbles);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-bubbles';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 32;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args["float"] = -1;
    _this.args["static"] = true;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    _this.aiming = false;
    return _this;
  }

  _createClass(Bubbles, [{
    key: "onAttached",
    value: function onAttached() {
      this.shield = new _ElectricSheild.ElectricSheild();

      if (this.args.electric) {
        this.inventory.add(this.shield);
        this.args.currentSheild = this.shield;
      }

      this.autoAttr.get(this.box)['data-gold'] = 'gold';
      this.autoAttr.get(this.box)['data-fade'] = 'fade';
      this.chain = new _Tag.Tag('<div class = "bubbles-flame">');
      this.sprite.appendChild(this.chain.node);
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.viewport || !this.viewport.controlActor) {
        return;
      }

      if (this.args.gold && !this.args.fading) {
        if (Math.abs(this.viewport.controlActor.x - this.x) < 256 && Math.abs(this.viewport.controlActor.y - this.y) < 128) {
          this.args.fading = true;
          var viewport = this.viewport;
          viewport.onFrameOut(25, function () {
            return _this2.args.fade = true;
          });
          viewport.onFrameOut(55, function () {
            return viewport.actors.remove(_this2);
          });
        }
      }

      if (this.viewport && this.args.electric && this.viewport.args.frameId % 100 === 0) {
        this.args.currentSheild = this.args.currentSheild ? null : this.shield;
      } // this.args.ySpeed = this.yAxis;


      if (this.box) {
        this.box.setAttribute('data-animation', 'standing');
      }

      this.args.falling = true;
      this.args.flying = true;

      _get(_getPrototypeOf(Bubbles.prototype), "update", this).call(this);
    }
  }, {
    key: "hold_1",
    value: function hold_1() {
      this.aiming = true;
    }
  }, {
    key: "release_1",
    value: function release_1() {
      this.aiming = false;
    }
  }, {
    key: "effect",
    value: function effect(other) {
      _get(_getPrototypeOf(Bubbles.prototype), "effect", this).call(this, other); // this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});

    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }]);

  return Bubbles;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.Bubbles = Bubbles;
});

;require.register("actor/Bumper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bumper = void 0;

var _PointActor2 = require("./PointActor");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Bumper = /*#__PURE__*/function (_PointActor) {
  _inherits(Bumper, _PointActor);

  var _super = _createSuper(Bumper);

  function Bumper() {
    var _this;

    _classCallCheck(this, Bumper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-bumper';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.ignores = new Map();
    _this.sample = new Audio('/Sonic/S3K_AA.wav');
    return _this;
  }

  _createClass(Bumper, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Bumper.prototype), "update", this).call(this);

      var _iterator = _createForOfIteratorHelper(this.ignores),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              val = _step$value[1];

          this.ignores.set(key, -1 + val);

          if (val === 0) {
            this.ignores["delete"](key);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (other["static"] || other.isRegion || this.ignores.has(other) || other.noClip) {
        return;
      }

      this.args.type = 'actor-item actor-bumper actor-bumper-active';
      this.viewport.onFrameOut(3, function () {
        return _this2.args.type = 'actor-item actor-bumper';
      });

      if (other.args.falling) {
        if (this.viewport.args.audio) {
          this.sample.volume = 0.15 + Math.random() * -0.05;
          this.sample.currentTime = 0;
          this.sample.play();
        }

        var xDiff = this.x - other.x;
        var yDiff = this.y - other.y;
        var speed = Math.max(12, Math.sqrt(Math.pow(other.args.xSpeed, 2), Math.pow(other.args.ySpeed, 2)));
        var angle = Math.atan2(yDiff, xDiff);
        var otherRadius = other.args.width / 2;
        other.args.x = this.x; // + Math.cos(angle) * 10;

        other.args.y = this.y; // + Math.sin(angle) * 10;

        other.args.xSpeed = -speed * Math.cos(angle);
        other.args.ySpeed = -speed * Math.sin(angle);
      } else {
        other.args.gSpeed *= -1;

        if (Math.abs(other.args.gSpeed) < 7) {
          other.args.gSpeed = 7 * Math.sign(other.args.gSpeed);
        }
      }

      this.ignores.set(other, 8);

      if (this.viewport.settings.rumble && other && other.controller && other.controller.rumble) {
        other.controller.rumble({
          duration: 120,
          strongMagnitude: 1.0,
          weakMagnitude: 1.0
        });
        this.onTimeout(120, function () {
          other.controller.rumble({
            duration: 120,
            strongMagnitude: 0.0,
            weakMagnitude: 1.0
          });
        });
      }
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return Bumper;
}(_PointActor2.PointActor);

exports.Bumper = Bumper;
});

;require.register("actor/BuzzBomber.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BuzzBomber = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BuzzBomber = /*#__PURE__*/function (_Mixin$from) {
  _inherits(BuzzBomber, _Mixin$from);

  var _super = _createSuper(BuzzBomber);

  function BuzzBomber() {
    var _this;

    _classCallCheck(this, BuzzBomber);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-buzz-bomber';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 32;
    _this.args.height = 16;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args["float"] = -1;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    _this.aiming = false;
    return _this;
  }

  _createClass(BuzzBomber, [{
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(BuzzBomber.prototype), "onRendered", this).call(this);

      this.flame = new _Tag.Tag('<div class = "buzz-bomber-flame">');
      this.wings = new _Tag.Tag('<div class = "buzz-bomber-wings">');
      this.sprite.appendChild(this.flame.node);
      this.sprite.appendChild(this.wings.node);

      if (this.aiming) {
        this.box.setAttribute('data-animation', 'aiming');
      } else {
        var direction = this.args.direction;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      this.args.ySpeed = this.yAxis;

      if (!this.flame) {}

      if (this.args.xSpeed === 0 && this.viewport) {
        this.viewport.onFrameOut(10, function () {
          _this2.attack();
        });
      }

      this.args.falling = true;
      this.args.flying = true;

      _get(_getPrototypeOf(BuzzBomber.prototype), "update", this).call(this);
    }
  }, {
    key: "command_1",
    value: function command_1() {
      this.aiming = !this.aiming; // if(this.aiming)
      // {
      // 	this.args.xSpeed = 0;
      // 	this.args.ySpeed = 0;
      // }
    }
  }, {
    key: "command_2",
    value: function command_2() {
      if (!this.aiming || !this.viewport) {
        return;
      }

      var offset = [0, -24];
      var projectile = new _Projectile.Projectile({
        direction: this.args.direction,
        x: this.args.x + offset[0] + (this.args.xSpeed || this.args.gSpeed),
        y: this.args.y + offset[1],
        owner: this,
        xSpeed: this.args.xSpeed || this.args.gSpeed,
        YSpeed: this.args.YSpeed
      });
      projectile.impulse(18, 1.57 + Math.PI / 4 * 1);
      this.viewport.auras.add(projectile);
      this.viewport.spawn.add({
        object: projectile
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      _get(_getPrototypeOf(BuzzBomber.prototype), "effect", this).call(this, other); // this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});

    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {
      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      this.sleeping = false;
      this.attack();
    }
  }, {
    key: "attack",
    value: function attack() {
      var _this3 = this;

      if (this.sleeping || this.attacking) {
        return;
      }

      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      this.args.direction = -1;
      this.args.facing = 'left';
      this.args.xSpeed = -10;
      this.aiming = false;
      this.attacking = true;
      viewport.onFrameOut(5, function () {
        _this3.aiming = true;
        viewport.onFrameOut(5, function () {
          var shots = 2;
          var cancelInterval = viewport.onFrameInterval(5, function () {
            _this3.command_2();

            shots-- || cancelInterval();
          });
        });
      });
      viewport.onFrameOut(50, function () {
        var xSpeed = _this3.args.xSpeed;
        _this3.args.xSpeed = 0.5 * -xSpeed;
        viewport.onFrameOut(100, function () {
          _this3.aiming = false;
          _this3.attacking = false;
          _this3.args.xSpeed = 0;
          _this3.args.ySpeed = 0;
        });
      });
    }
  }, {
    key: "sleep",
    value: function sleep() {
      var _this4 = this;

      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.onNextFrame(function () {
        if (!_this4.viewport) {
          return;
        }

        _this4.args.x = _this4.def.get('x');
        _this4.args.y = _this4.def.get('y');

        _this4.viewport.setColCell(_this4);

        _this4.args.xSpeed = 0;
        _this4.args.ySpeed = 0;
        _this4.args.pushed = 0;
        _this4.args["float"] = 0;
        _this4.attacking = false;
        _this4.sleeping = true;
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return BuzzBomber;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.BuzzBomber = BuzzBomber;
});

;require.register("actor/CautionSign.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CautionSign = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CautionSign = /*#__PURE__*/function (_PointActor) {
  _inherits(CautionSign, _PointActor);

  var _super = _createSuper(CautionSign);

  function CautionSign() {
    var _this;

    _classCallCheck(this, CautionSign);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 20;
    _this.args.height = 60;
    _this.args.type = 'actor-item actor-caution-sign';
    return _this;
  }

  _createClass(CautionSign, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return CautionSign;
}(_PointActor2.PointActor);

exports.CautionSign = CautionSign;
});

;require.register("actor/Chalmers.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chalmers = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Chalmers = /*#__PURE__*/function (_PointActor) {
  _inherits(Chalmers, _PointActor);

  var _super = _createSuper(Chalmers);

  function Chalmers() {
    var _this;

    _classCallCheck(this, Chalmers);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-chalmers';
    _this.args.normalHeight = 45;
    _this.args.rollingHeight = 23;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 32;
    return _this;
  }

  _createClass(Chalmers, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Chalmers.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.args.rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.box.setAttribute('data-animation', 'standing');
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Chalmers.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Chalmers;
}(_PointActor2.PointActor);

exports.Chalmers = Chalmers;
});

;require.register("actor/Chao.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chao = void 0;

var _Png = require("../sprite/Png");

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Chao = /*#__PURE__*/function (_PointActor) {
  _inherits(Chao, _PointActor);

  var _super = _createSuper(Chao);

  function Chao() {
    var _this;

    _classCallCheck(this, Chao);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "png", new _Png.Png('/DBurraki/chao-normal.png'));

    _this.args.type = 'actor-item actor-chao';
    _this.args.spriteSheet = _this.spriteSheet = '/DBurraki/chao-normal.png';
    _this.args.width = 14;
    _this.args.height = 18;
    _this.emotes = ['normal', 'alert', 'inquire', 'like', 'love', 'angry'];
    _this.emoteIndex = 0; // this.animations = ['standing', 'thinking', 'walking', 'flying', 'sitting', 'searching', 'swimming', 'flying'];
    // this.animationIndex = 0;

    _this.args.animation = 'standing';

    _this.bindTo('carriedBy', function (carrier) {
      if (_this.cX) {
        _this.cX();

        _this.cX = null;
      }

      if (_this.cY) {
        _this.cY();

        _this.cY = null;
      }

      if (carrier) {
        _this.cX = carrier.args.bindTo('x', function (v) {
          return _this.args.x = v + carrier.args.direction * 8;
        });
        _this.cY = carrier.args.bindTo('y', function (v) {
          return _this.args.y = v + -16;
        });
        carrier.carrying.add(_assertThisInitialized(_this));
        _this.args["float"] = -1;
      } else if (_this.carriedBy) {
        var _carrier = _this.carriedBy;
        _this.carriedBy = null;
        _this.args.xSpeed = _carrier.args.xSpeed;
        _this.args.ySpeed = _carrier.args.ySpeed;
        _this.args.xSpeed += Math.sign(_carrier.args.gSpeed || _carrier.args.xSpeed) * 4;
        _this.args.ySpeed -= 4;

        _carrier.carrying["delete"](_assertThisInitialized(_this));

        _this.args.falling = true;
        _this.args["float"] = 0;
      }
    });

    _this.args.direction = 1;
    _this.args.currentState = 'sitting';

    _this.args.bindTo('currentState', function () {
      _this.args.stateTime = 0;
    });

    return _this;
  }

  _createClass(Chao, [{
    key: "onAttached",
    value: function onAttached(event) {
      var _this2 = this;

      this.setAutoAttr('emote', 'data-emote');
      this.setAutoAttr('alignment', 'data-alignment');
      this.setAutoAttr('direction', 'data-direction');
      this.viewport.onInterval(1500, function () {
        if (_this2.emoteIndex >= _this2.emotes.length) {
          _this2.emoteIndex = 0;
        }

        _this2.args.emote = _this2.emotes[_this2.emoteIndex];
        _this2.emoteIndex++;

        _this2.viewport.onTimeout(500, function () {
          _this2.args.emote = 'normal';
        });
      }); // this.viewport.onInterval(3000, () => {
      // 	if(this.animationIndex >= this.animations.length)
      // 	{
      // 		this.animationIndex = 0;
      // 	}
      // 	this.args.animation = this.animations[this.animationIndex];
      // 	console.log(this.animations[this.animationIndex]);
      // 	this.animationIndex++;
      // });

      var heroColors = {
        'addef8': 'e4e0e4',
        '2ebee9': 'c0bde4',
        '0e6d89': '9c99c0',
        'ecde2f': 'addef8',
        'dcb936': '2ebee9',
        '985000': '0e6d89',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'cdeef8',
        'f8f820': '9c99c0' // '606080': '606080',

      };
      var darkColors = {
        'addef8': '485070',
        '2ebee9': '303058',
        '0e6d89': '202020',
        'ecde2f': 'b70000',
        'dcb936': '770000',
        '985000': '420000',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        'f8f820': 'bf999c',
        '606080': '202020'
      };
      var rubyColors = {
        'addef8': 'ff7575',
        '2ebee9': 'e00000',
        '0e6d89': '800000',
        'ecde2f': 'b70000',
        'dcb936': '770000',
        '985000': '420000',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        '606080': '202020'
      };
      var tangyColors = {
        'addef8': 'e08000',
        '2ebee9': 'b76900',
        '0e6d89': '7d4800',
        'ecde2f': 'b44800',
        'dcb936': '844221',
        '985000': '630000',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        '606080': '202020'
      };
      var limeColors = {
        'addef8': '80e000',
        '2ebee9': '69b700',
        '0e6d89': '487d00',
        'ecde2f': '48b400',
        'dcb936': '428421',
        '985000': '006300',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        '606080': '202020'
      };
      var coalColors = {
        'addef8': '485070',
        '2ebee9': '303058',
        '0e6d89': '202020',
        'ecde2f': 'c0bde4',
        'dcb936': '9c99c0',
        '985000': '606080',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        'f8f820': '9c99c0',
        '606080': '202020'
      };
      var mimeColors = {
        'addef8': 'c0bde4',
        '2ebee9': '9c99c0',
        '0e6d89': '606080',
        'ecde2f': '485070',
        'dcb936': '303058',
        '985000': '202020',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        'f8f820': '9c99c0',
        '606080': '202020'
      };
      var whiteColors = {
        'addef8': 'c0bde4',
        '2ebee9': '9c99c0',
        '0e6d89': '606080',
        'ecde2f': 'e4e0e4',
        'dcb936': 'c0bde4',
        '985000': '9c99c0',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        'f8f820': '9c99c0',
        '606080': '202020'
      };
      var limeRubyColors = {
        'addef8': '80e000',
        '2ebee9': '69b700',
        '0e6d89': '487d00',
        'ecde2f': 'b70000',
        'dcb936': '770000',
        '985000': '420000',
        'ffa3b1': 'ffa3b1',
        'fa6379': 'fa6379',
        'e4e0e4': 'e4e0e4',
        '606080': '202020'
      };
      this.png.ready.then(function () {
        _this2.heroSheet = _this2.png.recolor(heroColors).toUrl();
        _this2.darkSheet = _this2.png.recolor(darkColors).toUrl();
        _this2.rubySheet = _this2.png.recolor(rubyColors).toUrl();
        _this2.tangySheet = _this2.png.recolor(tangyColors).toUrl();
        _this2.limeSheet = _this2.png.recolor(limeColors).toUrl();
        _this2.coalSheet = _this2.png.recolor(coalColors).toUrl();
        _this2.mimeSheet = _this2.png.recolor(mimeColors).toUrl();
        _this2.whiteSheet = _this2.png.recolor(whiteColors).toUrl();
        _this2.limeRubySheet = _this2.png.recolor(limeRubyColors).toUrl();
      });
    }
  }, {
    key: "lift",
    value: function lift(actor) {
      if (this.carriedBy === actor) {
        this.carriedBy = null;
        this.args.currentState = 'standing';
        return;
      }

      this.carriedBy = actor;
      this.args.currentState = 'held';
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      if (this.args.spriteSheet === this.heroSheet) {
        this.args.spriteSheet = this.darkSheet;
        this.args.alignment = 'dark';
      } else if (this.args.spriteSheet === this.darkSheet) {
        this.args.spriteSheet = this.rubySheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.rubySheet) {
        this.args.spriteSheet = this.tangySheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.tangySheet) {
        this.args.spriteSheet = this.limeSheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.limeSheet) {
        this.args.spriteSheet = this.coalSheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.coalSheet) {
        this.args.spriteSheet = this.whiteSheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.whiteSheet) {
        this.args.spriteSheet = this.mimeSheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.mimeSheet) {
        this.args.spriteSheet = this.limeRubySheet;
        this.args.alignment = 'normal';
      } else if (this.args.spriteSheet === this.limeRubySheet) {
        this.args.spriteSheet = this.spriteSheet;
        this.args.alignment = 'normal';
      } else {
        this.args.spriteSheet = this.heroSheet;
        this.args.alignment = 'hero';
      }
    }
  }, {
    key: "onRightClick",
    value: function onRightClick(event) {
      event.preventDefault();
      event.stopPropagation();

      if (this.args.alignment === 'dark') {
        this.args.alignment = 'normal';
      } else if (this.args.alignment === 'normal') {
        this.args.alignment = 'hero';
      } else {
        this.args.alignment = 'dark';
      }
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      var _this3 = this;

      _get(_getPrototypeOf(Chao.prototype), "onRendered", this).call(this);

      if (!this.listening) {
        this.box.addEventListener('click', function (event) {
          return _this3.onClick(event);
        });
        this.box.addEventListener('contextmenu', function (event) {
          return _this3.onRightClick(event);
        });
        this.listening = true;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "update",
    value: function update() {
      switch (this.args.currentState) {
        case 'held':
          this.args.falling = false;

          if (this.args.stateTime < 15) {
            this.args.emote = 'like';
          } else if (this.args.stateTime < 60) {
            this.args.emote = 'love';
            this.args.animation = 'walking';
          } else if (this.args.stateTime === 61) {
            this.args.emote = 'normal';
            this.args.animation = 'searching';
          }

          break;

        case 'standing':
          this.args.animation = 'standing';

          if (this.args.stateTime > 120) {
            this.args.currentState = 'thinking';
          }

          break;

        case 'thinking':
          this.args.animation = 'thinking';

          if (this.args.stateTime > 60) {
            this.args.currentState = 'searching';
          } else if (this.args.stateTime == 0) {
            this.args.emote = 'inquire';
          }

          break;

        case 'searching':
          this.args.animation = 'searching';
          this.args.emote = 'inquire';

          if (this.args.stateTime > 90) {
            this.args.emote = 'alert';
          } else {
            this.args.emote = 'inquire';
          }

          if (this.args.stateTime > 120) {
            this.args.direction = Math.sign(Math.random() - 0.5);

            if (Math.random() > 0.25) {
              this.args.currentState = 'sitting';
            } else {
              this.args.currentState = 'walking';
            }
          }

          break;

        case 'walking':
          this.args.animation = 'walking';

          if (this.args.stateTime < 15) {
            this.args.emote = 'alert';
          } else if (this.args.stateTime === 16) {
            this.args.emote = 'normal';
          }

          this.args.gSpeed = 0.01 * this.args.direction;

          if (this.args.stateTime > 40) {
            this.args.currentState = 'flying';
          }

          break;

        case 'flying':
          this.args.animation = 'flying';

          if (this.args.stateTime < 45) {
            if (!this.args.falling) {
              this.args.falling = true;
              this.args.direction = Math.sign(Math.random() - 0.5);
              this.args.ySpeed = -Math.sin(this.args.stateTime / 0.05);
              this.args.xSpeed = 1.25 * this.args.direction;
              this.args["float"] = 45;
            } else if (this.args.ySpeed >= 0) {
              this.args.currentState = 'flying';
            }
          } else {
            this.args.currentState = 'thinking';
          }

          break;

        case 'sitting':
          this.args.animation = 'sitting';

          if (this.args.stateTime > 120) {
            this.args.currentState = 'thinking';
          }

          break;

        case 'swimming':
          break;

        case 'flying-looking':
          break;
      }

      _get(_getPrototypeOf(Chao.prototype), "update", this).call(this);

      this.args.stateTime++;
    }
  }, {
    key: "stateStanding",
    value: function stateStanding() {}
  }, {
    key: "stateThinking",
    value: function stateThinking() {}
  }, {
    key: "stateWalking",
    value: function stateWalking() {}
  }, {
    key: "stateFlying",
    value: function stateFlying() {}
  }, {
    key: "stateSitting",
    value: function stateSitting() {}
  }, {
    key: "stateSwimming",
    value: function stateSwimming() {}
  }, {
    key: "stateFlyingLooking",
    value: function stateFlyingLooking() {}
  }]);

  return Chao;
}(_PointActor2.PointActor);

exports.Chao = Chao;
});

;require.register("actor/ChaoCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChaoCrate = void 0;

var _BreakableBlock2 = require("./BreakableBlock");

var _Egg = require("./Egg");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ChaoCrate = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(ChaoCrate, _BreakableBlock);

  var _super = _createSuper(ChaoCrate);

  function ChaoCrate() {
    var _this;

    _classCallCheck(this, ChaoCrate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-breakable-block actor-chao-crate';
    _this.args.width = 60;
    _this.args.height = 60;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(ChaoCrate, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (type === 0 && other.controllable) {
        return true; // return super.collideA(other, type);
      }

      if (other.spindashCharge) {
        this["break"]();
        return true;
      }

      if (type === -1 && !other.args.gSpeed && !other.args.falling && other.controllable) {
        this["break"]();
        return false;
      }

      if (type !== 1 && type !== 3 || other.y <= this.y - this.args.height) {
        return true;
      }

      if (other.args.rolling || type === 2) {
        this["break"]();
        return false;
      }

      if (!this.viewport) {
        return false;
      }

      if (type === -1 || other.args.rolling) {
        return _get(_getPrototypeOf(ChaoCrate.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }, {
    key: "break",
    value: function _break() {
      var _this2 = this;

      if (!this.broken) {
        var _loop = function _loop(i) {
          var egg = new _Egg.Egg({
            x: _this2.x,
            y: _this2.y
          });

          _this2.viewport.spawn.add({
            object: egg
          });

          _this2.onNextFrame(function () {
            egg.args.falling = true;
            egg.args.xSpeed = (-0.5 + Math.random()) * 6;
            egg.args.ySpeed = -7;
          });
        };

        for (var i = 0; i < 5; i++) {
          _loop(i);
        }
      }

      _get(_getPrototypeOf(ChaoCrate.prototype), "break", this).call(this);

      this.viewport.onTimeout(1000, function () {
        _this2.viewport && _this2.viewport.actors.remove(_this2);
      });
    }
  }]);

  return ChaoCrate;
}(_BreakableBlock2.BreakableBlock);

exports.ChaoCrate = ChaoCrate;
});

;require.register("actor/Cinematic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cinematic = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Cinematic = /*#__PURE__*/function (_PointActor) {
  _inherits(Cinematic, _PointActor);

  var _super = _createSuper(Cinematic);

  function Cinematic(args, parent) {
    var _this;

    _classCallCheck(this, Cinematic);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "noClip", true);

    _defineProperty(_assertThisInitialized(_this), "panSpeed", 9);

    _this.args["float"] = -1;
    _this.target = null;
    _this.targets = [[250, 6500], [5900, 6600], [250, 6500], [7700, 7800], [6800, 4200], [6800, 4200], [8000, 4300], [1450, 1800]];
    return _this;
  }

  _createClass(Cinematic, [{
    key: "setCameraMode",
    value: function setCameraMode() {
      this.args.cameraMode = 'cinematic';
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Cinematic.prototype), "update", this).call(this);

      if (!this.args.selected) {
        return;
      }

      if (!this.target || this.x === this.target[0] && this.y === this.target[1]) {
        if (!this.targets.length) {
          this.remove();
        }

        this.target = this.targets.shift();
        return;
      }

      var target = this.target;

      if (this.x !== target[0]) {
        var space = target[0] - this.x;
        this.args.x += Math.sign(space) * this.panSpeed;

        if (Math.abs(space) < this.panSpeed) {
          this.args.x = target[0];
        }
      }

      if (this.y !== target[1]) {
        var _space = target[1] - this.y;

        this.args.y += Math.sign(_space) * this.panSpeed;

        if (Math.abs(_space) < this.panSpeed) {
          this.args.y = target[1];
        }
      }
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Cinematic;
}(_PointActor2.PointActor);

exports.Cinematic = Cinematic;
});

;require.register("actor/Coin.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Coin = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Coin = /*#__PURE__*/function (_PointActor) {
  _inherits(Coin, _PointActor);

  var _super = _createSuper(Coin);

  function Coin() {
    var _this;

    _classCallCheck(this, Coin);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-coin';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.gone = false;
    return _this;
  }

  _createClass(Coin, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Coin.prototype), "update", this).call(this);

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/mario/smw_coin.wav');
        this.sample.volume = 1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      _get(_getPrototypeOf(Coin.prototype), "collideA", this).call(this, other);

      if (this.args.gone) {
        return;
      }

      this.args.type = 'actor-item actor-coin collected';

      if (!this.args.gone) {
        if (this.viewport.args.audio && this.sample) {
          this.sample.play();
        }

        this.viewport.onFrameOut(40, function () {
          _this2.args.type = 'actor-item actor-coin collected gone';
        });
        this.viewport.onFrameOut(80, function () {
          _this2.viewport.actors.remove(_this2);

          _this2.remove();
        });
        var x = this.x;
        var y = this.y; // const viewport = this.viewport;
        // viewport.spawn.add({
        // 	time: Date.now() + 7500
        // 	, frame:  this.viewport.args.frameId + 450
        // 	, object: new Coin({x,y})
        // });

        if (other.args.owner) {
          other.args.owner.args.coins += 1;
        } else if (other.occupant) {
          other.occupant.args.coins += 1;
        } else {
          other.args.coins += 1;
        }
      }

      this.args.gone = true;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return Coin;
}(_PointActor2.PointActor);

exports.Coin = Coin;
});

;require.register("actor/CompanionBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompanionBlock = void 0;

var _MarbleBlock2 = require("./MarbleBlock");

var _LavaRegion = require("../region/LavaRegion");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CompanionBlock = /*#__PURE__*/function (_MarbleBlock) {
  _inherits(CompanionBlock, _MarbleBlock);

  var _super = _createSuper(CompanionBlock);

  function CompanionBlock() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CompanionBlock);

    _this = _super.call(this, args);
    _this.args.type = 'actor-item actor-marble-companion-block';
    _this.args.density = _this.args.density || 9.5;
    _this.sample = new Audio('/Sonic/S3K_35.wav');
    _this.played = false;
    return _this;
  }

  _createClass(CompanionBlock, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (this.args.falling && other.y > 8 + this.y + -this.args.height) {
        return false;
      } else if (this.args.falling && other.y > this.y - this.args.height) {
        other.args.y = this.y - this.args.height;
      } else if (this.args.falling && other.args.modeTime < 3) {
        other.args.gSpeed = 0;
      }

      return _get(_getPrototypeOf(CompanionBlock.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      var isInLava = false;

      var _iterator = _createForOfIteratorHelper(this.regions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var region = _step.value;

          if (region instanceof _LavaRegion.LavaRegion) {
            isInLava = true;

            if (!this.played) {
              this.onTimeout(50, function () {
                if (_this2.viewport.args.audio) {
                  _this2.sample.volume = 0.15 + Math.random() * -0.05;

                  _this2.sample.play();
                }
              });

              if (typeof ga === 'function') {
                ga('send', 'event', {
                  eventCategory: 'companion-block',
                  eventAction: 'pushed',
                  eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
                });
              }

              this.played = true;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var preX = this.args.x;

      _get(_getPrototypeOf(CompanionBlock.prototype), "update", this).call(this);

      if (this.args.pushed) {
        if (isInLava) {
          var tileMap = this.viewport.tileMap;
          var solid = tileMap.getSolid(this.x + this.args.width / 2 * (this.args.pushed || 0), this.y);

          if (!solid) {
            this.args.x = preX + this.args.pushed;
          } else {
            this.args.pushed = 0;
          }
        }
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      var _this3 = this;

      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.onNextFrame(function () {
        _this3.args.x = _this3.def.get('x');
        _this3.args.y = _this3.def.get('y');

        _this3.viewport.setColCell(_this3);

        _this3.args.xSpeed = 0;
        _this3.args.ySpeed = 0;
        _this3.args.pushed = 0;
        _this3.args["float"] = 0;
      });
    }
  }]);

  return CompanionBlock;
}(_MarbleBlock2.MarbleBlock);

exports.CompanionBlock = CompanionBlock;
});

;require.register("actor/Cone.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cone = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Cone = /*#__PURE__*/function (_PointActor) {
  _inherits(Cone, _PointActor);

  var _super = _createSuper(Cone);

  function Cone() {
    var _this;

    _classCallCheck(this, Cone);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 16;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-cone';
    return _this;
  }

  _createClass(Cone, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Cone;
}(_PointActor2.PointActor);

exports.Cone = Cone;
});

;require.register("actor/CrabMeat.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrabMeat = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CrabMeat = /*#__PURE__*/function (_Mixin$from) {
  _inherits(CrabMeat, _Mixin$from);

  var _super = _createSuper(CrabMeat);

  function CrabMeat() {
    var _this;

    _classCallCheck(this, CrabMeat);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-crabmeat';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 24;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(CrabMeat, [{
    key: "update",
    value: function update() {
      var direction = this.args.direction;

      if (this.box) {
        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      _get(_getPrototypeOf(CrabMeat.prototype), "update", this).call(this);
    }
  }, {
    key: "effect",
    value: function effect(other) {
      _get(_getPrototypeOf(CrabMeat.prototype), "effect", this).call(this, other); // this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});

    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }]);

  return CrabMeat;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.CrabMeat = CrabMeat;
});

;require.register("actor/Cursor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cursor = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Cursor = /*#__PURE__*/function (_PointActor) {
  _inherits(Cursor, _PointActor);

  var _super = _createSuper(Cursor);

  function Cursor() {
    _classCallCheck(this, Cursor);

    return _super.apply(this, arguments);
  }

  _createClass(Cursor, [{
    key: "update",
    value: function update() {}
  }]);

  return Cursor;
}(_PointActor2.PointActor);

exports.Cursor = Cursor;
});

;require.register("actor/CutScene.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CutScene = void 0;

var _PointActor2 = require("./PointActor");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CutScene = /*#__PURE__*/function (_PointActor) {
  _inherits(CutScene, _PointActor);

  var _super = _createSuper(CutScene);

  function CutScene(args, parent) {
    var _this;

    _classCallCheck(this, CutScene);

    _this = _super.call(this, args, parent);

    if (args.src) {
      _this.fetcher = fetch(args.src).then(function (r) {
        return r.json();
      });
    } else if (args.frames) {
      _this.fetcher = Promise.resolve(args.frames);
    }

    _this.args.hidden = true;
    return _this;
  }

  _createClass(CutScene, [{
    key: "playSample",
    value: function playSample(event) {
      var tag = new Audio(event.source);
      tag.play();
    }
  }, {
    key: "activate",
    value: function activate(other, button) {
      var _this2 = this;

      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (!other.controllable || other.args.falling && !force) {
        return;
      }

      if (other.args.canonical !== 'Sonic') {
        return;
      }

      var viewport = this.viewport;

      if (!viewport || this.args.running) {
        return;
      }

      this.args.running = true;
      other.args.gSpeed = 0;
      viewport.args.cutScene = true;
      other.controller.zero();
      this.fetcher.then(function (scene) {
        var timer = 0;

        var _iterator = _createForOfIteratorHelper(scene),
            _step;

        try {
          var _loop = function _loop() {
            var frame = _step.value;

            var frameCallback = function frameCallback() {
              switch (frame.event) {
                case 'dialog':
                  viewport.showDialog(frame.lines, frame.classes);
                  break;

                case 'audio':
                  _this2.playSample(frame);

                  break;

                case 'face':
                  other.args.direction = frame.direction;
                  other.args.facing = frame.direction > 0 ? 'right' : 'left';
                  break;

                case 'input':
                  if (frame.axes) {
                    other.controller.replay({
                      axes: frame.axes
                    });
                  }

                  if (frame.buttons) {
                    other.controller.replay({
                      buttons: frame.buttons
                    });
                  }

                  other.readInput();
                  break;

                case 'superdrop':
                  other.dropDashCharge = 30;
                  break;

                case 'clearAct':
                  viewport.clearAct(frame.message);
                  break;

                case 'clear':
                  viewport.clearDialog();
                  break;

                case 'message':
                  viewport.showCenterMessage(frame.message);
                  break;

                case 'hide':
                  viewport.hideCenterMessage();
                  viewport.hideDialog();
                  break;

                case 'wait':
                  viewport.args.cutScene = false;
                  viewport.hideCenterMessage();
                  viewport.hideDialog();
                  break;
              }
            };

            if (timer) {
              viewport.onFrameOut(timer, frameCallback);
            } else {
              frameCallback();
            }

            timer += frame.time || 0;
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }]);

  return CutScene;
}(_PointActor2.PointActor);

exports.CutScene = CutScene;
});

;require.register("actor/DrainFly.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrainFly = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _CanPop = require("../mixin/CanPop");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DrainFly = /*#__PURE__*/function (_Mixin$from) {
  _inherits(DrainFly, _Mixin$from);

  var _super = _createSuper(DrainFly);

  function DrainFly(args, parent) {
    var _this;

    _classCallCheck(this, DrainFly);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-drainfly';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.args["float"] = -1;
    _this.args.gravity = 0;
    _this.args.phase = 'idle';
    return _this;
  }

  _createClass(DrainFly, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(DrainFly.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      var mainChar = this.viewport.controlActor;

      switch (this.args.phase) {
        case 'idle':
          this.args.alertTo = this.y - 64;

          if (mainChar.x + -this.x > -128) {
            this.args.phase = 'alert';
          }

          break;

        case 'alert':
          if (this.y > this.args.alertTo) {
            this.args.ySpeed--;
          } else {
            this.args.phase = 'attacking';
            this.args.y = this.args.alertTo;
            this.args.ySpeed = 0;
          }

          break;

        case 'attacking':
          {
            var drawX = Math.sign(mainChar.x + -this.x);
            var drawY = Math.sign(mainChar.y + -this.y + -24);
            this.args.xSpeed += drawX * 0.2 - Math.random() / 10;
            this.args.ySpeed += drawY * 0.5 - Math.random() / 10;

            if (Math.abs(this.args.xSpeed) > 6) {
              this.args.xSpeed = 4 * drawX;
            }

            if (Math.abs(this.args.ySpeed) > 8) {
              this.args.ySpeed = 4 * drawY;
            }

            if (this.checkBelow(this.x, this.y)) {
              this.args.ySpeed = -1;
              this.args.y -= 1;
            }

            break;
          }
      } // if(!this.args.ySpeed)
      // {
      // 	this.args.y -= 2;
      // }


      this.args.facing = this.args.xSpeed > 0 ? 'left' : 'right';
      this.args["float"] = -1;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return DrainFly;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.DrainFly = DrainFly;
});

;require.register("actor/DrillCar.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrillCar = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DrillCar = /*#__PURE__*/function (_Vehicle) {
  _inherits(DrillCar, _Vehicle);

  var _super = _createSuper(DrillCar);

  function DrillCar() {
    var _this;

    _classCallCheck(this, DrillCar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "instructions", ['Jump ⓿', 'Fly ⓿+⓿']);

    _this.args.type = 'actor-item actor-drill-car';
    _this.args.width = 38;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 26;
    _this.args.decel = 0.30;
    _this.args.accel = 0.75;
    _this.args.seatHeight = 34;
    _this.args.skidTraction = 0.95;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    return _this;
  }

  _createClass(DrillCar, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.backSprite = new _Tag.Tag('<div class = "sprite-back sprite">');
      this.drill = new _Tag.Tag('<div class = "drill-car-drill">');
      this.seat = new _Tag.Tag('<div class = "drill-car-seat">');
      this.windsheild = new _Tag.Tag('<div class = "drill-car-windsheild">');
      this.copterCap = new _Tag.Tag('<div class = "drill-car-copter-cap">');
      this.copterBladeA = new _Tag.Tag('<div class = "drill-car-copter-blade-a">');
      this.copterBladeB = new _Tag.Tag('<div class = "drill-car-copter-blade-b">');
      this.frontWheelA = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-front-a">');
      this.frontWheelB = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-front-b">');
      this.backWheelA = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-back-a">');
      this.backWheelB = new _Tag.Tag('<div class = "drill-car-tire drill-car-tire-back-b">');
      this.sprite.appendChild(this.drill.node);
      this.backSprite.appendChild(this.copterCap.node);
      this.backSprite.appendChild(this.copterBladeA.node);
      this.backSprite.appendChild(this.copterBladeB.node);
      this.sprite.appendChild(this.windsheild.node);
      this.backSprite.appendChild(this.seat.node);
      this.sprite.appendChild(this.frontWheelA.node);
      this.backSprite.appendChild(this.frontWheelB.node);
      this.sprite.appendChild(this.backWheelA.node);
      this.backSprite.appendChild(this.backWheelB.node);
      this.box.appendChild(this.backSprite.node);
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (this.viewport.args.audio && !this.flyingSound) {
        this.flyingSound = new Audio('/Sonic/drill-car-copter.wav');
        this.flyingSound.volume = 0.35 + Math.random() * -0.2;
        this.flyingSound.loop = true;
      }

      if (this.flyingSound) {
        if (!this.flyingSound.paused) {
          this.flyingSound.volume = 0.25 + Math.random() * -0.2;
        }

        if (this.flyingSound.currentTime > 0.2) {
          this.flyingSound.currentTime = 0.0;
        }
      }

      if (!this.box) {
        _get(_getPrototypeOf(DrillCar.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        this.flyingSound && this.flyingSound.pause();
        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.dustCount > 0) {
          this.dustCount--;
        }

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
          var viewport = this.viewport;
          var particleA = new _Tag.Tag('<div class = "particle-dust">');
          var pointA = this.rotatePoint(this.args.gSpeed, 0);
          particleA.style({
            '--x': pointA[0] + this.x,
            '--y': pointA[1] + this.y,
            'z-index': 0,
            opacity: Math.random() * 2
          });
          var particleB = new _Tag.Tag('<div class = "particle-dust">');
          var pointB = this.rotatePoint(this.args.gSpeed + 40 * this.args.direction, 0);
          particleB.style({
            '--x': pointB[0] + this.x,
            '--y': pointB[1] + this.y,
            'z-index': 0,
            opacity: Math.random() * 2
          });
          viewport.particles.add(particleA);
          viewport.particles.add(particleB);
          setTimeout(function () {
            viewport.particles.remove(particleA);
            viewport.particles.remove(particleB);
          }, 350);
        } else if (this.args.moving && speed > maxSpeed * 0.75) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && speed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else if (this.args.flying) {
        this.box.setAttribute('data-animation', 'flying');
      } else if (this.args.falling) {
        this.flyingSound && this.flyingSound.pause();
        this.box.setAttribute('data-animation', 'jumping');
      }

      if (this.args.copterCoolDown == 0) {
        if (this.args.ySpeed > 5) {
          this.flyingSound && this.flyingSound.pause();
          this.args.flying = false;
        }
      } else if (this.args.copterCoolDown > 0) {
        this.args.copterCoolDown--;
      }

      _get(_getPrototypeOf(DrillCar.prototype), "update", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0() {
      if (!this.args.falling) {
        this.args.copterCoolDown = 15;

        _get(_getPrototypeOf(DrillCar.prototype), "command_0", this).call(this);

        return;
      }

      if (this.args.copterCoolDown > 0) {
        return;
      }

      if (this.args.ySpeed > -16) {
        if (!this.args.flying) {
          this.flyingSound && this.flyingSound.play();
        }

        this.args.flying = true;

        if (this.args.copterCoolDown == 0) {
          this.args.copterCoolDown = 7;
        }

        this.args.ySpeed = -1;
        this.args.ySpeed = -4;
        this.args["float"] = 8;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.flyingSound && this.flyingSound.pause();
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return DrillCar;
}(_Vehicle2.Vehicle);

exports.DrillCar = DrillCar;
});

;require.register("actor/Egg.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Egg = void 0;

var _PointActor2 = require("./PointActor");

var _Bindable = require("curvature/base/Bindable");

var _EggShellTop = require("./EggShellTop");

var _Chao = require("./Chao");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Egg = /*#__PURE__*/function (_PointActor) {
  _inherits(Egg, _PointActor);

  var _super = _createSuper(Egg);

  function Egg() {
    var _this;

    _classCallCheck(this, Egg);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-egg';
    _this.args.width = 15;
    _this.args.height = 20;
    _this.broken = false;

    _this.args.bindTo('falling', function (falling) {
      var impact = _this.ySpeedLast;

      if (falling || _this.broken || impact < 12) {
        return;
      }

      ;
      _this.args.type = 'actor-item actor-egg actor-egg-shell-bottom';
      var shellTop = new _EggShellTop.EggShellTop({
        ySpeed: -impact * 0.4,
        xSpeed: _this.xSpeedLast * 0.6,
        x: _this.x,
        y: _this.y - 10
      });
      var chao = new _Chao.Chao({
        ySpeed: -impact * 0.4,
        xSpeed: _this.xSpeedLast * 0.4,
        x: _this.x,
        y: _this.y - 10
      });
      _this.args.gSpeed = _this.xSpeedLast * 0.2;

      _this.viewport.spawn.add({
        object: shellTop
      });

      _this.viewport.spawn.add({
        object: chao
      });

      _this.broken = true;
    });

    _this.bindTo('carriedBy', function (carrier) {
      if (_this.cX) {
        _this.cX();

        _this.cX = null;
      }

      if (_this.cY) {
        _this.cY();

        _this.cY = null;
      }

      if (carrier) {
        _this.cX = carrier.args.bindTo('x', function (v) {
          return _this.args.x = v + carrier.args.direction * 12;
        });
        _this.cY = carrier.args.bindTo('y', function (v) {
          return _this.args.y = v + -12;
        });
        carrier.carrying.add(_assertThisInitialized(_this));
        _this.args["float"] = -1;
      } else if (_this.carriedBy) {
        var _carrier = _this.carriedBy;
        _this.carriedBy = null;
        _this.args.xSpeed = _carrier.args.xSpeed;
        _this.args.ySpeed = _carrier.args.ySpeed;
        _this.args.xSpeed += Math.sign(_carrier.args.gSpeed || _carrier.args.xSpeed) * 4;
        _this.args.ySpeed -= 4;
        _this.args.xSpeed += _carrier.xAxis * 2;

        _carrier.carrying["delete"](_assertThisInitialized(_this));

        _this.args.falling = true;
        _this.args["float"] = 0;
      }
    });

    return _this;
  }

  _createClass(Egg, [{
    key: "lift",
    value: function lift(actor) {
      if (this.carriedBy === actor) {
        this.carriedBy = null;
        return;
      }

      this.carriedBy = actor;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Egg;
}(_PointActor2.PointActor);

exports.Egg = Egg;
});

;require.register("actor/EggMobile.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggMobile = void 0;

var _Vehicle2 = require("./Vehicle");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EggMobile = /*#__PURE__*/function (_Vehicle) {
  _inherits(EggMobile, _Vehicle);

  var _super = _createSuper(EggMobile);

  function EggMobile() {
    var _this;

    _classCallCheck(this, EggMobile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-vehicle actor-eggmobile';
    _this.args.accel = 0.15;
    _this.args.decel = 0.8;
    _this.args.gSpeedMax = 15;
    _this.args.xSpeedMax = 45;
    _this.args.ySpeedMax = 45;
    _this.args.jumpForce = 12;
    _this.args.gravity = 0.6;
    _this.args.width = 28;
    _this.args.height = 20;
    _this.args.yMargin = 42;
    _this.args.falling = true;
    _this.args.flying = true;
    _this.args["float"] = -1;
    return _this;
  }

  _createClass(EggMobile, [{
    key: "update",
    value: function update() {
      if (this.checkBelow(this.x, this.y)) {
        this.args.y--;
      }

      if (Math.abs(this.yAxis) > 0.5) {
        if (Math.abs(this.args.ySpeed) < this.args.ySpeedMax) {
          var ySpeed = this.args.ySpeed;

          if (Math.sign(this.yAxis) === Math.sign(this.args.ySpeed)) {
            ySpeed += this.yAxis * this.args.accel * 3;
          } else {
            ySpeed += this.yAxis * this.args.accel * 6;
          }

          if (ySpeed > 0) {
            ySpeed = Math.floor(ySpeed * 1000) / 1000;
          } else {
            ySpeed = Math.ceil(ySpeed * 1000) / 1000;
          }

          this.args.ySpeed = ySpeed;
        }
      } else {
        this.args.ySpeed = this.args.ySpeed * this.args.decel;
      }

      if (!this.xAxis) {
        if (Math.abs(this.args.xSpeed) <= 1) {
          this.args.xSpeed = 0;
        }

        if (this.args.xSpeed > 0) {
          this.args.xSpeed = Math.floor(this.args.xSpeed * this.args.decel);
        } else {
          this.args.xSpeed = Math.ceil(this.args.xSpeed * this.args.decel);
        }
      } // else
      // {
      // 	this.args.xSpeed = Math.ceil(this.args.xSpeed * this.args.decel);
      // }


      if (!this.occupant) {
        this.args.xSpeed = 0;
        this.args.ySpeed = 0;
      }

      this.args.falling = true;
      this.args.flying = true;
      this.args.mode = 0;
      this.args.cameraMode = 'aerial';

      _get(_getPrototypeOf(EggMobile.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return EggMobile;
}(_Vehicle2.Vehicle);

exports.EggMobile = EggMobile;
});

;require.register("actor/EggShellBottom.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggShellBottom = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EggShellBottom = /*#__PURE__*/function (_PointActor) {
  _inherits(EggShellBottom, _PointActor);

  var _super = _createSuper(EggShellBottom);

  function EggShellBottom() {
    var _this;

    _classCallCheck(this, EggShellBottom);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-egg-shell-bottom';
    _this.args.width = 15;
    _this.args.height = 20;

    _this.bindTo('carriedBy', function (carrier) {
      if (_this.cX) {
        _this.cX();

        _this.cX = null;
      }

      if (_this.cY) {
        _this.cY();

        _this.cY = null;
      }

      if (carrier) {
        _this.cX = carrier.args.bindTo('x', function (v) {
          return _this.args.x = v + carrier.args.direction * 12;
        });
        _this.cY = carrier.args.bindTo('y', function (v) {
          return _this.args.y = v + -12;
        });
        carrier.carrying.add(_assertThisInitialized(_this));
        _this.args["float"] = -1;
      } else if (_this.carriedBy) {
        var _carrier = _this.carriedBy;
        _this.carriedBy = null;
        _this.args.xSpeed = _carrier.args.xSpeed;
        _this.args.ySpeed = _carrier.args.ySpeed;
        _this.args.xSpeed += Math.sign(_carrier.args.gSpeed || _carrier.args.xSpeed) * 4;
        _this.args.ySpeed -= 4;

        _carrier.carrying["delete"](_assertThisInitialized(_this));

        _this.args.falling = true;
        _this.args["float"] = 0;
      }
    });

    return _this;
  }

  _createClass(EggShellBottom, [{
    key: "lift",
    value: function lift(actor) {
      if (this.carriedBy === actor) {
        this.carriedBy = null;
        return;
      }

      this.carriedBy = actor;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return EggShellBottom;
}(_PointActor2.PointActor);

exports.EggShellBottom = EggShellBottom;
});

;require.register("actor/EggShellTop.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggShellTop = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EggShellTop = /*#__PURE__*/function (_PointActor) {
  _inherits(EggShellTop, _PointActor);

  var _super = _createSuper(EggShellTop);

  function EggShellTop() {
    var _this;

    _classCallCheck(this, EggShellTop);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-egg-shell-top';
    _this.args.width = 15;
    _this.args.height = 20;

    _this.bindTo('carriedBy', function (carrier) {
      if (_this.cX) {
        _this.cX();

        _this.cX = null;
      }

      if (_this.cY) {
        _this.cY();

        _this.cY = null;
      }

      if (carrier) {
        _this.cX = carrier.args.bindTo('x', function (v) {
          return _this.args.x = v + carrier.args.direction * 12;
        });
        _this.cY = carrier.args.bindTo('y', function (v) {
          return _this.args.y = v + -12;
        });
        carrier.carrying.add(_assertThisInitialized(_this));
        _this.args["float"] = -1;
      } else if (_this.carriedBy) {
        var _carrier = _this.carriedBy;
        _this.carriedBy = null;
        _this.args.xSpeed = _carrier.args.xSpeed;
        _this.args.ySpeed = _carrier.args.ySpeed;
        _this.args.xSpeed += Math.sign(_carrier.args.gSpeed || _carrier.args.xSpeed) * 4;
        _this.args.ySpeed -= 4;

        _carrier.carrying["delete"](_assertThisInitialized(_this));

        _this.args.falling = true;
        _this.args["float"] = 0;
      }
    });

    return _this;
  }

  _createClass(EggShellTop, [{
    key: "lift",
    value: function lift(actor) {
      if (this.carriedBy === actor) {
        this.carriedBy = null;
        return;
      }

      this.carriedBy = actor;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return EggShellTop;
}(_PointActor2.PointActor);

exports.EggShellTop = EggShellTop;
});

;require.register("actor/EggShuttle.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggShuttle = void 0;

var _Tag = require("curvature/base/Tag");

var _Vehicle2 = require("./Vehicle");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EggShuttle = /*#__PURE__*/function (_Vehicle) {
  _inherits(EggShuttle, _Vehicle);

  var _super = _createSuper(EggShuttle);

  function EggShuttle() {
    var _this;

    _classCallCheck(this, EggShuttle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-vehicle actor-egg-shuttle';
    _this.args.accel = 0.15;
    _this.args.decel = 0.8;
    _this.args.gSpeedMax = 15;
    _this.args.xSpeedMax = 15;
    _this.args.ySpeedMax = 15;
    _this.args.jumpForce = 3;
    _this.args.gravity = 0.6;
    _this.args.width = 96;
    _this.args.height = 308;
    _this.args.yMargin = 42;
    _this.args.falling = true;
    _this.args.flying = true;
    _this.args["float"] = -1;
    _this.args.seatHeight = _this.args.height - 40;
    _this.args.seatForward = -16;
    _this.args.seatAngle = Math.PI / 2;
    _this.args.thrustAngle = -Math.PI / 2;

    _this.args.bindTo('boosting', function (v) {
      if (!_this.boost) {
        return;
      }

      ;

      _this.boost.setAttribute('data-active', !!v);
    });

    _this.args.crashAngle = 0;

    _this.args.bindTo('falling', function (v) {
      if (Math.abs(_this.args.groundAngle) < Math.PI / 4) {
        return;
      }

      _this.args.crashAngle = _this.args.groundAngle;
    });

    return _this;
  }

  _createClass(EggShuttle, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(EggShuttle.prototype), "onRendered", this).call(this, event);

      this.autoStyle.get(this.box)['--crash-angle'] = 'crashAngle';
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      _get(_getPrototypeOf(EggShuttle.prototype), "updateStart", this).call(this);

      if (this.args.falling) {
        this.args.groundAngle = -(this.args.thrustAngle + Math.PI / 2);
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(EggShuttle.prototype), "updateEnd", this).call(this);

      if (!this.args.falling) {
        this.args.groundAngle = 0;
      }

      if (this.args.crashAngle) {
        this.args.groundAngle = this.args.crashAngle;

        if (this.occupant) {
          var occupant = this.occupant;
          occupant.args.standingOn = false;
          occupant.args.falling = true;
          occupant.args.xSpeed = Math.sign(this.xSpeedLast) * 2;
          occupant.args.ySpeed = -12;
          occupant.args.y += -12;
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      if (this.sprite && !this.windshield) {
        this.windshield = new _Tag.Tag('<div class = "shuttle-windshield">');
        this.boost = new _Tag.Tag('<div class = "shuttle-boost">');
        this.sprite.appendChild(this.windshield.node);
        this.sprite.appendChild(this.boost.node);
      }

      if (this.occupant) {
        this.args.type = 'actor-item actor-vehicle actor-egg-shuttle actor-egg-shuttle-occupied';
        this.args["float"] = 1;
      } else {
        this.args.type = 'actor-item actor-vehicle actor-egg-shuttle';
        this.args["float"] = 0;
      }

      this.args.gSpeed = 0;
      this.args.facing = 'right';

      _get(_getPrototypeOf(EggShuttle.prototype), "update", this).call(this);

      if (this.args.falling) {
        this.args.cameraMode = 'rocket'; // const maxBias = 0.06125;
        // this.args.cameraBias = Math.max(-maxBias, Math.min(maxBias, (this.args.ySpeed / this.args.ySpeedMax) * -maxBias));
        // console.log(this.args.cameraBias);

        this.args.thrustAngle += 0.02 * this.xAxis;

        if (this.args.thrustAngle < -Math.PI * 7 / 8) {
          this.args.thrustAngle = -Math.PI * 7 / 8;
        }

        if (this.args.thrustAngle > -Math.PI * 1 / 8) {
          this.args.thrustAngle = -Math.PI * 1 / 8;
        }
      } else {
        this.args.cameraMode = 'normal';
        this.args.cameraBias = 0;
        this.args.boosting = false;
        this.args.thrustAngle = -Math.PI / 2;
      }
    }
  }, {
    key: "processInputDirect",
    value: function processInputDirect() {}
  }, {
    key: "command_0",
    value: function command_0(button) {}
  }, {
    key: "release_0",
    value: function release_0(button) {
      this.args.boosting = false;
    }
  }, {
    key: "hold_0",
    value: function hold_0(button) {
      this.args.x += this.viewport.args.frameId % 2 ? -1 : 1;

      if (!this.args.falling && button.time < 60) {
        return;
      }

      this.args.falling = true;
      var impulse = this.args.gravity * (1 + 0.002 * Math.min(-60 + button.time, 150));
      this.args.xSpeed += impulse * Math.cos(this.args.thrustAngle);
      this.args.ySpeed += impulse * Math.sin(this.args.thrustAngle);

      if (Math.abs(this.args.xSpeed) > this.args.xSpeedMax) {
        this.args.xSpeed = this.args.xSpeedMax * Math.sign(this.args.xSpeed);
      }

      if (Math.abs(this.args.ySpeed) > this.args.ySpeedMax) {
        this.args.ySpeed = this.args.ySpeedMax * Math.sign(this.args.ySpeed);
      }

      this.args.boosting = true;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (this.args.crashAngle) {
        return false;
      }

      _get(_getPrototypeOf(EggShuttle.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.args.crashAngle && !this.occupant;
    }
  }]);

  return EggShuttle;
}(_Vehicle2.Vehicle);

exports.EggShuttle = EggShuttle;
});

;require.register("actor/EggWalker.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EggWalker = void 0;

var _Vehicle2 = require("./Vehicle");

var _Projectile = require("./Projectile");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EggWalker = /*#__PURE__*/function (_Vehicle) {
  _inherits(EggWalker, _Vehicle);

  var _super = _createSuper(EggWalker);

  function EggWalker() {
    var _this;

    _classCallCheck(this, EggWalker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "instructions", []);

    _this.args.type = 'actor-item actor-egg-walker';
    _this.args.width = 32;
    _this.args.height = 64;
    _this.args.weight = 1500;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 2.5;
    _this.args.decel = 0.05;
    _this.args.accel = 0.10;
    _this.args.seatHeight = 48;
    _this.args.jumpForce = 12;
    _this.args.skidTraction = 0.9;
    _this.dustCount = 0;
    _this.args.particleScale = 2;

    _this.args.bindTo('falling', function (v) {
      if (v || !_this.crouching || _this.ySpeedLast < 8) {
        return;
      }

      _this.viewport.args.shakeY = 7;
    });

    return _this;
  }

  _createClass(EggWalker, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.backSprite = new _Tag.Tag('<div class = "sprite-back sprite">');
      this.body = new _Tag.Tag('<div class = "egg-walker-body">');
      this.sprite.appendChild(this.body.node);
      this.punch = new _Tag.Tag('<div class = "egg-walker-punch">');
      this.sprite.appendChild(this.punch.node);
      this.legFront = new _Tag.Tag('<div class = "egg-walker-leg">');
      this.sprite.appendChild(this.legFront.node);
      this.boostFront = new _Tag.Tag('<div class = "egg-boost">');
      this.legFront.appendChild(this.boostFront.node);
      this.legBack = new _Tag.Tag('<div class = "egg-walker-leg egg-walker-leg-back">');
      this.backSprite.appendChild(this.legBack.node);
      this.boostBack = new _Tag.Tag('<div class = "egg-boost">');
      this.legBack.appendChild(this.boostBack.node);
      this.chair = new _Tag.Tag('<div class = "egg-walker-chair">');
      this.backSprite.appendChild(this.chair.node);
      this.gun = new _Tag.Tag('<div class = "egg-walker-gun">');
      this.backSprite.appendChild(this.gun.node);
      this.box.appendChild(this.backSprite.node);
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(EggWalker.prototype), "update", this).call(this);

      if (this.boosting) {
        this.args.type = 'actor-item actor-egg-walker egg-walker-boosting';

        if (this.args.ySpeed > 0) {
          this.args.ySpeed -= 1.25 * ((Math.sin(this.viewport.args.frameId / 10) + 0.9) / 2) + 0.5;
        }
      } else {
        this.args.type = 'actor-item actor-egg-walker';
      }

      this.boosting = false;

      if (this.yAxis > 0.55 && (!this.xAxis || this.falling && this.args.ySpeed > 0)) {
        if (this.crouching) {
          this.args.y += 0.001;
          this.args.y -= 0.001;
        }

        if (this.args.falling && !this.crouching) {
          this.args.ySpeed += 4;
        }

        this.args.gSpeed = 0;
        this.args.animation = 'crouching';
        this.crouching = true;
        this.args.seatHeight = 30;
        this.args.height = 48;
      } else {
        if (!this.crouching) {
          this.args.y += 0.001;
          this.args.y -= 0.001;
        }

        this.crouching = false;
        this.args.seatHeight = 48;
        this.args.height = 64;

        if (this.args.falling) {
          this.args.animation = 'falling';
        } else if (Math.sign(this.args.gSpeed) === this.args.direction) {
          this.args.animation = 'walking';
        } else {
          this.args.animation = 'standing';
        }
      }
    }
  }, {
    key: "hold_0",
    value: function hold_0() {
      if (!this.args.falling && this.args.ySpeed < 0 || this.checkBelow(this.x, this.y + 1)) {
        return;
      }

      if (this.yAxis > 0.55) {
        return;
      }

      this.boosting = true;
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      var _this2 = this;

      if (this.shooting) {
        return;
      }

      var offset, trajectory, spotAngle;
      var direction = Math.sign(this.args.direction);
      var groundAngle = this.args.groundAngle;

      switch (this.args.mode) {
        case 0:
          spotAngle = -groundAngle - Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle;
          break;

        case 1:
          spotAngle = -groundAngle + Math.PI / 4 * direction;
          trajectory = -groundAngle + Math.PI / 2;
          break;

        case 2:
          spotAngle = -groundAngle + Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI;
          break;

        case 3:
          spotAngle = -groundAngle - Math.PI + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI / 2;
          break;
      }

      offset = [32 * Math.cos(spotAngle), 120 * Math.sin(spotAngle)]; // if(this.args.falling || this.args.crouching)
      // {
      // 	trajectory = 0;
      // 	offset = [-16 * direction, -96];
      // }

      var projectile = new _Projectile.Projectile({
        direction: this.args.direction,
        x: this.args.x + offset[0] + (this.args.xSpeed || this.args.gSpeed),
        y: this.args.y + offset[1] - (this.crouching ? -20 : 0),
        owner: this,
        xSpeed: this.args.xSpeed || this.args.gSpeed // , ySpeed: this.args.ySpeed
        ,
        "float": 10
      });
      projectile.impulse(8, trajectory + (direction < 0 ? Math.PI : 0), true);
      projectile.update();
      this.viewport.auras.add(projectile);
      this.viewport.spawn.add({
        object: projectile
      });
      this.box.setAttribute('data-shoot', 'true');
      this.shooting = true;
      this.viewport.onFrameOut(1, function () {
        _this2.box.setAttribute('data-shoot', 'false');
      });
      this.viewport.onFrameOut(6, function () {
        _this2.shooting = false;
      });
    }
  }, {
    key: "command_0",
    value: function command_0() {
      if (!this.crouching) {
        _get(_getPrototypeOf(EggWalker.prototype), "command_0", this).call(this);
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      var _this3 = this;

      if (this.punching) {
        return;
      }

      this.box.setAttribute('data-punch', 'true');
      this.punching = true;
      this.viewport.onFrameOut(12, function () {
        _this3.box.setAttribute('data-punch', 'false');
      });
      this.viewport.onFrameOut(25, function () {
        _this3.punching = false;
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return EggWalker;
}(_Vehicle2.Vehicle);

exports.EggWalker = EggWalker;
});

;require.register("actor/Eggman.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Eggman = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Eggman = /*#__PURE__*/function (_PointActor) {
  _inherits(Eggman, _PointActor);

  var _super = _createSuper(Eggman);

  function Eggman() {
    var _this;

    _classCallCheck(this, Eggman);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-eggman';
    _this.accelNormal = 0.15;
    _this.accelSuper = 0.30;
    _this.args.weight = 200;
    _this.args.accel = 0.15;
    _this.args.decel = 0.3;
    _this.args.normalHeight = 40;
    _this.args.rollingHeight = 28;
    _this.gSpeedMaxNormal = 18;
    _this.gSpeedMaxSuper = 28;
    _this.args.gSpeedMax = _this.gSpeedMaxNormal;
    _this.args.normalHeight = 57;
    _this.args.rollingHeight = 29;
    _this.jumpForceNormal = 11;
    _this.jumpForceSuper = 18;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 57;
    _this.args.lookingUp = false;
    _this.args.spriteSheet = _this.spriteSheet = '/Sonic/eggman.png';
    _this.superSpriteSheet = '/Sonic/eggman-super.png';
    return _this;
  }

  _createClass(Eggman, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Eggman.prototype), "update", this).call(this);

        return;
      } else if (this.yAxis > 0.5 && !this.args.ignore) {
        this.args.crouching = true;
        this.args.lookTime--;

        if (this.args.lookTime < -45) {
          this.args.cameraBias = -0.5;
        }
      } else if (this.yAxis < -0.5 && !this.args.ignore) {
        this.args.lookingUp = true;
        this.args.lookTime++;

        if (this.args.lookTime > 45) {
          this.args.cameraBias = 0.25;
        }
      } else {
        this.args.lookingUp = this.args.crouching = false;
      }

      var direction = this.args.direction;
      var gSpeed = this.args.gSpeed;
      var speed = Math.abs(gSpeed);
      var maxSpeed = this.args.gSpeedMax;

      if (falling) {
        if (this.args.jumping) {
          this.box.setAttribute('data-animation', 'jumping');
        }

        this.args.height = this.args.rollingHeight;
      } else if (this.args.rolling) {
        this.args.height = this.args.rollingHeight;

        if (this.args.direction !== Math.sign(this.args.gSpeed)) {
          this.args.direction = Math.sign(this.args.gSpeed);

          if (this.args.direction < 0) {
            this.args.facing = 'left';
          } else {
            this.args.facing = 'right';
          }
        }

        this.box.setAttribute('data-animation', 'rolling');
      } else {
        this.args.height = this.args.normalHeight;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (speed > maxSpeed / 2) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else if (this.args.lookingUp) {
          this.box.setAttribute('data-animation', 'lookingUp');
        } else if (this.args.crouching || this.args.standingOn && this.args.standingOn.isVehicle) {
          this.box.setAttribute('data-animation', 'crouching');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      if (this.args.grinding) {
        this.args.rolling = false;
        this.args.animation = 'grinding';
      }

      if (this.args.hangingFrom) {
        this.args.animation = 'hanging';
      }

      _get(_getPrototypeOf(Eggman.prototype), "update", this).call(this);
    }
  }, {
    key: "command_3",
    value: function command_3() {
      var _this2 = this;

      this.isSuper = !this.isSuper;
      this.onTimeout(150, function () {
        if (_this2.args.rings === 0) {
          // this.isSuper = false;
          _this2.setProfile();
        }

        ;
      });
      this.setProfile();
    }
  }, {
    key: "setProfile",
    value: function setProfile() {
      if (this.isSuper) {
        this.args.spriteSheet = this.superSpriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxSuper;
        this.args.jumpForce = this.jumpForceSuper;
        this.args.accel = this.accelSuper;
      } else {
        this.args.spriteSheet = this.spriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxNormal;
        this.args.jumpForce = this.jumpForceNormal;
        this.args.accel = this.accelNormal;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var instance = _get(_getPrototypeOf(Eggman), "fromDef", this).call(this, objDef);

      instance.args.name = 'Robotnik';
      return instance;
    }
  }]);

  return Eggman;
}(_PointActor2.PointActor);

exports.Eggman = Eggman;
});

;require.register("actor/Eggrobo.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Eggrobo = void 0;

var _PointActor2 = require("./PointActor");

var _Projectile = require("./Projectile");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Eggrobo = /*#__PURE__*/function (_PointActor) {
  _inherits(Eggrobo, _PointActor);

  var _super = _createSuper(Eggrobo);

  function Eggrobo() {
    var _this;

    _classCallCheck(this, Eggrobo);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-eggrobo';
    _this.args.accel = 0.125;
    _this.args.decel = 0.3;
    _this.args.gSpeedMax = 14;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 57;
    return _this;
  }

  _createClass(Eggrobo, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.flame = new _Tag.Tag('<div class = "eggrobo-flame">');
      this.muzzleFlash = new _Tag.Tag('<div class = "eggrobo-muzzle-flash">');
      this.sprite.appendChild(this.flame.node);
      this.sprite.appendChild(this.muzzleFlash.node);
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (this.viewport.args.audio && !this.shootingSample) {
        this.shootingSample = new Audio('/Sonic/shot-fired.wav');
        this.thrusterSound = new Audio('/Sonic/mecha-sonic-thruster.wav');
        this.thrusterSound.loop = true;
      }

      if (this.thrusterSound) {
        if (this.thrusterSound.currentTime > 0.4 + Math.random() / 10) {
          this.thrusterSound.currentTime = 0.05;
        }

        this.thrusterSound.volume = 0.2 + Math.random() * -0.05;
      }

      if (!this.box) {
        _get(_getPrototypeOf(Eggrobo.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.thrusterSound && this.thrusterSound.pause();
          this.box.setAttribute('data-animation', 'skidding');
        } else if (speed > maxSpeed / 2) {
          this.thrusterSound && this.thrusterSound.pause();
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else if (this.args.crouching || this.standingOn && this.standingOn.isVehicle) {
          this.box.setAttribute('data-animation', 'crouching');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else {
        this.args.crouching = false;

        if (this.args.jumping) {
          this.box.setAttribute('data-animation', 'jumping');
        }
      }

      if (!this.args.falling) {
        this.args.flying = false;
      }

      if (this.args.flying) {
        this.box.setAttribute('data-animation', 'flying');
      } else if (this.args.falling) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      if (this.args.shotCoolDown > 0) {
        this.args.shotCoolDown--;
      }

      if (this.args.rocketCoolDown == 0) {
        this.thrusterSound && this.thrusterSound.pause();
      }

      if (this.args.rocketCoolDown > 0) {
        this.args.rocketCoolDown--;
      }

      if (this.args.rocketCoolDown == 0) {
        this.args.flying = false;
      }

      _get(_getPrototypeOf(Eggrobo.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "hold_0",
    value: function hold_0() {
      if (!this.args.falling) {
        this.args.rocketCoolDown = 5;
        return;
      }

      if (this.args.ySpeed > 1 || this.args.flying) {
        this.args.flying = true;

        if (this.args.rocketCoolDown <= 1) {
          this.thrusterSound && this.thrusterSound.play();
          this.args.rocketCoolDown = 3;
        }

        this.args.ySpeed = this.args.ySpeed * 0.999;
        this.args["float"] = 3;
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      var _this2 = this;

      if (this.args.shotCoolDown > 0) {
        return;
      }

      var direction = Math.sign(this.args.direction);
      var groundAngle = this.args.groundAngle;
      var offset, trajectory, spotAngle;

      switch (this.args.mode) {
        case 0:
          spotAngle = -groundAngle - Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle;
          break;

        case 1:
          spotAngle = -groundAngle + Math.PI / 4 * direction;
          trajectory = -groundAngle + Math.PI / 2;
          break;

        case 2:
          spotAngle = -groundAngle + Math.PI / 2 + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI;
          break;

        case 3:
          spotAngle = -groundAngle - Math.PI + Math.PI / 4 * direction;
          trajectory = -groundAngle - Math.PI / 2;
          break;
      }

      offset = [50 * Math.cos(spotAngle), 50 * Math.sin(spotAngle)];

      if (this.args.falling || this.args.crouching) {
        trajectory = 0;
        offset = [26 * direction, -26];
      }

      var projectile = new _Projectile.Projectile({
        direction: this.args.direction,
        x: this.args.x + offset[0] + (this.args.xSpeed || this.args.gSpeed),
        y: this.args.y + offset[1],
        owner: this,
        xSpeed: this.args.xSpeed || this.args.gSpeed,
        YSpeed: this.args.YSpeed
      });
      projectile.impulse(20, trajectory + (direction < 0 ? Math.PI : 0), true);
      projectile.update();
      this.viewport.auras.add(projectile);
      this.viewport.spawn.add({
        object: projectile
      });
      this.box.setAttribute('data-shooting', 'true');
      this.onTimeout(140, function () {
        _this2.box.setAttribute('data-shooting', 'false');
      });

      if (this.viewport.args.audio && this.shootingSample) {
        this.shootingSample.volume = 0.6 + Math.random() * -0.3;
        this.shootingSample.currentTime = 0;
        this.shootingSample.play();
      }

      this.args.shotCoolDown = 4;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Eggrobo;
}(_PointActor2.PointActor);

exports.Eggrobo = Eggrobo;
});

;require.register("actor/Emerald.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emerald = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Emerald = /*#__PURE__*/function (_PointActor) {
  _inherits(Emerald, _PointActor);

  var _super = _createSuper(Emerald);

  function Emerald() {
    var _this;

    _classCallCheck(this, Emerald);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-emerald emerald-' + (_this.args.color || 'white');
    _this.args.width = 12;
    _this.args.height = 12;
    return _this;
  }

  _createClass(Emerald, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Emerald.prototype), "update", this).call(this);

      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/S3K_9C.wav');
        this.sample.volume = 0.25 + Math.random() * 0.5;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      _get(_getPrototypeOf(Emerald.prototype), "collideA", this).call(this, other);

      if (this.args.gone) {
        return;
      }

      this.args.type = 'actor-item actor-emerald collected emerald-' + (this.args.color || 'white');

      if (!this.args.gone) {
        if (this.viewport.args.audio && this.sample) {
          this.sample.play();
        }

        this.args.type = 'actor-item actor-emerald collected gone emerald-' + (this.args.color || 'white');

        if (other.args.owner) {
          other.args.owner.args.emeralds += 1;
        } else if (other.occupant) {
          other.occupant.args.emeralds += 1;
        } else {
          other.args.emeralds += 1;
        }

        if (!this.viewport.args.emeralds.includes(this.args.color)) {
          this.viewport.args.emeralds.push(this.args.color);
        }

        this.viewport.actors.remove(this);
        this.remove();
      }

      this.args.gone = true;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "effect",
    get: function get() {
      return true;
    }
  }]);

  return Emerald;
}(_PointActor2.PointActor);

exports.Emerald = Emerald;
});

;require.register("actor/Explosion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Explosion = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Explosion = /*#__PURE__*/function (_PointActor) {
  _inherits(Explosion, _PointActor);

  var _super = _createSuper(Explosion);

  function Explosion() {
    var _this;

    _classCallCheck(this, Explosion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-explosion';
    _this.args.width = 48;
    _this.args.height = 48;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(Explosion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Explosion.prototype), "update", this).call(this);

      if (!this.removeTimer) {
        var viewport = this.viewport;
        this.removeTimer = this.onTimeout(360, function () {// viewport.actors.remove( this );
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return Explosion;
}(_PointActor2.PointActor);

exports.Explosion = Explosion;
});

;require.register("actor/FakeEmerald.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeEmerald = void 0;

var _BreakableBlock2 = require("./BreakableBlock");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FakeEmerald = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(FakeEmerald, _BreakableBlock);

  var _super = _createSuper(FakeEmerald);

  function FakeEmerald() {
    var _this;

    _classCallCheck(this, FakeEmerald);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 64;
    _this.args.height = 34;
    _this.args.type = 'actor-item actor-breakable-block actor-fake-emerald';
    _this.args.z = 128;
    _this.args["float"] = -1;
    _this.breakable = false;
    return _this;
  }

  _createClass(FakeEmerald, [{
    key: "updateStart",
    value: function updateStart() {}
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(FakeEmerald.prototype), "update", this).call(this);

      if (this["switch"] && this["switch"].args.active) {
        this.breakable = true;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (!this.breakable) {
        return false;
      }

      return _get(_getPrototypeOf(FakeEmerald.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return this.breakable;
    }
  }]);

  return FakeEmerald;
}(_BreakableBlock2.BreakableBlock);

exports.FakeEmerald = FakeEmerald;
});

;require.register("actor/Flickie.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Flickie = void 0;

var _Follower2 = require("./Follower");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Flickie = /*#__PURE__*/function (_Follower) {
  _inherits(Flickie, _Follower);

  var _super = _createSuper(Flickie);

  function Flickie(args, parent) {
    var _this;

    _classCallCheck(this, Flickie);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-flickie';
    _this.args.palletShift = Math.floor(Math.random() * 8);
    return _this;
  }

  return _createClass(Flickie);
}(_Follower2.Follower);

exports.Flickie = Flickie;
});

;require.register("actor/Flipper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Flipper = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Flipper = /*#__PURE__*/function (_PointActor) {
  _inherits(Flipper, _PointActor);

  var _super = _createSuper(Flipper);

  function Flipper(args, parent) {
    var _this$args$power;

    var _this;

    _classCallCheck(this, Flipper);

    _this = _super.call(this, args, parent);
    _this.args.width = 64;
    _this.args.height = 48;
    _this.noClip = true;
    _this.args["float"] = -1;
    _this.args.direction = _this.args.direction || 1;
    _this.args.power = (_this$args$power = _this.args.power) !== null && _this$args$power !== void 0 ? _this$args$power : 12;
    _this.args.type = 'actor-item actor-flipper';

    _this.args.bindTo('direction', function (v) {
      return _this.args.type = v < 0 ? 'actor-item actor-flipper actor-flipper-right' : 'actor-item actor-flipper actor-flipper-left';
    });

    _this.flipped = new WeakSet();
    return _this;
  }

  _createClass(Flipper, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (other.y <= this.y - this.args.height) {
        return;
      }

      if (this.flipped.has(other)) {
        return;
      }

      var leftBound = this.x - this.args.direction * this.args.width;
      other.args.rolling = true;
      other.willJump = false; // if(other.x < leftBound + (this.args.width / 3))
      // {
      // 	other.args.gSpeed = 2;
      // }

      if (other.buttons[0] && other.buttons[0].time === 1) {
        var rounded = this.roundAngle(-other.args.groundAngle + -Math.PI / 2, 16, true);
        this.args.animation = 'flipping';
        other.args.xSpeed = 0;
        other.args.ySpeed = 0;
        other.args.gSpeed = 0;
        var flipFactor = (other.x - leftBound) / this.args.width * 0.5;
        var flipMagnitude = flipFactor * this.args.direction;
        other.impulse(this.args.power * flipMagnitude, rounded, true);
        this.viewport.onFrameOut(3, function () {
          return _this2.args.animation = 'unflipping';
        });
        other.args.jumping = false;
        other.args.falling = true;
        this.flipped.add(other);
        this.viewport.onFrameOut(1, function () {
          return other.willJump = false;
        });
        this.viewport.onFrameOut(3, function () {
          return other.args.jumping = false;
        });
        this.viewport.onFrameOut(5, function () {
          return _this2.flipped["delete"](other);
        });
        return;
      }

      if (Math.abs(other.args.gSpeed) < 3) {
        other.args.gSpeed = Math.min(2, Math.abs(other.args.gSpeed) || 1) * Math.sign(other.args.gSpeed || this.args.direction);
      } else {
        other.args.gSpeed *= 0.5;
      }
    }
  }]);

  return Flipper;
}(_PointActor2.PointActor);

exports.Flipper = Flipper;
});

;require.register("actor/Follower.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Follower = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Follower = /*#__PURE__*/function (_PointActor) {
  _inherits(Follower, _PointActor);

  var _super = _createSuper(Follower);

  function Follower(args, parent) {
    var _this;

    _classCallCheck(this, Follower);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "noClip", 1);

    _this.args.type = 'actor-item actor-follower';
    _this.args["float"] = -1;
    _this.args.width = 16;
    _this.args.height = 16;
    _this.stopSwapZ = 0;
    _this.args.z = -1;
    return _this;
  }

  _createClass(Follower, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Follower.prototype), "update", this).call(this);

      if (this.stopSwapZ > 0) {
        this.stopSwapZ--;
      }

      this.args.standingOn = false;
      var host = this.viewport.controlActor;

      if (!host) {
        return;
      }

      this.args.falling = true;
      this.args["float"] = -1;
      var force = Math.random();
      var fudge = Math.random();
      var xDiff = host.x + -this.x;
      var yDiff = host.y + -this.y;
      var angle = Math.atan2(yDiff, xDiff);
      var distance = Math.sqrt(Math.pow(yDiff, 2) + Math.pow(xDiff, 2));
      var maxDistance = 256;
      var minDistance = 64;
      var minSpeed = 1;
      var airSpeed = Math.max(Math.abs(host.args.gSpeed), Math.abs(host.args.xSpeed), Math.abs(host.args.ySpeed), minSpeed) * 1.1;
      var xSpeedRelativeOriginal = this.args.xSpeed - (host.args.xSpeed || host.args.gSpeed);
      var maxSpeed = airSpeed + 3;
      var facing = null;

      if (distance < minDistance) {
        if (Math.abs(this.args.xSpeed) < minSpeed) {
          this.args.xSpeed = minSpeed * Math.sign(-0.5 + Math.random());
        }

        if (Math.abs(this.args.ySpeed) < minSpeed) {
          this.args.ySpeed = minSpeed * Math.sign(-0.5 + Math.random());
        }
      } else if (distance >= maxDistance) {
        this.args.x = Math.floor(host.x - Math.cos(angle) * maxDistance);
        this.args.y = Math.floor(host.y - Math.sin(angle) * maxDistance);
        this.args.xSpeed = xDiff / 60 + (host.args.xSpeed || host.args.gSpeed);
        this.args.ySpeed = 0;
        this.viewport.setColCell(this);

        if (this.x > host.x) {
          facing = 'left';
        } else {
          facing = 'right';
        }

        maxSpeed *= 4;
      } else {}

      var xDir = Math.sign(xDiff);
      var yDir = Math.sign(yDiff);
      var xSame = Math.sign(this.args.xSpeed) === xDir;
      var ySame = this.args.ySpeed && Math.sign(this.args.ySpeed) === yDir;
      var xMag = Math.max(force) * 0.35 * (xSame ? 0.85 : 0.55);
      var yMag = Math.max(force) * 0.10 * (xSame ? 0.75 : 1.50);

      if (!xSame || Math.abs(this.args.xSpeed) < maxSpeed) {
        var step = xMag * xDir * fudge; // if(!this.swapZ && this.args.xSpeed && Math.sign(this.args.xSpeed) !== Math.sign(step))
        // {
        // 	this.swapZ = this.viewport.onFrameOut(1, () => {
        // 		this.swapZ = false;
        // 	})
        // }

        var xSpeed = this.args.xSpeed + step;

        if (Math.abs(this.args.xSpeed) > maxSpeed) {
          xSpeed = maxSpeed * Math.sign(this.args.xSpeed);
        }

        this.args.xSpeed = xSpeed;

        if (distance >= maxDistance) {
          var _xSpeed = host.args.xSpeed || host.args.gSpeed;

          var ySpeed = host.args.ySpeed;

          if (facing) {
            this.args.xSpeed = xDiff / 90 + _xSpeed;
            this.args.ySpeed = yDiff / 90 + ySpeed;
          }
        }
      }

      if (!facing && this.args.xSpeed < 0) {
        facing = 'left';
      } else if (!facing) {
        facing = 'right';
      }

      if (!ySame || Math.abs(this.args.ySpeed) < maxSpeed) {
        var _ySpeed = this.args.ySpeed + yMag * yDir;

        if (Math.abs(this.args.ySpeed) > maxSpeed) {
          _ySpeed = maxSpeed * Math.sign(this.args.ySpeed);
        }

        this.args.ySpeed = _ySpeed;
      }

      if (Math.sign(xSpeedRelativeOriginal) && Math.sign(host.args.xSpeed || host.args.gSpeed) !== Math.sign(xSpeedRelativeOriginal) && this.stopSwapZ === 0) {
        if (Math.abs(this.x - host.x) > minDistance || Math.abs(this.y - host.y) > minDistance) {
          this.args.z = this.args.z > -1000 ? -100000 : 100000;
          this.stopSwapZ = 30;
        }
      }

      if (facing) {
        this.args.facing = facing;
      }

      if (this.args.ySpeed > 0) {
        if (this.args.ySpeed <= 0 || airSpeed < 1.5) {
          return;
        }

        if (this.box) {
          this.box.classList.add('decending');
          this.box.classList.remove('ascending');
        }
      } else if (this.box) {
        this.box.classList.remove('decending');
        this.box.classList.add('ascending');
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }]);

  return Follower;
}(_PointActor2.PointActor);

exports.Follower = Follower;
});

;require.register("actor/Fountain.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Fountain = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Fountain = /*#__PURE__*/function (_PointActor) {
  _inherits(Fountain, _PointActor);

  var _super = _createSuper(Fountain);

  function Fountain() {
    var _this;

    _classCallCheck(this, Fountain);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 72;
    _this.args.height = 120;
    _this.args["float"] = -1;
    _this.args.type = 'actor-item actor-fountain';
    return _this;
  }

  _createClass(Fountain, [{
    key: "collideA",
    value: function collideA(other) {
      if (!other.controllable || !other.args.falling) {
        return;
      }

      if (other.y > this.y + -this.args.height * 0.5) {
        other.args.x = this.x;
      }

      if (other.args.ySpeed > 0) {
        other.args.ySpeed *= 0.75;
      }

      if (other.args.ySpeed > -20 && Math.abs(this.x - other.x) < 8) {
        other.args.ySpeed -= 0.6;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Fountain;
}(_PointActor2.PointActor);

exports.Fountain = Fountain;
});

;require.register("actor/GohlaBall.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GohlaBall = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GohlaBall = /*#__PURE__*/function (_Mixin$from) {
  _inherits(GohlaBall, _Mixin$from);

  var _super = _createSuper(GohlaBall);

  function GohlaBall() {
    var _this;

    _classCallCheck(this, GohlaBall);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-gohla-ball';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 16;
    _this.args.height = 16;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(GohlaBall, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return GohlaBall;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.GohlaBall = GohlaBall;
});

;require.register("actor/GrapplePoint.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrapplePoint = void 0;

var _PointActor = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Spring = require("./Spring");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GrapplePoint = /*#__PURE__*/function (_Mixin$from) {
  _inherits(GrapplePoint, _Mixin$from);

  var _super = _createSuper(GrapplePoint);

  function GrapplePoint() {
    var _this;

    _classCallCheck(this, GrapplePoint);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args)); // this.args.width  = this.args.width  || 32;
    // this.args.height = this.args.height || 32;

    _this.args.width = 22;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-grapple-point';
    _this.ignoreOthers = new Set();
    _this.args.gravity = 0.6;
    _this.noClip = true;
    _this[_Spring.Spring.WontSpring] = true;
    return _this;
  }

  _createClass(GrapplePoint, [{
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(GrapplePoint.prototype), "update", this).call(this);

      var tiedTo = this.args._tiedTo;

      if (tiedTo) {
        this.setPos();
      } else {
        this.noClip = true;
      }

      if (!tiedTo) {
        this.unhook();
      } // if(!tiedTo || !tiedTo.args.falling)
      // {
      // 	return false;
      // }


      this.args.falling = true;

      if (this.hooked) {
        if (this.hooked.xAxis && this.args.ySpeed > 0) {
          if (Math.sign(this.args.xSpeed) || Math.sign(this.args.xSpeed) === Math.sign(this.hooked.xAxis)) {
            if (this.y > tiedTo.y) {
              this.args.xSpeed += this.hooked.xAxis * 0.25;
            } else {
              this.args.xSpeed -= this.hooked.xAxis * 0.25;
            }
          }
        }

        this.hooked.args.x = this.x;
        this.hooked.args.y = this.y + this.hooked.args.height + -5;
        this.hooked.args.xSpeed = 0;
        this.hooked.args.ySpeed = 0;
        this.hooked.args.groundAngle = 0;

        if (this.hooked.xAxis > 0) {
          this.hooked.args.facing = 'right';
          this.hooked.args.direction = +1;
        } else if (this.hooked.xAxis < 0) {
          this.hooked.args.facing = 'left';
          this.hooked.args.direction = -1;
        }

        this.hooked.args.cameraMode = 'hooked';
      }

      _get(_getPrototypeOf(GrapplePoint.prototype), "updateEnd", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "collideB",
    value: function collideB(other) {
      var _this2 = this;

      var tiedTo = this.args._tiedTo;

      if (!tiedTo || tiedTo.noClip) {
        return false;
      }

      if (other.args.hangingFrom || this.ignoreOthers.has(other)) {
        return;
        false;
      }

      if (this.args.ignore) {
        return false;
      }

      if (Math.abs(other.y - this.y) > 8 || !other.controllable || this.hooked) {
        return;
      }

      other.args.falling = true;
      this.hooked = other;
      this.viewport.auras.add(this);
      this.args.xSpeed = other.args.xSpeed || other.args.gSpeed;
      this.args.ySpeed = other.args.ySpeed;
      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      other.args.gSpeed = 0;
      other.args.ignore = -4;
      other.args["float"] = -1;
      other.xLast = other.x;
      other.yLast = other.y;
      other.args.x = this.x;
      other.args.y = this.y + other.args.height;
      other.args.hangingFrom = this;
      other.args.jumping = false;

      if (this.args._tiedTo) {
        var _tiedTo = this.args._tiedTo;

        _tiedTo.dispatchEvent(new CustomEvent('hooked'), {
          detail: {
            hook: this,
            subject: other
          }
        });

        _tiedTo.activate && _tiedTo.activate();

        var drop = function drop() {
          if (!_this2.viewport || !_this2.hooked) {
            return;
          }

          _this2.unhook();

          if (_tiedTo.explode) {
            _this2.hooked && (_this2.hooked.args.gSpeed = 0);

            _tiedTo.explode();

            _this2.args.x = _this2.def.get('x');
            _this2.args.y = _this2.def.get('y');

            _this2.viewport.setColCell(_this2);
          }
        };

        if (_tiedTo.args.flightTime) {
          this.viewport.onFrameOut(_tiedTo.args.flightTime, drop);
        }

        _tiedTo.onRemove(drop);

        _tiedTo.addEventListener('exploded', drop);
      }
    }
  }, {
    key: "unhook",
    value: function unhook() {
      var _this3 = this;

      var hooked = this.hooked;
      this.hooked = null;

      if (!hooked) {
        return;
      }

      var tiedTo = this.args._tiedTo;
      hooked.args.ignore = hooked.args["float"] = 0;
      hooked.args.y++;
      hooked.args.xSpeed += tiedTo.xSpeedLast || this.xSpeedLast || 0;
      hooked.args.ySpeed += tiedTo.ySpeedLast || this.ySpeedLast || 0;
      hooked.args.groundAngle = 0;
      hooked.args.hangingFrom = null;
      this.ignoreOthers.add(hooked);
      hooked.args.falling = true;
      hooked.args.jumping = true;
      var viewport = this.viewport;
      viewport.onFrameOut(15, function () {
        _this3.ignoreOthers["delete"](hooked);

        viewport.auras["delete"](_this3);
      });
    }
  }]);

  return GrapplePoint;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.GrapplePoint = GrapplePoint;
});

;require.register("actor/GuardBot.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GuardBot = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GuardBot = /*#__PURE__*/function (_Mixin$from) {
  _inherits(GuardBot, _Mixin$from);

  var _super = _createSuper(GuardBot);

  function GuardBot() {
    var _this;

    _classCallCheck(this, GuardBot);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-guard-bot';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 24;
    _this.args.height = 24;
    _this.args["static"] = true;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(GuardBot, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }]);

  return GuardBot;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.GuardBot = GuardBot;
});

;require.register("actor/HeavyDutySwitch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeavyDutySwitch = void 0;

var _Switch2 = require("./Switch");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var HeavyDutySwitch = /*#__PURE__*/function (_Switch) {
  _inherits(HeavyDutySwitch, _Switch);

  var _super = _createSuper(HeavyDutySwitch);

  function HeavyDutySwitch() {
    var _this;

    _classCallCheck(this, HeavyDutySwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-switch actor-heavy-duty-switch';
    _this.args.height = _this.height = 19;
    return _this;
  }

  return _createClass(HeavyDutySwitch);
}(_Switch2.Switch);

exports.HeavyDutySwitch = HeavyDutySwitch;
});

;require.register("actor/HtmlFrame.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HtmlFrame = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var HtmlFrame = /*#__PURE__*/function (_PointActor) {
  _inherits(HtmlFrame, _PointActor);

  var _super = _createSuper(HtmlFrame);

  function HtmlFrame() {
    var _args$collapse;

    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, HtmlFrame);

    _this = _super.call(this, args, parent);
    _this.args.yForce = 0;
    _this.args.yLean = 0;
    _this.args.type = 'actor-item actor-html-frame';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.originalX = _this.args.x;
    _this.originalY = _this.args.y;
    _this.args.z = -1000;
    _this.args["static"] = true;
    _this.args.gravity = 0.5;
    _this.args.collapse = (_args$collapse = args.collapse) !== null && _args$collapse !== void 0 ? _args$collapse : false;
    _this.args.url = 'https://www.youtube.com/embed/pxIofYrt0kE?controls=0&autoplay=1';
    return _this;
  }

  _createClass(HtmlFrame, [{
    key: "onRendered",
    value: function onRendered(event) {
      var _this2 = this;

      _get(_getPrototypeOf(HtmlFrame.prototype), "onRendered", this).call(this, event);

      this.droop(0);

      if (this.screen) {
        return;
      }

      this.screen = new _Tag.Tag("<iframe width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>");
      this.sprite.appendChild(this.screen.node);
      this.screen.style({
        'pointer-events': 'initial'
      });
      this.args.spriteSheet = this.args.spriteSheet || '/Sonic/marble-zone-block.png';
      this.args.bindTo('url', function (v) {
        return _this2.screen.src = v;
      });
      this.args.bindTo('html', function (v) {
        return _this2.screen.srcDoc = v;
      });
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(HtmlFrame), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.tileId = objDef.gid; // obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);

      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return HtmlFrame;
}(_PointActor2.PointActor); // <iframe width="560" height="315" src="https://www.youtube.com/embed/lTsIO_bo2P8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


exports.HtmlFrame = HtmlFrame;
});

;require.register("actor/Knuckles.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Knuckles = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _KnuxBomb = require("./KnuxBomb");

var _Spring = require("./Spring");

var _SkidDust = require("../behavior/SkidDust");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Knuckles = /*#__PURE__*/function (_PointActor) {
  _inherits(Knuckles, _PointActor);

  var _super = _createSuper(Knuckles);

  function Knuckles(args, parent) {
    var _this;

    _classCallCheck(this, Knuckles);

    _this = _super.call(this, args, parent);
    _this.args.canonical = 'Knuckles';
    window.knuckles = _assertThisInitialized(_this);

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-knuckles';
    _this.jumpForceNormal = 9.5;
    _this.jumpForceSuper = 10;
    _this.accelNormal = 0.15;
    _this.accelSuper = 0.22;
    _this.args.accel = _this.accelNormal;
    _this.args.decel = 0.4;
    _this.args.weight = 150;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.gravity = 0.5;
    _this.args.punchCharge = 0;
    _this.args.width = 15;
    _this.args.height = 41;
    _this.args.normalHeight = 41;
    _this.args.rollingHeight = 28;
    _this.punchTime = 0;
    _this.punched = 0;
    _this.beforePunch = 'standing';
    _this.bombsDropped = 0;
    _this.sparks = new Set();

    _this.args.bindTo('falling', function (v) {
      if (v || !_this.args.flying) {
        return;
      }

      if (_this.args.mode === 1 || _this.args.mode === 2 || _this.args.mode === 3) {
        _this.args.climbing = true;
        _this.args.gSpeed = 0;
        _this.args.xSpeed = 0;
        _this.args.ySpeed = 0;
      }
    });

    return _this;
  }

  _createClass(Knuckles, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      this.box = this.findTag('div');
      this.punchAura = new _Tag.Tag('<div class = "punch-aura">');
      this.punchAura.style({
        display: 'none'
      });
      this.sprite.appendChild(this.punchAura.node);
      this.args.bindTo('animation', function (v) {
        return _this2.box.setAttribute('data-animation', v);
      });
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      var falling = this.args.falling;
      var wasMoving = this.args.gSpeed;

      if (!this.box) {
        _get(_getPrototypeOf(Knuckles.prototype), "update", this).call(this);

        return;
      }

      if (this.throwing && Date.now() - this.throwing > 320) {
        this.throwing = false;
        this.holdBomb = false;
        var bomb = new _KnuxBomb.KnuxBomb({
          x: this.args.x,
          y: this.args.y - 16,
          owner: this,
          xSpeed: this.args.direction * 10 + (-1 + Math.random() * 2),
          ySpeed: Math.random() * -2
        });
        this.viewport.spawn.add({
          object: bomb
        });
      }

      this.readying = false;

      if (!this.args.falling && this.punchTime && Date.now() - this.punchTime > (this.willPunch ? 1536 : 384)) {
        this.punchMomentum = 0;
        this.punchTime = false;
        this.willPunch = false;
        this.punching = false;
        this.punched = 0;
      }

      if (this.punchTime && Date.now() - this.punchTime > 256) {
        this.readying = true;
      }

      if (this.punchTime && Date.now() - this.punchTime > 128) {
        this.punching = true;
      }

      if (this.punching) {
        this.args.rolling = false;
      }

      if (this.punched && Math.abs(this.args.gSpeed) > 5 && !this.auraVisible && (this.punched >= 3 || Math.abs(this.args.gSpeed) > 15)) {
        this.auraVisible = true;
        this.viewport.onFrameOut(6, function () {
          _this3.punchAura.style({
            display: 'none'
          });

          _this3.auraVisible = false;
        });
        this.punchAura.style({
          display: 'initial'
        });
      }

      if (this.willPunch) {
        if (this.args.punchCharge < 10) {
          this.args.punchCharge += 1;
        }

        this.punchMomentum = Math.sign(this.punchMomentum) * Math.max(Math.abs(this.punchMomentum), this.args.punchCharge * (0.3 * Math.min(this.punched, 3)));
      } else if (!this.punched && this.args.punchCharge > 4) {
        this.args.punchCharge -= 4;
      } else if (!this.punched && this.args.punchCharge > 0) {
        this.args.punchCharge = 0;
      }

      this.willStick = false;
      this.stayStuck = false;

      if (!falling) {
        this.bombsDropped = 0;
        this.springing = false;
        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.args.flying) {
          this.args.flying = false;
          this.args["float"] = 0;
        }

        this.args.knucklesFlyCoolDown = 15;
        this.args.flying = false;

        if (!this.args.rolling) {
          if (this.args.climbing) {
            if (this.args.modeTime < 2 || this.yAxis === 0) {
              this.args.animation = 'climbing';
              this.args.gSpeed = 0;
            } else if (this.yAxis < 0) {
              this.args.animation = 'climbing-up';

              if (Math.abs(this.args.gSpeed) < 4) {
                this.args.direction = this.args.mode === 1 ? 1 : -1;
                this.args.gSpeed += -this.args.direction;
              }
            } else if (this.yAxis > 0) {
              this.args.animation = 'climbing-down';

              if (Math.abs(this.args.gSpeed) < 4) {
                this.args.direction = this.args.mode === 1 ? 1 : -1;
                this.args.gSpeed += this.args.direction;
              }
            }
          } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
            this.args.animation = 'skidding';
          } else if (this.holdBomb) {
            this.args.animation = 'hold-bomb';
          } else if (this.throwing) {
            this.args.animation = 'throw-bomb';
          } else if (this.readying || this.willPunch) {
            this.args.animation = 'readying';
          } else if (!this.readying && this.punched) {
            if (this.punched % 2) {
              this.args.animation = 'jabbing';
            } else {
              this.args.animation = 'punching';
            }
          } else if (speed > maxSpeed * 0.75) {
            this.args.animation = 'running';
          } else if (this.args.moving && this.args.gSpeed) {
            this.args.animation = 'walking';
          } else {
            this.args.animation = 'standing';
          }
        } else {
          this.args.animation = 'rolling';
        }

        if (this.args.grinding) {
          this.args.rolling = false;
          this.args.animation = 'grinding';
        }
      } else {
        if (this.springing) {
          this.args.groundAngle = 0;
        }

        if (this.args.flying) {
          this.args.animation = 'flying';
        } else if (this.args.jumping) {
          // if(!this.willPunch && this.punched && this.args.ySpeed > 0)
          // {
          // 	this.args.animation = 'kick';
          // }
          // else
          if (this.willPunch || this.punching) {
            this.args.animation = 'uppercut';
            this.punched++;
            this.punchAura.style({
              display: 'initial'
            });
            this.auraVisible = true;
            this.viewport.onFrameOut(15, function () {
              _this3.punchAura.style({
                display: 'none'
              });

              _this3.auraVisible = false;
            });
          } else if (!this.punched) {
            this.args.animation = 'jumping';
          }
        }

        if (this.args.climbing && !this.args.jumping) {
          this.args.ySpeed = 0;
          this.args.xSpeed = 0;
          this.args.ignore = 10;
          this.args.falling = false;
          this.args.animation = 'walking';
          this.args.groundAngle = 0;

          if (this.args.mode === 1) {
            this.args.x += -4;
          } else if (this.args.mode === 3) {
            this.args.x += 4;
          }

          this.args.mode = 0;
        }
      }

      if (this.args.flying) {
        if (this.yAxis > 0 || this.checkBelow(this.x, this.y)) {
          this.args.flying = false;
          return;
        }

        if (this.args.ySpeed > 0) {
          this.args.ySpeed = 0;
        }

        if (this.args.ySpeed < 1) {
          this.args.ySpeed += 1;
        }

        if (this.args.ySpeed > 1) {
          this.args.ySpeed -= 1;
        }

        if (this.xAxis) {
          this.args.flyDirection = Math.sign(this.xAxis);
        }

        this.args.direction = Math.sign(this.args.xSpeed);

        if (this.args.direction < 0) {
          this.args.facing = 'left';
        } else {
          this.args.facing = 'right';
        }

        if (this.args.flyDirection) {
          if (Math.abs(this.args.xSpeed) < 16) {
            if (this.args.flyDirection !== Math.sign(this.args.xSpeed)) {
              this.args.xSpeed += 0.15625 * Math.sign(this.args.flyDirection) * 4;
            } else {
              this.args.xSpeed += 0.15625 * Math.sign(this.args.flyDirection);
            }
          }
        }

        if (Math.abs(this.args.xSpeed) > 18) {
          this.args.xSpeed = 18 * Math.sign(this.args.xSpeed);
        }

        this.args["float"] = 3;
        this.willStick = true;
        this.stayStuck = true;
        this.args.groundAngle = 0;
      } else if (this.args.mode % 2 === 0 || this.args.groundAngle) {
        this.args.flyDirection = 0;
      }

      if (this.args.knucklesFlyCoolDown > 0) {
        this.args.knucklesFlyCoolDown--;
      }

      _get(_getPrototypeOf(Knuckles.prototype), "update", this).call(this);

      if (this.willPunch && !wasMoving) {
        this.args.gSpeed = 0;
      }

      if (this.args.mode === 0 || this.args.mode === 2) {
        this.args.climbing = false;
      }

      if (this.args.grinding && !this.args.falling && this.args.gSpeed) {
        var sparkParticle = new _Tag.Tag("<div class = \"particle-sparks\">");
        var sparkEnvelope = new _Tag.Tag("<div class = \"envelope-sparks\">");
        sparkEnvelope.appendChild(sparkParticle.node);
        var sparkPoint = this.rotatePoint(-this.args.gSpeed * 1.75 * this.args.direction, 8);
        var flip = Math.sign(this.args.gSpeed);
        sparkEnvelope.style({
          '--x': sparkPoint[0] + this.x,
          '--y': sparkPoint[1] + this.y + Math.random * -3,
          'z-index': 0,
          'animation-delay': -Math.random() * 0.25 + 's',
          '--xMomentum': Math.max(Math.abs(this.args.gSpeed), 4) * flip,
          '--flip': flip,
          '--angle': this.realAngle,
          opacity: Math.random() * 2
        });
        sparkEnvelope.particle = sparkParticle;
        this.viewport.particles.add(sparkEnvelope);
        this.sparks.add(sparkEnvelope);
        this.viewport.onFrameOut(30, function () {
          _this3.viewport.particles.remove(sparkEnvelope);

          _this3.sparks["delete"](sparkEnvelope);
        });
      }

      if (this.args.grinding) {
        this.args.rolling = false;
        this.args.animation = 'grinding';
      }

      if (this.args.hangingFrom) {
        this.args.animation = 'hanging';
      }

      if (this.args.falling && this.springing && this.args.ySpeed >= 0) {
        this.args.animation = 'dropping';
      } else if (this.args.falling && this.springing) {
        this.args.animation = 'springdash';
      }

      if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.args.animation = this.args.standingOn.ridingAnimation || 'standing';
      }

      if (this.sparks.size) {
        var _iterator = _createForOfIteratorHelper(this.sparks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var spark = _step.value;

            var _sparkPoint = this.rotatePoint(1.75 * this.args.direction, 8);

            spark.style({
              opacity: Math.random() * 2,
              '--x': _sparkPoint[0] + this.x,
              '--y': _sparkPoint[1] + this.y
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this.box.style({
        '--punchCharge': this.args.punchCharge
      });
    }
  }, {
    key: "doJump",
    value: function doJump(force) {
      _get(_getPrototypeOf(Knuckles.prototype), "doJump", this).call(this, force);

      if (this.willPunch) {
        // this.args.xSpeed = 0.25 * (this.xAxis
        // 	? (Math.abs(this.punchMomentum) * this.xAxis)
        // 	: this.punchMomentum
        // );
        this.punchTime = Date.now();
        this.punched++;
      }
    }
  }, {
    key: "startle",
    value: function startle() {
      var _this4 = this;

      _get(_getPrototypeOf(Knuckles.prototype), "startle", this).call(this);

      this.onNextFrame(function () {
        return _this4.args.animation = 'startle';
      });
    }
  }, {
    key: "dropBomb",
    value: function dropBomb() {
      if (this.args.falling) {
        this.args.ySpeed = -8;
      }

      var bomb = new _KnuxBomb.KnuxBomb({
        x: this.args.x,
        y: this.args.y - 16,
        owner: this,
        xSpeed: this.args.xSpeed,
        ySpeed: -3
      });
      ;
      this.viewport.spawn.add({
        object: bomb
      });
    }
  }, {
    key: "release_0",
    value: function release_0() {
      _get(_getPrototypeOf(Knuckles.prototype), "release_0", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0() {
      if (this.args.hangingFrom) {
        _get(_getPrototypeOf(Knuckles.prototype), "command_0", this).call(this);

        return;
      }

      _get(_getPrototypeOf(Knuckles.prototype), "command_0", this).call(this);

      if (!this.args.jumping) {
        return;
      }

      if (this.willPunch || !this.args.falling) {
        return;
      }

      this.args.flying = true;
      this.args.xSpeed = 9 * this.args.direction;
      this.args.willJump = false;
    }
  }, {
    key: "readyStart",
    value: function readyStart() {
      var inputDirection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var button = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      if (this.args.flying || this.args.climbing || this.args.falling) {
        return;
      }

      this.readyButton = button;

      if (this.punchTime && Date.now() - this.punchTime < 108) {
        this.punchMomentum = 0;
        this.args.ignore = 16;
        this.willPunch = false;
        this.punchTime = false;
        this.punched = 0;
        return;
      }

      this.willPunch = true;
      var direction = Math.sign(this.xAxis || inputDirection || this.args.direction);
      this.args.direction = Math.sign(direction || this.punchMomentum);

      if (direction < 0) {
        this.args.facing = 'left';
      } else {
        this.args.facing = 'right';
      }

      if (this.punchTime) {
        this.args.ignore = 15;
        this.args.gSpeed = 0;
        this.punchTime = false;
        return;
      }

      this.punchMomentum = Math.abs(this.punchMomentum || this.args.gSpeed || 4) * Math.sign(direction || this.xAxis);
      this.args.ignore = 15;
      this.args.gSpeed = 0;
    }
  }, {
    key: "readyStop",
    value: function readyStop(inputDirection, button) {
      if (this.readyButton !== button) {
        return;
      }

      if (this.args.flying || this.args.climbing || this.args.falling) {
        return;
      }

      if (this.punchTime && Date.now() - this.punchTime < 64) {
        this.willPunch = false;
        this.punchMomentum = 0;
        this.punched = 0;
        return;
      }

      var direction = Math.sign(this.xAxis || inputDirection || this.args.direction);

      if (!direction || Math.sign(direction) === Math.sign(this.punchMomentum)) {
        this.args.gSpeed = direction ? Math.abs(this.punchMomentum) * direction : this.punchMomentum;
      } else if (direction) {
        this.punchMomentum = Math.abs(this.punchMomentum) * direction;
        this.args.gSpeed = 1 * (direction ? Math.abs(this.punchMomentum) * direction : this.punchMomentum);
      } // if(this.xAxis && Math.sign(this.xAxis) !== Math.sign(this.punchMomentum))
      // {
      // 	this.punchMomentum *= 0.25;
      // 	this.punchMomentum = Math.abs(this.punchMomentum) * Math.sign(this.xAxis);
      // }


      this.args.direction = Math.sign(direction || this.punchMomentum);

      if (direction < 0) {
        this.args.facing = 'left';
      } else {
        this.args.facing = 'right';
      }

      this.punchTime = Date.now();
      this.willPunch = false;

      if (!this.args.falling && this.args.gSpeed) {
        var dustParticle = new _Tag.Tag("<div class = \"particle-dust\">");
        var dustDist = Math.sign(this.args.gSpeed) * this.dustDist || 0;
        var dustPoint = this.rotatePoint(this.args.gSpeed, 0);
        dustParticle.style({
          '--x': dustPoint[0] + dustDist + this.x,
          '--y': dustPoint[1] + this.y,
          'z-index': 0,
          opacity: Math.pow(Math.random(), 2) * 0.5 + 0.5
        });
        viewport.particles.add(dustParticle);
        viewport.onFrameOut(20, function () {
          viewport.particles.remove(dustParticle);
        });
      }

      if (this.throwing || this.args.climbing) {
        return;
      }

      this.punched++;
    }
  }, {
    key: "command_1",
    value: function command_1() {
      this.readyStart(0, 1);
    }
  }, {
    key: "release_1",
    value: function release_1() {
      this.readyStop(0, 1);
    }
  }, {
    key: "command_4",
    value: function command_4() {
      this.readyStart(-1, 4);
    }
  }, {
    key: "release_4",
    value: function release_4() {
      this.readyStop(-1, 4);
    }
  }, {
    key: "command_5",
    value: function command_5() {
      this.readyStart(1, 5);
    }
  }, {
    key: "release_5",
    value: function release_5() {
      this.readyStop(1, 5);
    }
  }, {
    key: "command_2",
    value: function command_2() {
      if (!this.args.ignore && this.args.falling && !this.args.flying && this.bombsDropped < 3) {
        this.dropBomb();
        this.bombsDropped++;
        return;
      }

      if (this.args.falling || this.args.climbing) {
        return;
      }

      if (Math.abs(this.args.gSpeed) > 3) {
        return;
      }

      if (this.punchTime || this.throwing) {
        return;
      }

      this.holdBomb = Date.now();
      this.args.ignore = -1;
      this.args.gSpeed = 0;
    }
  }, {
    key: "release_2",
    value: function release_2() {
      if (this.args.falling || this.args.climbing) {
        return;
      }

      if (Math.abs(this.args.gSpeed) > 3) {
        return;
      }

      if (!this.holdBomb) {
        return;
      }

      this.args.ignore = 4;
      this.holdBomb = false;
      this.throwing = Date.now();
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      if (this.args.climbing) {
        this.args.cameraMode = 'aerial';
      } else {
        _get(_getPrototypeOf(Knuckles.prototype), "setCameraMode", this).call(this);
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this5 = this;

      if (other instanceof _Spring.Spring) {
        this.onNextFrame(function () {
          if (!_this5.args.falling) {
            return;
          }

          _this5.springing = true;
          _this5.args.animation = 'springdash';
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return !this.args.climbing;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }]);

  return Knuckles;
}(_PointActor2.PointActor);

exports.Knuckles = Knuckles;
});

;require.register("actor/KnuxBomb.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnuxBomb = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Tag = require("curvature/base/Tag");

var _Region = require("../region/Region");

var _Spring = require("./Spring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var KnuxBomb = /*#__PURE__*/function (_PointActor) {
  _inherits(KnuxBomb, _PointActor);

  var _super = _createSuper(KnuxBomb);

  function KnuxBomb() {
    var _this;

    _classCallCheck(this, KnuxBomb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-knux-bomb';
    _this.args.width = 16;
    _this.args.height = 16;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(KnuxBomb, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this.removed) {
        return;
      }

      _get(_getPrototypeOf(KnuxBomb.prototype), "update", this).call(this);

      if (!this.args.xSpeed && !this.args.ySpeed && !this.args.gSpeed) {
        this.removeTimer = this.onTimeout(250, function () {
          return _this2.explode();
        });
      }

      if (!this.removeTimer) {
        this.removeTimer = this.onTimeout(1500, function () {
          return _this2.explode();
        });
      }
    } // collideA(other)
    // {
    // 	if(other === this.args.owner || other instanceof KnuxBomb || other instanceof Region || other instanceof Spring)
    // 	{
    // 		return false;
    // 	}
    // 	this.args.x += Math.cos(this.args.angle) * other.args.width / 2 * Math.sign(this.args.xSpeed);
    // 	this.args.y += Math.sin(this.args.angle) * other.args.width / 2 * Math.sign(this.args.xSpeed);
    // 	this.explode();
    // 	return false;
    // }

  }, {
    key: "explode",
    value: function explode() {
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-explosion">');
      particle.style({
        '--x': this.x,
        '--y': this.y
      });
      viewport.particles.add(particle);
      setTimeout(function () {
        return viewport.particles.remove(particle);
      }, 350);
      this.viewport.actors.remove(this);
      this.remove();
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return KnuxBomb;
}(_PointActor2.PointActor);

exports.KnuxBomb = KnuxBomb;
});

;require.register("actor/LayerController.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerController = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LayerController = /*#__PURE__*/function (_PointActor) {
  _inherits(LayerController, _PointActor);

  var _super = _createSuper(LayerController);

  function LayerController(args, parent) {
    var _this$args$fall, _this$args$yQuake;

    var _this;

    _classCallCheck(this, LayerController);

    _this = _super.call(this, args, parent);
    _this.args.activated = false;
    _this.args.xLayer = 0;
    _this.args.yLayer = 0;
    _this.args.xLayerSpeed = 0;
    _this.args.yLayerSpeed = 0;
    _this.args.yLayerSpeedMax = _this.args.yLayerSpeedMax || 9;
    _this.args.fall = (_this$args$fall = _this.args.fall) !== null && _this$args$fall !== void 0 ? _this$args$fall : true;
    _this.args.xLayerLimit = _this.args.xLayerLimit || null;
    _this.args.yLayerLimit = _this.args.yLayerLimit || null;
    _this.args.yQuake = (_this$args$yQuake = _this.args.yQuake) !== null && _this$args$yQuake !== void 0 ? _this$args$yQuake : 5;
    _this.args["static"] = true;
    _this.args.hidden = true;
    return _this;
  }

  _createClass(LayerController, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (this.args.activated && this.args.fall) {
        this.args.yLayerSpeed += 0.25;
      }

      if (this.args.activated && this.args.swim) {
        this.args.xLayerSpeed += 1;
      }

      if (this.args.yLayerSpeed > this.args.yLayerSpeedMax && this.args.yLayerSpeedMax > 0) {
        this.args.yLayerSpeed = this.args.yLayerSpeedMax;
      }

      if (this.args.xLayerSpeed > this.args.xLayerSpeedMax && this.args.xLayerSpeedMax > 0) {
        this.args.xLayerSpeed = this.args.xLayerSpeedMax;
      }

      if (this.args.yLayerSpeed) {
        this.args.yLayer = Math.round(this.args.yLayer + this.args.yLayerSpeed || 0);
      }

      if (this.args.xLayerSpeed) {
        this.args.xLayer = Math.round(this.args.xLayer + this.args.xLayerSpeed || 0);
      }

      var tileSize = this.viewport.tileMap.mapData.tileheight;
      var xMapTiles = this.viewport.tileMap.mapData.width;
      var yMapTiles = this.viewport.tileMap.mapData.height;
      var mapWidth = this.viewport.tileMap.meta.wrapX ? Infinity : xMapTiles * tileSize;
      var mapHeight = this.viewport.tileMap.meta.wrapY ? Infinity : yMapTiles * tileSize;

      if (this.args.yLayerLimit > 0 && this.args.yLayer > mapHeight && this.args.yLayer > this.args.yLayerLimit) {
        this.args.yLayerSpeed = 0;
        this.args.yLayer = this.args.yLayerLimit;
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras["delete"](target);
        this.viewport.auras["delete"](this);
      }

      if (this.args.xLayerLimit > 0 && (this.args.xLayer > mapWidth || this.args.xLayer > this.args.xLayerLimit)) {
        this.args.xLayerSpeed = 0;
        this.args.xLayer = this.args.xLayerLimit;
        var _target = this.viewport.actorsById[this.args.target];
        this.viewport.auras["delete"](_target);
        this.viewport.auras["delete"](this);
      }
    }
  }, {
    key: "activate",
    value: function activate(other, button) {
      var _this2 = this,
          _this$args$yLayerLimi;

      if (this.args.activated) {
        return;
      }

      this.viewport.auras.add(this);
      this.viewport.args.shakeY = this.args.yQuake;
      this.viewport.onFrameOut(60, function () {
        _this2.args.activated = true;
      });
      this.args.yLayerLimit = (_this$args$yLayerLimi = this.args.yLayerLimit) !== null && _this$args$yLayerLimi !== void 0 ? _this$args$yLayerLimi : 4096;

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }
  }]);

  return LayerController;
}(_PointActor2.PointActor);

exports.LayerController = LayerController;
});

;require.register("actor/LayerSwitch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerSwitch = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LayerSwitch = /*#__PURE__*/function (_PointActor) {
  _inherits(LayerSwitch, _PointActor);

  var _super = _createSuper(LayerSwitch);

  function LayerSwitch() {
    var _this$args$fromLayer, _this$args$toLayer;

    var _this;

    _classCallCheck(this, LayerSwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-layer-switch';
    _this.args.width = 32;
    _this.args.height = 32;
    _this["static"] = true;
    _this.args.fromLayer = (_this$args$fromLayer = _this.args.fromLayer) !== null && _this$args$fromLayer !== void 0 ? _this$args$fromLayer : 1;
    _this.args.toLayer = (_this$args$toLayer = _this.args.toLayer) !== null && _this$args$toLayer !== void 0 ? _this$args$toLayer : 2;
    return _this;
  }

  _createClass(LayerSwitch, [{
    key: "onAttach",
    value: function onAttach(event) {
      event && event.preventDefault();
      return false;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      var speed = other.args.gSpeed || other.args.xSpeed || other.args.direction || other.xAxis;
      var back = !!Number(this.args.back);
      var roll = !!Number(this.args.roll);
      var invert = other.args.mode === 2 || other.args.mode === 3 ? -1 : 1;
      var radius = this.args.width / 2;
      var otherRadius = 0; //other.args.width / 2;

      if (other.x < this.x + -radius + otherRadius || other.x > this.x + radius + -otherRadius) {
        return;
      }

      if (other.y < this.y + -this.args.height || other.y > this.y) {
        return;
      }

      if (roll && (!other.args.rolling || other.args.height > 28)) {
        other.args.layer = toLayer === this.args.fromLayer ? this.args.toLayer : this.args.fromLayer;
        return false;
      }

      if (back && other.args.falling) {
        speed = other.args.xSpeed || other.args.direction;
        back = !back;
      }

      var toLayer = other.args.layer;

      if (speed > 0) {
        toLayer = back ? this.args.fromLayer : this.args.toLayer;
      }

      if (speed < 0) {
        toLayer = back ? this.args.toLayer : this.args.fromLayer;
      }

      if (!this.viewport.tileMap.getSolid(other.x, other.y, toLayer)) {
        other.args.layer = toLayer;
      } else {
        this.viewport.onFrameOut(1, function () {
          if (!_this2.viewport.tileMap.getSolid(other.x, other.y, toLayer)) {
            other.args.layer = toLayer;
          }
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(LayerSwitch), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      return obj;
    }
  }]);

  return LayerSwitch;
}(_PointActor2.PointActor);

exports.LayerSwitch = LayerSwitch;
});

;require.register("actor/Magnet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Magnet = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Magnet = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Magnet, _Mixin$from);

  var _super = _createSuper(Magnet);

  function Magnet() {
    var _this;

    _classCallCheck(this, Magnet);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.gravity = 0.8;
    _this.args.width = 48;
    _this.args.height = 28;
    _this.args.type = 'actor-item actor-magnet';
    return _this;
  }

  _createClass(Magnet, [{
    key: "collideA",
    value: function collideA(other, type) {}
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (other.controllable) {// other.startle();
      }
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Magnet.prototype), "update", this).call(this);

      this.setPos();
    }
  }]);

  return Magnet;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.Magnet = Magnet;
});

;require.register("actor/MarbleBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarbleBlock = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MarbleBlock = /*#__PURE__*/function (_PointActor) {
  _inherits(MarbleBlock, _PointActor);

  var _super = _createSuper(MarbleBlock);

  function MarbleBlock() {
    var _this;

    _classCallCheck(this, MarbleBlock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-block-marble';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.spriteSheet = _this.args.spriteSheet || '/Sonic/marble-zone-block.png';
    return _this;
  }

  _createClass(MarbleBlock, [{
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(MarbleBlock.prototype), "collideA", this).call(this, other, type);

      if (other.isEffect) {
        return false;
      }

      if (!this.isPushable) {
        return true;
      }

      var otherMag = Math.ceil(Math.abs(other.args.gSpeed || other.args.xSpeed));
      var otherDir = Math.sign(other.args.gSpeed || other.args.xSpeed);
      var otherSpeed = otherMag * otherDir;

      if (!this.args.falling && type === 1 && otherSpeed <= 0) {
        return false;
      }

      if (!this.args.falling && type === 3 && otherSpeed >= 0) {
        return false;
      }

      var blockTop = this.y - this.args.height;

      if ((type === 1 || type === 3) && (other.y >= this.y || other.y > blockTop)) {
        if (!otherSpeed) {
          return true;
        }

        this.args.pushed = Math.sign(other.args.gSpeed) || this.args.pushed;

        if (this.args.pushed < 0 && this.getMapSolidAt(this.x - Math.ceil(this.args.width / 2) + -1, this.y + -1)) {
          return true;
        }

        if (this.args.pushed > 0 && this.getMapSolidAt(this.x + Math.ceil(this.args.width / 2) + 1, this.y + -1)) {
          return true;
        }

        var tileMap = this.viewport.tileMap;
        var moveBy = type === 1 && 1 || type === 3 && -1;
        var scan = this.scanBottomEdge(moveBy);
        var blockers = tileMap.getSolid(this.x + Math.ceil(this.args.width / 2) * moveBy, this.y);

        if (blockers) {
          return true;
        }

        var radius = this.args.width / 2;

        if (moveBy > 0 && scan === 0) {
          this.args.falling = true;
          other.args.ignore = other.args.ignore || 1;
          other.args.gSpeed = 0;
        } else if (moveBy < 0 && scan === 0) {
          this.args.falling = true;
          other.args.ignore = other.args.ignore || 1;
          other.args.gSpeed = 0;
        } else if (!this.args.falling || scan > 0) {
          var nextCenter = this.findNextStep(moveBy);
          var nextWall = this.findNextStep(moveBy + radius * Math.sign(moveBy));

          if ((!nextCenter[1] || nextCenter[2]) && !nextWall[3]) {
            var otherRadius = other.args.width / 2;
            var myRadius = this.args.width / 2;

            if (Math.abs(this.x - other.x) <= otherRadius + myRadius) {
              this.args.x = other.args.x + moveBy * (myRadius + otherRadius);
              var direction = Math.sign(other.args.gSpeed);

              if (Math.sign(this.x - other.x) === direction) {
                other.args.pushing = direction; // other.args.rolling = false;
              }

              var weightRatio = this.args.weight / other.args.weight;
              other.args.gSpeed -= weightRatio * 0.005 * Math.sign(other.args.gSpeed);
            }

            return scan === 0;
          }

          return true;
        }
      }

      if (other.args.ySpeed < 0) {
        return false;
      }

      return true;
    }
  }, {
    key: "onAttach",
    value: function onAttach() {
      this.args.spriteSheet = this.args.spriteSheet || '/Sonic/marble-zone-block.png';
      this.setTile();
    }
  }, {
    key: "isPushable",
    get: function get() {
      return true;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return MarbleBlock;
}(_PointActor2.PointActor);

exports.MarbleBlock = MarbleBlock;
});

;require.register("actor/Marker.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Marker = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Marker = /*#__PURE__*/function (_PointActor) {
  _inherits(Marker, _PointActor);

  var _super = _createSuper(Marker);

  function Marker() {
    var _this;

    _classCallCheck(this, Marker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-marker';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["float"] = -1;
    return _this;
  }

  _createClass(Marker, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Marker;
}(_PointActor2.PointActor);

exports.Marker = Marker;
});

;require.register("actor/MechaFroggy.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MechaFroggy = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MechaFroggy = /*#__PURE__*/function (_PointActor) {
  _inherits(MechaFroggy, _PointActor);

  var _super = _createSuper(MechaFroggy);

  function MechaFroggy() {
    var _this;

    _classCallCheck(this, MechaFroggy);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-mecha-froggy';
    _this.args.animation = 'standing';
    _this.args.accel = 0.7;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 10;
    _this.args.jumpForce = 15;
    _this.args.gravity = 0.5;
    _this.args.width = 15;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(MechaFroggy, [{
    key: "update",
    value: function update() {
      var direction = this.args.direction;

      if (!this.flame) {
        this.flame = new _Tag.Tag('<div class = "mecha-froggy-flame">');
        this.sprite.appendChild(this.flame.node);
      }

      if (!this.args.jumping || this.args.falling) {
        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed && Math.abs(this.args.gSpeed) >= 10) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && this.args.gSpeed && Math.abs(this.args.gSpeed)) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(MechaFroggy.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return MechaFroggy;
}(_PointActor2.PointActor);

exports.MechaFroggy = MechaFroggy;
});

;require.register("actor/MechaSonic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MechaSonic = void 0;

var _PointActor2 = require("./PointActor");

var _Vehicle = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MechaSonic = /*#__PURE__*/function (_PointActor) {
  _inherits(MechaSonic, _PointActor);

  var _super = _createSuper(MechaSonic);

  function MechaSonic() {
    var _this;

    _classCallCheck(this, MechaSonic);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust('particle-sparks'));

    _this.args.type = 'actor-item actor-mecha-sonic';
    _this.args.accel = 0.1;
    _this.args.decel = 0.3;
    _this.args.skidTraction = 2;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.takeoffPlayed = false;
    _this.args.rollingHeight = 28;
    _this.args.normalHeight = 44;
    _this.args.width = 18;
    _this.args.height = _this.args.normalHeight;

    _this.args.bindTo('falling', function (v) {
      if (!v) {
        _this.landSound();
      }
    });

    return _this;
  }

  _createClass(MechaSonic, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.sprite) {
        return;
      }

      var falling = this.args.falling;
      this.args.accel = 0.1;
      var direction = this.args.direction;
      var gSpeed = this.args.gSpeed;
      var speed = Math.abs(gSpeed);
      var maxSpeed = 100;
      var minRun = 100 * 0.1;
      var minRun2 = 0.5 * this.args.gSpeedMax;

      if (!this.flame) {
        this.sparks = new _Tag.Tag('<div class = "mecha-sonic-sparks">');
        this.flame = new _Tag.Tag('<div class = "mecha-sonic-flame">');
        this.sprite.appendChild(this.sparks.node);
        this.sprite.appendChild(this.flame.node);
      }

      if (this.viewport.args.audio && !this.thrusterSound) {
        this.takeoffSound = new Audio('/Sonic/mecha-sonic-takeoff.wav');
        this.thrusterSound = new Audio('/Sonic/mecha-sonic-thruster.wav');
        this.scrapeSound = new Audio('/Sonic/mecha-sonic-scrape.wav');
        this.thrusterCloseSound = new Audio('/Sonic/mecha-sonic-thruster-close.wav');
        this.thrusterCloseSound.volume = 0.25;
        this.takeoffSound.volume = 0.5;
        this.scrapeSound.volume = 0.1;
        this.thrusterSound.loop = true;
        this.scrapeSound.loop = true;
      }

      if (this.thrusterSound) {
        this.thrusterSound.volume = 0.15 + Math.random() * -0.05;

        if (this.thrusterSound.currentTime > 1.5) {
          this.thrusterSound.currentTime = 0.5;
        }

        if (this.scrapeSound.currentTime > 1.5) {
          this.scrapeSound.currentTime = 0.5;
        }
      }

      if (!falling) {
        this.dashed = false;
      }

      if (!this.args.rolling && !falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.scrapeSound && this.scrapeSound.play();
          this.args.animation = 'skidding';
        } else if (speed >= minRun2) {
          this.scrapeSound && this.scrapeSound.pause();
          this.args.animation = 'running2';
          this.thrusterSound && this.thrusterSound.play();

          if (!this.args.takeoffPlayed) {
            this.args.takeoffPlayed = true;
            this.takeoffSound && this.takeoffSound.play();
          }

          this.args.accel = 0.75;

          if (speed > maxSpeed * 0.75) {
            this.args.accel = 0.03;
          }
        } else if (speed >= minRun) {
          this.scrapeSound && this.scrapeSound.play();
          this.args.animation = 'running';
        } else if (this.args.moving && gSpeed) {
          this.scrapeSound && this.scrapeSound.play();

          if (this.args.animation === 'curling' || this.args.animation === 'jumping' || this.args.animation === 'rolling') {
            this.args.animation = 'uncurling';
            this.onTimeout(128, function () {
              _this2.args.animation = 'walking';
            });
          } else if (this.args.animation === 'standing' || this.args.animation === 'running' || this.args.animation === 'running2') {
            this.args.animation = 'walking';
          }
        } else if (this.args.crouching || this.standingOn && this.standingOn.isVehicle) {
          this.args.animation = 'crouching';
        } else {
          this.scrapeSound && this.scrapeSound.pause();

          if (this.args.animation === 'curling' || this.args.animation === 'jumping' || this.args.animation === 'rolling') {
            this.args.animation = 'uncurling';
            this.onTimeout(128, function () {
              _this2.args.animation = 'standing';
            });
          } else if (this.args.animation === 'walking' || this.args.animation === 'running' || this.args.animation === 'running2' || this.args.animation === 'skidding' || this.args.animation === 'crouching' || this.args.animation === 'rolling') {
            this.args.animation = 'standing';
          }
        }

        if (speed < minRun2) {
          this.closeThruster();
        }
      } else if (this.args.rolling) {
        this.scrapeSound && this.scrapeSound.pause();

        if (this.args.animation !== 'curling' && this.args.animation !== 'uncurling' && this.args.animation !== 'rolling' && this.args.animation !== 'jumping') {
          this.args.animation = 'crouching';
          this.onTimeout(200, function () {
            if (_this2.args.rolling) {
              _this2.args.animation = 'rolling';

              _this2.closeThruster();
            }
          });
        }
      } else {
        this.scrapeSound && this.scrapeSound.pause();

        if (this.dashed) {
          this.args.animation = 'running2';
        } else if (this.args.animation !== 'rolling' && this.args.animation !== 'jumping' && this.args.animation !== 'uncurling' && this.args.animation !== 'curling' && this.args.animation !== 'crouching') {
          this.args.animation = 'curling';
          this.onTimeout(200, function () {
            _this2.thrusterCloseSound && _this2.thrusterCloseSound.play();

            if (_this2.args.falling) {
              if (_this2.dashed) {
                _this2.args.animation = 'running2';
              } else if (_this2.args.jumping) {
                _this2.args.animation = 'jumping';
              }

              _this2.closeThruster();
            }
          });
        } else if (!this.args.jumping) {
          this.args.animation = 'crouching';
        }
      }

      _get(_getPrototypeOf(MechaSonic.prototype), "update", this).call(this);
    }
  }, {
    key: "closeThruster",
    value: function closeThruster() {
      if (this.args.takeoffPlayed) {
        this.landSound();
      }

      this.args.takeoffPlayed = false;
      this.thrusterSound && this.thrusterSound.pause();
    }
  }, {
    key: "landSound",
    value: function landSound() {
      this.thrusterCloseSound && this.thrusterCloseSound.play();
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.thrusterSound && this.thrusterSound.pause();
      this.scrapeSound && this.scrapeSound.pause();
    }
  }, {
    key: "command_5",
    value: function command_5() {
      if (this.args.falling) {
        this.airDash(1);
      }
    }
  }, {
    key: "command_4",
    value: function command_4() {
      if (this.args.falling) {
        this.airDash(-1);
      }
    }
  }, {
    key: "airDash",
    value: function airDash(direction) {
      var _this3 = this;

      if (this.dashed || this.args.ignore && this.args.ignore !== -2) {
        return;
      }

      if (direction < 0) {
        this.args.direction = -1;
        this.args.facing = 'left';
      } else {
        this.args.direction = 1;
        this.args.facing = 'right';
      }

      var dashSpeed = direction * 7;
      this.args["float"] = 3;
      this.args.mode = 0;
      this.args["float"] = 2;
      this.args.rolling = false;
      this.args.height = this.args.normalHeight;

      if (this.args.xSpeed && Math.sign(this.args.xSpeed) !== Math.sign(direction)) {
        dashSpeed = direction * 11;
        this.args["float"] = 6;
        this.args.xSpeed = 0;
      }

      this.args.falling = true;
      var finalSpeed = this.args.xSpeed + dashSpeed;
      var space = this.scanForward(dashSpeed, 0.5);

      if (space && Math.abs(finalSpeed) > Math.abs(space)) {
        dashSpeed = space * Math.sign(finalSpeed);
      }

      var foreDistance = this.castRay(finalSpeed, finalSpeed > 0 ? 0 : Math.PI, function (i, point) {
        if (_this3.getMapSolidAt.apply(_this3, _toConsumableArray(point).concat([_this3.args.layer]))) {
          return i;
        }
      });

      if (foreDistance !== false) {
        dashSpeed = foreDistance * Math.sign(dashSpeed);
      }

      this.args.xSpeed = finalSpeed;
      this.args.ySpeed = 0;
      this.dashTimer = 0;
      this.dashed = true;
      this.args.mode = 0;
      this.args.groundAngle = 0;
      this.args.takeoffPlayed = true;

      if (this.takeoffSound) {
        this.takeoffSound.currentTime = 0;
        this.takeoffSound.play();
      }
    } // get solid() { return !this.occupant; }
    // get isVehicle() { return true; }

  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return MechaSonic;
}(_PointActor2.PointActor);

exports.MechaSonic = MechaSonic;
});

;require.register("actor/MegaMace.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MegaMace = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MegaMace = /*#__PURE__*/function (_Mixin$from) {
  _inherits(MegaMace, _Mixin$from);

  var _super = _createSuper(MegaMace);

  function MegaMace() {
    var _this;

    _classCallCheck(this, MegaMace);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 64;
    _this.args.height = 64 - 12;
    _this.args.type = 'actor-item actor-mega-mace';
    _this.args.ropeLength = _this.args._tiedTo ? _this.args.ropeLength : 8;
    _this.args.gravity = 0.8;
    return _this;
  }

  _createClass(MegaMace, [{
    key: "update",
    value: function update() {
      if (!this.args.tiedTo) {
        _get(_getPrototypeOf(MegaMace.prototype), "update", this).call(this);
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (this.viewport && !this.viewport.auras.has(this)) {
        this.viewport.auras.add(this);
      }

      if (this.args.tiedTo) {
        _get(_getPrototypeOf(MegaMace.prototype), "update", this).call(this);

        if (!this.args._tiedTo) {
          this.args._tiedTo = this.viewport.actorsById[this.args.tiedTo];
        }

        if (this.args.tiedTo && this.args._tiedTo.args.hitPoints) {
          this.setPos();
        } else {
          this.noClip = true;
        }
      }

      _get(_getPrototypeOf(MegaMace.prototype), "updateEnd", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (this.args._tiedTo && !this.args._tiedTo === other) {
        return false;
      }
    }
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (this.args._tiedTo && !this.args._tiedTo === other) {
        return false;
      }

      if (this.args.tiedTo && !this.args._tiedTo.args.hitPoints) {
        return;
      }

      if (other.controllable || other.damage) {
        other.damage();
      }
    }
  }]);

  return MegaMace;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.MegaMace = MegaMace;
});

;require.register("actor/MiniBoss.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MiniBoss = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _CanPop = require("../mixin/CanPop");

var _CutScene = require("./CutScene");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MiniBoss = /*#__PURE__*/function (_Mixin$from) {
  _inherits(MiniBoss, _Mixin$from);

  var _super = _createSuper(MiniBoss);

  function MiniBoss(args, parent) {
    var _this;

    _classCallCheck(this, MiniBoss);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-mini-boss';
    _this.args.width = 48;
    _this.args.height = 48;
    _this.args["float"] = -1;
    _this.args.damagers = new Map();
    _this.args.phase = 'idle';
    _this.dieSound = new Audio('/Sonic/object-destroyed.wav');
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    _this.dudSound = new Audio('/Sonic/S2_59.wav');
    _this.args.hitPoints = 8;
    _this.args.noseAngle = Math.PI / 2 * 3;
    _this.args.drillPush = 0;
    _this.args.phaseFrameId = 0;
    _this.args.frameId = 0;
    _this.args.direction = -1;
    _this.args.facing = 'left';

    _this.args.bindTo('phase', function (v) {
      return _this.args.phaseFrameId = 0;
    }); // this.clearScene = new CutScene({src: '/cutscenes/clear-seaview.json'});


    return _this;
  }

  _createClass(MiniBoss, [{
    key: "onAttached",
    value: function onAttached() {
      this.autoAttr.get(this.box)['data-phase'] = 'phase'; // this.autoStyle.get(this.box)['--nose-angle'] = 'noseAngle';
      // this.autoStyle.get(this.box)['--drill-push'] = 'drillPush';
      // this.body  = new Tag(`<div class = "body">`);
      // this.nose  = new Tag(`<div class = "nose">`);
      // this.eyeBack = new Tag(`<div class = "eye-back">`);
      // this.eyeFore = new Tag(`<div class = "eye-fore">`);
      // this.body.appendChild(this.eyeBack.node);
      // this.body.appendChild(this.eyeFore.node);
      // this.body.appendChild(this.nose.node);
      // this.sprite.appendChild(this.body.node);
      // this.nose.appendChild(this.drill.node);

      this.attractor = null; // this.clearScene.viewport = this.viewport;
    }
  }, {
    key: "update",
    value: function update() {
      this.args.phaseFrameId++;
      this.args.frameId++;

      if (!this.viewport) {
        return;
      }

      var viewport = this.viewport;
      viewport.auras.add(this);
      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      if (!this.attractor) {
        this.attractor = {};
        this.attractor.x = this.x;
        this.attractor.y = this.y;
      }

      var xDiff = Math.abs(this.x - this.attractor.x);
      var yDiff = Math.abs(this.y - this.attractor.y);
      var xSign = Math.sign(this.x - this.attractor.x);
      var ySign = Math.sign(this.y - this.attractor.y);

      switch (this.args.phase) {
        // 	case 'idle':
        // 		this.args.xSpeed = 0;
        // 		this.args.ySpeed = 0;
        // 		break;
        // 	case 'intro':
        // 		if(this.args.phaseFrameId > 30)
        // 		{
        // 			this.args.phase = 'stalking';
        // 		}
        // 		break;
        // 	case 'alert':
        // 		if(this.args.phaseFrameId > 4)
        // 		{
        // 			this.args.drillPush = 1;
        // 			this.args.falling   = true
        // 			this.args.float     = -1;
        // 			if(this.y > this.args.alertTo)
        // 			{
        // 				this.args.ySpeed--;
        // 			}
        // 			else
        // 			{
        // 				this.args.y = this.args.alertTo;
        // 				this.args.ySpeed = 0;
        // 			}
        // 		}
        // 		if(this.args.phaseFrameId > 0)
        // 		{
        // 			this.args.phase = 'stalking';
        // 		}
        // 		break;
        case 'damaged':
          if (this.args.hitPoints > 0) {
            if (this.args.phaseFrameId > 20) {
              this.args.phase = 'stalking';
            }
          } else {
            if (this.args.phaseFrameId > 6) {
              this.args.phase = 'dead';
            }
          }

          break;
        // 	case 'knocked':
        // 		this.args.xSpeed = 0;
        // 		if(this.args.phaseFrameId > 30)
        // 		{
        // 			this.args.phase = 'stalking';
        // 		}
        // 		break;

        case 'dead':
          this.args["float"] = 0;
          break;
        // case 'stalking': {
        // 	this.args.xSpeed = -xSign * Math.max(1, xDiff/25);
        // 	this.args.ySpeed = -ySign * Math.max(1, yDiff/25);
        // 	this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;
        // 	if(this.pointIsSafe(mainChar.x, mainChar.y - 128))
        // 	{
        // 		this.attractor.x = mainChar.x;
        // 		this.attractor.y = mainChar.y - 128;
        // 	}
        // 	this.args.noseAngle = (Math.PI/2)*3;
        // 	this.args.drillPush = 0;
        // 	if(this.args.phaseFrameId > 10)
        // 	{
        // 		this.args.noseAngle = this.angleTo({x:mainChar.x, y: Math.max(this.y, mainChar.y)});
        // 	}
        // 	if(this.args.phaseFrameId > 20)
        // 	{
        // 		this.args.drillPush = 0.5;
        // 	}
        // 	if(this.args.phaseFrameId > 45)
        // 	{
        // 		this.args.phase = 'ready';
        // 	}
        // 	break;
        // }
        // 	case 'buzzing': {
        // 		if(this.pointIsSafe(mainChar.x, mainChar.y + -mainChar.args.height + -34))
        // 		{
        // 			this.attractor.x = mainChar.x;
        // 			this.attractor.y = mainChar.y + -mainChar.args.height + -34;
        // 		}
        // 		this.args.xSpeed = -xSign * Math.max(1, xDiff/15);
        // 		this.args.ySpeed = -ySign * Math.max(1, yDiff/15);
        // 		this.args.noseAngle = (Math.PI/2)*3;
        // 		this.args.drillPush = 1;
        // 		if(this.args.phaseFrameId > 10)
        // 		{
        // 			this.args.drillPush = 0.5;
        // 		}
        // 		if(this.args.phaseFrameId > 20)
        // 		{
        // 			this.args.noseAngle = this.angleTo({x:mainChar.x, y: Math.max(this.y, mainChar.y)});
        // 		}
        // 		if(this.args.phaseFrameId > 30)
        // 		{
        // 			this.args.phase = 'ready';
        // 		}
        // 		break;
        // 	}
        // 	case 'ready': {
        // 		if(this.args.phaseFrameId < 10)
        // 		{
        // 			this.readySide = Math.sign(mainChar.xSpeedLast || mainChar.gSpeedLast);
        // 		}
        // 		if(this.pointIsSafe(mainChar.x + 128 * this.readySide, mainChar.y + -mainChar.args.height + -128))
        // 		{
        // 			this.attractor.x = mainChar.x + 128 * this.readySide;
        // 			this.attractor.y = mainChar.y + -mainChar.args.height + -128;
        // 		}
        // 		this.args.xSpeed = -xSign * Math.max(1, xDiff/15);
        // 		this.args.ySpeed = -ySign * Math.max(1, yDiff/15);
        // 		this.args.ySpeed += Math.sin(this.args.frameId / 3) * 3;
        // 		this.args.drillPush = 0.75;
        // 		if(this.args.phaseFrameId > 40)
        // 		{
        // 			const dieRoll = Math.random();
        // 			if(!mainChar.args.falling)
        // 			{
        // 				if(dieRoll > 0.5)
        // 				{
        // 					this.args.phase = 'swooping';
        // 				}
        // 				else
        // 				{
        // 					this.args.phase = 'attacking';
        // 				}
        // 			}
        // 			else
        // 			{
        // 				if(dieRoll > 0.5)
        // 				{
        // 					this.args.phase = 'buzzing';
        // 				}
        // 				else
        // 				{
        // 					this.args.phase = 'stalking';
        // 				}
        // 			}
        // 		}
        // 		break;
        // 	}
        // 	case 'attacking': {
        // 		this.args.float     = -1;
        // 		this.args.falling   = true
        // 		if(this.args.phaseFrameId > 100)
        // 		{
        // 			this.args.phase = 'stalking';
        // 		}
        // 		if(this.args.phaseFrameId < 50)
        // 		{
        // 			if(this.pointIsSafe(mainChar.x + 256 * (this.readySide || 1), mainChar.y - 32))
        // 			{
        // 				this.attractor.x = mainChar.x + 256 * (this.readySide || 1);
        // 				this.attractor.y = mainChar.y - 32;
        // 			}
        // 			this.args.noseAngle = 0;
        // 		}
        // 		else
        // 		{
        // 			if(this.pointIsSafe(mainChar.x + 256 * (-this.readySide || -1), mainChar.y - 16))
        // 			{
        // 				this.attractor.x = mainChar.x + 256 * (-this.readySide || -1);
        // 				this.attractor.y = mainChar.y - 16;
        // 			}
        // 			this.args.noseAngle = this.angleTo({x:mainChar.x, y: Math.max(this.y, mainChar.y)});
        // 		}
        // 		this.args.drillPush = 1;
        // 		this.args.float = -1;
        // 		const mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;
        // 		this.args.xSpeed = -xSign * Math.max(1, xDiff/10) + mainSpeed * 1.1;
        // 		this.args.ySpeed = -ySign * Math.max(1, yDiff/10);
        // 		break;
        // 	}
        // 	case 'swooping': {
        // 		if(this.pointIsSafe(mainChar.x, mainChar.y - 32))
        // 		{
        // 			this.attractor.x = mainChar.x;
        // 			this.attractor.y = mainChar.y - 32;
        // 		}
        // 		this.args.xSpeed += -xSign * Math.max(1, xDiff/10000);
        // 		this.args.ySpeed += -ySign * Math.max(1, yDiff/10000);
        // 		this.args.noseAngle = this.angleTo({x:mainChar.x, y: Math.max(this.y, mainChar.y)});
        // 		this.args.drillPush = 1;
        // 		this.args.float = -1;
        // 		if(this.args.phaseFrameId > 180)
        // 		{
        // 			this.args.phase = 'stalking';
        // 		}
        // 		const mainSpeed = mainChar.args.xSpeed || mainChar.args.gSpeed;
        // 		break;
        // 	}

        case 'exploding':
          if (this.args.phaseFrameId === 90) {
            this.args.falling = true;
            this.args.ySpeed = -14;
            this.args.xSpeed = 0;
            this.args.gSpeed = 0;
            this.noClip = true;
            this.viewport.auras["delete"](this);
            this.args.phase = 'exploded'; // this.clearScene.activate(mainChar, this, true);

            if (this.viewport.args.audio) {
              this.dieSound.volume = 0.5;
              this.dieSound.play();
            }
          }

          if (this.args.phaseFrameId > 90) {
            return;
          }

          if (viewport && viewport.args.frameId % 3 === 0) {
            var explosion = new _Tag.Tag('<div class = "particle-explosion">');

            if (viewport.args.audio) {
              this.hitSound.currentTime = 0;
              this.hitSound.volume = 0.35 + Math.random() * -0.15;
              this.hitSound.play();
            }

            var xOff = this.args.width * Math.random() - this.args.width / 2;
            var yOff = this.args.height * Math.random() - this.args.height / 2;
            explosion.style({
              '--x': this.x + xOff,
              '--y': this.y + yOff + -16
            });
            viewport.particles.add(explosion);
            setTimeout(function () {
              return viewport.particles.remove(explosion);
            }, 512);
          }

          break;
      }

      if (this.args.phase !== 'knocked') {
        if (this.args.ySpeed < 0 && !this.pointIsSafe(this.x, this.y + -this.args.height + this.args.ySpeed + -1)) {
          this.args.ySpeed = 0;
        }
      }

      _get(_getPrototypeOf(MiniBoss.prototype), "update", this).call(this);
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(MiniBoss.prototype), "updateEnd", this).call(this);

      if (!this.viewport) {
        return;
      }

      var mainChar = this.viewport.controlActor;

      if (!mainChar) {
        return;
      }

      var xDiff = Math.abs(this.x - mainChar.x);
      var yDiff = Math.abs(this.y - mainChar.y);
      var xSign = Math.sign(this.x - mainChar.x);
      var ySign = Math.sign(this.y - mainChar.y); // switch(this.args.phase)
      // {
      // 	case 'attacking':
      // 	case 'swooping':
      // 	case 'stalking':
      // 	case 'knocked':
      // 	case 'damaged':
      // 	case 'ready': {
      // 		if(xDiff > 384)
      // 		{
      // 			this.args.x = mainChar.x + 384 * xSign;
      // 		}
      // 		if(yDiff > 192)
      // 		{
      // 			this.args.y = mainChar.y + 192 * ySign;
      // 		}
      // 		if(this.args.hitPoints <= 0)
      // 		{
      // 			this.viewport.auras.delete(this);
      // 			this.args.phase = 'dead';
      // 			this.noClip = false;
      // 			this.args.float = 0;
      // 			if(typeof ga === 'function')
      // 			{
      // 				ga('send', 'event', {
      // 					eventCategory: 'boss',
      // 					eventAction: 'defeated',
      // 					eventLabel: `${this.viewport.args.actName}::${this.args.id}`
      // 				});
      // 			}
      // 		}
      // 		break;
      // 	}
      // }

      if (this.args.xSpeed < 0) {
        this.args.facing = 'left';
      } else if (this.args.xSpeed > 0) {
        this.args.facing = 'right';
      }

      this.args.groundAngle = 0;

      switch (this.args.phase) {
        case 'attacking':
        case 'swooping':
        case 'stalking':
        case 'ready':
          {
            if (this.checkBelow(this.x, this.y)) {
              this.args.falling = true;
              this.args.ySpeed = -4;
              this.args.y--;
            }
          }
          break;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      // if(this.args.phase === 'exploded')
      // {
      // 	return false;
      // }
      // if(!other.controllable && !other.hazard)
      // {
      // 	return true;
      // }
      // if(type === -1)
      // {
      // 	return;
      // }
      var xSign = Math.sign(this.x - other.x);
      var ySign = Math.sign(this.y - other.y);
      var impactSpeed = Math.max(Math.abs(other.args.xSpeed), 5);
      var impactSign = Math.sign(other.args.xSpeed); // if(this.args.hitPoints > 0 && other.controllable)
      // {
      // 	if(!(other.args.jumping || other.args.rolling || other.dashed))
      // 	{
      // 		other.damage();
      // 		this.args.phase = 'ready';
      // 		if(typeof ga === 'function')
      // 				{
      // 			ga('send', 'event', {
      // 				eventCategory: 'boss',
      // 				eventAction: 'damaged-player',
      // 				eventLabel: `${this.viewport.args.actName}::${this.args.id}::${other.args.id}`
      // 			});
      // 		}
      // 		return true;
      // 	}
      // }

      if (this.args.phase === 'dead') {
        if (other.args.rolling) {
          other.args.gSpeed = -xSign * Math.abs(other.args.gSpeed);
        }

        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          return true;
        }

        this.args.explodeFrame = this.viewport.args.frameId;
        this.args.phase = 'exploding';
      }

      if (type === 1 || type === 3) // Side collisions
        {
          this.onNextFrame(function () {
            other.args.xSpeed = -xSign * Math.max(5, Math.abs(other.xSpeedLast));
          });

          if (other.args.falling) {
            this.ignores.set(other, 15);
          } else {
            other.args.gSpeed = 4 * -Math.sign(this.x - other.x);

            if (other.args.rolling) {
              this.onNextFrame(function () {
                other.args.gSpeed = -Math.sign(_this2.x - other.x);
                other.args.rolling = true;
                other.args.direction = Math.sign(other.args.gSpeed);
              });
            }
          }

          this.args.ySpeed = Math.min(0, this.args.ySpeed);
          this.damage(other); // if(this.args.hitPoints > 0)
          // {
          // 	other.args.xSpeed = -xSign * impactSpeed;
          // 	this.args.xSpeed  = xSign * impactSpeed;
          // }
          // else
          // {
          // 	other.args.xSpeed = -xSign;
          // 	this.args.xSpeed  = xSign;
          // }
        }

      if (type === 2) // Collide from bottom
        {
          if (this.viewport.args.audio) {
            this.dudSound.currentTime = 0;
            this.dudSound.volume = 0.35 + Math.random() * -0.15;
            this.dudSound.play();
          }

          if (other.args.falling) {
            if (this.hitPoints <= 0) {
              this.args.ySpeed = -Math.abs(other.args.ySpeed) * 2.5;
            }

            if (other.controllable) {
              other.args.ySpeed = Math.max(7, Math.abs(other.args.ySpeed));
            }
          }

          this.args.xSpeed = 0;

          if (this.args.hitPoints > 0) {
            this.args.phase = 'knocked';
          }

          this.ignores.set(other, 15);
        }

      if (type === 0) // Collide from top
        {
          if (other.args.falling) {
            this.ignores.set(other, 15);
          }

          if (other.controllable) {
            other.args.y = this.y - this.args.height;
            var animation = other.args.animation;
            var ySpeed = other.args.ySpeed;
            this.onNextFrame(function () {
              other.args.ySpeed = -Math.floor(Math.abs(ySpeed)) || -4;
            });
          }

          this.args.xSpeed = 0;
          this.damage(other);
        }

      other.args.ignore = 1;

      if (!this.args.hitPoints) {
        other.args.ignore = -2;
      }

      return true;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var _this3 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

      if (this.args.hitPoints <= 0) {
        return;
      }

      var lastHit = this.args.damagers.get(other);

      if (this.args.frameId - lastHit < 5) {
        return;
      }

      this.args.hitPoints--;
      this.args.damagers.set(other, this.args.frameId);
      this.onNextFrame(function () {
        return _this3.args.phase = 'damaged';
      });

      if (this.viewport.args.audio) {
        this.hitSound.currentTime = 0;
        this.hitSound.volume = 0.35 + Math.random() * -0.15;
        this.hitSound.play();
      }
    }
  }, {
    key: "pointIsSafe",
    value: function pointIsSafe(x, y) {
      var hazards = this.viewport.actorsAtPoint(x, y).filter(function (a) {
        return a.hazard;
      });

      if (hazards.length) {
        return false;
      }

      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return this.args.hitPoints > 0;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return MiniBoss;
}(_Mixin.Mixin.from(_PointActor.PointActor));

exports.MiniBoss = MiniBoss;
});

;require.register("actor/MiniMace.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MiniMace = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Constrainable = require("../mixin/Constrainable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MiniMace = /*#__PURE__*/function (_Mixin$from) {
  _inherits(MiniMace, _Mixin$from);

  var _super = _createSuper(MiniMace);

  function MiniMace() {
    var _this;

    _classCallCheck(this, MiniMace);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-mini-mace';
    _this.args.ropeLength = _this.args._tiedTo ? _this.args.ropeLength : 8;
    _this.args.gravity = 0.6;
    return _this;
  }

  _createClass(MiniMace, [{
    key: "update",
    value: function update() {
      if (!this.args.tiedTo) {
        _get(_getPrototypeOf(MiniMace.prototype), "update", this).call(this);
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (this.viewport && !this.viewport.auras.has(this)) {
        this.viewport.auras.add(this);
      }

      if (this.args.tiedTo) {
        _get(_getPrototypeOf(MiniMace.prototype), "update", this).call(this);

        if (!this.args._tiedTo) {
          this.args._tiedTo = this.viewport.actorsById[this.args.tiedTo];
        }

        if (this.args.tiedTo && this.args._tiedTo.args.hitPoints) {
          this.setPos();
        } else {
          this.noClip = true;
        }
      }

      _get(_getPrototypeOf(MiniMace.prototype), "updateEnd", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (this.args._tiedTo && !this.args._tiedTo === other) {
        return false;
      }
    }
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (this.args._tiedTo && !this.args._tiedTo === other) {
        return false;
      }

      if (this.args.tiedTo && !this.args._tiedTo.args.hitPoints) {
        return;
      }

      if (other.controllable) {
        other.damage();
      }
    }
  }]);

  return MiniMace;
}(_Mixin.Mixin.from(_PointActor.PointActor, _Constrainable.Constrainable));

exports.MiniMace = MiniMace;
});

;require.register("actor/Monitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Monitor = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var _BrokenMonitor = require("../actor/BrokenMonitor");

var _Block = require("../actor/Block");

var _Marker = require("../actor/Marker");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Monitor = /*#__PURE__*/function (_PointActor) {
  _inherits(Monitor, _PointActor);

  var _super = _createSuper(Monitor);

  function Monitor() {
    var _this;

    _classCallCheck(this, Monitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-monitor';
    _this.args.width = 30;
    _this.args.height = 32;
    _this.args.decel = 0.25;
    _this.args.gone = false;
    return _this;
  }

  _createClass(Monitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(Monitor.prototype), "onRendered", this).call(this, event);

      this.screen = new _Tag.Tag("<div class = \"monitor-screen\">");
      this.sprite && this.sprite.appendChild(this.screen.node);
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Monitor.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/object-destroyed.wav');
        this.sample.volume = 0.6 + Math.random() * -0.3;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other.args["static"]) {
        return true;
      }

      if (!other.args.moving && !other.args.falling) {
        return false;
      }

      if (other instanceof _Block.Block) {
        return false;
      }

      if (other instanceof _Marker.Marker) {
        other = other.owner;
      }

      _get(_getPrototypeOf(Monitor.prototype), "collideA", this).call(this, other, type);

      if (type === 1 && !other.args.spinning) {
        return true;
      }

      if (type === 2 && this.args["float"] && other.controllable) {
        other.args.ySpeed *= -1;
        this.args.ySpeed = -4;
        this.args["float"] = 0;
        this.ignores.set(other, 15);
        return true;
      }

      if (type !== 2 && (other.args.ySpeed > 0 && other.y < this.y || other.args.rolling) && (!this.args.falling || this.args["float"] === -1) && !this.args.gone && this.viewport && other.args.spinning) {
        this.pop(other);
        return;
      }

      if ((type === 1 || type === 3 // && (Math.abs(other.args.xSpeed) > 15 || other instanceof Projectile)
      ) && (other.args.rolling || other instanceof _Projectile.Projectile) && !this.args.gone && this.viewport) {
        this.pop(other);
        return false;
      }
    }
  }, {
    key: "pop",
    value: function pop(other) {
      var _this2 = this;

      var viewport = this.viewport;

      if (!viewport || this.args.gone) {
        return;
      }

      var explosion = new _Tag.Tag('<div class = "particle-explosion">');

      if (other) {
        other.args.score += 100;
      }

      explosion.style({
        '--x': this.x,
        '--y': this.y - 16
      });
      viewport.particles.add(explosion);
      setTimeout(function () {
        return viewport.particles.remove(explosion);
      }, 512);
      setTimeout(function () {
        return _this2.screen && _this2.screen.remove();
      }, 1024);
      this.args.gone = true;
      this.box && this.box.setAttribute('data-animation', 'broken');

      if (other) {
        if (other.occupant) {
          other = other.occupant;
        }

        if (other.args.owner) {
          other = other.args.owner;
        }

        if (other.controllable) {
          this.effect(other);
        }
      }

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'monitor',
          eventAction: 'popped',
          eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
        });
      }

      if (other) {
        var ySpeed = other.args.ySpeed;

        if (other.args.falling) {
          this.onNextFrame(function () {
            other.args.ySpeed = -ySpeed;
            other.args.falling = true;
          });
        }

        if (this.args.falling && other.args.falling) {// this.onNextFrame(() => other.args.xSpeed = -other.args.xSpeed);
        }
      }

      this.onTimeout(1500, function () {
        _this2.viewport.actors.remove(_this2);
      });

      if (this.viewport.settings.rumble && other.controller && other.controller.rumble) {
        other.controller.rumble({
          duration: 40,
          strongMagnitude: 0.0,
          weakMagnitude: 1.0
        });
        this.viewport.onTimeout(40, function () {
          other.controller.rumble({
            duration: 110,
            strongMagnitude: 0.75,
            weakMagnitude: 1.0
          });
        });
      }
    }
  }, {
    key: "effect",
    value: function effect() {}
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Monitor;
}(_PointActor2.PointActor);

exports.Monitor = Monitor;
});

;require.register("actor/NuclearSuperball.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NuclearSuperball = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var NuclearSuperball = /*#__PURE__*/function (_PointActor) {
  _inherits(NuclearSuperball, _PointActor);

  var _super = _createSuper(NuclearSuperball);

  function NuclearSuperball() {
    var _this;

    _classCallCheck(this, NuclearSuperball);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.gSpeedMax = 150;
    _this.args.accel = 2;
    _this.args.jumpForce = 20;
    _this.willStick = true;
    _this.stayStuck = true;
    return _this;
  }

  _createClass(NuclearSuperball, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return NuclearSuperball;
}(_PointActor2.PointActor);

exports.NuclearSuperball = NuclearSuperball;
});

;require.register("actor/Orb.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Orb = void 0;

var _PointActor = require("./PointActor");

var _Mixin = require("curvature/base/Mixin");

var _Pushable = require("../mixin/Pushable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Orb = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Orb, _Mixin$from);

  var _super = _createSuper(Orb);

  function Orb() {
    var _this;

    _classCallCheck(this, Orb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-orb';
    _this.args.width = 18;
    _this.args.height = 48;
    _this.args.rolled = 0;
    _this.args.accel = 0.2;
    _this.args.decel = 0;

    _this.args.bindTo('x', function (v, k, t, d, p) {
      return _this.args.rolled += 0.5 * Number(v - p || 0);
    });

    _this.args.gravity = 1.35;
    return _this;
  }

  _createClass(Orb, [{
    key: "onAttached",
    value: function onAttached(event) {
      this.autoStyle.get(this.box)['--rolled'] = 'rolled';
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.viewport || !this.viewport.controlActor) {
        return;
      }

      if (this.args.falling) {
        this.viewport.onFrameOut(10, function () {
          if (_this2.args.falling) {
            _this2.viewport.auras["delete"](_this2);
          }
        });
      } else {
        this.viewport.auras.add(this);
      }

      var other = this.viewport.controlActor;
      var speedMag = other.args.gSpeed; // || Math.abs(other.x - other.xLast);

      var speedSign = Math.sign(this.args.gSpeed || this.gSpeedLast || other.args.gSpeed);
      var xSpace = this.x - other.x;

      if (xSpace < 0) {
        if (speedSign && this.args.mode === other.args.mode) {
          if (xSpace >= -96) {
            this.args.gSpeed = speedMag * speedSign * 0.75;
          }

          if (xSpace < -96) {
            this.args.gSpeed = speedMag * speedSign;
          }

          if (xSpace < -128 && !this.args.mode && !other.args.mode) {
            this.args.x -= xSpace + 128;
            this.args.gSpeed = speedMag * speedSign;
          }
        } else if (this.args.mode !== other.args.mode) {
          this.args.gSpeed = Math.max(speedMag * speedSign * 0.85, this.args.gSpeed * 0.95);
        }
      }

      _get(_getPrototypeOf(Orb.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      other.controllable && other.loseRings();
      other.controllable && other.die();
    }
  }, {
    key: "controllable",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Orb;
}(_Mixin.Mixin.from(_PointActor.PointActor));

exports.Orb = Orb;
});

;require.register("actor/Panel.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = void 0;

var _PointActor2 = require("./PointActor");

var _Bindable = require("curvature/base/Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Panel = /*#__PURE__*/function (_PointActor) {
  _inherits(Panel, _PointActor);

  var _super = _createSuper(Panel);

  function Panel(args, parent) {
    var _this;

    _classCallCheck(this, Panel);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-panel';
    _this.args.width = 64;
    _this.args.height = 8;
    _this.args["float"] = -1;
    _this.leaving = new Set();
    _this.holding = new Set();
    _this.cancels = new Map();
    return _this;
  }

  _createClass(Panel, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (other.canFly) {
        return false;
      }

      if (this.leaving.has(other)) {
        if (this.holding.has(other)) {
          other.stayStuck = false;
          other.willStick = false;
          other.willJump = false;
          other.args.gSpeed = 0;
          this.holding["delete"](other);
        }

        if (this.cancels.has(other)) {
          this.cancels.get(other)();
          this.cancels["delete"](other);
        }

        this.cancels.set(other, this.viewport.onFrameOut(25, function () {
          _this2.holding["delete"](other);

          _this2.leaving["delete"](other);
        }));
        return false;
      }

      if (!other.args.jumping && !this.holding.has(other)) {
        return false;
      }

      if (this.holding.has(other)) {
        other.args.mode = 0;
        other.args.groundAngle = this.args.groundAngle;
        other.lastAngles.length = 0;
        other.args.gSpeed = 0;
        other.args.xSpeed = 0;
        other.args.ySpeed = 0;
        other.args.falling = false;

        if (this.holding.has(other) && other.willJump) {
          var _nextPanel = this.viewport.actorsById[this.args.next];
          other.args.falling = true;

          if (_nextPanel) {
            other.stayStuck = true;
            other.willStick = true; // other.willJump = false;

            var _point = _nextPanel.rotatePoint(0, 0);

            var angle = other.angleTo({
              x: _point[0] + _nextPanel.x,
              y: _point[1] + _nextPanel.y
            });
            other.args.gSpeed = 0;
            other.args.x -= Math.cos(angle) * 16;
            other.args.y -= Math.sin(angle) * 16;
            other.args.xSpeed = -Math.cos(angle) * 34;
            other.args.ySpeed = -Math.sin(angle) * 34;
            other.args.falling = true;
            other.args.jumping = true;
            other.args["float"] = 45;
            this.leaving.add(other);
            this.holding["delete"](other);
            other.args.ignore = 45;
          } else {
            this.leaving.add(other);
            this.holding["delete"](other);
            other.stayStuck = false;
            other.willStick = false; // other.willJump  = false;

            other.args.gSpeed = 0;
            other.args.xSpeed = 0;
            other.args.ySpeed = 0;
            other.args.falling = true;
            other.args.ignore = 15;
          }

          return false;
        }

        var point = this.rotatePoint(0, 8);
        other.args.x = this.x + point[0];
        other.args.y = this.y + point[1];
        other.args.ignore = 0;
        return false;
      }

      var nextPanel = this.viewport.actorsById[this.args.next];

      if (nextPanel) {
        this.holding.add(other);
      } else {
        return true;
      }

      other.args.gSpeed = 0;
      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      other.args.ignore = 10;

      if (this.cancels.has(other)) {
        this.cancels.get(other)();
        this.cancels["delete"](other);
      }

      this.cancels.set(other, this.viewport.onFrameOut(20, function () {
        if (_this2.holding.has(other)) {
          _this2.holding["delete"](other);

          _this2.leaving.add(other);
        }
      }));
      return false;
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.leaving.clear();
      this.holding.clear();
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Panel;
}(_PointActor2.PointActor);

exports.Panel = Panel;
});

;require.register("actor/PogoSpring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PogoSpring = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PogoSpring = /*#__PURE__*/function (_Vehicle) {
  _inherits(PogoSpring, _Vehicle);

  var _super = _createSuper(PogoSpring);

  function PogoSpring() {
    var _this;

    _classCallCheck(this, PogoSpring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-pogo-spring';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 20;
    _this.args.decel = 0.45;
    _this.args.accel = 0.45;
    _this.args.gravity = 1;
    _this.args.seatHeight = 32;
    _this.args.skidTraction = 0.05;
    _this.args.jumpForce = 8;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    return _this;
  }

  _createClass(PogoSpring, [{
    key: "onAttached",
    value: function onAttached() {// this.box = this.findTag('div');
      // this.sprite = this.findTag('div.sprite');
      // this.frontWheel = new Tag('<div class = "rail-car-wheel rail-car-wheel-front">');
      // this.backWheel = new Tag('<div class = "rail-car-wheel rail-car-wheel-back">');
      // this.frontFrag = new Tag('<div class = "rail-car-frag rail-car-frag-front">');
      // this.backFrag = new Tag('<div class = "rail-car-frag rail-car-frag-back">');
      // this.sprite.appendChild(this.frontWheel.node);
      // this.sprite.appendChild(this.backWheel.node);
      // this.sprite.appendChild(this.frontFrag.node);
      // this.sprite.appendChild(this.backFrag.node);
    }
  }, {
    key: "update",
    value: function update() {}
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return PogoSpring;
}(_Vehicle2.Vehicle);

exports.PogoSpring = PogoSpring;
});

;require.register("actor/PointActor.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointActor = void 0;

var _Bindable = require("curvature/base/Bindable");

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

var _Twist = require("../effects/Twist");

var _Droop = require("../effects/Droop");

var _Pinch = require("../effects/Pinch");

var _CharacterString = require("../ui/CharacterString");

var _Classifier = require("../Classifier");

var _Controller = require("../controller/Controller");

var _Sheild = require("../powerups/Sheild");

var _FireSheild = require("../powerups/FireSheild");

var _SuperSheild = require("../powerups/SuperSheild");

var _BubbleSheild = require("../powerups/BubbleSheild");

var _NormalSheild = require("../powerups/NormalSheild");

var _ElectricSheild = require("../powerups/ElectricSheild");

var _StarSheild = require("../powerups/StarSheild");

var _LayerSwitch = require("./LayerSwitch");

var _Layer = require("../viewport/Layer");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MODE_FLOOR = 0;
var MODE_LEFT = 1;
var MODE_CEILING = 2;
var MODE_RIGHT = 3;
var WALKING_SPEED = 100;
var RUNNING_SPEED = Infinity;
var CRAWLING_SPEED = 1;
var JUMP_FORCE = 15;
var DEFAULT_GRAVITY = MODE_FLOOR;

var PointActor = /*#__PURE__*/function (_View) {
  _inherits(PointActor, _View);

  var _super = _createSuper(PointActor);

  function PointActor() {
    var _this$args$weight, _this$args$opacity, _this$args$layer, _this$args$active, _this$args$name;

    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, PointActor);

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class  = \"point-actor [[type]]\">\n\t\t<div class = \"sprite\" cv-ref = \"sprite\">\n\t\t\t<div class = \"labels\" cv-ref = \"labels\" cv-each = \"charStrings:charString:c\">[[charString]]</div>\n\t\t</div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "profiles", {
      normal: {
        height: 1,
        width: 1,
        decel: 0.85,
        accel: 0.2,
        gravity: 0.65,
        airAccel: 0.3,
        jumpForce: 14,
        gSpeedMax: 100 // , rollSpeedMax = 37;

      }
    });

    _this[_Bindable.Bindable.NoGetters] = true;
    _this.defaultDisplay = 'initial';
    _this.springing = false;
    _this.stepCache = {};
    _this.fallTime = 0;
    _this.args.weight = (_this$args$weight = _this.args.weight) !== null && _this$args$weight !== void 0 ? _this$args$weight : 100;
    _this.args.score = 0;
    _this.args.rings = 0;
    _this.args.mercy = false;
    _this.args.opacity = (_this$args$opacity = _this.args.opacity) !== null && _this$args$opacity !== void 0 ? _this$args$opacity : 1;
    _this.args.pushing = false;
    _this.autoStyle = new Map();
    _this.autoAttr = new Map();
    _this.hanging = new Map();
    _this.ignores = new Map();
    _this.regions = new Set();
    _this.powerups = new Set();
    _this.behaviors = new Set();
    _this.lastPointA = [];
    _this.lastPointB = [];
    _this.carrying = new Set();
    _this.inventory = new _Classifier.Classifier([_Sheild.Sheild, _FireSheild.FireSheild, _BubbleSheild.BubbleSheild, _ElectricSheild.ElectricSheild, _NormalSheild.NormalSheild]);
    _this.noClip = false;
    _this.sheild = null;

    _this.inventory.addEventListener('adding', function (event) {
      var item = event.detail.object;

      if (_this.inventory.has(item.constructor)) {
        event.preventDefault();
        return;
      }

      _this.powerups.add(item);

      if (_this.controllable) {
        var hasKey = "has".concat(item.type[0].toUpperCase() + item.type.substr(1));
        _this.viewport.args[hasKey] = hasKey;
      }

      item.acquire && item.acquire(_assertThisInitialized(_this));

      if (!(_this.args.currentSheild instanceof _StarSheild.StarSheild)) {
        _this.args.currentSheild = item;
        item.equip && item.equip(_assertThisInitialized(_this));
      }
    });

    _this.inventory.addEventListener('removing', function (event) {
      var item = event.detail.object;

      _this.powerups["delete"](item);

      if (_this.controllable) {
        var hasKey = "has".concat(item.type[0].toUpperCase() + item.type.substr(1));
        _this.viewport.args[hasKey] = null;
      }

      if (_Bindable.Bindable.make(item) === _this.args.currentSheild) {
        _this.args.currentSheild = null;
      }
    });

    _this.args.bindTo('currentSheild', function (v, k, t, d, p) {
      if (p) {
        p.unequip && p.unequip(_assertThisInitialized(_this));
      }

      var _iterator = _createForOfIteratorHelper(_this.inventory.get(_Sheild.Sheild)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var shield = _step.value;

          if (shield instanceof _SuperSheild.SuperSheild) {
            continue;
          }

          shield.detach();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      v && v.equip && v.equip(_assertThisInitialized(_this));
      v && v.render(_this.sprite);
    }); // Object.defineProperty(this, 'public', {value: {}});
    // this.args.bindTo((v,k) => {
    // 	this.public[k] = v;
    // });


    _this.args.type = 'actor-generic';
    _this.args.modeTime = 0;
    _this.args.charStrings = [];
    _this.args.display = _this.args.display || 'initial';
    _this.args.emeralds = 0;
    _this.args.rings = 0;
    _this.args.coins = 0;
    _this.ringSet = new Set();
    _this.ringDoc = new DocumentFragment();
    _this.args.yMargin = 0;
    _this.args.cameraMode = 'normal';
    _this.args.cameraBias = 0;
    _this.args.layer = (_this$args$layer = _this.args.layer) !== null && _this$args$layer !== void 0 ? _this$args$layer : 1;
    _this.args.active = (_this$args$active = _this.args.active) !== null && _this$args$active !== void 0 ? _this$args$active : false;
    _this.args.moving = false;
    _this.args.flySpeedMax = 40;
    _this.args.x = _this.args.x || 1024 + 256;
    _this.args.y = _this.args.y || 32;
    _this.args.z = _this.args.z || 0;
    _this.args.xOff = 0;
    _this.args.yOff = 0;
    _this.args.width = _this.args.width || 1;
    _this.args.height = _this.args.height || 1;
    _this.args.direction = Number(_this.args.direction) || 1;
    _this.args.xSpeed = _this.args.xSpeed || 0;
    _this.args.ySpeed = _this.args.ySpeed || 0;
    _this.args.gSpeed = _this.args.gSpeed || 0;
    _this.args.hSpeed = 0;
    _this.args.xSpeed = _this.args.xSpeed || 0;
    _this.args.ySpeed = _this.args.ySpeed || 0;
    _this.args.angle = _this.args.angle || 0;
    _this.args.groundAngle = _this.args.groundAngle || 0;
    _this.args.displayAngle = 0;
    _this.args.airAngle = 0;
    _this.lastAngles = [];
    _this.angleAvg = 16;
    _this.args.xSpeedMax = 512;
    _this.args.ySpeedMax = 512;
    _this.args.gSpeedMax = WALKING_SPEED;
    _this.args.rollSpeedMax = 23;
    _this.args.gravity = 0.65;
    _this.args.decel = 0.85;
    _this.args.accel = 0.2;
    _this.args.airAccel = 0.3;
    _this.args.jumpForce = 14;
    _this.args.airTimeTotal = 0;
    _this.args.groundTimeTotal = 0;
    _this.args.jumping = false;
    _this.args.jumpedAt = null;
    _this.args.deepJump = false;
    _this.args.highJump = false;
    _this.maxStep = 8;
    _this.backStep = 0;
    _this.frontStep = 0;
    _this.args.rolling = false;
    _this.args.skidTraction = 2.25;
    _this.args.skidTraction = 5;
    _this.args.fgFilter = 'none';
    _this.args.bgFilter = 'none';
    _this.args.falling = true;
    _this.args.running = false;
    _this.args.crawling = false;
    _this.args.climbing = false;
    _this.args.rotateFixed = false;
    _this.args.mode = _this.args.mode || MODE_FLOOR;
    _this.xAxis = 0;
    _this.yAxis = 0;
    _this.aAxis = 0;
    _this.bAxis = 0;
    _this.lAxis = 0;
    _this.rAxis = 0;
    _this.buttons = {};
    _this.willStick = false;
    _this.stayStuck = false;
    _this.args.startled = _this.args.startled || 0;
    _this.args.halted = _this.args.halted || 0;
    _this.args.ignore = _this.args.ignore || 0;
    _this.args["float"] = _this.args["float"] || 0;
    _this.colliding = false;
    _this.args.flyAngle = 0;

    _this.args.bindTo(['x', 'y'], function (v, k, t) {
      isNaN(v) && console.trace(k, v);
      _this.stepCache = {};
      _this.args.idleTime = 0;
    });

    _this.args.bindTo(['xSpeed', 'ySpeed'], function (v, k, t) {
      isNaN(v) && console.trace(k, v);
    });

    _this.args.bindTo('gSpeed', function (v) {
      _this.gSpeedLast = v || _this.gSpeedLast;
    });

    _this.args.bindTo('xSpeed', function (v) {
      _this.airAngle = _this.args.airAngle = Math.atan2(_this.args.ySpeed, v);
      _this.xSpeedLast = v || _this.xSpeedLast;
    });

    _this.args.bindTo('ySpeed', function (v) {
      _this.airAngle = _this.args.airAngle = Math.atan2(v, _this.args.xSpeed);
      _this.ySpeedLast = v || _this.ySpeedLast;
    }); // this.controllable && this.args.bindTo('animation', v => console.trace(v));
    // this.controllable && this.args.bindTo('xSpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('ySpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('gSpeed', v => console.trace(v));
    // this.controllable && this.args.bindTo('falling', v => console.trace(v));


    _this.impulseMag = null;
    _this.impulseDir = null;
    _this.args.stopped = 0;
    _this.args.particleScale = 1;
    _this.dropDashCharge = 0;

    var bindable = _Bindable.Bindable.make(_assertThisInitialized(_this));

    _this.debindGroundX = null;
    _this.debindGroundY = null;
    _this.debindGroundA = null;
    _this.debindGroundL = null;
    _this.args.name = (_this$args$name = _this.args.name) !== null && _this$args$name !== void 0 ? _this$args$name : '';

    if (_this.controllable) {
      var _this$args$name2;

      _this.controller = new _Controller.Controller({
        deadZone: 0.2
      });
      _this.args.charStrings = [new _CharacterString.CharacterString({
        value: (_this$args$name2 = _this.args.name) !== null && _this$args$name2 !== void 0 ? _this$args$name2 : ''
      })];

      _this.controller.zero();
    }

    _this.debindGroundX = new Set();
    _this.debindGroundY = new Set();
    _this.debindGroundA = new Set();
    _this.debindGroundL = new Set();

    _this.args.bindTo(['mode', 'falling'], function () {
      _this.args.modeTime = 0;
    });

    _this.args.bindTo('standingOn', function (groundObject, key, target) {
      if (_this.isGhost) {
        return;
      }

      if (_this.args.standingOn === groundObject) {
        return;
      }

      var _iterator2 = _createForOfIteratorHelper(_this.debindGroundX),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var debind = _step2.value;

          _this.debindGroundX["delete"](debind);

          debind();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = _createForOfIteratorHelper(_this.debindGroundY),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _debind = _step3.value;

          _this.debindGroundY["delete"](_debind);

          _debind();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(_this.debindGroundA),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _debind2 = _step4.value;

          _this.debindGroundA["delete"](_debind2);

          _debind2();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = _createForOfIteratorHelper(_this.debindGroundL),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _debind3 = _step5.value;

          _this.debindGroundL["delete"](_debind3);

          _debind3();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var prevGroundObject = target[key];

      if (prevGroundObject && prevGroundObject.isVehicle) {
        prevGroundObject.occupant = null;
        prevGroundObject.stayStuck = false;
        prevGroundObject.willStick = false;
        prevGroundObject.xAxis = 0;
        prevGroundObject.yAxis = 0;
        prevGroundObject.args.active = false;
      }

      if (!groundObject) {
        return;
      }

      if (_this.controllable && groundObject.isVehicle) {
        _this.args.pushing = false;
        groundObject.args.active = true;
        var debindGroundX = groundObject.args.bindTo('x', function (vv, kk) {
          var x = groundObject.args.direction * groundObject.args.seatForward || 0;
          var y = groundObject.args.seatHeight || groundObject.args.height || 0; // const xRot = x * Math.cos(groundObject.realAngle) - y * Math.sin(groundObject.realAngle);
          // const yRot = y * Math.cos(groundObject.realAngle) + x * Math.sin(groundObject.realAngle);

          var _groundObject$rotateP = groundObject.rotatePoint(x, y),
              _groundObject$rotateP2 = _slicedToArray(_groundObject$rotateP, 2),
              xRot = _groundObject$rotateP2[0],
              yRot = _groundObject$rotateP2[1];

          _this.args.x = xRot + vv;
          _this.args.y = yRot + groundObject.y;
          _this.args.direction = groundObject.args.direction;
        });
        var debindGroundY = groundObject.args.bindTo('y', function (vv, kk) {
          if (_this.args.jumping) {
            return;
          }

          var x = groundObject.args.direction * groundObject.args.seatForward || 0;
          var y = groundObject.args.seatHeight || groundObject.args.height || 0; // const xRot = x * Math.cos(groundObject.realAngle) - y * Math.sin(groundObject.realAngle);
          // const yRot = y * Math.cos(groundObject.realAngle) + x * Math.sin(groundObject.realAngle);

          var _groundObject$rotateP3 = groundObject.rotatePoint(x, y),
              _groundObject$rotateP4 = _slicedToArray(_groundObject$rotateP3, 2),
              xRot = _groundObject$rotateP4[0],
              yRot = _groundObject$rotateP4[1];

          _this.args.x = xRot + groundObject.x;
          _this.args.y = yRot + vv;
        }); // const debindGroundA = groundObject.args.bindTo('groundAngle', (vv,kk) => {
        // 	if(this.args.jumping)
        // 	{
        // 		return;
        // 	}
        // 	const x = groundObject.args.direction * groundObject.args.seatForward || 0;
        // 	const y = groundObject.args.seatHeight || groundObject.args.height || 0;
        // 	const [xRot, yRot] = groundObject.rotatePoint(x, y);
        // 	this.args.x = xRot + groundObject.x;
        // 	this.args.y = yRot + groundObject.y;
        // });

        var debindGroundL = groundObject.args.bindTo('layer', function (vv, kk) {
          _this.args.layer = vv;
        });

        _this.debindGroundX.add(debindGroundX);

        _this.debindGroundY.add(debindGroundY); // this.debindGroundA.add(debindGroundA);


        _this.debindGroundL.add(debindGroundL);

        var occupant = groundObject.occupant;
        groundObject.args.yMargin = _this.args.height;

        if (occupant && occupant !== _assertThisInitialized(_this)) {
          occupant.args.standingOn = null;
          occupant.args.y -= 32;
          occupant.args.gSpeed = 0;
          occupant.args.xSpeed = -5 * _this.args.direction;
          occupant.args.ySpeed = -8;
          occupant.args.falling = true;
        }

        _this.args.gSpeed = 0;
        _this.args.xSpeed = 0;
        _this.args.ySpeed = 0;
        _this.args.falling = false;
        groundObject.occupant = _assertThisInitialized(_this);
      } else if (!groundObject.isVehicle) {
        if (_this.y <= _this.args.height + groundObject.y - groundObject.args.height) {
          var _debindGroundX = groundObject.args.bindTo('x', function (vv, kk) {
            _this.args.x += vv + -groundObject.args.x;
          });

          var _debindGroundY = groundObject.args.bindTo('y', function (vv, kk) {
            _this.args.y = vv + -groundObject.args.height + (_this.controllable || _this.isPushable ? 0 : 0);
          });

          var _debindGroundL = groundObject.args.bindTo('layer', function (vv, kk) {
            _this.args.layer = vv;
          });

          _this.debindGroundX.add(_debindGroundX);

          _this.debindGroundY.add(_debindGroundY);

          _this.debindGroundL.add(_debindGroundL);
        }
      }

      if (prevGroundObject && prevGroundObject.isVehicle) {
        if (prevGroundObject.occupant === _assertThisInitialized(_this)) {
          prevGroundObject.occupant = null;
          prevGroundObject.stayStuck = false;
          prevGroundObject.willStick = false;
        }

        prevGroundObject.xAxis = 0;
        prevGroundObject.yAxis = 0;
      }

      groundObject.standBelow(_assertThisInitialized(_this));
    });

    return _possibleConstructorReturn(_this, bindable);
  }

  _createClass(PointActor, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      if (this.init || !this.viewport) {
        return;
      } // const Ring = this.viewport.objectPalette.ring;
      // if(this.controllable)
      // {
      // 	this.args.bindTo('rings', v => {
      // 		if(!v)
      // 		{
      // 			return;
      // 		}
      // 		window.requestIdleCallback(() => {
      // 			if(this.ringSet.size < v)
      // 			{
      // 				const ring = new Ring;
      // 				ring.viewport = this.viewport;
      // 				ring.render(this.ringDoc);
      // 				this.ringSet.add(ring);
      // 			}
      // 		});
      // 	});
      // }


      var regionClass = this.viewport.objectPalette['base-region'];
      this.isRegion = this instanceof regionClass;
      this.box = this.findTag('div');
      this.autoStyle.set(this.box, {
        display: 'display',
        '--animation-bias': 'animationBias',
        '--bg-filter': 'bgFilter',
        '--sprite-sheet': 'spriteSheetUrl',
        '--direction': 'direction',
        '--sprite-x': 'spriteX',
        '--sprite-y': 'spriteY',
        '--angle': 'angle',
        '--palletShift': 'palletShift',
        '--fly-angle': 'flyAngle',
        '--display-angle': 'groundAngle',
        '--ground-angle': 'groundAngle',
        '--air-angle': 'airAngle',
        '--opacity': 'opacity',
        '--height': 'height',
        '--width': 'width',
        '--x': 'x',
        '--y': 'y',
        '--z': 'z'
      });
      this.autoAttr.set(this.box, {
        'data-camera-mode': 'cameraMode',
        'data-colliding': 'colliding',
        'data-respawning': 'respawning',
        'data-mercy': 'mercy',
        'data-selected': 'selected',
        'data-following': 'following',
        'data-carrying': 'carrying',
        'data-falling': 'falling',
        'data-moving': 'moving',
        'data-pushing': 'pushing',
        'data-facing': 'facing',
        'data-filter': 'filter',
        'data-angle': 'angleDeg',
        'data-driving': 'driving',
        'data-active': 'active',
        'data-layer': 'layer',
        'data-mode': 'mode',
        'data-id': 'id'
      }); // data-camera-mode = "[[cameraMode]]"
      // data-colliding   = "[[colliding]]"
      // data-falling     = "[[falling]]"
      // data-facing      = "[[facing]]"
      // data-filter      = "[[filter]]"
      // data-angle       = "[[angle|rad2deg]]"
      // data-layer       = "[[layer]]"
      // data-mode        = "[[mode]]"
      // data-id          = "[[id]]"

      this.args.bindTo('spriteSheet', function (v) {
        if (v !== undefined) {
          _this2.args.spriteSheetUrl = _this2.urlWrap(v);
        } else {
          _this2.args.spriteSheetUrl = undefined;
        }
      });
      this.args.bindTo('angle', function (v) {
        return _this2.args.angleDeg = _this2.rad2deg(v);
      });
      this.sprite = this.findTag('div.sprite');

      if (this.controllable) {
        var superSheild = new _SuperSheild.SuperSheild();
        superSheild.equip(this);
        this.inventory.add(superSheild);
      }

      this.init = true;
      this.args.bindTo('animation', function (v) {
        return _this2.box.setAttribute('data-animation', v);
      });
      this.bindTo('isSuper', function (v) {
        return _this2.box.setAttribute('data-super', v);
      });
      this.bindTo('isHyper', function (v) {
        return _this2.box.setAttribute('data-hyper', v);
      });

      if (this.controllable) {
        this.sprite.parentNode.classList.add('controllable');
      }

      this.listen('click', function () {
        return;
        var now = Date.now();
        var timeSince = now - PointActor.lastClick;

        if (!_this2.controllable) {
          return;
        }

        if (_Bindable.Bindable.make(_this2) === _this2.viewport.controlActor) {
          return;
        } // if(timeSince < 1000)
        // {
        // 	this.viewport.auras.add(this);
        // 	const clear = this.viewport.onFrameInterval(1, () => {
        // 		const frame = this.viewport.serializePlayer();
        // 		this.viewport.onFrameOut(5, () => {
        // 			if(frame.input)
        // 			{
        // 				this.controller && this.controller.replay(frame.input);
        // 				this.readInput();
        // 			}
        // 			if(frame.args)
        // 			{
        // 				Object.assign(this.args, frame.args);
        // 				this.viewport.setColCell(this);
        // 			}
        // 		});
        // 	});
        // 	this.onRemove(clear);
        // 	return;
        // }


        PointActor.lastClick = now;

        if (_this2.viewport.args.networked) {
          return;
        }

        if (!_this2.controllable) {
          return;
        }

        _this2.viewport.nextControl = _Bindable.Bindable.ref(_this2);

        if (_this2.viewport.tags.currentActor) {
          var _iterator6 = _createForOfIteratorHelper(_this2.viewport.tags.currentActor.options),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var option = _step6.value;

              if (option.value === _this2.args.name) {
                _this2.viewport.tags.currentActor.value = option.value;
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      });
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      this.lastLayer = null;
      this.args.localCameraMode = null;

      if (this.args.dead) {
        return;
      }

      if (this.args.standingLayer && !this.args["static"]) {
        var layer = this.args.standingLayer.layer;
        var grindRegion = false;

        var _iterator7 = _createForOfIteratorHelper(this.regions),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var region = _step7.value;

            if (region.grind) {
              grindRegion = true;
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        if (!this.controllable) {
          this.args.grinding = false;
        } else if (layer && layer.meta.grinding) {
          this.args.grinding = true;
          this.args.direction = Math.sign(this.args.xSpeed || this.args.gSpeed);
        } else if (!grindRegion) {
          this.args.grinding = false;
        }

        if (this.args.grinding && this.args.falling) {
          this.args.grinding = false;
        }
      }

      if (!this.args.falling) {
        this.fallTime = 0;
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      var _this3 = this;

      if (!this.args["static"] && this.args.falling) {
        if (this.args.standingLayer && this.fallTime === 0) {
          this.args.xSpeed += this.args.standingLayer.offsetXChanged || 0;
          this.args.ySpeed += this.args.standingLayer.offsetYChanged || 0;
        }

        this.args.standingLayer = null;
      }

      var lastFocus = this.focused;

      if (!this.args.falling) {
        this.focused = false;
      }

      if (lastFocus !== this && this.focused) {
        this.viewport.auras["delete"](lastFocus);
      }

      var _iterator8 = _createForOfIteratorHelper(this.regions),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var region = _step8.value;

          if (region.focus) {
            this.viewport.auras.add(region.focus);
            this.focused = region.focus;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      var _iterator9 = _createForOfIteratorHelper(this.autoStyle),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 2),
              tag = _step9$value[0],
              cssArgs = _step9$value[1];

          var styles = {};

          for (var _i2 = 0, _Object$entries = Object.entries(cssArgs); _i2 < _Object$entries.length; _i2++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
                prop = _Object$entries$_i[0],
                arg = _Object$entries$_i[1];

            if (arg in this.args) {
              styles[prop] = this.args[arg];
            }
          }

          tag.style(styles);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      var _iterator10 = _createForOfIteratorHelper(this.autoAttr),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              _tag = _step10$value[0],
              attrsArgs = _step10$value[1];

          var attrs = {};

          for (var _i3 = 0, _Object$entries2 = Object.entries(attrsArgs); _i3 < _Object$entries2.length; _i3++) {
            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
                attr = _Object$entries2$_i[0],
                _arg = _Object$entries2$_i[1];

            if (_arg in this.args) {
              attrs[attr] = this.args[_arg];
            }
          }

          _tag.attr(attrs);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      if (this.follower) {
        var frame = this.viewport.serializePlayer();
        var follower = this.follower;
        this.viewport.onFrameOut(5, function () {
          if (frame.input) {
            follower.controller && follower.controller.replay(frame.input);
            follower.readInput();
          }

          if (frame.args) {
            Object.assign(follower.args, frame.args);
            follower.viewport && follower.viewport.setColCell(_this3);
          }
        });

        if (this.follower.args.dead) {
          this.follower.args.dead = false;
          this.follower.args.x = this.x;
          this.follower.args.y = this.y;
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;

      if (typeof this.args.standingOn === 'number') {
        var standId = this.args.standingOn;
        var standOn = this.viewport.actorsById[standId];

        if (standOn) {
          this.args.standingOn = standOn;
          this.args.x = standOn.x;
          this.args.y = standOn.y - standOn.args.height;
        }
      }

      this.args.jumpBlocked = false;

      if (this.viewport) {
        this.age = this.viewport.args.frameId - this.startFrame;
      }

      if (!this.xAxis || Math.sign(this.args.gSpeed) !== this.args.pushing || Math.sign(this.xAxis) !== this.args.pushing) {
        this.args.pushing = false;
      }

      var startX = this.x;
      var startY = this.y;

      if (this.noClip && !this.controllable) {
        if (this.args.xSpeed) {
          this.args.x += this.args.xSpeed;
        }

        if (this.args.ySpeed) {
          this.args.y += this.args.ySpeed;
        }

        if (!this.args["float"] && this.args.falling) {
          this.args.ySpeed += this.args.gravity;
        }

        if (this.args["float"] > 0) {
          this.args["float"]--;
        }

        var collisions;

        switch (this.args.mode) {
          case MODE_CEILING:
            collisions = viewport.actorsAtPoint(this.args.x, this.args.y + this.args.height, this.args.width, this.args.height);
            break;

          case MODE_LEFT:
            collisions = viewport.actorsAtPoint(this.args.x - this.args.height / 2, this.args.y + this.args.width / 2, this.args.height, this.args.width);
            break;

          case MODE_RIGHT:
            collisions = viewport.actorsAtPoint(this.args.x + this.args.height / 2, this.args.y + this.args.width / 2, this.args.height, this.args.width);
            break;

          default:
          case MODE_FLOOR:
            collisions = viewport.actorsAtPoint(this.args.x, this.args.y, this.args.width, this.args.height);
            break;
        }

        if (collisions) {
          var _iterator11 = _createForOfIteratorHelper(collisions),
              _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var actor = _step11.value;

              if (actor.args === this.args) {
                continue;
              }

              actor.callCollideHandler(this);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }

        return;
      }

      if (!this.args.falling && !this.args.rolling && this.args.modeTime >= 1) {
        this.args.spinning = false;
      }

      if (this.args.rolling || this.args.jumping || this.spindashCharge) {
        this.args.spinning = true;
      }

      if (this.viewport && this.args.respawning && !this.viewport.args.isRecording && !this.viewport.args.isReplaying) {
        var stored = this.viewport.getCheckpoint(this.args.canonical);
        var toX, toY;

        if (stored && stored.checkpointId) {
          var checkpoint = this.viewport.actorsById[stored.checkpointId];
          toX = checkpoint.x;
          toY = checkpoint.y;
        } else if (this.def) {
          toX = this.def.get('x');
          toY = this.def.get('y');
        } else if ((this.args.width > 20 || this.args.height > 44) && this.viewport.defsByName.get('wide-player-start')) {
          var startDef = this.viewport.defsByName.get('wide-player-start');
          toX = startDef.x;
          toY = startDef.y;
        } else if (this.viewport.defsByName.has('player-start')) {
          var _startDef = this.viewport.defsByName.get('player-start');

          toX = _startDef.x;
          toY = _startDef.y;
        }

        this.args.animation = 'dropping';
        this.args.standingLayer = null;
        this.args.standingOn = null;
        this.lastLayer = null;
        var xDiff = this.args.x - toX;
        var yDiff = this.args.y - toY;
        var xPanSpeed = Math.max(Math.abs(xDiff / 8), 16);
        var yPanSpeed = Math.max(Math.abs(yDiff / 8), 16);
        this.args.x -= Math.sign(xDiff) * xPanSpeed;
        this.args.y -= Math.sign(yDiff) * yPanSpeed;
        var _viewport = this.viewport;

        if (Math.abs(xDiff) <= xPanSpeed) {
          this.args.x = toX;
        }

        if (Math.abs(yDiff) <= yPanSpeed) {
          this.args.y = toY;
        }

        if (Math.abs(xDiff) <= xPanSpeed && Math.abs(yDiff) <= yPanSpeed) {
          this.viewport.onFrameOut(60, function () {
            if (_this4.viewport.args.networked) {
              _this4.args.dead = false;
              _this4.noClip = false;
              _this4.args.respawning = false;
              _this4.args.display = 'initial';
              _this4.args.ignore = 4;
              _this4.args.xSpeed = 0;
              _this4.args.ySpeed = -3;
            } else {
              _viewport.reset();

              _viewport.startLevel(false);
            }

            _viewport.args.paused = false;
          });
        }

        this.viewport && this.viewport.setColCell(this);
        return;
      }

      if (this.viewport && this.viewport.meta.deathLine && !this.args.dead && this.controllable && this.y > this.viewport.meta.deathLine) {
        this.die();
        return;
      }

      if (this.controllable && !this.args.dead) {
        var radius = 0.5 * this.args.width;
        var direction = Math.sign(this.args.xSpeed);
        var height = Math.max(this.args.height, 0);
        var headPoint = this.rotatePoint(0, height * 0.75); // const headPoint = this.rotatePoint(radius * -direction, this.args.height * 0.75);

        var jumpBlock = this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1]);

        if (Array.isArray(jumpBlock)) {
          jumpBlock = !!jumpBlock.filter(function (a) {
            return !a.args.platform && !a.isVehicle;
          }).length;
        }

        if (this.args.rolling) {
          var rollTopPoint = this.rotatePoint(0, height); // const headPoint = this.rotatePoint(radius * -direction, this.args.height * 0.75);

          var rollJumpBlock = this.getMapSolidAt(this.x + rollTopPoint[0], this.y + rollTopPoint[1]);

          if (Array.isArray(rollJumpBlock)) {
            rollJumpBlock = !!rollJumpBlock.filter(function (a) {
              return !a.args.platform && !a.isVehicle;
            }).length;
            this.args.jumpBlocked = !!rollJumpBlock;
          }

          this.args.jumpBlocked = !!rollJumpBlock;
        }

        if (!this.args.hangingFrom && !this.args.falling && this.checkBelow(this.x, this.y) && jumpBlock) {
          this.die();
          return;
        }

        if (!this.args.falling && this.args.mode === 0) {
          var upFirstSpace = this.castRay(this.maxStep, this.upAngle, this.findUpSpace);

          if (upFirstSpace) {
            this.args.y -= upFirstSpace;
          }
        }
      }

      var _iterator12 = _createForOfIteratorHelper(this.ignores),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var _step12$value = _slicedToArray(_step12.value, 2),
              object = _step12$value[0],
              timeout = _step12$value[1];

          if (timeout <= 0) {
            this.ignores["delete"](object);
          } else {
            this.ignores.set(object, -1 + timeout);
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      this.args.skimming = false;

      if (this.args.falling) {
        this.args.airAngle = this.airAngle;

        if (this.args.displayAngle !== this.args.groundAngle) {
          var angleDiff = this.args.groundAngle + -this.args.displayAngle;
          this.args.displayAngle += Math.sign(angleDiff) * (Math.abs(angleDiff) > 1 ? 1 : Math.abs(angleDiff)) * 0.5;
        }
      } else {
        this.args.airAngle = 0;
        this.args.displayAngle = this.args.groundAngle;
      }

      if (this.args.halted < 1 && this.args.halted > 0) {
        this.args.halted = 0;
      }

      if (this.args.halted > 0) {
        this.args.halted--;
        return;
      }

      if (this.args.currentSheild && 'update' in this.args.currentSheild) {
        this.args.currentSheild.update(this);
      }

      if (this.args.rolling) {
        this.args.height = this.args.rollingHeight || this.args.height;
      } else if (this.args.jumping) {
        this.args.height = this.args.rollingHeight || this.args.height;
      } else if (this.canRoll) {
        this.args.height = this.args.normalHeight || this.args.height;
      }

      if (this.args.dontJump > 0) {
        this.args.dontJump--;
      }

      if (this.args.dontJump < 0) {
        this.args.dontJump = 0;
      }

      if (!this.viewport || this.removed) {
        return;
      }

      this.args.modeTime++;

      if (!this.args.falling) {
        if (Math.abs(this.args.gSpeed) < 1 && !this.impulseMag && this.args.modeTime > 3) {
          this.args.rolling = false;
        }

        if (Math.abs(this.args.gSpeed) < 0.01) {
          this.args.gSpeed = 0;
        } else if (this.canRoll && this.yAxis > 0.55 && !this.args.ignore) {
          this.args.rolling = true;
        }
      }

      this.args.driving = false;

      if (this.args.standingOn && this.args.standingOn.isVehicle && !this.isVehicle) {
        var vehicle = this.args.standingOn;
        this.args.groundTimeTotal++;
        this.args.falling = true;
        this.args.flying = false;
        this.args.jumping = false;
        this.args.driving = true;
        this.processInput();
        this.args.cameraMode = vehicle.args.cameraMode;

        if (this.willJump && this.yAxis < 0) {
          var leaving = this.args.standingOn;
          this.args.standingLayer = false;
          this.args.standingOn = false;
          this.willJump = false;
          leaving.occupant = null;
          this.args.falling = true;
          this.args.jumping = true; // this.args.y -= vehicle.args.seatHeight || vehicle.args.height;

          this.args.y -= 16;
          this.args.xSpeed = vehicle.args.direction * 2 * -Math.sign(vehicle.args.seatAngle || -1);
          this.args.ySpeed = -this.args.jumpForce;
          vehicle.args.ySpeed = 0;
        }

        this.args.groundAngle = (vehicle.args.groundAngle || 0) + (vehicle.args.seatAngle || 0);

        if (this.willJump && this.yAxis >= 0) {
          this.args.standingOn.falling = false;
          this.willJump = false;
          this.args.standingOn.command_0();
        }

        return;
      }

      if (this.impulseMag !== null) {
        this.args.xSpeed += Number(Number(Math.cos(this.impulseDir) * this.impulseMag).toFixed(3));
        this.args.ySpeed += Number(Number(Math.sin(this.impulseDir) * this.impulseMag).toFixed(3));

        if (!this.impulseFal) {
          switch (this.args.mode) {
            case MODE_FLOOR:
              this.args.gSpeed = Math.cos(this.impulseDir) * this.impulseMag;
              break;

            case MODE_CEILING:
              this.args.gSpeed = -Math.cos(this.impulseDir) * this.impulseMag;
              break;

            case MODE_LEFT:
              this.args.gSpeed = -Math.sin(this.impulseDir) * this.impulseMag;
              break;

            case MODE_RIGHT:
              this.args.gSpeed = Math.sin(this.impulseDir) * this.impulseMag;
              break;
          }
        } else {
          this.args.falling = this.impulseFal || this.args.falling;
        }

        this.impulseMag = null;
        this.impulseDir = null;
        this.impulseFal = null;
      }

      if (this.args.ignore === -2 && (this.args.falling === false || this.args.ySpeed > 64)) {
        this.args.ignore = 0;
      }

      if (this.args.ignore === -3 && (!this.args.falling || this.args.ySpeed >= -10)) {
        this.onNextFrame(function () {
          return _this4.args.ignore = 0;
        });
      }

      if (this.args.ignore < 1 && this.args.ignore > 0) {
        this.args.ignore = 0;
      }

      if (this.args.ignore > 0) {
        this.args.ignore--;
      }

      if (this.args.startled > 0) {
        this.args.startled--;
      }

      if (this.args["float"] > 0) {
        this.args["float"]--;
      }

      if (this.args.standingOn instanceof PointActor) {
        this.args.standingOn.callCollideHandler(this);
      }

      if (!this.args["float"] && this.args.falling) {
        if (!this.args.standingOn || !this.args.standingOn.isVehicle) {
          this.args.standingOn = null;
          this.args.landed = false;
          this.lastAngles = [];

          if (this.args.jumping && this.args.jumpedAt < this.y) {
            this.args.deepJump = true;
          } else if (this.args.jumping && this.args.jumpedAt > this.y + 160) {
            this.args.highJump = true;
          } else if (this.args.jumping) {
            this.args.deepJump = false;
            this.args.highJump = false;
          }
        }
      } else if (this.args.jumping && !this.args.falling) {
        this.args.jumping = false;
        this.args.deepJump = false;
        this.args.highJump = false;
        this.args.jumpedAt = null;
      }

      if (!this.args.falling && this.args.standingOn && this.args.rolling && this.args.modeTime < 3 && !this.args.dropDashCharge && this.args.standingOn.args.convey) {
        this.args.gSpeed = -this.args.standingOn.args.convey * 0.8;
      }

      var drag = this.getLocalDrag();
      var regions = new Set();

      if (!this.noClip) {
        regions = this.viewport.regionsAtPoint(this.x, this.y);

        var _iterator13 = _createForOfIteratorHelper(this.regions),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var region = _step13.value;
            region.updateActor(this);
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      }

      var gSpeedMax = this.args.gSpeedMax;

      if (!this.isRegion) {
        var _iterator14 = _createForOfIteratorHelper(this.regions),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _region = _step14.value;

            if (!regions.has(_region)) {
              this.regions["delete"](_region);
              this.crossRegionBoundary(_region, false);
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        var _iterator15 = _createForOfIteratorHelper(regions),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var _region2 = _step15.value;

            if (this.args.density) {
              if (_region2.args.density && this.args.density < _region2.args.density) {
                var densityRatio = _region2.args.density / this.args.density;
                var blocked = false;
                var blockers = this.getMapSolidAt(this.x, this.y - this.args.height);

                if (Array.isArray(blockers)) {
                  blockers.filter(function (x) {
                    return !_toConsumableArray(regions).includes(x);
                  });

                  if (blockers.length) {
                    blocked = true;
                  }
                }

                if (!blocked) {
                  var myTop = this.y - this.args.height;
                  var regionTop = _region2.y - _region2.args.height;
                  var depth = Math.min((myTop + -regionTop + 4) / this.args.height, 1);
                  this.args["float"] = 1;
                  var force = depth * drag;
                  this.args.falling = true;

                  if (depth > -1) {
                    this.args.ySpeed -= force;
                    this.args.ySpeed *= drag;
                  } else if (depth < -1 && this.args.ySpeed < 0) {
                    if (Math.abs(depth) < 0.25 && Math.abs(this.args.ySpeed) < 1) {
                      this.args.ySpeed = 0;
                      this.args.y = -1 + regionTop + this.args.height;
                    }
                  }
                }
              }
            }

            if (!this.regions.has(_region2)) {
              this.regions.add(_region2);
              this.crossRegionBoundary(_region2, true);
            }
          } // if(!regions.size && this.def)
          // {
          // 	this.args.float = this.def.get('float') ?? this.args.float ?? 0;
          // }

        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      }

      if (this.willJump && !this.args.dontJump && (!this.args.falling || this.falltime < 2)) {
        this.willJump = false;
        var _tileMap = this.viewport.tileMap;

        var _height = Math.max(this.args.height, 32);

        var _headPoint = this.rotatePoint(0, _height + 1);

        var _jumpBlock = this.getMapSolidAt(this.x + _headPoint[0], this.y + _headPoint[1]);

        if (Array.isArray(_jumpBlock)) {
          _jumpBlock = !!_jumpBlock.filter(function (a) {
            return !a.args.platform && !a.isVehicle;
          }).length;
        }

        if (!_jumpBlock) {
          var _force = this.args.jumpForce * drag;

          if (this.running) {
            _force = _force * 1.5;
          } else if (this.crawling) {
            _force = _force * 0.5;
          }

          this.doJump(_force);
        }

        return;
      }

      this.willJump = false;

      if (!this.viewport) {
        return;
      }

      if (this.noClip) {
        this.args.falling = true;
      }

      if (!this.args["static"]) {
        var groundPoint = this.groundPoint;
        var regionsBelow = this.viewport.regionsAtPoint(groundPoint[0], groundPoint[1] + 1);
        var standingOn = this.getMapSolidAt.apply(this, _toConsumableArray(groundPoint));

        if (!this.isRegion && this.args.mode === MODE_FLOOR && regionsBelow.size) {
          var falling = !standingOn;

          var _iterator16 = _createForOfIteratorHelper(regionsBelow),
              _step16;

          try {
            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
              var _region3 = _step16.value;

              if ((this.broad || this.y + 1 === _region3.y - _region3.args.height || this.y + 0 === _region3.y - _region3.args.height) && !this.args.falling) {
                if (Math.max(Math.abs(this.args.gSpeed), Math.abs(this.args.xSpeed)) >= _region3.skimSpeed) {
                  var speed = this.args.falling ? Math.abs(this.args.xSpeed) : Math.abs(this.args.gSpeed);
                  this.args.gSpeed = speed * Math.sign(this.args.gSpeed || this.args.xSpeed);

                  if (this.y - 16 < _region3.y - _region3.args.height) {
                    this.args.skimming = true;
                    this.args.y = _region3.y - _region3.args.height + -1;
                    falling = false;

                    _region3.skim(this);
                  } else {
                    this.args.ySpeed--;
                  }

                  break;
                } else {
                  this.args.xSpeed = this.args.gSpeed || this.args.xSpeed;
                }
              }
            }
          } catch (err) {
            _iterator16.e(err);
          } finally {
            _iterator16.f();
          }

          this.args.standingOn = null; // this.args.falling = falling || this.args.falling;

          this.args.falling = this.args.ySpeed >= 0 ? falling : this.args.falling;

          if (this.args.falling) {
            this.args.xSpeed = this.args.xSpeed || this.args.gSpeed;
            this.args.standingLayer = null;
          } else {
            this.args.gSpeed = this.args.gSpeed || this.args.xSpeed;
          }
        } else if (!this.noClip && !this.args.xSpeed && !this.args.ySpeed && !this.args["float"]) {
          this.args.falling = !this.checkBelow() || this.args.falling;
        }

        if (this.noClip || !this.isRegion && !this.isEffect && this.args.falling && this.viewport) {
          if (this.args.grinding) {
            this.args.grinding = false;
          }

          this.args.mode = MODE_FLOOR;
          this.args.gSpeed = 0;
          this.args.pushing = false;

          if (this.args.xSpeed || this.args.ySpeed) {
            if (!this.args.hangingFrom) {
              this.updateAirPosition();
              this.args.airTimeTotal++;
            } else {
              this.args.groundTimeTotal++;
            }
          }

          this.args.animationBias = Math.abs(this.args.airSpeed / this.args.flySpeedMax);

          if (this.args.animationBias > 1) {
            this.args.animationBias = 1;
          }
        } else if (!this.noClip || this.args.standingLayer || !this.isRegion && !this.isEffect && !this.args.falling) {
          this.args.xSpeed = 0;
          this.args.ySpeed = 0;
          this.xLast = this.args.x;
          this.yLast = this.args.y;

          if (this.args.grinding && !this.args.gSpeed) {
            this.args.gSpeed = Math.sign(this.args.direction || this.axis);
          }

          this.updateGroundPosition();
          this.args.groundTimeTotal++;
          this.args.animationBias = Math.abs((this.args.hSpeed * 0.75 || this.args.gSpeed) / this.args.gSpeedMax);

          if (this.args.animationBias > 1) {
            this.args.animationBias = 1;
          }
        }

        if (this.args.rolling && this.args.pushing) {
          this.args.gSpeed = 0;
        }

        if (!this.viewport) {
          return;
        }
      }

      var halfWidth = Math.ceil(this.args.width / 2);
      var halfHeight = Math.floor(this.args.height / 2); // if(!this.isRegion && (this.args.pushed || ( !this.willStick && this.controllable )))

      if (!this.noClip && !this.isRegion && this.args.pushed) {
        var block;

        var testWallPoint = function testWallPoint(direction) {
          switch (_this4.args.mode) {
            case MODE_FLOOR:
              block = _this4.getMapSolidAt(_this4.x + halfWidth * direction + (direction === -1 ? 0 : -1), _this4.y - halfHeight);
              break;

            case MODE_CEILING:
              block = _this4.getMapSolidAt(_this4.x + halfWidth * direction + (direction === -1 ? 0 : -1), _this4.y + halfHeight);
              break;

            case MODE_LEFT:
              block = _this4.getMapSolidAt(_this4.x + halfHeight * (direction === -1 ? 0 : 2), _this4.y);
              break;

            case MODE_RIGHT:
              block = _this4.getMapSolidAt(_this4.x - halfHeight * (direction === -1 ? 0 : 2), _this4.y);
              break;
          }

          if (block && Array.isArray(block)) {
            return block.filter(function (a) {
              return !a.isVehicle;
            });
          }

          return block;
        };

        var leftWall = testWallPoint(-1);
        var rightWall = testWallPoint(1);

        if (rightWall && !leftWall) {
          if (this.args.xSpeed > 0) {
            this.args.xSpeed = 0;
          }

          this.args.x--;
        }

        if (leftWall && !rightWall) {
          if (this.args.xSpeed > 0) {
            this.args.xSpeed = 0;
          }

          this.args.x++;
        }
      }

      if (!this.viewport || this.removed) {
        return;
      }

      var layerSwitch = this.viewport.objectPalette['layer-switch'];
      var regionClass = this.viewport.objectPalette['base-region'];
      var skipChecking = [regionClass];

      if (!this.isGhost && !skipChecking.some(function (x) {
        return _this4 instanceof x;
      })) {
        var _collisions;

        switch (this.args.mode) {
          case MODE_CEILING:
            _collisions = viewport.actorsAtPoint(this.args.x, this.args.y + this.args.height, this.args.width, this.args.height);
            break;

          case MODE_LEFT:
            _collisions = viewport.actorsAtPoint(this.args.x + this.args.height / 2, this.args.y + this.args.width / 2, this.args.height, this.args.width);
            break;

          case MODE_RIGHT:
            _collisions = viewport.actorsAtPoint(this.args.x - this.args.height / 2, this.args.y + this.args.width / 2, this.args.height, this.args.width);
            break;

          default:
          case MODE_FLOOR:
            _collisions = viewport.actorsAtPoint(this.args.x, this.args.y, this.args.width, this.args.height);
            break;
        }

        _collisions.forEach(function (x) {
          return x.args !== _this4.args && !x.isPushable && x.callCollideHandler(_this4);
        });
      }

      if (!this.viewport) {
        return;
      }

      var tileMap = this.viewport.tileMap;

      if (Math.abs(this.args.gSpeed) < 2 && !this.args.falling) {
        var stayStuck = this.stayStuck;
        this.regions.forEach(function (region) {
          stayStuck = stayStuck || region.args.sticky;
        });

        if (!stayStuck && !this.args.climbing) {
          var half = Math.floor(this.args.width / 2) || 0; // if(!tileMap.getSolid(this.x, this.y+1, this.args.layer))

          var mode = this.args.mode;

          if (this.args.mode === MODE_FLOOR && this.args.groundAngle <= -(Math.PI / 4)) {
            this.args.gSpeed = 1;
          } else if (this.args.mode === MODE_FLOOR && this.args.groundAngle >= Math.PI / 4 && this.args.groundAngle < Math.PI) {
            this.args.gSpeed = -1;
          } else if (mode === MODE_LEFT && this.args.groundAngle < Math.PI * 0.15) {
            this.lastAngles = []; // this.args.xSpeed = 2;

            this.args.mode = MODE_FLOOR;
            this.args.falling = true; // this.args.groundAngle = -Math.PI / 2;

            this.args.x += this.args.width / 2;
            this.args.ignore = 30;
          } else if (mode === MODE_RIGHT && this.args.groundAngle > -Math.PI * 0.15) {
            this.lastAngles = []; // this.args.xSpeed = -2;

            this.args.mode = MODE_FLOOR;
            this.args.falling = true; // this.args.groundAngle = Math.PI / 2;

            this.args.x -= this.args.width / 2;
            this.args.ignore = 30;
          } else if (mode === MODE_CEILING) {
            this.lastAngles = [];
            this.args.xSpeed = 0;
            this.args.y += this.args.height;
            this.args.ignore = 8;
            this.args.falling = true;
            this.willJump = false;
            var gSpeed = this.args.gSpeed; // this.args.groundAngle = Math.PI;

            this.args.mode = MODE_FLOOR;
            this.onNextFrame(function () {
              _this4.args.mode = MODE_FLOOR;
              _this4.willJump = false;
              _this4.args.xSpeed = -gSpeed;
            });

            if (Math.sign(this.xSpeedLast) === -1) {
              this.args.facing = 'left';
              this.args.x++;
            } else if (Math.sign(this.xSpeedLast) === 1) {
              this.args.facing = 'right';
              this.args.x--;
            }
          }
        }
      }

      this.args.landed = true;

      if (this.controllable) {
        this.args.x = this.args.x;
        this.args.y = this.args.y;
      } // if(!this.noClip && !this.args.falling && !this.isRegion)
      // {
      // 	if(this.args.mode === MODE_FLOOR && !this.args.gSpeed && !this.args.xSpeed)
      // 	{
      // 		let execs = 0;
      // 		const heading = Math.atan2(startY - this.y, startX - this.x);
      // 		this.args.xSpeed = 0;
      // 		this.args.ySpeed = 0;
      // 		while(this.getMapSolidAt(this.x, this.y - 1, false))
      // 		{
      // 			this.args.x += Math.cos(heading);
      // 			this.args.y += Math.sin(heading);
      // 			if(execs++ > 1000)
      // 			{
      // 				break;
      // 			}
      // 		}
      // 	}
      // }
      // if(this.args.falling)
      // {
      // 	this.args.gSpeed = 0;
      // }


      this.controllable && this.processInput();

      if (this.args.falling || this.args.gSpeed) {
        this.args.stopped = 0;
      } else {
        this.args.stopped++;
      }

      if (this.lastAngles.length > 0) {
        this.args.groundAngle = this.lastAngles.map(function (a) {
          return Number(a);
        }).reduce(function (a, b) {
          return a + b;
        }) / this.lastAngles.length;
      }

      if (isNaN(this.args.groundAngle)) {
        console.log(this.lastAngles, this.lastAngles.length);
      }

      if (!this.args["float"] && !this.args["static"]) {
        var _standingOn = this.getMapSolidAt.apply(this, _toConsumableArray(this.groundPoint));

        if (Array.isArray(_standingOn) && _standingOn.length && !this.args["float"]) {
          this.args.standingLayer = false;

          var groundActors = _standingOn.filter(function (a) {
            return a.args !== _this4.args && a.solid && a.callCollideHandler(_this4);
          });

          if (groundActors.length) {
            var _iterator17 = _createForOfIteratorHelper(groundActors),
                _step17;

            try {
              for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                var groundActor = _step17.value;

                if (!groundActor.isVehicle && this.y > 1 + groundActor.y + -groundActor.args.height) {
                  continue;
                }

                this.args.groundAngle = groundActor.groundAngle || 0;
                this.args.standingOn = groundActor; // if(groundActor.args.standingLayer)
                // {
                // 	this.args.standingLayer = groundActor.args.standingLayer;
                // }
              }
            } catch (err) {
              _iterator17.e(err);
            } finally {
              _iterator17.f();
            }
          }
        } else if (_standingOn) {
          this.args.standingOn = null;

          if (_typeof(_standingOn) === 'object') {
            this.args.standingLayer = _standingOn;

            if (this.args.modeTime < 1 && _standingOn.xLayerSpeed) {
              this.args.gSpeed = 0;
            }
          } else {
            this.args.standingLayer = null;
          }
        } else {
          this.args.standingOn = null;
        }
      }

      if (this.args.falling && this.args.ySpeed < this.args.ySpeedMax) {
        if (!this.args["float"]) {
          var gravity = 1;

          var _iterator18 = _createForOfIteratorHelper(this.regions),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var _region4 = _step18.value;

              if (!_region4.args.gravity && _region4.args.gravity !== 1) {
                continue;
              }

              gravity *= _region4.args.gravity;
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          this.args.ySpeed += this.args.gravity * gravity;
        }

        this.args.landed = false;
      }

      if (!this.args.falling) {
        this.checkDropDash();
        this.args.jumping = false;
      }

      var _iterator19 = _createForOfIteratorHelper(this.behaviors),
          _step19;

      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var behavior = _step19.value;
          behavior.update(this);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }

      if (this.twister) {
        this.twister.args.x = this.args.x;
        this.twister.args.y = this.args.y;
        this.twister.args.xOff = this.args.xOff;
        this.twister.args.yOff = this.args.yOff;
        this.twister.args.width = this.args.width;
        this.twister.args.height = this.args.height;
      }

      if (this.pincherBg) {
        this.pincherBg.args.x = this.args.x;
        this.pincherBg.args.y = this.args.y;
        this.pincherBg.args.xOff = this.args.xOff;
        this.pincherBg.args.yOff = this.args.yOff;
        this.pincherBg.args.width = this.args.width;
        this.pincherBg.args.height = this.args.height;
      }

      if (this.pincherFg) {
        this.pincherFg.args.x = this.args.x;
        this.pincherFg.args.y = this.args.y;
        this.pincherFg.args.xOff = this.args.xOff;
        this.pincherFg.args.yOff = this.args.yOff;
        this.pincherFg.args.width = this.args.width;
        this.pincherFg.args.height = this.args.height;
      }

      if (this.args.falling) {
        this.args.rolling = false;
        this.fallTime++;
      } else {
        this.args.idleTime++;

        if (this.yAxis || this.xAxis) {
          this.args.idleTime = 0;
        }
      }

      this.args.carrying = !!this.carrying.size;

      if (this.args.carrying) {
        if (Math.abs(this.args.gSpeed) > 8) {
          this.args.gSpeed = 8 * Math.sign(this.args.gSpeed);
        }

        this.args.idleTime = 0;
        this.args.rolling = false;
      }
    }
  }, {
    key: "popOut",
    value: function popOut(other) {
      var halfWidth = this.args.width / 2;
      var otherHalfWidth = other.args.width / 2;
      var topSide = this.y - this.args.height + 1;
      var bottomSide = this.y;
      var distance = this.x - other.x;
      var minDistance = halfWidth + otherHalfWidth;

      if (this.solid && Math.abs(distance) < Math.abs(minDistance) && bottomSide > other.y && other.y > topSide) {
        other.args.x = this.x + minDistance * -Math.sign(distance);
      }
    }
  }, {
    key: "getLocalDrag",
    value: function getLocalDrag() {
      var drag = 1;

      var _iterator20 = _createForOfIteratorHelper(this.regions),
          _step20;

      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var region = _step20.value;

          if (region.skimmers.has(this) || region.skimmers.has(_Bindable.Bindable.make(this))) {
            continue;
          }

          if (!region.args.drag && region.args.drag !== 0) {
            continue;
          }

          if (region.args.drag < drag) {
            drag = region.args.drag;
          }
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }

      return drag;
    }
  }, {
    key: "updateGroundPosition",
    value: function updateGroundPosition() {
      var _this5 = this;

      var drag = this.getLocalDrag();
      var gSpeedMax = this.args.gSpeedMax;

      if (this.running) {
        gSpeedMax = RUNNING_SPEED;
      } else if (this.crawling) {
        gSpeedMax = CRAWLING_SPEED;
      }

      var nextPosition = [0, 0];
      var radius = Math.ceil(this.args.width / 2);
      var wasPaused = this.paused;

      if (this.args.gSpeed) {
        var scanDist = radius + Math.abs(this.args.gSpeed);
        var direction = Math.sign(this.args.gSpeed);
        var max = Math.abs(this.args.gSpeed);
        var step = 1;
        this.pause(true);
        var iter = 0;
        var headBlock = this.args.modeTime > 10 && this.scanForward(this.args.gSpeed, 1);

        if (headBlock === false || headBlock > 0) {
          for (var s = 0; s < max; s += step) {
            if (this.args.height > 8 && this.args.modeTime > 1) {
              this.args.pushing = false;

              if (!this.args.rolling) {
                var headPoint = this.rotatePoint(radius * -direction, this.args.height);

                var _headBlock = this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1]);

                if (Array.isArray(_headBlock)) {
                  _headBlock = _headBlock.filter(function (x) {
                    return x.args !== _this5.args && x.callCollideHandler(_this5) && x.solid;
                  }).length;
                }

                if (_headBlock) {
                  if (this.args.mode === MODE_CEILING) {
                    this.args.x += radius * Math.sign(this.args.gSpeed);
                    this.args.y += this.args.height;
                    this.args.mode = MODE_FLOOR;
                  }

                  this.args.pushing = Math.sign(this.args.gSpeed);
                  break;
                }
              }

              if (this.args.groundAngle === 0) {
                var waistPoint = this.rotatePoint(radius * -direction, this.args.height * 0.5);
                var waistBlock = this.getMapSolidAt(this.x + waistPoint[0], this.y + waistPoint[1]);

                if (Array.isArray(waistBlock)) {
                  waistBlock = waistBlock.filter(function (x) {
                    return x.args !== _this5.args && x.callCollideHandler(_this5) && x.solid;
                  }).length;
                }

                if (waistBlock) {
                  if (this.args.mode === MODE_CEILING) {
                    this.args.x += radius * Math.sign(this.args.gSpeed);
                    this.args.y += this.args.rollingeight || this.args.height;
                    this.args.mode = MODE_FLOOR;
                  }

                  this.args.pushing = Math.sign(this.args.gSpeed);
                  break;
                }
              }
            }

            var _iterator21 = _createForOfIteratorHelper(this.behaviors),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var behavior = _step21.value;
                behavior.movedGround && behavior.movedGround(this);
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }

            nextPosition = this.findNextStep(step * direction);

            if (this.args.falling) {
              return;
            }

            if (!nextPosition) {
              break;
            }

            if (nextPosition[3]) {
              this.args.moving = false;
              this.args.gSpeed = 0.15 * Math.sign(this.args.gSpeed);

              if (this.args.mode === MODE_LEFT || this.args.mode === MODE_RIGHT) {
                this.args.mode = MODE_FLOOR;
                this.lastAngles = [];
              }

              break;
            } else if (nextPosition[2] === true) {
              var gSpeed = this.args.gSpeed;
              var gAngle = this.args.groundAngle;
              this.args.standingLayer = null;

              var _radius = void 0;

              var _hRadius = void 0;

              switch (this.args.mode) {
                case MODE_FLOOR:
                  _radius = this.args.width / 2;

                  if (Math.abs(gSpeed) < _radius) {
                    this.args.x += _radius * Math.sign(gSpeed);
                  } else {
                    this.args.x += Math.sign(gSpeed);
                  }

                  this.args.xSpeed = gSpeed * Math.cos(gAngle);
                  this.args.ySpeed = -gSpeed * Math.sin(gAngle);
                  this.args["float"] = this.args["float"] < 0 ? this.args["float"] : 1;
                  var falling = !!this.args.gSpeed;

                  if (this.checkBelow(this.x, this.y)) {
                    this.args.gSpeed = gSpeed;
                    this.args.xSpeed = 0;
                    this.args.ySpeed = 0;
                    falling = false;

                    if (this.canRoll && this.yAxis > 0.55) {
                      this.args.rolling = true;
                    }
                  }

                  this.args.falling = falling;
                  this.args.ignore = 2;
                  break;

                case MODE_CEILING:
                  this.args.y += this.args.height; // this.args.y++;

                  this.args["float"] = this.args["float"] < 0 ? this.args["float"] : 1;
                  this.args.falling = true; // this.args.groundAngle  = Math.PI;
                  // this.args.displayAngle = Math.PI;

                  this.args.mode = MODE_FLOOR;
                  this.args.xSpeed = -gSpeed * Math.cos(gAngle);
                  this.args.ySpeed = gSpeed * Math.sin(gAngle);
                  this.lastAngles.splice(0);
                  this.args.direction *= -1;

                  if (!this.args.rolling) {
                    this.args.facing = this.args.facing === 'left' ? 'right' : 'left';
                  }

                  this.args.ignore = 3;
                  break;

                case MODE_LEFT:
                  _radius = this.args.width / 2;
                  _hRadius = this.args.height / 2;

                  if (!this.args.climbing) {
                    if (Math.abs(this.args.gSpeed) < 2 && !this.args.rolling) {
                      if (this.args.gSpeed < 0) {
                        this.args.x -= this.args.direction;
                        this.args.y -= this.args.gSpeed + -2;
                        this.args.groundAngle = 0;
                      } else {
                        this.args.x += _radius; // this.args.y += hRadius;
                      }
                    } else {
                      this.args.ignore = -3;
                      this.args.x += _radius; // this.args.y += hRadius;
                    }

                    this.args.xSpeed = gSpeed * Math.sin(gAngle);
                    this.args.ySpeed = gSpeed * Math.cos(gAngle); // this.args.groundAngle = -Math.PI * 0.5;
                    // this.args.mode = MODE_FLOOR;
                    // this.onNextFrame(() => {
                    // });
                  } // this.args.mode = MODE_FLOOR;


                  this.args.falling = true;
                  break;

                case MODE_RIGHT:
                  _radius = this.args.width / 2;
                  _hRadius = this.args.height / 2;

                  if (!this.args.climbing) {
                    if (Math.abs(this.args.gSpeed) < 2 && !this.args.rolling) {
                      if (this.args.gSpeed > 0) {
                        this.args.x -= this.args.direction;
                        this.args.y -= this.args.gSpeed + 2;
                        this.args.groundAngle = 0;
                      } else {
                        this.args.x -= _radius; // this.args.y += hRadius;
                      }
                    } else {
                      this.args.ignore = -3;
                      this.args.x -= _radius; // this.args.y += hRadius;
                    }

                    this.args.xSpeed = -gSpeed * Math.sin(gAngle);
                    this.args.ySpeed = -gSpeed * Math.cos(gAngle); // this.args.groundAngle = Math.PI * 0.5;
                    // this.args.mode = MODE_FLOOR;
                    // this.onNextFrame(() => {
                    // });
                  } // this.args.mode = MODE_FLOOR;


                  this.args.falling = true;
                  break;
              }

              break;
            } else if (!nextPosition[0] && !nextPosition[1]) {
              this.args.moving = false;

              switch (this.args.mode) {
                case MODE_FLOOR:
                case MODE_CEILING:
                  this.args.gSpeed = 0;
                  break;

                case MODE_LEFT:
                case MODE_RIGHT:
                  break;
              }
            } else if ((nextPosition[0] || nextPosition[1]) && !this.rotateLock) {
              this.args.moving = true;
              this.args.angle = nextPosition[0] ? Math.atan(nextPosition[1] / nextPosition[0]) : Math.sign(nextPosition[1]) * Math.PI / 2;
              this.lastAngles.unshift(this.args.angle);
              this.lastAngles.splice(this.angleAvg);
            }

            if (!this.rotateLock) {
              switch (this.args.mode) {
                case MODE_FLOOR:
                  this.args.x += nextPosition[0];
                  this.args.y -= nextPosition[1];
                  break;

                case MODE_CEILING:
                  this.args.x -= nextPosition[0];
                  this.args.y += nextPosition[1];
                  break;

                case MODE_LEFT:
                  this.args.x += nextPosition[1];
                  this.args.y += nextPosition[0];
                  break;

                case MODE_RIGHT:
                  this.args.x -= nextPosition[1];
                  this.args.y -= nextPosition[0];
                  break;
              }

              if (this.args.angle > Math.PI / 4 && this.args.angle < Math.PI / 2) {
                this.lastAngles = this.lastAngles.map(function (n) {
                  return n - Math.PI / 2;
                });

                switch (this.args.mode) {
                  case MODE_FLOOR:
                    this.args.mode = MODE_RIGHT;
                    break;

                  case MODE_RIGHT:
                    this.args.mode = MODE_CEILING;
                    break;

                  case MODE_CEILING:
                    this.args.mode = MODE_LEFT;
                    break;

                  case MODE_LEFT:
                    this.args.mode = MODE_FLOOR;
                    break;
                }

                this.args.groundAngle -= Math.PI / 2;
              } else if (this.args.angle < -Math.PI / 4 && this.args.angle > -Math.PI / 2) {
                var orig = this.args.mode;
                this.lastAngles = this.lastAngles.map(function (n) {
                  return Number(n) + Math.PI / 2;
                });

                switch (this.args.mode) {
                  case MODE_FLOOR:
                    this.args.mode = MODE_LEFT;
                    break;

                  case MODE_RIGHT:
                    this.args.mode = MODE_FLOOR;
                    break;

                  case MODE_CEILING:
                    this.args.mode = MODE_RIGHT;
                    break;

                  case MODE_LEFT:
                    this.args.mode = MODE_CEILING;
                    break;
                }

                this.args.groundAngle = Number(this.args.groundAngle) + Math.PI / 2;
              }
            }
          }
        } else {
          this.args.pushing = Math.sign(this.args.gSpeed); // this.args.gSpeed  = 0;
        }

        var hRadius = Math.round(this.args.height / 2);

        if (!this["static"] && this.args.mode === MODE_FLOOR) {
          while ((this.args.gSpeed <= 0 || this.args.modeTime < 3) && this.getMapSolidAt(this.x - radius, this.y - hRadius, false)) {
            this.args.x++;
          }

          while ((this.args.gSpeed >= 0 || this.args.modeTime < 3) && this.getMapSolidAt(this.x + radius, this.y - hRadius, false)) {
            this.args.x--;
          }
        } // 14434,3647


        wasPaused || this.pause(false);
        var pushFoward = this.xAxis && Math.sign(this.xAxis) === Math.sign(this.args.gSpeed);

        if (this.args.mode === MODE_FLOOR || this.args.mode === MODE_CEILING || this.args.gSpeed < 0 && this.args.mode === MODE_LEFT || this.args.gSpeed > 0 && this.args.mode === MODE_RIGHT) {
          var pushBack = this.xAxis && Math.sign(this.xAxis) !== Math.sign(this.args.gSpeed);
          var decel = this.args.decel * (this.args.rolling && pushBack ? 3 : 0.75);

          if (!this.args.climbing && this.args.gSpeed && (!pushFoward || this.args.rolling)) {
            if (this.args.grinding) {
              if (this.yAxis > 0.5) {// this.args.gSpeed -= decel * 1/drag * 0.06125 * Math.sign(this.args.gSpeed);
              } else {
                this.args.gSpeed -= decel * 1 / drag * 0.125 * Math.sign(this.args.gSpeed);
              }
            } else if (this.args.rolling) {
              this.args.gSpeed -= decel * 1 / drag * 0.06125 * Math.sign(this.args.gSpeed);
            } else if (!this.args.grinding && !this.args.rolling && (!this.xAxis || pushBack)) {
              this.args.gSpeed -= decel * 1 / drag * Math.sign(this.args.gSpeed);
            }

            if (Math.abs(this.args.gSpeed) < 0.1) {
              this.args.gSpeed = 0;
            }
          }
        }

        if (!pushFoward && Math.abs(this.args.gSpeed) < 1) {
          if (!this.args.wallSticking) {
            this.args.gSpeed = 0;
          }
        }

        var slopeFactor = 0;

        if (!this.args.climbing) {
          switch (this.args.mode) {
            case MODE_FLOOR:
              slopeFactor = this.args.groundAngle / (Math.PI / 2);

              if (direction > 0) {
                slopeFactor *= -1;
              }

              break;

            case MODE_CEILING:
              slopeFactor = -this.args.groundAngle / (Math.PI / 2);

              if (direction > 0) {
                slopeFactor *= -1;
              }

              break;
              break;

            case MODE_RIGHT:
              if (direction > 0) {
                slopeFactor = -1;
                slopeFactor -= this.args.groundAngle / (Math.PI / 2);
              } else {
                slopeFactor = 1;
                slopeFactor += this.args.groundAngle / (Math.PI / 2);
              }

              break;

            case MODE_LEFT:
              if (direction > 0) {
                slopeFactor = 1;
                slopeFactor -= this.args.groundAngle / (Math.PI / 2);
              } else {
                slopeFactor = -1;
                slopeFactor += this.args.groundAngle / (Math.PI / 2);
              }

              break;
          }

          if (this.args.rolling) {
            if (slopeFactor > 0) {
              this.args.gSpeed += 2.2 * slopeFactor * this.args.accel * direction;
            } else if (slopeFactor < 0 && this.args.modeTime < 10) {
              this.args.gSpeed += 1.60 * slopeFactor * this.args.decel * direction;
            }
          } else if (this.args.grinding) {
            var speed = Math.abs(this.args.gSpeed);

            var _direction = Math.sign(this.args.gSpeed || this.xSpeedLast || 1);

            this.args.direction = _direction; // if(Math.sign(this.args.gSpeed) !== Math.sign(this.args.direction))
            // {
            // 	this.args.gSpeed = 0;
            // }

            if (speed < 6) {
              this.args.gSpeed = 6 * _direction;
            } else if (speed > 40) {
              this.args.gSpeed = 40 * _direction;
            } else if (slopeFactor < 0) {
              this.args.gSpeed *= 1.0000 - (0 - slopeFactor / 2 * 0.015);
            } else if (slopeFactor > 0) {
              this.args.gSpeed *= 1.0015 * (1 + slopeFactor / 2 * 0.045);
            } else {
              this.args.gSpeed += 0.1 * _direction;
            }
          } else if (!this.stayStuck) {
            // let speedFactor = 1;
            // if(slopeFactor < 0 && Math.abs(this.args.gSpeed) < 2)
            // {
            // 	speedFactor = 0.99990 * (1 - (slopeFactor**2/4) / 2);
            // }
            // else if(slopeFactor > 1 && Math.abs(this.args.gSpeed) < this.args.gSpeedMax / 2)
            // {
            // 	speedFactor = 1.05000 * (1 + (slopeFactor**2/4) / 2);
            // }
            if (this.args.mode === MODE_FLOOR && Math.abs(slopeFactor) > 0.5) {
              if (Math.abs(this.args.gSpeed) < 1) {
                this.args.gSpeed = Math.sign(slopeFactor) * 4;
              }

              this.args.gSpeed += slopeFactor * 0.1;
            }

            if (Math.abs(this.args.gSpeed) < 1) {// if(slopeFactor <= -1)
              // {
              // 	this.args.gSpeed *= -0.5;
              // 	this.args.ignore = this.args.ignore || 8;
              // }
            }
          }
        }
      }

      if (nextPosition && (nextPosition[0] !== false || nextPosition[1] !== false)) {} else {
        this.args.ignore = this.args.ignore || 1;

        if (this.args.falling) {
          this.args.gSpeed = 0;
        }
      } // if(this.controllable)
      // {
      // 	const radius = 0.5 * this.args.width;
      // 	const direction = Math.sign(this.args.xSpeed);
      // 	const height = Math.max(this.args.height, 0);
      // 	const headPoint = this.rotatePoint(0, height * 0.75);
      // 	// const headPoint = this.rotatePoint(radius * -direction, this.args.height * 0.75);
      // 	let jumpBlock = this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1]);
      // 	if(Array.isArray(jumpBlock))
      // 	{
      // 		jumpBlock = !!jumpBlock.filter(a => !a.args.platform && !a.isVehicle).length;
      // 	}
      // 	if(!this.args.falling && this.checkBelow(this.x, this.y) && jumpBlock)
      // 	{
      // 		console.log(this.realAngle, this.args.groundAngle, this.args.mode);
      // 		console.log([this.x + headPoint[0], this.y + headPoint[1]]);
      // 		console.log(headPoint);
      // 		this.die();
      // 		return;
      // 	}
      // }

    }
  }, {
    key: "findAirPointA",
    value: function findAirPointA(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args && x.callCollideHandler(actor) && x.solid;
      });

      if (actors.length > 0) {
        return actor.lastPointA;
      }

      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (solid) {
        return actor.lastPointA;
      }

      Object.assign(actor.lastPointA, point.map(Math.trunc));
    }
  }, {
    key: "findAirPointB",
    value: function findAirPointB(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args && x.callCollideHandler(actor) && x.solid;
      });

      if (actors.length > 0) {
        return actor.lastPointB;
      }

      if (tileMap.getSolid(point[0], point[1], actor.args.layer)) {
        return actor.lastPointB;
      }

      Object.assign(actor.lastPointB, point.map(Math.trunc));
    }
  }, {
    key: "updateAirPosition",
    value: function updateAirPosition() {
      var _this6 = this;

      var xSpeedOriginal = this.args.xSpeed;
      var ySpeedOriginal = this.args.ySpeed;
      this.args.standingLayer = null;
      var viewport = this.viewport;
      var radius = Math.ceil(this.args.width / 2);
      var direction = Math.sign(this.args.xSpeed);
      var tileMap = this.viewport.tileMap;
      var cSquared = Math.pow(this.args.xSpeed, 2) + Math.pow(this.args.ySpeed, 2);
      var airSpeed = cSquared ? Math.sqrt(cSquared) : 0;
      this.args.airSpeed = airSpeed;

      if (!airSpeed) {
        return;
      }

      if (this.controllable || this.isVehicle) {
        var quickSpin = this.springing;
        this.args.groundAngle += -Math.sign(this.args.groundAngle) * 0.001 * (quickSpin ? 125 : 50);
      }

      if (Math.abs(this.args.groundAngle) < 0.04) {
        this.args.groundAngle = 0;
      }

      if (this.noClip) {
        this.args.x += this.args.xSpeed;
        this.args.y += this.args.ySpeed;
        return;
      }

      var upMargin = (this.args.flying ? this.args.height + this.args.yMargin : this.args.height) || 1;
      this.upScan = true; // const upDistance = this.castRay(
      // 	Math.abs(this.args.ySpeed) + upMargin
      // 	, -Math.PI / 2
      // 	, this.findSolid
      // );

      var upScanDist = this.args.ySpeed < 0 ? -this.args.ySpeed + upMargin : 0;
      var upDistanceL = this.castRay(upScanDist, -Math.PI / 2, [-this.args.width / 2, 0], this.findSolid);
      var upDistanceR = this.castRay(upScanDist, -Math.PI / 2, [this.args.width / 2, 0], this.findSolid);
      var upDistanceM = this.castRay(upScanDist, -Math.PI / 2, [0, 0], this.findSolid);
      var upDistance = upDistanceL || upDistanceR ? Math.min.apply(Math, _toConsumableArray([upDistanceL, upDistanceR].filter(function (x) {
        return x !== false;
      }))) : false;
      this.upScan = false;
      var hits = [];

      if (!this.args.hLock) {
        var hScanDist = this.args.xSpeed;
        var foreDistanceHead = hScanDist ? this.scanForward(hScanDist, 0.9) : false;
        var foreDistanceWaist = hScanDist ? this.scanForward(hScanDist, 0.5) : false;
        var foreDistanceFoot = hScanDist ? this.scanForward(hScanDist, 0.1) : false;
        var distances = [foreDistanceHead, foreDistanceWaist, foreDistanceFoot]; // if(this.controllable && !this.args.falling && !this.args.rolling)
        // {
        // 	distances.push(foreDistanceFoot);
        // }

        hits = distances.filter(function (x) {
          return x !== false;
        });
      }

      if (this.args.ySpeed && upDistance && this.lastLayer && this.lastLayer.offsetYChanged) {
        this.args.y += this.lastLayer.offsetYChanged + 1;
        this.args.ySpeed = this.lastLayer.offsetYChanged + 1;
        this.lastLayer = null;
        return;
      }

      var upCollisionAngle = false;

      if (![upDistanceL, upDistanceR].some(function (x) {
        return x === false;
      })) {
        upCollisionAngle = Math.atan2(upDistanceL - upDistanceR, this.args.width);
      }

      var willStick = this.willStick || this.args.deepJump;
      var xMove = this.xLast - this.x;

      if (upDistanceL && upDistanceR && upDistance <= upScanDist && (!this.args.flying || this.canStick) // && !this.args.flying
      && Math.abs(upCollisionAngle) < Math.PI / 4 && this.args.ySpeed <= 0) {
        this.args.y -= upDistance - this.args.height;

        if (this.args.ySpeed) {
          this.args.falling = true;
        }

        this.args.ySpeed = Math.max(0, this.args.ySpeed);
        return;
      }

      if (!this.willStick && hits.length > 1 && (upDistance === false || upDistance < this.args.height)) {
        var xDirection = Math.sign(this.args.xSpeed);
        var maxHit = -1 + Math.max.apply(Math, _toConsumableArray(hits));
        var minHit = -1 + Math.min.apply(Math, _toConsumableArray(hits));
        var width = this.args.width;
        var shiftBy = width + -minHit; // const shiftBy = width + -maxHit;
        // const shiftBy = radius + -maxHit;

        var shift = shiftBy * -xDirection;

        if (!isNaN(shift) && (!shift || shiftBy < width || Math.sign(shift) === Math.sign(this.args.xSpeed))) {
          this.args.x += shift;
          this.args.flySpeed = 0;
          this.args.xSpeed = 0;
          this.args.gSpeed = 0;
          this.args.mode = MODE_FLOOR;
        }

        this.viewport.actorsAtPoint(this.x + (0 + radius) * xDirection, this.y, this.args.width, this.args.height).forEach(function (actor) {
          if (actor === _this6) {
            return;
          }

          actor.callCollideHandler(_this6, xDirection < 0 ? 1 : 3);
        });
      }

      Object.assign(this.lastPointA, [this.x, this.y].map(Math.trunc));
      Object.assign(this.lastPointB, [this.x, this.y].map(Math.trunc));
      var scanDist = 1 + Math.ceil(airSpeed);
      var airPoint = this.castRay(scanDist, this.airAngle, this.findAirPointA);
      var airPointB = this.rotateLock ? airPoint : this.castRay(scanDist, this.airAngle, [0, -3 * Math.sign(this.args.ySpeed || 1)], this.findAirPointB);
      this.willJump = false;
      var blockers = false;
      var collisionAngle = false;

      if (![airPoint, airPointB].some(function (x) {
        return x === false;
      })) {
        collisionAngle = Math.atan2(airPoint[1] - airPointB[1], airPoint[0] - airPointB[0]);
      }

      this.xLast = this.args.x;
      this.yLast = this.args.y;

      if (airPoint !== false) {
        var angleIsWall = false;

        if (xSpeedOriginal < 0) {
          angleIsWall = collisionAngle <= Math.PI / 2;
        }

        if (xSpeedOriginal > 0) {
          angleIsWall = collisionAngle >= Math.PI / 2;
        }

        var isLeft = angleIsWall && xSpeedOriginal < 0;
        var isRight = angleIsWall && xSpeedOriginal > 0;
        var solid = this.checkBelow.apply(this, _toConsumableArray(airPoint));

        if (!this.willStick) {
          // this.args.gSpeed = xSpeedOriginal || this.args.gSpeed;
          this.args.gSpeed = xSpeedOriginal;

          if (solid && _typeof(solid) === 'object' && solid.offsetXChanged) {
            this.args.gSpeed -= solid.offsetXChanged;
          }
        }

        var stickX = airPoint[0];
        var stickY = airPoint[1];
        var away = false;

        if (!this.args.ySpeed || Math.sign(stickY - this.y) === Math.sign(this.args.ySpeed)) {
          this.args.xSpeed = 0;
          this.args.ySpeed = 0; // if(this.args.flying && !angleIsWall && collisionAngle)
          // {
          // 	this.args.mode = MODE_CEILING;
          // 	this.args.xSpeed *= -1;
          // }
        } else {
          // this.args.y++;
          away = true;
        } // if(!this.viewport.tileMap.getSolid(stickX, stickY))
        // {
        // }


        this.args.x = stickX;
        this.args.y = stickY;
        blockers = this.getMapSolidAt(this.x + direction, this.y);

        if (Array.isArray(blockers)) {
          blockers = blockers.filter(function (a) {
            return a.callCollideHandler(_this6);
          });

          if (!blockers.length) {
            blockers = false;
          }
        }

        if (!this.rotateLock) {
          if (upCollisionAngle !== false && upCollisionAngle < 0) {
            this.args.gSpeed = 0;
            this.args.mode = MODE_LEFT;
            this.args.direction = 1;
            this.args.facing = 'right';
          } else if (upCollisionAngle !== false && upCollisionAngle > 0) {
            this.args.gSpeed = 0;
            this.args.mode = MODE_RIGHT;
            this.args.direction = -1;
            this.args.facing = 'left';
          } else if ((this.willStick || !isLeft && !isRight) && !this.getMapSolidAt(this.x - direction, this.y) && !this.getMapSolidAt(this.x - direction, this.y + 1)) {
            if (isLeft) {
              this.args.gSpeed = 0;
              this.args.mode = MODE_LEFT;
              this.args.direction = 1;
              this.args.facing = 'right';
            } else if (isRight) {
              this.args.gSpeed = 0;
              this.args.mode = MODE_RIGHT;
              this.args.direction = -1;
              this.args.facing = 'left';
            } else if (upCollisionAngle !== false) {
              this.args.mode = MODE_CEILING;
            }
          }
        } // if(this.args.ySpeed < 0 && Math.abs(upCollisionAngle - Math.PI/2) < Math.PI/8)
        // {
        // 	return;
        // }


        var halfWidth = Math.floor(this.args.width / 2);
        var sensorSpread = 4;
        var backPosition = this.findNextStep(-sensorSpread * 0.5);
        var forePosition = this.findNextStep(sensorSpread * 0.5);

        if (this.xSpeedLast > 0 && forePosition && forePosition[3]) {
          this.args.x -= this.args.width;
        } else if (this.xSpeedLast < 0 && backPosition && backPosition[3]) {
          this.args.x += this.args.width;
        } else if (!forePosition || forePosition[0] !== false && forePosition[1] !== false || !backPosition || backPosition[0] !== false && backPosition[1] !== false) {
          var newAngle = 0;

          if (forePosition && backPosition) {
            var _forePosition$, _backPosition$, _forePosition$2, _backPosition$2;

            newAngle = (ySpeedOriginal < 0 ? -1 : 1) * Number(Math.atan2(((_forePosition$ = forePosition[1]) !== null && _forePosition$ !== void 0 ? _forePosition$ : 0) - ((_backPosition$ = backPosition[1]) !== null && _backPosition$ !== void 0 ? _backPosition$ : 0), ((_forePosition$2 = forePosition[0]) !== null && _forePosition$2 !== void 0 ? _forePosition$2 : 0) - ((_backPosition$2 = backPosition[0]) !== null && _backPosition$2 !== void 0 ? _backPosition$2 : 0)));
          }

          if (isNaN(newAngle)) {
            console.log(newAngle);
            throw new Error('angle is NAN!');
          } // const shallowLedgePoint = this.findNextStep(backPosition[1] < forePosition[1] ? 3 : -3);
          // let shallowLedge = false;
          // if(shallowLedgePoint[1] === Math.max(backPosition[1], forePosition[1]))
          // {
          // 	shallowLedge = true;
          // }
          // if(shallowLedge && Math.abs(forePosition[1] - backPosition[1]) > 2 * this.maxStep)
          // {
          // 	this.args.x += backPosition[1] < forePosition[1] ? -1 : 1;
          // 	this.args.ySpeed = ySpeedOriginal;
          // 	this.args.groundAngle = 0;
          // }
          // else


          if (forePosition && backPosition && !forePosition[2] && !backPosition[2] && !(forePosition[3] && backPosition[3])) {
            // this.args.groundAngle = this.args.angle = newAngle;
            if (this.canRoll && (this.yAxis > 0.55 || this.args.dropDashCharge)) {
              this.args.rolling = true;
            }

            if (this.args.startled < 175) {
              this.args.falling = false; // this.controller.rumble && this.controller.rumble({
              // 	duration: 80,
              // 	strongMagnitude: 0.0,
              // 	weakMagnitude: Math.max(40, Math.min(Math.abs(this.args.ySpeed),10)) / 40
              // });
            }

            this.args.groundAngle = newAngle;
            this.lastAngles.splice(0); // this.args.ignore = this.args.ignore || 5;

            var slopeDir = -this.args.groundAngle / (Math.PI * 0.4);
            var gSpeed = 0;
            gSpeed += xSpeedOriginal || -xMove;
            gSpeed += ySpeedOriginal * slopeDir;

            if (blockers && blockers.length) {
              gSpeed = 0;
            }

            if (this.args.mode % 2 == 1) {
              gSpeed *= -1;
            } // if(ySpeedOriginal)
            // {
            // 	gSpeed *= 0.75;
            // }


            if (_typeof(solid) === 'object') {
              this.args.standingLayer = solid;

              if (solid.offsetXChanged) {
                gSpeed -= solid.offsetXChanged;
                this.args.x += solid.offsetXChanged;
              }
            }

            if (gSpeed) {
              this.args.gSpeed = gSpeed;
            } // this.args.x += gSpeed < 0 ? backPosition[0] : forePosition[0];
            // this.args.y += gSpeed < 0 ? backPosition[1] : forePosition[1];
            // this.args.xSpeed = 0;
            // this.args.ySpeed = 0;

          } else if (!this.args.dead && this.args.startled < 175 && (forePosition && forePosition[2] && (!backPosition || !backPosition[3]) || (!forePosition || !forePosition[3]) && backPosition && backPosition[2])) {
            this.args.falling = false;
            this.args.gSpeed = xSpeedOriginal;
            this.args.xSpeed = 0;
            this.args.ySpeed = 0;
            this.args["float"] = this.args["float"] || 1;
            this.args.x += xSpeedOriginal;
            this.args.y -= forePosition[1] || backPosition[1];
            return;
          }

          if (Math.abs(this.args.gSpeed) < 1) {// this.args.gSpeed = 0; //Math.sign(this.args.gSpeed);
          }
        }
      } else if (this.args.ySpeed > 0) {
        if (this.args.mode === MODE_LEFT || this.args.mode === MODE_RIGHT) {
          var _direction2 = this.args.mode === MODE_LEFT ? -1 : 1;

          this.args.direction = _direction2;
          this.args.groundAngle = Math.PI / 2 * _direction2;
        } // this.args.mode = MODE_FLOOR;


        if (xSpeedOriginal && !this.args.falling) {
          this.args.gSpeed = Math.floor(xSpeedOriginal);
        }

        if (airPoint && (yPointDir === ySpeedDir || !yPointDir && ySpeedDir === 1)) {
          this.args.x = Number(airPoint[0]);
          this.args.y = Number(airPoint[1]);
          this.args.falling = false;
        }
      }

      if (!tileMap.getSolid(this.x + this.args.width / 2 * Math.sign(this.args.xSpeed), this.y, this.args.layer)) {
        if (Math.abs(this.args.xSpeed) > this.args.xSpeedMax) {
          this.args.xSpeed = this.args.xSpeedMax * Math.sign(this.args.xSpeed);
        }

        if (Math.abs(this.args.ySpeed) > this.args.ySpeedMax) {
          this.args.ySpeed = this.args.ySpeedMax * Math.sign(this.args.ySpeed);
        }
      }

      if (airPoint === false) {
        if (this.args.xSpeed) {
          var edgeTest = this.willStick ? false : this.getMapSolidAt(this.x + (1 + radius) * Math.sign(this.args.xSpeed), this.y - this.args.height / 2);
          var topTest = this.getMapSolidAt(this.x, this.y - 24);

          if (!edgeTest) {
            this.args.x = Number(this.args.x) + Number(this.args.xSpeed);
          }

          if (topTest) {
            this.args.ySpeed += topTest.yOffsetChanged;
            this.args.y += this.args.height;
          }
        }

        if (this.args.ySpeed) {
          this.args.y = Number(Number(this.args.y) + Number(this.args.ySpeed));

          if (this.args.flying && this.args.ySpeed < 0 && upDistance > 0) {
            this.args.y += upMargin - upDistance + 4;
            this.args.ySpeed = 0;
          }
        }
      } else if (this.viewport && this.ySpeedLast > 0) {
        if (this.viewport.tileMap.getSolid(this.args.x, this.args.y) && !this.viewport.tileMap.getSolid(this.args.x, this.args.y - 1)) {
          this.args.y--;
        }
      }

      if (this.args.standingOn instanceof PointActor) {
        var groundTop = this.args.standingOn.y + -this.args.standingOn.args.height + -1;

        if (this.y < groundTop || this.args.ySpeed < 0) {
          this.args.standingOn = null;
        }
      }
    }
  }, {
    key: "checkDropDash",
    value: function checkDropDash() {
      var _this7 = this;

      if (this.dropDashCharge && this.args.mode === MODE_FLOOR) {
        var dropBoost = this.dropDashCharge * Math.sign(this.args.direction);
        this.dropDashCharge = 0;
        this.onNextFrame(function () {
          _this7.args.gSpeed += dropBoost;
          _this7.args.rolling = true;
        });
        var _viewport2 = this.viewport;
        var dustParticle = new _Tag.Tag('<div class = "particle-dust">');
        var dustPoint = this.rotatePoint(this.args.gSpeed, 0);
        dustParticle.style({
          '--x': dustPoint[0] + this.x,
          '--y': dustPoint[1] + this.y,
          'z-index': 0,
          opacity: Math.random() * 2
        });

        _viewport2.particles.add(dustParticle);

        setTimeout(function () {
          _viewport2.particles.remove(dustParticle);
        }, 350);
      }
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      var _this8 = this;

      if (!this.viewport) {
        return;
      }

      if (this.focused) {
        this.args.cameraMode = 'panning';
        return;
      }

      if (this.viewport.args.cutScene) {
        this.args.cameraMode = 'cutScene';
        return;
      }

      if (this.args.bossMode) {
        this.args.cameraMode = 'boss';
        return;
      }

      if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.args.cameraMode = this.args.standingOn.args.cameraMode;
      } else if (this.args.localCameraMode) {
        this.args.cameraMode = this.args.localCameraMode;
      } else if (this.controllable) {
        if (!this.args.falling && this.args.rolling && this.args.jumpBlocked) {
          this.args.cameraMode = 'tube';
        } else if (!this.args.falling || this.getMapSolidAt(this.x, this.y + 24)) {
          var forwardSolid = this.getMapSolidAt(this.x + 32 * this.args.direction, this.y + 24);
          var forwardDeepSolid = this.getMapSolidAt(this.x + 32 * this.args.direction, this.y + 96);
          var underSolid = this.getMapSolidAt(this.x + 0 * this.args.direction, this.y + 48);

          if (this.args.mode === MODE_FLOOR && this.args.groundAngle === 0) {
            if (!underSolid && forwardSolid && !this.args.grinding && !this.args.skimming) {
              this.args.cameraMode = 'bridge';
            } // else if(!forwardSolid && !forwardDeepSolid && !this.args.grinding && !this.args.skimming)
            // {
            // 	this.args.cameraMode = 'cliff';
            // }
            else {
              this.args.cameraMode = 'normal';
            }
          } else {
            this.args.cameraMode = 'normal';
          }
        } else {
          if (this.getMapSolidAt(this.x + 0 * this.args.direction, this.y + 64)) {
            this.args.cameraMode = 'normal';
          } else if (this.fallTime > 15) {
            this.args.cameraMode = 'aerial';
          }

          this.viewport.onFrameOut(45, function () {
            if (_this8.args.cameraMode === 'airplane') {
              return;
            }

            if (_this8.args.falling && Math.abs(_this8.args.xSpeed > 25) && !_this8.getMapSolidAt(_this8.x, _this8.y + 480)) {
              _this8.args.cameraMode = 'airplane';
            }
          });
        }
      }
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler(other) {
      if (this.ignores.has(other)) {
        return false;
      }

      if (other.ignores.has(this)) {
        return false;
      }

      if (this.args.dead || other.args.dead) {
        return;
      }

      if (other === this.args.hangingFrom) {
        return false;
      }

      if (this.isGhost || other.isGhost) {
        return;
      }

      var type;

      if (other.y <= this.y - this.args.height) {
        this.args.collType = 'collision-top';
        type = 0;
      } else if (other.x < this.x - Math.floor(this.args.width / 2)) {
        this.args.collType = 'collision-left';
        type = 1;
      } else if (other.x >= this.x + Math.floor(this.args.width / 2)) {
        this.args.collType = 'collision-right';
        type = 3;
      } else if (other.y >= this.y) {
        this.args.collType = 'collision-bottom';
        type = 2;
      } else {
        this.args.collType = 'collision-intersect';
        type = -1; // this.solid && !this.isVehicle && this.popOut(other);
      }

      if (!this.viewport) {
        return;
      }

      if (!this.viewport.collisions.has(this)) {
        this.viewport.collisions.set(this, new Map());
      }

      if (!this.viewport.collisions.has(other)) {
        this.viewport.collisions.set(other, new Map());
      } // if(this.viewport.collisions.get(this).has(other))
      // {
      // 	return;
      // }


      var invertType = type > -1 ? (type + 2) % 4 : type;
      var collisionListA = this.viewport.collisions.get(this, type);
      var collisionListB = this.viewport.collisions.get(other, invertType); // other.pause(true);

      collisionListA.set(other, type);
      collisionListB.set(this, invertType);
      this.viewport.collisions.set(other, collisionListB);
      this.collideB(other, type);
      other.collideB(this, invertType);
      var ab = this.collideA(other, type);
      var ba = other.collideA(this, invertType);
      var result = ab || ba;
      this.args.colliding = this.colliding = this.colliding || result || false;
      return result;
    }
  }, {
    key: "checkBelow",
    value: function checkBelow() {
      var _testX,
          _testY,
          _this9 = this;

      var testX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var testY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      testX = (_testX = testX) !== null && _testX !== void 0 ? _testX : this.x;
      testY = (_testY = testY) !== null && _testY !== void 0 ? _testY : this.y;
      var lPoint = [];
      var rPoint = [];
      var spread = 0;

      switch (this.args.mode) {
        case MODE_FLOOR:
          lPoint[0] = testX + spread;
          lPoint[1] = testY + 1;
          rPoint[0] = testX - spread;
          rPoint[1] = testY + 1;
          break;

        case MODE_LEFT:
          lPoint[0] = testX - 1;
          lPoint[1] = testY + spread;
          rPoint[0] = testX - 1;
          rPoint[1] = testY - spread;
          break;

        case MODE_CEILING:
          lPoint[0] = testX - spread;
          lPoint[1] = testY - 1;
          rPoint[0] = testX + spread;
          rPoint[1] = testY - 1;
          break;

        case MODE_RIGHT:
          lPoint[0] = testX + 1;
          lPoint[1] = testY + spread;
          rPoint[0] = testX + 1;
          rPoint[1] = testY - spread;
          break;
      }

      var below = this.getMapSolidAt.apply(this, lPoint); // if(!below)
      // {
      // 	below = this.getMapSolidAt(...rPoint);
      // }

      if (Array.isArray(below)) {
        below = below.filter(function (x) {
          return x.callCollideHandler(_this9);
        }).length;
      }

      return below;
    }
  }, {
    key: "processInput",
    value: function processInput() {
      if (this.controllable && this.args.standingOn && this.args.standingOn.isVehicle && this === _Bindable.Bindable.make(this.args.standingOn.occupant)) {
        if (this.args.modeTime < 5) {
          return;
        }

        this.viewport.auras.add(this.args.standingOn);
        var vehicle = this.args.standingOn;
        vehicle.xAxis = this.xAxis;
        vehicle.yAxis = this.yAxis;
        vehicle.stayStuck = this.stayStuck;
        vehicle.willStick = this.willStick;
        this.processInputVehicle();
        this.args.direction = vehicle.args.direction;
        this.args.facing = vehicle.args.facing;
        this.args.layer = vehicle.args.layer;
        this.args.mode = vehicle.args.mode;
        this.args.angle = vehicle.args.angle; // const seatX = (vehicle.args.seatX || 0) * this.args.direction;
        // const seatY = (vehicle.args.seatY || 0);
        // this.args.x = vehicle.args.x + seatX;
        // this.args.y = vehicle.args.y + vehicle.args.height + seatY;
      } else if (this.controllable) {
        this.processInputDirect();
      }
    }
  }, {
    key: "processInputDirect",
    value: function processInputDirect() {
      var xAxis = this.xAxis;
      var yAxis = this.yAxis;
      var gSpeedMax = this.args.gSpeedMax;

      if (this.running) {
        gSpeedMax = RUNNING_SPEED;
      } else if (this.crawling) {
        gSpeedMax = CRAWLING_SPEED;
      }

      var drag = this.getLocalDrag();

      if (this.noClip) {
        if (!this.args.ignore) {
          this.args.xSpeed += xAxis * this.args.airAccel * drag;
          this.args.ySpeed += yAxis * this.args.airAccel * drag;

          if (!xAxis) {
            this.args.xSpeed = 0;
          }

          if (!yAxis) {
            this.args.ySpeed = 0;
          }
        }
      } else if (!this.args.falling) {
        if (!this.args.rolling && !this.yAxis && !this.spindashCharge) {
          var axisSign = Math.sign(xAxis);
          var sign = Math.sign(gSpeed);
          var gSpeed = this.args.gSpeed;

          if (!this.args.rolling && !this.args.climbing && !this.args.ignore && !this.args.wallSticking) {
            if (axisSign === sign || !sign) {
              gSpeed += xAxis * this.args.accel * drag;

              if (Math.abs(axisSign - sign) === 2) {
                this.args.ignore = 10;
              }
            } else if (!this.args.ignore) {
              gSpeed += xAxis * this.args.accel * drag * this.args.skidTraction;
            }
          } // if(Math.abs(gSpeed) > gSpeedMax)
          // {
          // 	gSpeed = gSpeedMax * Math.sign(gSpeed);
          // }


          if (!Math.sign(this.args.gSpeed) || Math.sign(this.args.gSpeed) === Math.sign(gSpeed)) {
            if (this.args.pushing && Math.sign(xAxis) !== Math.sign(this.args.pushing)) {
              this.args.gSpeed = 0;
            } else if (!xAxis || Math.abs(gSpeed) < gSpeedMax || Math.sign(gSpeed) !== Math.sign(xAxis)) {
              this.args.gSpeed = gSpeed;
            }
          } else {
            this.args.gSpeed = 0;
            return;
          }
        }
      } else if (this.args.falling && xAxis && Math.abs(this.args.xSpeed) < this.args.xSpeedMax) {
        if (Math.abs(this.args.xSpeed) < this.args.gSpeedMax && !this.args.ignore) {
          this.args.xSpeed += xAxis * this.args.airAccel * drag;
        } // const tileMap = this.viewport.tileMap;
        // if(!this.noClip && this.getMapSolidAt(this.x + (this.args.width / 2) * Math.sign(this.args.xSpeed), this.y))
        // {
        // 	this.args.xSpeed = 0;
        // }

      }

      if (xAxis < 0 && this.args.gSpeed && !this.args.ignore) {
        if (!this.args.climbing) {
          this.args.facing = 'left';
        }

        if (!this.args.grinding || Math.abs(this.args.gSpeed) < 3) {
          this.args.direction = -1;
        }
      }

      if (xAxis > 0 && this.args.gSpeed && !this.args.ignore) {
        if (!this.args.climbing) {
          this.args.facing = 'right';
        }

        if (!this.args.grinding || Math.abs(this.args.gSpeed) < 3) {
          this.args.direction = 1;
        }
      }

      if (this.args.currentSheild instanceof _StarSheild.StarSheild) {
        return;
      }

      if (this.aAxis < -0.75) {
        if (this.inventory.has(_ElectricSheild.ElectricSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_ElectricSheild.ElectricSheild))[0];
        } else {
          this.args.currentSheild = '';
        }
      }

      if (this.aAxis > +0.75) {
        if (this.inventory.has(_FireSheild.FireSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_FireSheild.FireSheild))[0];
        } else {
          this.args.currentSheild = '';
        }
      }

      if (this.bAxis < -0.75) {
        if (this.inventory.has(_BubbleSheild.BubbleSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_BubbleSheild.BubbleSheild))[0];
        } else {
          this.args.currentSheild = '';
        }
      }

      if (this.bAxis > +0.75) {
        if (this.inventory.has(_NormalSheild.NormalSheild)) {
          this.args.currentSheild = _toConsumableArray(this.inventory.get(_NormalSheild.NormalSheild))[0];
        } else {
          this.args.currentSheild = '';
        }
      }
    }
  }, {
    key: "processInputVehicle",
    value: function processInputVehicle() {
      this.args.standingOn.processInputDirect();
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      return this.solid;
    }
  }, {
    key: "collideB",
    value: function collideB(other) {}
  }, {
    key: "findDownSolid",
    value: function findDownSolid(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;

      if (actor.args.groundAngle === 0) {
        var regions = actor.viewport.regionsAtPoint(point[0], point[1]);

        var _iterator22 = _createForOfIteratorHelper(regions),
            _step22;

        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var region = _step22.value;

            if (actor.args.mode === MODE_FLOOR && -1 + point[1] === region.y + -region.args.height && Math.abs(actor.args.gSpeed) >= region.skimSpeed) {
              return -1 + i;
            }
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
      }

      if (tileMap.getSolid(point[0], point[1], actor.args.layer)) {
        return i;
      }

      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (a) {
        return a.args !== actor.args && a.callCollideHandler(actor) && a.solid;
      });

      if (actors.length > 0) {
        return i;
      }
    }
  }, {
    key: "findUpSpace",
    value: function findUpSpace(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;

      if (actor.args.groundAngle <= 0) {
        var regions = actor.viewport.regionsAtPoint(point[0], point[1]);

        var _iterator23 = _createForOfIteratorHelper(regions),
            _step23;

        try {
          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
            var region = _step23.value;

            if (actor.args.mode !== MODE_FLOOR || point[1] !== 1 + region.y + -region.args.height || Math.abs(actor.args.gSpeed) <= region.skimSpeed) {
              var _actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
                return x.args !== actor.args && x.callCollideHandler(actor) && x.solid;
              });

              if (_actors.length === 0) {
                if (!tileMap.getSolid(point[0], point[1], actor.args.layer)) {
                  return i;
                }
              }
            }
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }
      }

      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(function (x) {
        return x.args !== actor.args && x.callCollideHandler(actor) && x.solid;
      });

      if (actors.length === 0) {
        if (!tileMap.getSolid(point[0], point[1], actor.args.layer)) {
          return i;
        }
      }
    }
  }, {
    key: "findNextStep",
    value: function findNextStep(offset) {
      if (!this.viewport) {
        return;
      }

      if (this.stepCache[offset] !== undefined) {
        return this.stepCache[offset];
      }

      var viewport = this.viewport;
      var tileMap = viewport.tileMap;
      var maxStep = this.maxStep * (this.args.falling && !this.args.xSpeed ? 3 : 1);
      var radius = Math.max(this.args.width / 2, 1);
      var sign = Math.sign(offset);
      var downFirstSolid = false;
      var upFirstSpace = false;
      var prevUp = 0,
          prevDown = 0,
          prev = 0;
      var col = 0;

      for (; col < Math.abs(offset); col += 1) {
        downFirstSolid = false;
        upFirstSpace = false;
        var offsetPoint = void 0;
        var columnNumber = (1 + col) * sign;

        switch (this.args.mode) {
          case MODE_FLOOR:
            offsetPoint = [columnNumber, 1];
            break;

          case MODE_RIGHT:
            offsetPoint = [1, -columnNumber];
            break;

          case MODE_CEILING:
            offsetPoint = [-columnNumber, -1];
            break;

          case MODE_LEFT:
            offsetPoint = [-1, columnNumber];
            break;
        }

        downFirstSolid = this.castRay(maxStep // * (1+col)
        , this.downAngle, offsetPoint, this.findDownSolid);

        if (downFirstSolid === false) {
          return [false, false, true];
        }

        var downDiff = prevDown - downFirstSolid;

        if (Math.abs(downDiff) >= maxStep) {
          return [false, false, downDiff < 0, downDiff > 0];
        }

        if (downFirstSolid === 0) {
          var _offsetPoint = void 0;

          switch (this.args.mode) {
            case MODE_FLOOR:
              _offsetPoint = [columnNumber, 0];
              break;

            case MODE_RIGHT:
              _offsetPoint = [0, -columnNumber];
              break;

            case MODE_CEILING:
              _offsetPoint = [-columnNumber, 0];
              break;

            case MODE_LEFT:
              _offsetPoint = [0, columnNumber];
              break;
          }

          var upLength = +1 + maxStep;
          upFirstSpace = this.castRay(upLength, this.upAngle, _offsetPoint, this.findUpSpace);
          var upDiff = Math.abs(prevUp - upFirstSpace);

          if (upFirstSpace === false) {
            return [false, false, false, true];
          }

          if (upDiff >= maxStep) {
            return [false, false, false, true];
          }

          prev = prevUp = upFirstSpace;
        } else {
          prev = prevDown = downFirstSolid;
        }

        if (upFirstSpace !== false) {
          this.stepCache[col * sign] = [col * sign, upFirstSpace, false];
        } else {
          this.stepCache[col * sign] = [col * sign, -downFirstSolid, false];
        }
      }

      if (upFirstSpace !== false) {
        return [col * sign, upFirstSpace, false];
      }

      return [col * sign, -downFirstSolid, false];
    }
  }, {
    key: "castRay",
    value: function castRay() {
      var length = 1;

      var callback = function callback() {};

      var angle = Math.PI / 2;
      var offset = [0, 0];

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      switch (args.length) {
        case 2:
          length = args[0];
          callback = args[1];
          break;

        case 3:
          length = args[0];
          angle = args[1];
          callback = args[2];
          break;

        case 4:
          length = args[0];
          angle = args[1];
          offset = args[2];
          callback = args[3];
          break;
      }

      var hit = false;

      for (var i = 0; i < Math.floor(length); i++) {
        var bottom = [this.args.x + offset[0] + i * Math.cos(angle), this.args.y + offset[1] + i * Math.sin(angle)];
        var retVal = callback(i, bottom, this);

        if (retVal !== undefined) {
          return retVal;
        }
      }

      return false;
    }
  }, {
    key: "doJump",
    value: function doJump(force) {
      if (this.args.ignore || this.args.falling || !this.args.landed || this.args["float"]) {
        return;
      }

      if (this.args.standingOn && this.args.standingOn.args.yForce) {
        force += Math.max(0, this.args.standingOn.args.yForce * 0.25);
      } else if (this.args.standingOn && this.args.standingOn.yLast) {
        force += Math.max(0, this.args.standingOn.yLast - this.args.standingOn.args.y);
      }

      var radius = this.args.width / 2;
      var scanRadius = Math.min(radius, 4);
      var backPosition = this.findNextStep(-scanRadius);
      var forePosition = this.findNextStep(+scanRadius);
      var sensorSpread = scanRadius * 2;
      var groundAngle = Math.atan2(backPosition[1] - forePosition[1], Math.ceil(sensorSpread));
      this.args.ignore = 6;
      this.args.pushing = false;
      this.args.landed = false;
      this.args.falling = true;
      var originalMode = this.args.mode;

      switch (this.args.mode) {
        case MODE_FLOOR:
          this.args.y -= 16;
          break;

        case MODE_RIGHT:
          groundAngle += -Math.PI / 2;
          this.args.x += -this.args.width / 2;
          break;

        case MODE_CEILING:
          groundAngle += Math.PI;
          this.args.y += this.args.normalHeight || this.args.height;
          break;

        case MODE_LEFT:
          groundAngle += Math.PI / 2;
          this.args.x += this.args.width / 2;
          break;
      }

      var gSpeedReal = this.args.gSpeed;

      if (this.args.standingOn && this.args.standingOn.args.convey) {
        gSpeedReal += this.args.standingOn.args.convey;
      }

      this.args.standingOn = null;
      this.args.xSpeed = gSpeedReal * Math.cos(groundAngle);
      this.args.ySpeed = gSpeedReal * Math.sin(groundAngle);
      var jumpAngle = groundAngle - Math.PI / 2;
      var xJump = force * Math.cos(jumpAngle);
      var yJump = force * Math.sin(jumpAngle);

      if (Math.abs(xJump) < 0.01) {
        xJump = 0;
      }

      if (Math.abs(yJump) < 0.01) {
        yJump = 0;
      }

      this.args.airAngle = jumpAngle;
      this.args.xSpeed += xJump;
      this.args.ySpeed += yJump;
      this.args.jumpedAt = this.y;
      this.args.jumping = true;
      var tileMap = this.viewport.tileMap;

      if (tileMap.getSolid(this.x + this.args.width / 2 * Math.sign(this.args.xSpeed), this.y, this.args.layer)) {
        // if(tileMap.getSolid(this.x + (1 + this.args.width / 2) * Math.sign(this.args.xSpeed), this.y, this.args.layer))
        // {
        // 	this.args.x -= 2 * Math.sign(this.args.xSpeed);
        // }
        this.args.xSpeed = 0;
      }

      this.args.rolling = false;
      this.args.mode = MODE_FLOOR;
      this.args.groundAngle = 0;
      this.args.gSpeed = 0;
    }
  }, {
    key: "impulse",
    value: function impulse(magnitude, direction) {
      var willFall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      this.impulseMag = magnitude;
      this.impulseDir = direction;
      this.impulseFal = willFall;
    }
  }, {
    key: "rad2deg",
    value: function rad2deg(rad) {
      var deg = 180 / Math.PI * rad;

      if (deg > 0) {
        return Math.floor(deg * 10) / 10;
      }

      return Math.ceil(deg * 10) / 10;
    }
  }, {
    key: "roundAngle",
    value: function roundAngle(angle, segments) {
      segments /= 2;
      var rAngle = Math.round(angle / (Math.PI / segments)) * Math.PI / segments;
      return rAngle;
    }
  }, {
    key: "findNearestActor",
    value: function findNearestActor(selector, maxDistance) {
      var _this10 = this;

      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var cells = viewport.getNearbyColCells(this);
      var actors = new Map();
      cells.map(function (s) {
        return s.forEach(function (a) {
          if (a === _this10) {
            return;
          }

          if (a.args.gone) {
            return;
          }

          if (!selector(a)) {
            return;
          }

          var distance = _this10.distanceFrom(a);

          var angle = Math.atan2(a.y - _this10.y, a.x - _this10.x);

          if (Math.abs(distance) > maxDistance) {
            return;
          }

          actors.set(distance, a);
        });
      });

      var distances = _toConsumableArray(actors.keys());

      var shortest = Math.min.apply(Math, _toConsumableArray(distances));
      var closest = actors.get(shortest);
      return closest;
    }
  }, {
    key: "immune",
    value: function immune(other) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

      if (this.args.mercy) {
        return true;
      }

      var shield = this.args.currentSheild;

      if (shield && shield.immune && shield.immune(this, other, type)) {
        return true;
      }

      return false;
    }
  }, {
    key: "damage",
    value: function damage(other) {
      var _this11 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

      if (this.args.mercy) {
        return;
      }

      this.viewport.onFrameOut(180, function () {
        return _this11.args.mercy = false;
      });
      var damageEvent = new CustomEvent('damage', {
        cancelable: true,
        detail: {
          other: other,
          type: type
        }
      });

      if (!this.immune(other, type)) {
        if (!this.dispatchEvent(damageEvent)) {
          if (!damageEvent.detail.immune) {
            this.args.y -= 8;
            this.startle(other);
            this.args.mercy = true;

            if (this.viewport.settings.rumble) {
              this.controller.rumble({
                duration: 350,
                strongMagnitude: 1.0,
                weakMagnitude: 1.0
              });
            }
          }

          return;
        }
      } else {
        return;
      }

      if (this.args.rings) {
        this.loseRings();
        this.args.rings = 0;
        this.startle(other);
        this.args.mercy = true;

        if (this.viewport.settings.rumble) {
          this.controller.rumble({
            duration: 350,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          });
          this.onTimeout(350, function () {
            _this11.controller.rumble({
              duration: 150,
              strongMagnitude: 0.5,
              weakMagnitude: 1.0
            });
          });
        }
      } else if (this.controllable) {
        this.die();

        if (this.viewport.settings.rumble) {
          this.controller.rumble({
            duration: 450,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          });
        }
      }
    }
  }, {
    key: "startle",
    value: function startle(other) {
      if (this.noClip) {
        return;
      }

      var direction = Math.sign(this.args.xSpeed || this.args.gSpeed || this.args.direction);
      this.args.jumping = false;
      this.args.falling = true;
      this.args.startled = 180;
      this.args.ignore = 30;
      this.args["float"] = 1;
      this.args.xSpeed = -2.25 * direction;
      this.args.ySpeed = -8.00;
      this.args.gSpeed = 0;
      this.args.standingOn = false;

      if (this.args.mode === MODE_CEILING) {
        this.args.xSpeed *= -1;
        this.args.ySpeed *= -1;
      }
    }
  }, {
    key: "checkSolidActors",
    value: function checkSolidActors(x) {
      if (x.args === this.args) {
        return false;
      }

      if (!x.solid) {
        return false;
      }

      if (x.args.platform || x.isVehicle) {
        if (this.y <= x.y + -x.args.height && this.args.ySpeed >= 0) {
          return true;
        }

        return false;
      }

      return true;
    }
  }, {
    key: "findSolid",
    value: function findSolid(i, point, actor) {
      if (!actor.viewport) {
        return;
      }

      var viewport = actor.viewport;
      var tileMap = viewport.tileMap;
      var actors = viewport.actorsAtPoint(point[0], point[1]).filter(actor.checkSolidActors.bind(actor));

      if (actors.length > 0) {
        return i;
      }

      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (actor.upScan) {
        actor.lastLayer = solid;
      }

      if (solid) {
        return i;
      }
    }
  }, {
    key: "findSolidTile",
    value: function findSolidTile(i, point, actor) {
      var solid = tileMap.getSolid(point[0], point[1], actor.args.layer);

      if (this.upScan) {
        actor.lastLayer = solid;
      }

      if (solid) {
        return i;
      }
    }
  }, {
    key: "scanForward",
    value: function scanForward(speed) {
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
      var scanActors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var dir = Math.sign(speed);
      var radius = this.args.width / 2;
      var scanDist = Math.abs(speed);
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var tileMap = viewport.tileMap;
      var startPoint = this.args.falling ? [radius * -dir, -this.args.height * height] : this.rotatePoint(radius * -dir, this.args.height * height);
      return this.castRay(scanDist + this.args.width, this.args.falling ? [Math.PI, 0, 0][dir + 1] : this.realAngle + [0, 0, Math.PI][dir + 1], startPoint, scanActors ? this.findSolid : this.findSolidTile);
    }
  }, {
    key: "scanBottomEdge",
    value: function scanBottomEdge() {
      var _this12 = this;

      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var tileMap = this.viewport.tileMap;
      var radius = this.args.width / 2;
      var leftCorner = tileMap.getSolid(this.x - radius, this.y - 1, this.args.layer);
      var rightCorner = tileMap.getSolid(this.x + radius, this.y - 1, this.args.layer);

      if (leftCorner && rightCorner) {
        return;
      }

      return this.castRay(this.args.width, direction < 0 ? Math.PI : 0, [-direction * radius, 0], function (i, point) {
        var actors = _this12.viewport.actorsAtPoint(point[0], point[1]).filter(function (a) {
          return a.args !== _this12.args;
        });

        if (!actors.length && !tileMap.getSolid(point[0], point[1] + 1, _this12.args.layer)) {
          return i;
        }
      });
    }
  }, {
    key: "scanVerticalEdge",
    value: function scanVerticalEdge() {
      var _this13 = this;

      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var tileMap = this.viewport.tileMap;
      return this.castRay(this.args.height + 1, Math.PI / 2, [direction * this.args.width / 2, -this.args.height], function (i, point) {
        var actors = _this13.viewport.actorsAtPoint(point[0], point[1]).filter(function (a) {
          return a.args !== _this13.args;
        });

        if (actors.length || tileMap.getSolid(point[0], point[1], _this13.args.layer)) {
          return i;
        }
      });
    }
  }, {
    key: "realAngle",
    get: function get() {
      if (!this.args.falling && this.args.standingOn) {
        return this.args.standingOn.realAngle;
      }

      var groundAngle = Number(this.args.groundAngle);

      if (this.args.falling) {
        return -groundAngle - Math.PI;
      }

      var trajectory;

      switch (this.args.mode) {
        case 0:
          trajectory = -groundAngle - Math.PI;
          break;

        case 1:
          trajectory = -groundAngle - Math.PI / 2;
          break;

        case 2:
          trajectory = -groundAngle;
          break;

        case 3:
          trajectory = -groundAngle + Math.PI / 2;
          break;
      }

      return trajectory;
    }
  }, {
    key: "downAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return Math.PI / 2;
          break;

        case MODE_RIGHT:
          return 0;
          break;

        case MODE_CEILING:
          return -Math.PI / 2;
          break;

        case MODE_LEFT:
          return Math.PI;
          break;
      }
    }
  }, {
    key: "upAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return -Math.PI / 2;
          break;

        case MODE_RIGHT:
          return Math.PI;
          break;

        case MODE_CEILING:
          return Math.PI / 2;
          break;

        case MODE_LEFT:
          return 0;
          break;
      }
    }
  }, {
    key: "leftAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return Math.PI;
          break;

        case MODE_RIGHT:
          return -Math.PI / 2;
          break;

        case MODE_CEILING:
          return 0;
          break;

        case MODE_LEFT:
          return Math.PI / 2;
          break;
      }
    }
  }, {
    key: "rightAngle",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return 0;
          break;

        case MODE_RIGHT:
          return Math.PI / 2;
          break;

        case MODE_CEILING:
          return Math.PI;
          break;

        case MODE_LEFT:
          return -Math.PI / 2;
          break;
      }
    }
  }, {
    key: "groundPoint",
    get: function get() {
      switch (this.args.mode) {
        case MODE_FLOOR:
          return [this.x + 0, this.y + 1];
          break;

        case MODE_RIGHT:
          return [this.x + 1, this.y + 0];
          break;

        case MODE_CEILING:
          return [this.x + 0, this.y - 1];
          break;

        case MODE_LEFT:
          return [this.x - 1, this.y + 0];
          break;
      }
    }
  }, {
    key: "rotatePoint",
    value: function rotatePoint(x, y) {
      var xRot = x * Math.cos(this.realAngle) - y * Math.sin(this.realAngle);
      var yRot = y * Math.cos(this.realAngle) + x * Math.sin(this.realAngle);
      return [xRot, yRot];
    }
  }, {
    key: "standBelow",
    value: function standBelow(other) {}
  }, {
    key: "filterSolidActors",
    value: function filterSolidActors(x) {
      if (x.args === this.args) {
        return false;
      }

      if (!x.solid) {
        return false;
      }

      if (x.args.platform || x.isVehicle) {
        if (this.y <= x.y + -x.args.height && this.args.ySpeed >= 0) {
          return true;
        }

        return false;
      }

      return true;
    }
  }, {
    key: "getMapSolidAt",
    value: function getMapSolidAt(x, y) {
      var actors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!this.viewport) {
        return;
      }

      if (actors) {
        var _actors2 = this.viewport.actorsAtPoint(x, y).filter(this.filterSolidActors.bind(this));

        if (_actors2.length > 0) {
          return _actors2;
        }
      }

      var tileMap = this.viewport.tileMap;
      return tileMap.getSolid(x, y, this.args.layer);
    }
  }, {
    key: "canRoll",
    get: function get() {
      return false;
    }
  }, {
    key: "canFly",
    get: function get() {
      return false;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "canSpindash",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return false;
    }
  }, {
    key: "isPushable",
    get: function get() {
      return false;
    }
  }, {
    key: "isVehicle",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "x",
    get: function get() {
      return this.args.x;
    }
  }, {
    key: "y",
    get: function get() {
      return this.args.y;
    }
  }, {
    key: "point",
    get: function get() {
      return [this.args.x, this.args.y];
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return false;
    }
  }, {
    key: "skidding",
    get: function get() {
      return Math.abs(this.args.gSpeed) && !this.args.grinding && Math.sign(this.args.gSpeed) !== this.args.direction;
    }
  }, {
    key: "effect",
    value: function effect(other) {}
  }, {
    key: "readInput",
    value: function readInput() {
      if (!this.controller) {
        return;
      }

      var controller = this.controller;
      this.xAxis = 0;
      this.yAxis = 0;

      if (!controller.axes) {
        return;
      }

      if (controller.axes[0]) {
        this.xAxis = controller.axes[0].magnitude;
      }

      if (controller.axes[1]) {
        this.yAxis = controller.axes[1].magnitude;
      }

      if (controller.axes[2]) {
        this.aAxis = controller.axes[2].magnitude;
      }

      if (controller.axes[3]) {
        this.bAxis = controller.axes[3].magnitude;
      }

      var buttons = controller.buttons;
      this.buttons = buttons; // if(this.args.ignore > 0)
      // {
      // 	this.xAxis = 0;
      // 	this.yAxis = 0;
      // }

      for (var i in buttons) {
        var button = buttons[i];
        var release = "release_".concat(i);
        var press = "command_".concat(i);
        var hold = "hold_".concat(i);

        if (i == 0 && button.delta === 1 || !this.args.standingOn || !this.args.standingOn.isVehicle) {
          if (button.delta === 1) {
            if (this.args.currentSheild && press in this.args.currentSheild) {
              this.args.currentSheild[press](this, button);
            }

            this[press] && this[press](button);
          } else if (button.delta === -1) {
            if (this.args.currentSheild && release in this.args.currentSheild) {
              this.args.currentSheild[release](this, button);
            }

            this[release] && this[release](button);
          } else if (button.active) {
            if (this.args.currentSheild && hold in this.args.currentSheild) {
              this.args.currentSheild[hold](this, button);
            }

            this[hold] && this[hold](button);
          }
        } else if (this.args.standingOn && this.args.standingOn.isVehicle) {
          this.args.jumping = false;
          this.args.flying = false;
          var vehicle = this.args.standingOn;

          if (button.delta === 1) {
            vehicle[press] && vehicle[press](button);
          } else if (button.delta === -1) {
            vehicle[release] && vehicle[release](button);
          } else if (button.active) {
            vehicle[hold] && vehicle[hold](button);
          }
        }
      }
    }
  }, {
    key: "command_0",
    value: function command_0() // jump
    {
      if (this.args.hangingFrom && this.args.hangingFrom.unhook) {
        var drag = this.getLocalDrag();
        this.args.ySpeed = -this.args.jumpForce * drag * 0.75;
        this.args.hangingFrom.unhook();
        return;
      }

      if (this.args.falling || this.willJump || this.args.dontJump) {
        if (this.args.standingOn && !this.args.standingOn.isVehicle) {
          if (this.args.ignore && this.args.ignore !== -4) {
            return;
          }

          this.viewport.auras["delete"](this.args.standingOn);
          this.willJump = true;
          return;
        }
      }

      if (!this.willJump) {
        if (this.yAxis < 0) {
          this.ignores.set(this.args.standingOn, 15);
          this.args.ignore = 0;
        }

        this.willJump = true;
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      if (this.canRoll && this.args.gSpeed) {
        this.args.rolling = true;
      }
    }
  }, {
    key: "release_0",
    value: function release_0() {
      if (this.args["float"]) {
        return;
      }

      if (this.args.jumping && this.args.ySpeed < -4) {
        this.args.ySpeed = -4; // this.args.ySpeed *= 0.5;
      }
    }
  }, {
    key: "distanceFrom",
    value: function distanceFrom(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var aSquared = Math.pow(this.x - x, 2);
      var bSquared = Math.pow(this.y - y, 2);
      var cSquared = aSquared + bSquared;

      if (cSquared) {
        return Math.sqrt(cSquared);
      }

      return 0;
    }
  }, {
    key: "twist",
    value: function twist(warp) {
      var _this14 = this;

      if (!this.twister) {
        var filterContainer = this.viewport.tags.bgFilters;
        var html = "<div class = \"point-actor-filter twist-filter\">";
        this.twistFilter = new _Tag.Tag(html);
        filterContainer.appendChild(this.twistFilter.node);
        this.twister = new _Twist.Twist({
          id: 'twist-' + this.args.id,
          scale: 60
        });
        this.twister.args.bindTo(['x', 'y', 'width', 'height', 'xOff', 'yOff'], function (v, k) {
          var _this14$twistFilter$s;

          _this14.twistFilter.style((_this14$twistFilter$s = {}, _defineProperty(_this14$twistFilter$s, "--".concat(k), v), _defineProperty(_this14$twistFilter$s, "filter", "url(#twist-".concat(_this14.args.id, ")")), _this14$twistFilter$s));
        });
        this.twister.render(this.twistFilter.node);
        this.onRemove(function () {
          return _this14.twistFilter.remove();
        });
      }

      this.twister.args.scale = warp;
    }
  }, {
    key: "pinch",
    value: function pinch() {
      var _this15 = this;

      var warpBg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var warpFg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (!this.pincherBg) {
        var filterContainer = this.viewport.tags.bgFilters;
        var type = this.args.type.split(' ').shift();
        var html = "<div class = \"point-actor-filter pinch-filter\">";
        this.pinchFilterBg = new _Tag.Tag(html);
        filterContainer.appendChild(this.pinchFilterBg.node);
        this.pincherBg = new _Pinch.Pinch({
          id: 'pinch-' + this.args.id,
          scale: 60
        });
        this.pincherBg.args.bindTo(['x', 'y', 'width', 'height', 'xOff', 'yOff'], function (v, k) {
          var _this15$pinchFilterBg;

          _this15.pinchFilterBg.style((_this15$pinchFilterBg = {}, _defineProperty(_this15$pinchFilterBg, "--".concat(k), v), _defineProperty(_this15$pinchFilterBg, "filter", "url(#pinch-".concat(_this15.args.id, ")")), _this15$pinchFilterBg));
        });
        this.args.yOff = 16;
        this.pincherBg.render(this.pinchFilterBg);
        this.onRemove(function () {
          return _this15.pinchFilterBg.remove();
        });
      }

      this.pincherBg.args.scale = warpBg;
    }
  }, {
    key: "droop",
    value: function droop() {
      var _this16 = this;

      var warpFactor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var xPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var half = this.args.width / 2;

      if (!this.drooperFg) {
        this.drooperFg = new _Droop.Droop({
          id: 'droop-' + this.args.id,
          width: this.args.width * 3,
          height: this.args.height * 3,
          scale: 64
        });
        this.args.bindTo(['x', 'y'], function (v, k) {
          _this16.drooperFg.args[k] = Number(v);
        });
        this.onNextFrame(function () {
          _this16.drooperFg.args.scale = Number(warpFactor * 2);

          _this16.sprite.style({
            transform: "translate(-50%, calc(".concat(warpFactor, "px + calc(-100% + 1px)))"),
            filter: "url(#droop-".concat(_this16.args.id, ")")
          });

          _this16.drooperFg.args.dx = -xPosition;
        });
        this.drooperFg.render(this.sprite);
        return;
      }

      this.drooperFg.args.scale = Number(warpFactor * 2);
      this.sprite.style({
        transform: "translate(-50%, calc(".concat(warpFactor, "px + calc(-100% + 1px)))"),
        filter: "url(#droop-".concat(this.args.id, ")")
      });
      var widthFactor = 1 - xPosition / half;
      var posFactor = xPosition / this.args.width;
      this.drooperFg.args.droopWidthLeft = "".concat(51 * widthFactor + 1, "%");
      this.drooperFg.args.droopRightStart = "".concat(51 * widthFactor, "%");
      this.drooperFg.args.droopWidthRight = "".concat(102 + -51 * widthFactor, "%");
    }
  }, {
    key: "crossRegionBoundary",
    value: function crossRegionBoundary(region) {
      if (!region || this.args["static"]) {
        return;
      } // const drag = region.args.drag;
      // this.args.xSpeed *= drag;
      // this.args.ySpeed *= drag;
      // this.args.gSpeed *= drag;


      if (this.viewport) {
        var _viewport3 = this.viewport;

        if (!this.args.gone && region.entryParticle) {
          var splash = new _Tag.Tag(region.entryParticle);

          if (splash.node) {
            splash.style({
              '--x': this.x + this.args.xSpeed,
              '--y': region.y + -region.args.height + -8,
              'z-index': 5,
              opacity: Math.random,
              '--particleScale': this.args.particleScale,
              '--time': 320
            });

            _viewport3.particles.add(splash);

            setTimeout(function () {
              return splash.node && _viewport3.particles.remove(splash);
            }, 320);
          }
        }
      }
    }
  }, {
    key: "die",
    value: function die() {
      var _this17 = this;

      if (this.args.dead) {
        return;
      }

      this.args.groundAngle = 0;
      this.args.ySpeed = 0;
      this.args.xSpeed = 0;
      this.args.jumping = false;
      this.args.falling = true;
      this.args.ignore = -1;
      this.args["float"] = 0;
      this.args.rings = 0;
      this.args.standingLayer = null;
      this.args.standingOn = null;
      this.lastLayer = null;
      this.args.dead = true;
      this.noClip = true;
      this.args.ySpeed = -12;

      if (this.y > this.viewport.meta.deathLine) {
        this.args.ySpeed = -14;
      }

      this.args.xSpeed = 0; // this.onNextFrame(()=>{
      // 	this.args.ySpeed = -8;
      // 	this.args.xSpeed = 0;
      // });

      this.viewport.onFrameOut(120, function () {
        if (!_this17.args.dead) {
          return;
        }

        _this17.respawn();
      });
    }
  }, {
    key: "respawn",
    value: function respawn() {
      if (!this.viewport) {
        return;
      }

      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args.gSpeed = 0;
      this.args.respawning = true;
      this.args.display = 'none';
      this.args.x = -this.viewport.args.x;
      this.args.y = -this.viewport.args.y;
      this.args.standingLayer = null;
      this.args.standingOn = null;
      this.lastLayer = null;
    }
  }, {
    key: "sleep",
    value: function sleep() {}
  }, {
    key: "wakeUp",
    value: function wakeUp() {}
  }, {
    key: "urlWrap",
    value: function urlWrap(url) {
      return "url(".concat(url, ")");
    }
  }, {
    key: "facePoint",
    get: function get() {
      return this.rotatePoint(-5 * this.args.direction, -14 + this.args.height);
    }
  }, {
    key: "registerDebug",
    value: function registerDebug(name) {
      window[name] = this;
    }
  }, {
    key: "loseRings",
    value: function loseRings() {
      var _this18 = this;

      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var age = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var Ring = this.viewport.objectPalette['ring'];
      this.spawnRings = this.spawnRings || 0;
      var maxSpawn = count || Math.min(this.args.rings, 18);
      var current = 0;
      var toSpawn = maxSpawn - this.spawnRings;
      var circles = Math.floor(maxSpawn / 8);

      var _loop = function _loop() {
        var ring = new Ring();
        var circle = Math.ceil(circles * current / maxSpawn);
        var angle = current % 8 * (Math.PI * 4 * circle) / maxSpawn;
        var radius = 1 * circle;
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        ring.args.x = _this18.x - cos * (circle * 8);
        ring.args.y = _this18.y - sin * (circle * 8) - _this18.args.height / 4;
        ring.args.xSpeed = 0;
        ring.args.ySpeed = -1;
        ring.noClip = true;
        ring.args["static"] = false;
        ring.args["float"] = 18;
        ring.args.ignore = 30;
        ring.args.width = 16;
        ring.args.height = 16;
        ring.dropped = true;

        _this18.viewport.onFrameOut(3 + _this18.spawnRings % 3, function () {
          _this18.viewport.spawn.add({
            object: ring
          });
        });

        _this18.spawnRings++;
        current++; // ring.args.xSpeed = this.args.xSpeed || this.args.gSpeed;
        // ring.args.ySpeed = this.args.ySpeed;

        _this18.viewport.onFrameOut(6 * circle, function () {
          ring.args.xSpeed += -cos * circle + (-0.5 + Math.random()) * 3;
          ring.args.ySpeed += -sin * circle + (-0.5 + Math.random()) * 3;
        });

        if (current % 3 === 1) {
          ring.args.decoration = true;
          ring.noClip = true;

          _this18.viewport.onFrameOut(120, function () {
            _this18.viewport.actors.remove(ring);

            if (_this18.spawnRings > 0) {
              _this18.spawnRings--;
            }
          });
        } else {
          ring.args.decoration = false;
          ring.noClip = false;

          _this18.viewport.onFrameOut(age || 360 - current % 5 * 35, function () {
            _this18.viewport.actors.remove(ring);

            if (_this18.spawnRings > 0) {
              _this18.spawnRings--;
            }
          });
        }
      };

      while (this.spawnRings < maxSpawn) {
        _loop();
      }
    }
  }, {
    key: "collect",
    value: function collect(pickup) {
      if (pickup.dropped) {
        if (this.spawnRings) {
          this.spawnRings--;
        }

        pickup.dropped = false;
      }
    }
  }, {
    key: "angleTo",
    value: function angleTo(actor) {
      return Math.atan2(this.y - actor.y, this.x - actor.x);
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(actor) {
      return Math.sqrt(Math.pow(this.y - actor.y, 2) + Math.pow(this.x - actor.x, 2));
    }
  }, {
    key: "setTile",
    value: function setTile() {
      var _this19 = this;

      var tileMap = this.viewport.tileMap;
      tileMap.ready.then(function (event) {
        var tile = tileMap.getTile(_this19.args.tileId - 1);

        if (!tile) {
          return;
        }

        _this19.args.spriteX = tile[0];
        _this19.args.spriteY = tile[1];
        _this19.args.spriteSheet = tile[2] || _this19.args.spriteSheet;
      });
    }
  }, {
    key: "halt",
    value: function halt(frameOut) {
      var _this20 = this;

      var hSpeed = this.args.hSpeed = this.args.gSpeed;
      this.args.gSpeed = 0;
      this.viewport.onFrameOut(frameOut, function () {
        _this20.args.gSpeed = hSpeed;
        _this20.args.hSpeed = 0;
      });
    }
  }, {
    key: "setAutoAttr",
    value: function setAutoAttr(property, attribute) {
      var attrMap = this.autoAttr.get(this.box);
      attrMap[attribute] = property;
    }
  }], [{
    key: "fromDef",
    value: // ringDoc = new DocumentFragment;
    function fromDef(objDef) {
      var _instance$float;

      var objArgs = {
        x: objDef.x + Math.floor(objDef.width / 2),
        y: objDef.y - 1 // , z:       objDef.id
        ,
        visible: objDef.visible,
        name: objDef.name,
        id: objDef.id
      };
      var def = new Map();

      for (var i in objArgs) {
        if (_typeof(objArgs[i]) === 'object') {
          continue;
        }

        def.set(i, objArgs[i]);
      }

      for (var _i4 in objDef.properties) {
        var property = objDef.properties[_i4];
        objArgs[property.name] = property.value;
        def.set(property.name, property.value);
      }

      objArgs.tileId = objDef.gid;
      var instance = new this(Object.assign({}, objArgs));
      instance.def = def;
      instance.args["float"] = (_instance$float = instance["float"]) !== null && _instance$float !== void 0 ? _instance$float : instance.args["float"];
      return instance;
    }
  }]);

  return PointActor;
}(_View2.View);

exports.PointActor = PointActor;

_defineProperty(PointActor, "lastClick", 0);
});

;require.register("actor/PowerupGlow.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PowerupGlow = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PowerupGlow = /*#__PURE__*/function (_PointActor) {
  _inherits(PowerupGlow, _PointActor);

  var _super = _createSuper(PowerupGlow);

  function PowerupGlow() {
    var _this;

    _classCallCheck(this, PowerupGlow);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-powerup-glow';
    _this.args.width = 64;
    _this.args.height = 64;
    return _this;
  }

  _createClass(PowerupGlow, [{
    key: "onAttached",
    value: function onAttached() {
      this.autoAttr.get(this.box)['data-closed'] = 'closed';
      this.icon = new _Tag.Tag('<div class = "powerup-icon">');
      this.halo = new _Tag.Tag('<div class = "powerup-halo">');
      this.tags.sprite.appendChild(this.icon.node);
      this.box.appendChild(this.halo.node);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      _get(_getPrototypeOf(PowerupGlow.prototype), "collideA", this).call(this, other);

      if (!other.controllable) {
        return;
      }

      this.onTimeout(125, function () {
        return _this2.args.closed = 'closed';
      });
      this.onTimeout(4500, function () {
        return _this2.args.closed = '';
      });
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return PowerupGlow;
}(_PointActor2.PointActor);

exports.PowerupGlow = PowerupGlow;
});

;require.register("actor/Projectile.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Projectile = void 0;

var _PointActor2 = require("./PointActor");

var _Explosion = require("../actor/Explosion");

var _Tag = require("curvature/base/Tag");

var _Region = require("../region/Region");

var _Spring = require("./Spring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// import { StarPost } from './StarPost';
var Projectile = /*#__PURE__*/function (_PointActor) {
  _inherits(Projectile, _PointActor);

  var _super = _createSuper(Projectile);

  function Projectile() {
    var _this;

    _classCallCheck(this, Projectile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-projectile';
    _this.args.width = 8;
    _this.args.height = 8;
    _this.removeTimer = null;
    return _this;
  }

  _createClass(Projectile, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this.removed) {
        return;
      }

      if (!this.args.falling) {
        this.args.gSpeed = 0;
        this.args.xSpeed = 0;
        this.args.ySpeed = 0;
      }

      _get(_getPrototypeOf(Projectile.prototype), "update", this).call(this);

      if (!this.args.xSpeed && !this.args.ySpeed) {
        this.explode();
      }

      if (!this.removeTimer) {
        this.removeTimer = this.onTimeout(2500, function () {
          return _this2.explode();
        });
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (other === this.args.owner || other instanceof _Region.Region || other instanceof _Spring.Spring) {
        return false;
      }

      if (other.args.gone) {
        return false;
      }

      if (other.args.currentSheild) {
        var angleTo = Math.atan2(this.x - other.x, this.y - other.y);
        this.impulse(this.args.airSpeed / 2, angleTo, true);
        this.args.falling = true;
        return;
      }

      if (!other.solid && !other.controllable) {
        return false;
      }

      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args["float"] = -1;

      if (this.args.owner && !this.args.owner.args.gone) {
        other.controllable && other.damage();
      } // this.args.x += Math.cos(this.args.angle) * (other.args.width / 2) * Math.sign(this.args.xSpeed);
      // this.args.y += Math.sin(this.args.angle) * (other.args.width / 2) * Math.sign(this.args.xSpeed);


      this.explode();
      return false;
    }
  }, {
    key: "explode",
    value: function explode() {
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-explosion">');
      particle.style({
        '--x': this.x,
        '--y': this.y
      });
      viewport.particles.add(particle);
      setTimeout(function () {
        return viewport.particles.remove(particle);
      }, 350);
      this.viewport.actors.remove(this);
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Projectile;
}(_PointActor2.PointActor);

exports.Projectile = Projectile;
});

;require.register("actor/Pulley.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pulley = void 0;

var _PointActor2 = require("./PointActor");

var _Ring = require("./Ring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Pulley = /*#__PURE__*/function (_PointActor) {
  _inherits(Pulley, _PointActor);

  var _super = _createSuper(Pulley);

  function Pulley() {
    var _this;

    _classCallCheck(this, Pulley);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args.type = 'actor-item actor-pulley';
    _this.args.convey = 0;
    _this.args.conveyed = 0;
    _this.args["float"] = -1;
    _this.noClip = true;
    return _this;
  }

  _createClass(Pulley, [{
    key: "update",
    value: function update() {
      if (this.match) {
        this.args.convey = -this.match.args.convey;
      } else {
        this.match = this.viewport.actorsById[this.args.match];
      }

      this.box && this.box.style({
        '--convey': Math.abs(this.args.convey)
      });
      this.box && this.box.style({
        '--conveyDir': Math.sign(this.args.convey)
      });
      this.args.conveyed += this.match.args.convey;
      this.box && this.box.style({
        '--conveyed': this.args.conveyed
      }); // if(Math.abs(this.args.convey) > 10
      // 	&& Math.sign(this.args.convey) === this.args.reward
      // 	&& this.viewport.args.frameId % 60 === 0
      // ){
      // 	const ring = new Ring({
      // 		static:   false
      // 		, float:  10
      // 		, ySpeed: 1
      // 		, x:this.x
      // 		, y:this.y - 192,
      // 	});
      // 	ring.scattered = true;
      // 	ring.noClip = false;
      // 	this.viewport.spawn.add({object: ring});
      // 	this.viewport.onFrameOut(100, () => {
      // 		this.viewport.actors.remove(ring);
      // 	});
      // }
      // super.update();
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return Pulley;
}(_PointActor2.PointActor);

exports.Pulley = Pulley;
});

;require.register("actor/PulleySmall.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PulleySmall = void 0;

var _Pulley2 = require("./Pulley");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PulleySmall = /*#__PURE__*/function (_Pulley) {
  _inherits(PulleySmall, _Pulley);

  var _super = _createSuper(PulleySmall);

  function PulleySmall() {
    var _this;

    _classCallCheck(this, PulleySmall);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-pulley-small';
    _this.args.convey = 0;
    _this.args["float"] = -1;
    _this.noClip = true;
    return _this;
  }

  return _createClass(PulleySmall);
}(_Pulley2.Pulley);

exports.PulleySmall = PulleySmall;
});

;require.register("actor/QuestionBlock.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuestionBlock = void 0;

var _PointActor2 = require("./PointActor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var QuestionBlock = /*#__PURE__*/function (_PointActor) {
  _inherits(QuestionBlock, _PointActor);

  var _super = _createSuper(QuestionBlock);

  function QuestionBlock() {
    var _this;

    _classCallCheck(this, QuestionBlock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "maxBounce", 4);

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _defineProperty(_assertThisInitialized(_this), "template", "<div\n\t\tclass = \"point-actor [[type]] [[collType]]\"\n\t\tstyle = \"\n\t\t\tdisplay:[[display]];\n\t\t\t--angle:[[angle]];\n\t\t\t--airAngle:[[airAngle]];\n\t\t\t--display-angle:[[_angle]];\n\t\t\t--height:[[height]];\n\t\t\t--width:[[width]];\n\t\t\t--x:[[x]];\n\t\t\t--y:[[y]];\n\t\t\"\n\t\tdata-colliding = \"[[colliding]]\"\n\t\tdata-falling   = \"[[falling]]\"\n\t\tdata-facing    = \"[[facing]]\"\n\t\tdata-angle     = \"[[angle|rad2deg]]\"\n\t\tdata-mode      = \"[[mode]]\"\n\t\tdata-empty     = \"[[empty]]\"\n\t\tcv-ref = \"box\"\n\t><div cv-ref = \"sprite\" class = \"sprite\"></div></div>");

    _this.args.type = 'actor-question-block actor-item';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.initY = null;
    _this.empty = false;
    return _this;
  }

  _createClass(QuestionBlock, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      _get(_getPrototypeOf(QuestionBlock.prototype), "collideA", this).call(this, other);

      if (this.initY === null) {
        this.initY = this.y;
      }

      if (type === 2) {
        var impulse = Math.abs(other.args.ySpeed);
        other.args.falling = true;

        if (other.args.ySpeed > 0) {
          other.args.ySpeed += this.args.ySpeed;
        } else {
          this.args.y -= impulse;
          other.args.y += impulse;
        }

        if (this.args.ySpeed > 0 && this.args.ySpeed > other.args.ySpeed) {
          other.args.ySpeed = Math.abs(other.args.ySpeed);
          other.args.y += this.args.ySpeed;
        }

        if (this.args.ySpeed < 0) {
          this.args.ySpeed = -Math.abs(this.args.ySpeed);
        }

        if (this.args.ySpeed) {
          return true;
        }

        var ySpeedMax = this.maxBounce;
        var speed = type === 2 ? -Math.abs(other.args.ySpeed) : other.args.ySpeed;

        if (Math.abs(speed) > ySpeedMax) {
          speed = ySpeedMax * Math.sign(speed);
        }

        this.args.ySpeed = speed;
        other.args.ySpeed = -other.args.ySpeed;
      }

      if (type === 2 && !this.args.empty) {
        if (!this.args.empty) {
          var monitor = new _SheildWaterMonitor.SheildWaterMonitor({
            x: this.x,
            y: this.y - 96
          });
          this.viewport.spawn.add({
            object: monitor
          });
          monitor.onRemove(function () {
            return _this2.args.empty = false;
          });
          this.args.empty = true;
        }
      }

      return true;
    }
  }, {
    key: "update",
    value: function update() {
      if (this.initY !== null) {
        if (this.initY > this.y) {
          this.args.ySpeed += 0.75;
        } else if (this.initY < this.y) {
          this.args.ySpeed -= 0.75;
        }

        if (Math.abs(this.args.y - this.initY) < 1 && Math.abs(this.args.ySpeed) < 1) {
          this.args.ySpeed = 0;
          this.args.y = this.initY;
        }
      }

      this.args.ySpeed *= 0.9;
      this.args.ySpeed = Math.floor(this.args.ySpeed * 100) / 100;
      this.args.y = Math.round(this.args.y);
      var ySpeedMax = this.maxBounce;

      if (Math.abs(this.args.ySpeed) > ySpeedMax) {
        this.args.ySpeed = ySpeedMax * Math.sign(this.args.ySpeed);
      }

      _get(_getPrototypeOf(QuestionBlock.prototype), "update", this).call(this);
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(QuestionBlock), "fromDef", this).call(this, objDef);

      obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);
      obj.args.y = obj.originalY = objDef.y;
      return obj;
    }
  }]);

  return QuestionBlock;
}(_PointActor2.PointActor);

exports.QuestionBlock = QuestionBlock;
});

;require.register("actor/RailCar.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RailCar = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RailCar = /*#__PURE__*/function (_Vehicle) {
  _inherits(RailCar, _Vehicle);

  var _super = _createSuper(RailCar);

  function RailCar() {
    var _this;

    _classCallCheck(this, RailCar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-rail-car';
    _this.args.width = 32;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.cartSpeed = _this.args.cartSpeed || 15;
    _this.args.gSpeedMax = 20;
    _this.args.decel = 0.00;
    _this.args.accel = 0.75;
    _this.args.gravity = 1; // this.args.ignore    = -1;

    _this.args.seatHeight = 44;
    _this.args.skidTraction = 0.05;
    _this.args.jumpForce = 12;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    return _this;
  }

  _createClass(RailCar, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.frontWheel = new _Tag.Tag('<div class = "rail-car-wheel rail-car-wheel-front">');
      this.backWheel = new _Tag.Tag('<div class = "rail-car-wheel rail-car-wheel-back">');
      this.frontFrag = new _Tag.Tag('<div class = "rail-car-frag rail-car-frag-front">');
      this.backFrag = new _Tag.Tag('<div class = "rail-car-frag rail-car-frag-back">');
      this.sprite.appendChild(this.frontWheel.node);
      this.sprite.appendChild(this.backWheel.node);
      this.sprite.appendChild(this.frontFrag.node);
      this.sprite.appendChild(this.backFrag.node);
    }
  }, {
    key: "update",
    value: function update() {
      this.originalSpeed = this.args.gSpeed || this.args.xSpeed;
      var lastX = this.x;

      _get(_getPrototypeOf(RailCar.prototype), "update", this).call(this);

      if (!this.sprite) {
        return;
      }

      var nowX = this.x;

      if (this.args.gSpeed !== 0 || this.args.hSpeed !== 0 || this.args.xSpeed !== 0) {
        this.sprite.classList.add('moving');
        this.args.started = true;
      }

      if (nowX === lastX && !this.args.broken && !this.args.hSpeed) {
        this.sprite.classList.remove('moving');

        if (this.args.started) {
          var viewport = this.viewport;

          if (this.args.falling && !this.args.xSpeed && !this.args.ySpeed) {
            this.breakApart();
          } else if (!this.args.falling && this.args.pushing) {
            this.breakApart();
          }
        }
      }

      if (this.occupant && !this.args.falling) {
        var speed = this.args.hSpeed || this.args.gSpeed;

        if (Math.abs(speed) < Math.abs(this.args.cartSpeed) || Math.sign(speed) !== Math.sign(this.args.cartSpeed)) {
          if (this.args.hSpeed) {
            this.args.hSpeed += Math.sign(this.args.cartSpeed) * 0.125;
          } else {
            this.args.gSpeed += Math.sign(this.args.cartSpeed) * 0.125;
          }

          if (Math.abs(this.args.gSpeed) < 1) {
            this.args.gSpeed = Math.sign(this.args.gSpeed);
          }
        }

        this.args.direction = Math.sign(this.args.hSpeed || this.args.gSpeed);
      } else {
        if (this.args.hSpeed) {
          this.args.hSpeed = this.args.xSpeed;
        } else if (this.args.xSpeed) {
          this.args.gSpeed = this.args.xSpeed;
        }
      }
    }
  }, {
    key: "breakApart",
    value: function breakApart() {
      if (!this.args.broken) {
        var viewport = this.viewport; // viewport.onFrameOut(140, () => viewport && viewport.actors.remove(this));
        // viewport.onFrameOut(120, () => this.sprite.classList.add('broken'));

        if (this.occupant) {
          this.occupant.startle();
        }

        this.sprite.classList.add('breaking');
        this.args.broken = true;
        this.args.groundAngle = 0;
        this.args.mode = 0;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.args.groundAngle = 0;
      this.args.gSpeed = 0;
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.sprite.classList.remove('breaking');
      this.sprite.classList.remove('broken');
      this.args.broken = false;
      this.args.started = false;

      _get(_getPrototypeOf(RailCar.prototype), "sleep", this).call(this);
    }
  }, {
    key: "processInputDirect",
    value: function processInputDirect() {// Don't process input at all.
    } // jump()
    // {
    // 	// Don't process input at all.
    // }

  }, {
    key: "solid",
    get: function get() {
      return !this.args.broken && !this.occupant;
    }
  }]);

  return RailCar;
}(_Vehicle2.Vehicle);

exports.RailCar = RailCar;
});

;require.register("actor/RedEyeJet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedEyeJet = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor2 = require("./PointActor");

var _Projectile = require("./Projectile");

var _MiniMace = require("./MiniMace");

var _MegaMace = require("./MegaMace");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RedEyeJet = /*#__PURE__*/function (_PointActor) {
  _inherits(RedEyeJet, _PointActor);

  var _super = _createSuper(RedEyeJet);

  function RedEyeJet(args, parent) {
    var _this;

    _classCallCheck(this, RedEyeJet);

    _this = _super.call(this, args, parent);
    _this.args.gravity = 0.4;
    _this.args.width = 96;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-red-eye-jet';
    _this.args["float"] = -1;
    _this.args.phase = 'intro';
    _this.args.hitPoints = _this.args.hitPoints || 8;
    _this.args.maxSpeed = 9;
    _this.dieSound = new Audio('/Sonic/object-destroyed.wav');
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    _this.dudSound = new Audio('/Sonic/S2_59.wav');

    _this.args.bindTo('phase', function (v) {
      return _this.args.phaseFrameId = 0;
    });

    return _this;
  }

  _createClass(RedEyeJet, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      var name;

      if (this.hanging.has(_MiniMace.MiniMace)) {
        name = 'MINI-MACE';
      } else if (this.hanging.has(_MegaMace.MegaMace)) {
        name = 'MEGA-MACE';
      }

      if (!other.controllable && !(other instanceof _Projectile.Projectile)) {
        return;
      }

      if (other instanceof _Projectile.Projectile) {}

      if (this.args.hitPoints > 0) {
        if (!(other.args.jumping || other.args.rolling || other.dashed) && !(other instanceof _Projectile.Projectile)) {
          // other.args.xSpeed = -other.args.xSpeed * 1.5;
          other.damage();
          return true;
        }
      }

      if (!this.args.falling && this.args.phase !== 'exploding') {
        if (!(other.args.jumping || other.args.rolling || other.dashed)) {
          return true;
        }

        this.box.setAttribute('data-phase', 'exploding');
        this.args.phase = 'exploding';
        this.viewport.clearCheckpoints(other.args.id);
        var viewport = this.viewport;
        viewport.onFrameOut(80, function () {
          _this2.box.setAttribute('data-phase', 'exploded');

          _this2.args.falling = true;
          _this2.args.ySpeed = -12;
          _this2.noClip = true;

          if (_this2.viewport.args.audio) {
            _this2.dieSound.volume = 0.5;

            _this2.dieSound.play();
          }
        });
        viewport.onFrameOut(100, function () {
          viewport.clearAct("".concat(other.args.name, " BEAT THE ").concat(name));
        });
        viewport.onFrameOut(100, function () {
          _this2.viewport.args.cutScene = true;
        });
        viewport.onFrameOut(150, function () {
          _this2.viewport.controlActor.controller.replay({
            axes: [1, 0, 0, 1]
          });

          _this2.viewport.controlActor.readInput();
        });
        viewport.onFrameOut(210, function () {
          _this2.viewport.controlActor.controller.replay({
            buttons: [1]
          });

          _this2.viewport.controlActor.readInput();
        });
        viewport.onFrameOut(211, function () {
          _this2.viewport.controlActor.dropDashCharge = 30;
        });
        viewport.onFrameOut(285, function () {
          _this2.viewport.controlActor.controller.replay({
            buttons: [0, 0, 0, 0, 0, 0]
          });

          _this2.viewport.controlActor.readInput();

          _this2.args.phase = 'done';
        });
        viewport.onFrameOut(500, function () {
          _this2.args.xSpeed = 0;
          _this2.args.ySpeed = 0;
          _this2.args.y = -1024;
        });
      }

      this.ignores.set(other, 15);

      if (type === 2) {
        if (this.viewport.args.audio) {
          this.dudSound.volume = 0.35 + Math.random() * -0.15;
          this.dudSound.play();
        }

        other.args.ySpeed = Math.max(7, Math.abs(other.args.ySpeed));
      }

      var xBounce = Math.max(Math.abs(other.args.xSpeed), Math.abs(this.args.xSpeed));

      if (this.args.hitPoints > 1 && this.args.falling) {
        this.args.xSpeed = other.args.xSpeed;
      } else {
        this.args.xSpeed = 0;
      }

      var damaged = false;

      if (type === 1) {
        if (this.viewport.args.audio) {
          this.hitSound.volume = 0.35 + Math.random() * -0.15;
          this.hitSound.play();
        }

        damaged = true; // other.args.x = this.x - (this.args.width / 2) * Math.sign(other.x - this.x);

        if (this.args.hitPoints > 0) {
          other.args.xSpeed = -xBounce * 1.25;
          other.args.xSpeed = Math.min(-7, -this.args.xSpeed);
          this.args.hitPoints--;
        } else {
          other.args.xSpeed = -2;
          other.args.ignore = -2;
        }
      }

      if (type === 3) {
        if (this.viewport.args.audio) {
          this.hitSound.volume = 0.35 + Math.random() * -0.15;
          this.hitSound.play();
        }

        damaged = true; // other.args.x = this.x + (this.args.width / 2) * Math.sign(other.x - this.x);

        if (this.args.hitPoints > 0) {
          other.args.xSpeed = xBounce * 1.25;
          other.args.xSpeed = Math.max(7, -this.args.xSpeed);
          this.args.hitPoints--;
        } else {
          other.args.xSpeed = 2;
          other.args.ignore = -2;
        }
      }

      if (damaged && other && other.controller && other.controller.rumble) {
        if (this.viewport.settings.rumble) {
          other.controller.rumble({
            duration: 120,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          });
          this.onTimeout(100, function () {
            other.controller.rumble({
              duration: 100,
              strongMagnitude: 0.0,
              weakMagnitude: 0.5
            });
          });
        }
      }

      if (other instanceof _Projectile.Projectile || type === 1 || type === 3 || type === 0) {
        if (!['dead', 'exploding', 'damaged', 'done'].includes(this.args.phase)) {
          this.args.phase = 'damaged';
          this.args.animation = '';
          this.args.animation = 'damaged';

          if (this.args.hitPoints === 0 && this.args.phase !== 'exploding') {
            this.box.setAttribute('data-phase', 'dead');
            this.args.animation = '';
            this.args.phase = 'dead';

            if (typeof ga === 'function') {
              ga('send', 'event', {
                eventCategory: 'boss',
                eventAction: 'defeated',
                eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
              });
            }
          }

          this.viewport.onFrameOut(20, function () {
            if (_this2.args.phase === 'intro') {
              return;
            }

            if (_this2.args.hitPoints > 0) {
              _this2.args.animation = 'attacking';
              _this2.args.phase = 'attacking';
            } else if (!['dead', 'exploding', 'done'].includes(_this2.args.phase)) {
              _this2.box.setAttribute('data-phase', 'dead');

              _this2.args.animation = 'dead';
              _this2.args.phase = 'dead';
              _this2.args.xSpeed = 0;
              other.args.score += 20000;
            }
          });
        }

        if (type === 0) {
          other.args.y = this.y - this.args.height;
          var animation = other.args.animation;
          var ySpeed = other.args.ySpeed;
          this.onNextFrame(function () {
            other.args.animation = animation;
            other.args.falling = true;
            other.args.xSpeed = -4 * Math.sign(_this2.x - other.x);
            other.args.ySpeed = -Math.floor(Math.abs(ySpeed)) || -4;
          });

          if (this.viewport.args.audio) {
            this.hitSound.volume = 0.35 + Math.random() * -0.15;
            this.hitSound.play();
          }
        }

        var gSpeed = other.args.gSpeed;
        other.args.gSpeed = -gSpeed;

        if (other.args.rolling) {
          this.onNextFrame(function () {
            other.args.gSpeed = -gSpeed;
            other.args.rolling = true;
            other.args.direction - Math.sign(gSpeed);
          });
        }
      }

      other.args.ignore = 1;

      if (!this.args.hitPoints) {
        other.args.ignore = -2;
      }

      return true;
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (!this.viewport) {
        return;
      }

      this.args.phaseFrameId++;
      this.args.frameId++;

      if (this.args.phase === 'intro') {
        if (this.hanging.has(_MiniMace.MiniMace)) {
          var _iterator = _createForOfIteratorHelper(this.hanging.get(_MiniMace.MiniMace)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mace = _step.value;
              mace.args.ropeLength = 80;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        if (this.hanging.has(_MegaMace.MegaMace)) {
          var _iterator2 = _createForOfIteratorHelper(this.hanging.get(_MegaMace.MegaMace)),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _mace = _step2.value;
              _mace.args.ropeLength = 96;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }

        this.args.maxSpeed = 12;

        if (this.args.phaseFrameId > 120) {
          console.log(this.args.phaseFrameId);
          this.args.phase = 'attacking';
        }
      } else if (this.hanging.has(_MiniMace.MiniMace)) {
        this.viewport.onFrameOut(45, function () {
          var _iterator3 = _createForOfIteratorHelper(_this3.hanging.get(_MiniMace.MiniMace)),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _mace2 = _step3.value;
              _mace2.args.ropeLength = 144;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        });
      } else if (this.hanging.has(_MegaMace.MegaMace)) {
        this.viewport.onFrameOut(45, function () {
          var _iterator4 = _createForOfIteratorHelper(_this3.hanging.get(_MegaMace.MegaMace)),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _mace3 = _step4.value;
              _mace3.args.ropeLength = 192;
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        });
      }

      if (this.args.phase === 'attacking') {
        this.args.maxSpeed = 9;

        if (this.hanging.has(_MiniMace.MiniMace)) {
          var _iterator5 = _createForOfIteratorHelper(this.hanging.get(_MiniMace.MiniMace)),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _mace4 = _step5.value;
              _mace4.args["float"] = 0;
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }

        if (this.hanging.has(_MegaMace.MegaMace)) {
          var _iterator6 = _createForOfIteratorHelper(this.hanging.get(_MegaMace.MegaMace)),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var _mace5 = _step6.value;
              _mace5.args["float"] = 0;
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }

        if (Math.abs(this.viewport.controlActor.x - this.x) > 255) {
          this.args.phase = 'chasing';
        }
      }

      if (this.args.phase === 'chasing') {
        if (Math.abs(this.viewport.controlActor.x - this.x) < 8 && this.y < this.viewport.controlActor.y) {
          this.args.phase = 'attacking';
        }
      }

      if (this.args.phase === 'exploding') {
        var viewport = this.viewport;

        if (viewport && viewport.args.frameId % 3 === 0) {
          var explosion = new _Tag.Tag('<div class = "particle-explosion">');

          if (viewport.args.audio) {
            this.hitSound.currentTime = 0;
            this.hitSound.volume = 0.35 + Math.random() * -0.15;
            this.hitSound.play();
          }

          var xOff = this.args.width * Math.random() - this.args.width / 2;
          var yOff = this.args.height * Math.random() - this.args.height / 2;
          explosion.style({
            '--x': this.x + xOff,
            '--y': this.y + yOff + -16
          });
          viewport.particles.add(explosion);
          setTimeout(function () {
            return viewport.particles.remove(explosion);
          }, 512);
        }

        _get(_getPrototypeOf(RedEyeJet.prototype), "update", this).call(this);

        return;
      }

      if (this.args.phase === 'damaged') {
        this.args.xSpeed *= 0.999;
      }

      if (this.box) {
        if (this.x - this.viewport.controlActor.x > 0) {
          if (Math.abs(this.x - this.viewport.controlActor.x) > 128) {
            this.box.setAttribute('data-looking', 'far-left');
          } else if (this.viewport.controlActor.args.direction === -1) {
            this.box.setAttribute('data-looking', 'far-left');
          } else {
            this.box.setAttribute('data-looking', 'left');
          }
        } else if (this.x - this.viewport.controlActor.x < 0) {
          this.box.setAttribute('data-looking', 'far-right');

          if (Math.abs(this.x - this.viewport.controlActor.x) > 128) {
            this.box.setAttribute('data-looking', 'far-right');
          } else if (this.viewport.controlActor.args.direction === 1) {
            this.box.setAttribute('data-looking', 'far-right');
          } else {
            this.box.setAttribute('data-looking', 'right');
          }
        }

        if (32 > this.y - this.viewport.controlActor.y) {
          this.box.setAttribute('data-ducking', 'true');
        } else {
          this.box.setAttribute('data-ducking', 'false');
        }
      }

      if (this.args.hitPoints) {
        if (['attacking', 'intro', 'chasing'].includes(this.args.phase)) {
          if (Math.abs(this.x - this.viewport.controlActor.x) > 384) {
            this.args.x = this.viewport.controlActor.x + Math.sign(this.x - this.viewport.controlActor.x) * 384;
          }

          this.args.xSpeed += -Math.sign(this.x - this.viewport.controlActor.x) * 0.35;
        }
      }

      if (this.args.hitPoints) {
        this.args.falling = true;
        this.args["float"] = -1;
      } else {
        this.args["float"] = 0;
      }

      if (this.args.phase === 'intro' || this.args.phase === 'attacking') {
        this.args.maxSpeed = 11;
      }

      if (this.args.phase === 'chasing') {
        if (Math.abs(this.x - this.viewport.controlActor.x) < 128) {
          this.args.maxSpeed = Math.max(this.args.maxSpeed, this.viewport.controlActor.args.xSpeed);
        }
      } else if (Math.abs(this.args.xSpeed) > this.args.maxSpeed) {
        this.args.xSpeed = Math.sign(this.args.xSpeed) * this.args.maxSpeed;
      }

      _get(_getPrototypeOf(RedEyeJet.prototype), "update", this).call(this);
    }
  }, {
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.body = new _Tag.Tag("<div class = \"body-center\">");
      this.bodyL = new _Tag.Tag("<div class = \"body-left\">");
      this.bodyR = new _Tag.Tag("<div class = \"body-right\">");
      this.fireA = new _Tag.Tag("<div class = \"boost-fire boost-fire-left\">");
      this.fireB = new _Tag.Tag("<div class = \"boost-fire boost-fire-right\">");
      this.eye = new _Tag.Tag("<div class = \"orange-eye\">");
      this.box.appendChild(this.body.node);
      this.box.appendChild(this.bodyL.node);
      this.box.appendChild(this.bodyR.node);
      this.box.appendChild(this.fireA.node);
      this.box.appendChild(this.fireB.node);
      this.box.appendChild(this.eye.node);
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return RedEyeJet;
}(_PointActor2.PointActor);

exports.RedEyeJet = RedEyeJet;
});

;require.register("actor/Redz.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Redz = void 0;

var _Flickie = require("./Flickie");

var _Mixin = require("curvature/base/Mixin");

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _SkidDust = require("../behavior/SkidDust");

var _CanPop = require("../mixin/CanPop");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Redz = /*#__PURE__*/function (_Mixin$from) {
  _inherits(Redz, _Mixin$from);

  var _super = _createSuper(Redz);

  function Redz() {
    var _this;

    _classCallCheck(this, Redz);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-redz';
    _this.args.animation = 'standing';
    _this.args.accel = 0.1;
    _this.args.decel = 0.5;
    _this.args.gSpeedMax = 5;
    _this.args.jumpForce = 5;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 32;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.sample = new Audio('/Sonic/object-destroyed.wav');
    _this.sample.volume = 0.6 + Math.random() * -0.3;
    return _this;
  }

  _createClass(Redz, [{
    key: "update",
    value: function update() {
      var direction = this.args.direction;

      if (this.box) {
        if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'skidding');
        } else if (this.args.moving && this.args.gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } else {
          this.box.setAttribute('data-animation', 'standing');
        }
      }

      _get(_getPrototypeOf(Redz.prototype), "update", this).call(this);
    }
  }, {
    key: "effect",
    value: function effect(other) {
      _get(_getPrototypeOf(Redz.prototype), "effect", this).call(this, other); // this.viewport.spawn.add({object:new Flickie({
      // 	x: this.args.x,
      // 	y: this.args.y,
      // })});

    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    } // get controllable() { return true; }

  }]);

  return Redz;
}(_Mixin.Mixin.from(_PointActor.PointActor, _CanPop.CanPop));

exports.Redz = Redz;
});

;require.register("actor/Ring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ring = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Ring = /*#__PURE__*/function (_PointActor) {
  _inherits(Ring, _PointActor);

  var _super = _createSuper(Ring);

  function Ring() {
    var _this$args$static, _this$args$dropped, _this$args$delay;

    var _this;

    _classCallCheck(this, Ring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class  = \"point-actor [[type]]\">\n\t\t<div class = \"sprite\" cv-ref = \"sprite\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-ring';
    _this.args.width = 32;
    _this.args.height = 32;
    _this.args["static"] = (_this$args$static = _this.args["static"]) !== null && _this$args$static !== void 0 ? _this$args$static : true;
    _this.args.dropped = (_this$args$dropped = _this.args.dropped) !== null && _this$args$dropped !== void 0 ? _this$args$dropped : true;
    _this.args.gone = false;
    _this.args.gravity = 0.40;
    _this.args.delay = (_this$args$delay = _this.args.delay) !== null && _this$args$delay !== void 0 ? _this$args$delay : 64;
    return _this;
  }

  _createClass(Ring, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      var currentFrame = this.viewport.args.frameId;
      var startFrame = this.startFrame;
      var age = currentFrame - startFrame;

      if (!this.args.decoration) {
        if (this.args.ySpeed < 0) {
          this.noClip = true;
        } else if (!this.attract) {
          this.noClip = false;
        }
      } else {
        this.noClip = true;
      }

      if (this.args.decoration) {
        this.args.type = 'actor-item actor-ring decoration';
        this.args.gravity = 0.36;
      }

      if (this.dropped) {
        this.args.type = 'actor-item actor-ring dropped';
        this.args.height = 14;
      }

      if (this.dropped && this.viewport && !this.viewport.actorIsOnScreen(this, 256)) {
        this.viewport.actors.remove(this);
      }

      _get(_getPrototypeOf(Ring.prototype), "update", this).call(this);

      if ((this.dropped || this.scattered) && (!this.args.falling || !this.args.ySpeed)) {
        this.args.xSpeed = this.args.xSpeed || this.xSpeedLast || Math.random() - 0.5;
        this.args.ySpeed = Math.min(-Math.abs(this.args.ySpeed || this.ySpeedLast || 0) * 0.75, -5);
        this.args.gSpeed = 0;
        this.args.x += this.args.xSpeed;
        this.args.y += this.args.ySpeed;
        this.args.falling = true;
        this.args.groundAngle = 0;
      }
    }
  }, {
    key: "callCollideHandler",
    value: function callCollideHandler(other) {
      if (other instanceof Ring) {
        return false;
      }

      return _get(_getPrototypeOf(Ring.prototype), "callCollideHandler", this).call(this, other);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (!this.viewport || this.args.gone || this.args.ignore) {
        return false;
      }

      var age = this.viewport.args.frameId - this.startFrame;

      if (this.dropped && age < this.args.delay) {
        return false;
      }

      _get(_getPrototypeOf(Ring.prototype), "collideA", this).call(this, other);

      if (other.args.owner) {
        other = other.args.owner;
      }

      if (other.occupant) {
        other = other.occupant;
      }

      if (!other.controllable && !other.occupant && !other.args.owner) {
        return false;
      }

      if (other.controllable) {
        other.args.rings += 1;
      }

      this.args.gone = true;
      this.viewport.auras["delete"](this); // this.args.xSpeed = 0;
      // this.args.ySpeed = 0;

      this.args["static"] = true;
      this.args["float"] = -1;
      this.args.type = 'actor-item actor-ring collected';
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;

      if (this.viewport.args.audio) {
        if (!this.sample) {
          this.sample = new Audio('/Sonic/ring-collect.wav');
          this.sample.volume = 0.15 + Math.random() * -0.05;
        }

        this.sample.play();
      }

      this.viewport.onFrameOut(5, function () {
        _this2.args.type = 'actor-item actor-ring collected gone';
      });
      var x = this.x;
      var y = this.y;
      var viewport = this.viewport;
      this.viewport.onFrameOut(1200, function () {
        _this2.restore = true;
      });

      if (other.collect) {
        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'ring',
            eventAction: 'collected',
            eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
          });
        }

        this.onNextFrame(function () {
          other.collect(_this2);
        });
      } // this.args.xSpeed = 0;
      // this.args.ySpeed = 0;

    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {
      if (this.def && this.restore) {
        this.args.x = this.def.get('x');
        this.args.y = this.def.get('y'); // this.args.float = -1;

        this.args.gone = this.restore = false;
        this.args.type = 'actor-item actor-ring';
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return Ring;
}(_PointActor2.PointActor);

exports.Ring = Ring;
});

;require.register("actor/RoadBarrier.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoadBarrier = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RoadBarrier = /*#__PURE__*/function (_PointActor) {
  _inherits(RoadBarrier, _PointActor);

  var _super = _createSuper(RoadBarrier);

  function RoadBarrier() {
    var _this;

    _classCallCheck(this, RoadBarrier);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 32;
    _this.args.type = 'actor-item actor-road-barrier';
    _this.args.z = 0;
    return _this;
  }

  _createClass(RoadBarrier, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return RoadBarrier;
}(_PointActor2.PointActor);

exports.RoadBarrier = RoadBarrier;
});

;require.register("actor/Rocket.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rocket = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Rocket = /*#__PURE__*/function (_PointActor) {
  _inherits(Rocket, _PointActor);

  var _super = _createSuper(Rocket);

  function Rocket() {
    var _this$args$xMax, _this$args$yMax;

    var _this;

    _classCallCheck(this, Rocket);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args)); // this.args.width  = this.args.width  || 32;
    // this.args.height = this.args.height || 32;

    _this.args.width = 64;
    _this.args.height = 16;
    _this.args.xMax = (_this$args$xMax = _this.args.xMax) !== null && _this$args$xMax !== void 0 ? _this$args$xMax : 24;
    _this.args.yMax = (_this$args$yMax = _this.args.yMax) !== null && _this$args$yMax !== void 0 ? _this$args$yMax : 24;
    _this.args.type = 'actor-item actor-rocket';
    _this.args.launched = false;

    _this.args.bindTo(['xSpeed', 'ySpeed'], function (v) {
      if (v || !_this.args.launched) {
        return;
      }

      ;

      _this.explode();
    });

    return _this;
  }

  _createClass(Rocket, [{
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/object-destroyed.wav');
        this.sample.volume = 0.6 + Math.random() * -0.3;
      }

      _get(_getPrototypeOf(Rocket.prototype), "update", this).call(this);

      if (this.args.launched && Math.abs(this.args.xSpeed) < Math.abs(this.args.xMax)) {
        this.args.xSpeed += 0.5 * Math.sign(this.args.xMax);
      }

      if (this.args.launched && Math.abs(this.args.ySpeed) < Math.abs(this.args.yMax)) {
        this.args.ySpeed -= 0.5 * Math.sign(this.args.yMax);
      }

      if (this.args.launched && this.args.xSpeed === 0 && this.args.ySpeed === 0) {
        this.explode();
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      this.viewport.auras.add(this);
      this.args.launched = true;

      if (this.args.xMax) {
        this.args.xSpeed += 0.5;
      }

      if (this.args.yMax) {
        this.args.ySpeed -= 0.5;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      if (this.args.launched) {
        this.explode();
      }
    }
  }, {
    key: "wakeUp",
    value: function wakeUp() {// this.args.xSpeed = 0;
      // this.args.ySpeed = 0;
      // this.args.x = this.def.get('x');
      // this.args.y = this.def.get('y');
    }
  }, {
    key: "explode",
    value: function explode() {
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      var explosion = new _Tag.Tag('<div class = "particle-explosion">');
      explosion.style({
        '--x': this.x,
        '--y': this.y - 8
      });
      viewport.particles.add(explosion);
      setTimeout(function () {
        return viewport.particles.remove(explosion);
      }, 512);

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args.opacity = 0;
      this.args.launched = false; // this.args.xSpeed = 0;
      // this.args.ySpeed = 0;
      // this.args.x = this.def.get('x');
      // this.args.y = this.def.get('y');

      this.viewport.setColCell(this);
      this.viewport.onFrameOut(60, function () {});
      var exploded = new CustomEvent('exploded', {
        detail: {
          actor: this
        }
      });
      this.dispatchEvent(exploded);
      this.args.launched = false;
      this.args.opacity = 1;
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.viewport.setColCell(this);
      this.viewport.auras["delete"](this);
    }
  }]);

  return Rocket;
}(_PointActor2.PointActor);

exports.Rocket = Rocket;
});

;require.register("actor/Rocks.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rocks = void 0;

var _PointActor2 = require("./PointActor");

var _Projectile = require("../actor/Projectile");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Rocks = /*#__PURE__*/function (_PointActor) {
  _inherits(Rocks, _PointActor);

  var _super = _createSuper(Rocks);

  function Rocks(args, parent) {
    var _this;

    _classCallCheck(this, Rocks);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-rocks-tall';
    _this.args.width = 48;
    _this.args.height = 80;
    _this.gone = false;
    _this.particleA = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleB = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleC = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleD = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleE = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleF = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleG = new _Tag.Tag('<div class = "particle-rock">');
    _this.particleH = new _Tag.Tag('<div class = "particle-rock">');
    return _this;
  }

  _createClass(Rocks, [{
    key: "onAttached",
    value: function onAttached() {
      // const direction = Math.sign(other.args.gSpeed || other.args.xSpeed);
      var direction = -1;
      var fuzzFactor = 20;
      var fallSpeed = 1550;
      var xForce = 60;
      var yForce = 40;
      var particleA = this.particleA;
      var particleB = this.particleB;
      var particleC = this.particleC;
      var particleD = this.particleD;
      var particleE = this.particleE;
      var particleF = this.particleF;
      var particleG = this.particleG;
      var particleH = this.particleH;
      particleA.style({
        '--x': this.x - 8,
        '--y': this.y - 8,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce,
        'z-index': 0
      });
      direction *= -1;
      particleB.style({
        '--x': this.x + 8,
        '--y': this.y - 0,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce,
        'z-index': 0
      });
      direction *= -1;
      particleC.style({
        '--x': this.x,
        '--y': this.y - 18,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.1,
        'z-index': 0
      });
      direction *= -1;
      particleD.style({
        '--x': this.x + 8,
        '--y': this.y - 10,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.1,
        'z-index': 0
      });
      direction *= -1;
      particleE.style({
        '--x': this.x - 8,
        '--y': this.y - 28,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleF.style({
        '--x': this.x + 8,
        '--y': this.y - 20,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleG.style({
        '--x': this.x - 8,
        '--y': this.y - 30,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': yForce * 1.2,
        'z-index': 0
      });
      direction *= -1;
      particleH.style({
        '--x': this.x + 8,
        '--y': this.y - 30,
        '--fallSpeed': fallSpeed + fuzzFactor * Math.random(),
        '--xMomentum': xForce * direction + fuzzFactor * Math.random(),
        '--yMomentum': 50 * 1.3,
        'z-index': 0
      });
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Rocks.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/rock-smash.wav');
        this.sample.volume = 0.3 + Math.random() * -0.2;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (this.args.gone) {
        return false;
      }

      _get(_getPrototypeOf(Rocks.prototype), "collideA", this).call(this, other, type);

      if (other.occupant || other.args.rolling || other.punching) {
        this.pop(other);
        return false;
      }

      if (type !== 2 && (!this.args.falling || this.args["float"] === -1) && other.args.ySpeed > 0 && other.y < this.y && this.viewport && !this.args.gone) {
        if (this.args.falling && Math.abs(other.args.ySpeed) > 0) {
          other.args.xSpeed *= -1;
        }

        this.pop(other);
        return false;
      }

      if ((type === 1 || type === 3) && other instanceof _Projectile.Projectile && this.viewport && !this.args.gone) {
        this.pop(other);
        return false;
      }

      return true;
    } // collideB(other)
    // {
    // 	if(other.args.falling && this.args.gone)
    // 	{
    // 		other.args.ySpeed *= -1;
    // 		other.args.falling = true;
    // 	}
    // 	return false;
    // }

  }, {
    key: "pop",
    value: function pop(other) {
      var _this2 = this;

      this.args.gone = true;
      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (viewport.args.audio && this.sample) {
        this.sample.play();
      }

      var particleA = this.particleA;
      var particleB = this.particleB;
      var particleC = this.particleC;
      var particleD = this.particleD;
      var particleE = this.particleE;
      var particleF = this.particleF;
      var particleG = this.particleG;
      var particleH = this.particleH;
      viewport.particles.add(particleA);
      viewport.particles.add(particleB);
      viewport.particles.add(particleC);
      viewport.particles.add(particleD);
      viewport.particles.add(particleE);
      viewport.particles.add(particleF);
      viewport.particles.add(particleG);
      viewport.particles.add(particleH);
      setTimeout(function () {
        viewport.particles.remove(particleA);
        viewport.particles.remove(particleB);
        viewport.particles.remove(particleC);
        viewport.particles.remove(particleD);
        viewport.particles.remove(particleE);
        viewport.particles.remove(particleF);
        viewport.particles.remove(particleG);
        viewport.particles.remove(particleH);
      }, 2500);
      this.onNextFrame(function () {
        return viewport.actors.remove(_this2);
      });
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.args.gone;
    }
  }]);

  return Rocks;
}(_PointActor2.PointActor);

exports.Rocks = Rocks;
});

;require.register("actor/RollingSign.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RollingSign = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RollingSign = /*#__PURE__*/function (_PointActor) {
  _inherits(RollingSign, _PointActor);

  var _super = _createSuper(RollingSign);

  function RollingSign() {
    var _this$args$height;

    var _this;

    _classCallCheck(this, RollingSign);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 20;
    _this.args.height = (_this$args$height = _this.args.height) !== null && _this$args$height !== void 0 ? _this$args$height : 80;
    _this.args.type = 'actor-item actor-rolling-sign';
    return _this;
  }

  _createClass(RollingSign, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(RollingSign), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      return obj;
    }
  }]);

  return RollingSign;
}(_PointActor2.PointActor);

exports.RollingSign = RollingSign;
});

;require.register("actor/Sean.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sean = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Sean = /*#__PURE__*/function (_PointActor) {
  _inherits(Sean, _PointActor);

  var _super = _createSuper(Sean);

  function Sean() {
    var _this;

    _classCallCheck(this, Sean);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-sean';
    _this.args.normalHeight = 35;
    _this.args.rollingHeight = 28;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 35;
    return _this;
  }

  _createClass(Sean, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Sean.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.args.rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Sean.prototype), "update", this).call(this);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Sean;
}(_PointActor2.PointActor);

exports.Sean = Sean;
});

;require.register("actor/SeeSaw.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SeeSaw = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Side = Symbol('Side');

var SeeSaw = /*#__PURE__*/function (_PointActor) {
  _inherits(SeeSaw, _PointActor);

  var _super = _createSuper(SeeSaw);

  function SeeSaw(args, parent) {
    var _this$args$power, _this$args$power2;

    var _this;

    _classCallCheck(this, SeeSaw);

    _this = _super.call(this, args, parent);
    _this.args.width = 96;
    _this.args.height = 32;
    _this.noClip = true;
    _this.args["float"] = -1;
    _this.args.power = (_this$args$power = _this.args.power) !== null && _this$args$power !== void 0 ? _this$args$power : 20;
    _this.tiltTime = 0; // this.args.direction = this.args.direction || 1;

    _this.args.power = (_this$args$power2 = _this.args.power) !== null && _this$args$power2 !== void 0 ? _this$args$power2 : 12;
    _this.args.type = 'actor-item actor-see-saw';

    _this.args.bindTo('tilt', function (v) {
      _this.args.type = "actor-item actor-see-saw ".concat(v);
      _this.tiltTime = 0;
    });

    return _this;
  }

  _createClass(SeeSaw, [{
    key: "onAttached",
    value: function onAttached(event) {
      if (!this.hub) {
        this.hub = new _Tag.Tag('<div class = "see-saw-hub">');
        this.box.appendChild(this.hub.node);
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      other.args.groundAngle = 0;

      if (!other.args.falling || other.args.ySpeed <= 0) {
        return false;
      }

      if (Math.abs(other.x - this.x) > 4) {
        var newTilt = Math.sign(other.x - this.x);
        this.reflectImpulse(other, newTilt * other.args.weight * Math.abs(other.args.ySpeed));

        if (other.x < this.x) {
          this.tiltClass = 'tilt-left';
          this.tilt = -1;
        } else if (other.x > this.x) {
          this.tiltClass = 'tilt-right';
          this.tilt = 1;
        }

        this.args.tilt = this.tiltClass;
      }
    }
  }, {
    key: "reflectImpulse",
    value: function reflectImpulse(other, direction) {
      if (this.reflectObject && this.reflectObject.args.falling && !other.args.falling) {
        return;
      }

      if (this.tilt === Math.sign(direction)) {
        return;
      }

      this.reflectObject = other;
      this.reflectForce = direction;
    }
  }, {
    key: "update",
    value: function update() {
      this.tiltTime++;

      _get(_getPrototypeOf(SeeSaw.prototype), "update", this).call(this);
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(SeeSaw.prototype), "updateEnd", this).call(this);

      var collisions = this.viewport.collisions.get(this);

      if (!collisions) {
        this.reflectObject = null;
        this.reflectForce = 0;
        return;
      }

      var _iterator = _createForOfIteratorHelper(collisions.keys()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var other = _step.value;
          other.args.groundAngle = 0;
          var armDist = other.x - this.x;
          var hang = Math.abs(armDist / (this.args.width / 2));
          var otherSide = Math.sign(armDist);

          if (!this.reflectForce || otherSide === Math.sign(this.reflectForce)) {
            continue;
          }

          if (Math.abs(armDist) < 4) {
            continue;
          }

          var power = Math.abs(this.reflectForce / other.args.weight);
          var torque = Math.min(1, Math.ceil(hang * 5) / 5);
          other.args.gSpeed = 0;
          other.args.xSpeed = 0;
          other.args.ySpeed = Math.min(-5, -power * torque * 1.2);
          other.args.y -= 16;
          other.args.falling = true;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.reflectObject = null;
      this.reflectForce = 0;
    }
  }]);

  return SeeSaw;
}(_PointActor2.PointActor);

exports.SeeSaw = SeeSaw;
});

;require.register("actor/Seymour.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Seymour = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Seymour = /*#__PURE__*/function (_PointActor) {
  _inherits(Seymour, _PointActor);

  var _super = _createSuper(Seymour);

  function Seymour() {
    var _this;

    _classCallCheck(this, Seymour);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-seymour';
    _this.args.spriteSheet = _this.spriteSheet = '/secret/seymour-color-corrected.png';
    _this.superSpriteSheet = '/secret/super-seymour.png';
    _this.args.normalHeight = 44;
    _this.args.rollingHeight = 23;
    _this.args.accel = 0.25;
    _this.args.decel = 0.4;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = 11;
    _this.args.gravity = 0.5;
    _this.args.width = 18;
    _this.args.height = 32;
    return _this;
  }

  _createClass(Seymour, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.box) {
        _get(_getPrototypeOf(Seymour.prototype), "update", this).call(this);

        return;
      }

      if (!falling) {
        if (this.yAxis > 0) {
          this.args.crouching = true;
        } else {
          this.args.crouching = false;
        }

        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (this.args.rolling) {
          this.box.setAttribute('data-animation', 'rolling');
        } else if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
          this.box.setAttribute('data-animation', 'standing');
        } else if (speed > maxSpeed * 0.25) {
          this.box.setAttribute('data-animation', 'running');
        } else if (this.args.moving && gSpeed) {
          this.box.setAttribute('data-animation', 'walking');
        } // else if(this.args.crouching || (this.args.standingOn && this.args.standingOn.isVehicle))
        // {
        // 	this.box.setAttribute('data-animation', 'crouching');
        // }
        else {
          this.box.setAttribute('data-animation', 'standing');
        }
      } else if (this.args.jumping) {
        this.box.setAttribute('data-animation', 'jumping');
      }

      _get(_getPrototypeOf(Seymour.prototype), "update", this).call(this);
    }
  }, {
    key: "command_3",
    value: function command_3() {
      var _this2 = this;

      this.isSuper = !this.isSuper;
      this.onTimeout(150, function () {
        if (_this2.args.rings === 0) {
          // this.isSuper = false;
          _this2.setProfile();
        }

        ;
      });
      this.setProfile();
    }
  }, {
    key: "setProfile",
    value: function setProfile() {
      if (this.isSuper) {
        this.args.spriteSheet = this.superSpriteSheet; // this.args.gSpeedMax = this.gSpeedMaxSuper;
        // this.args.jumpForce = this.jumpForceSuper;
        // this.args.accel     = this.accelSuper;
      } else {
        this.args.spriteSheet = this.spriteSheet; // this.args.gSpeedMax = this.gSpeedMaxNormal;
        // this.args.jumpForce = this.jumpForceNormal;
        // this.args.accel     = this.accelNormal;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return true;
    }
  }]);

  return Seymour;
}(_PointActor2.PointActor);

exports.Seymour = Seymour;
});

;require.register("actor/Signpost.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Signpost = void 0;

var _CharacterString = require("../ui/CharacterString");

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Signpost = /*#__PURE__*/function (_PointActor) {
  _inherits(Signpost, _PointActor);

  var _super = _createSuper(Signpost);

  function Signpost() {
    var _this;

    _classCallCheck(this, Signpost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-signpost';
    _this.args.width = 48;
    _this.args.height = 256;
    _this.args.active = false;
    _this.args.follow = false;
    return _this;
  }

  _createClass(Signpost, [{
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (!other.controllable || this.args.active) {
        return;
      }

      this.viewport.onFrameOut(120, function () {
        return _this2.box.setAttribute('data-cleared-by', other.args.name);
      });
      this.viewport.onFrameOut(30, function () {
        return other.args.rolling = false;
      });
      this.viewport.onFrameOut(180, function () {
        return _this2.viewport.clearAct("".concat(other.args.name, " GOT THROUGH ").concat(_this2.viewport.args.actName));
      });
      this.viewport.onFrameOut(540, function () {
        _this2.args.charStrings = [];
        other.args.ignore = 0;
        _this2.args.follow = false;

        if (!_this2.args.boss) {
          return;
        }
      });
      this.viewport.onFrameOut(30, function () {
        other.args.ignore = -1;
      });
      this.viewport.onFrameOut(600, function () {
        var boss = _this2.viewport.actorsById[_this2.args.boss];

        _this2.viewport.auras.add(boss);

        boss.args.x = _this2.x + (_this2.x < 125000 ? 768 : -768);
        boss.args.y = _this2.y - 160;

        if (_this2.viewport.controlActor && _this2.viewport.controlActor.args.jumpForce < 10.5) {
          boss.args.y += 48;
        }

        boss.args.phase = 'intro';
        other.args.clearSpeed = 0;
      });
      var time = (this.viewport.args.frameId - this.viewport.args.startFrameId) / 60;
      var minutes = String(Math.floor(Math.abs(time) / 60)).padStart(2, '0');
      var seconds = String(Math.trunc(Math.abs(time) % 60)).padStart(2, '0');
      var neg = time < 0 ? '-' : '';

      if (neg) {
        minutes = Number(minutes);
      }

      var yardsPerFrame = (other.args.gSpeed || other.args.xSpeed) / 32;
      var feetPerSecond = yardsPerFrame * 60 * 3;
      other.args.clearSpeed = Math.abs(feetPerSecond);
      this.args.charStrings = [new _CharacterString.CharacterString({
        value: "Speed: ".concat(feetPerSecond.toFixed(2), " ft/sec")
      })];
      this.args.falling = true;
      this.args.active = true;
      this.args.follow = true;
      this.args.xSpeed = (other.args.gSpeed || other.args.xSpeed) * 1.1;
      this.args.ySpeed = -7;
      this.args.y--;
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (this.args.follow) {
        var toX = Math.max(this.x, this.viewport.controlActor.x + -160);

        if (toX !== this.x) {
          if (!this.args.falling) {
            var dustParticle = new _Tag.Tag("<div class = \"particle-dust\">");
            var dustPoint = this.rotatePoint(this.args.gSpeed, 0);
            dustParticle.style({
              '--x': dustPoint[0] + this.x + -4,
              '--y': dustPoint[1] + this.y,
              'z-index': 0,
              opacity: Math.random() * 2
            });
            this.viewport.particles.add(dustParticle);
            this.viewport.onFrameOut(30, function () {
              return _this3.viewport.particles.remove(dustParticle);
            });
          }

          this.args.x = toX;
        }
      }

      _get(_getPrototypeOf(Signpost.prototype), "update", this).call(this);
    }
  }, {
    key: "rotateLock",
    get: function get() {
      return true;
    }
  }]);

  return Signpost;
}(_PointActor2.PointActor);

exports.Signpost = Signpost;
});

;require.register("actor/SnowBoard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnowBoard = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SnowBoard = /*#__PURE__*/function (_Vehicle) {
  _inherits(SnowBoard, _Vehicle);

  var _super = _createSuper(SnowBoard);

  function SnowBoard() {
    var _this;

    _classCallCheck(this, SnowBoard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.behaviors.add(new _SkidDust.SkidDust('particle-dust'));

    _this.args.type = 'actor-item actor-snow-board';
    _this.args.width = 24;
    _this.args.height = 32;
    _this.removeTimer = null;
    _this.args.gSpeedMax = 15;
    _this.args.decel = 0.25;
    _this.args.accel = 0.75;
    _this.args.gravity = 0.75; // this.args.ignore    = -1;

    _this.args.seatHeight = 1;
    _this.args.skidTraction = 0.5;
    _this.args.jumpForce = 9.5;
    _this.dustCount = 0;
    _this.args.particleScale = 2;
    _this.args.started = false;
    _this.ridingAnimation = 'grinding'; // this.alwaysSkidding  = true;

    _this.dustDist = -16;
    _this.dustFreq = 1;
    _this.broad = true;
    _this.slowSpin = true;
    return _this;
  }

  _createClass(SnowBoard, [{
    key: "update",
    value: function update() {
      this.originalSpeed = this.args.gSpeed || this.args.xSpeed;

      _get(_getPrototypeOf(SnowBoard.prototype), "update", this).call(this);

      if (this.occupant) {
        this.args.z = this.occupant.args.z - 1;
      }

      if (this.args.gSpeed !== 0 || this.args.xSpeed !== 0) {
        this.sprite.classList.add('moving');
        this.args.started = true;
      }
    }
  }, {
    key: "doJump",
    value: function doJump(force) {
      _get(_getPrototypeOf(SnowBoard.prototype), "doJump", this).call(this, force);

      this.args.groundAngle += Math.PI * 0.125 * Math.sign(this.args.gSpeed || this.args.direction);
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return SnowBoard;
}(_Vehicle2.Vehicle);

exports.SnowBoard = SnowBoard;
});

;require.register("actor/Sonic.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sonic = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

var _Twist = require("../effects/Twist");

var _Pinch = require("../effects/Pinch");

var _Png = require("../sprite/Png");

var _Ring = require("./Ring");

var _Spring = require("./Spring");

var _FireSheild = require("../powerups/FireSheild");

var _BubbleSheild = require("../powerups/BubbleSheild");

var _ElectricSheild = require("../powerups/ElectricSheild");

var _GrindingRegion = require("../region/GrindingRegion");

var _Marker = require("./Marker");

var _SkidDust = require("../behavior/SkidDust");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MODE_FLOOR = 0;
var MODE_LEFT = 1;
var MODE_CEILING = 2;
var MODE_RIGHT = 3;

var Sonic = /*#__PURE__*/function (_PointActor) {
  _inherits(Sonic, _PointActor);

  var _super = _createSuper(Sonic);

  function Sonic() {
    var _this;

    _classCallCheck(this, Sonic);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "png", new _Png.Png('/Sonic/sonic.png'));

    window.sonic = _assertThisInitialized(_this);

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.canonical = 'Sonic';
    _this.args.type = 'actor-sonic actor-item';
    _this.accelNormal = 0.15;
    _this.accelSuper = 0.22;
    _this.markers = new Set();
    _this.springing = false;
    _this.args.boltCount = 0;
    _this.args.accel = _this.accelNormal;
    _this.args.decel = 0.40;
    _this.gSpeedMaxNormal = 18;
    _this.gSpeedMaxSuper = 23;
    _this.jumpForceNormal = 11.5;
    _this.jumpForceSuper = 16;
    _this.args.gSpeedMax = _this.gSpeedMaxNormal;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.gravity = 0.5;
    _this.args.width = 16;
    _this.args.height = 40;
    _this.args.lookTime = 0;
    _this.args.normalHeight = 40;
    _this.args.rollingHeight = 28;
    _this.sparks = new Set();
    _this.spindashCharge = 0;
    _this.dropDashCharge = 0;
    _this.willStick = false;
    _this.stayStuck = false;
    _this.dashed = false;
    _this.airControlCard = _View.View.from(require('../cards/sonic-air-controls.html'));
    _this.controlCard = _View.View.from(require('../cards/sonic-controls.html'));
    _this.moveCard = _View.View.from(require('../cards/basic-moves.html'));
    _this.args.spriteSheet = _this.spriteSheet = '/Sonic/sonic.png';
    _this.hyperSheet = 0;
    _this.sampleRingLoss = new Audio('/Sonic/ring-loss.wav');
    _this.sampleBoltDash = new Audio('/Sonic/S3K_4E.wav');

    _this.args.bindTo('falling', function (v) {
      if (v) {
        return;
      }

      if (_this.willStick && (_this.args.mode === 1 || _this.args.mode === 3)) {
        _this.args.wallSticking = true;

        _this.onNextFrame(function () {
          _this.dashed = false;
        });
      } else {
        _this.onNextFrame(function () {
          _this.args.wallSticking = false;
        });
      }
    });

    return _this;
  }

  _createClass(Sonic, [{
    key: "onAttached",
    value: function onAttached(event) {
      var _this2 = this;

      var superColors = {
        '8080e0': 'e0e080',
        '6060c0': 'e0e000',
        '4040a0': 'e0e001',
        '202080': 'a0a000'
      };
      var hyperColorsRed = {
        '8080e0': 'fcfcfc',
        '6060c0': 'fcfcfc',
        '4040a0': 'fcd8d8',
        '202080': 'fcb4b4'
      };
      var hyperColorsPurple = {
        '8080e0': 'fcfcfc',
        '6060c0': 'fcfcfc',
        '4040a0': 'fcd8fc',
        '202080': 'd8b4d8'
      };
      var hyperColorsCyan = {
        '8080e0': 'd8fcfc',
        '6060c0': 'fcfcfc',
        '4040a0': 'b4d8fc',
        '202080': '90b4fc'
      };
      var hyperColorsBlue = {
        '8080e0': 'd8d8ff',
        '6060c0': 'b4b4d8',
        '4040a0': 'a4a4d8',
        '202080': '6c6cb4'
      };
      var hyperColorsGreen = {
        '8080e0': 'd8fcfc',
        '6060c0': 'd8fcd8',
        '4040a0': 'b4fcb4',
        '202080': '00fc24'
      };
      var hyperColorsYellow = {
        '8080e0': 'd8fcfc',
        '6060c0': 'd8fcb4',
        '4040a0': 'd8fc48',
        '202080': 'd8d800'
      };
      var hyperColorsWhite = {
        '8080e0': 'ffffff',
        '6060c0': 'fcfcfc',
        '4040a0': 'd8d8d8',
        '202080': 'b4b4b4'
      };

      if (!this.superSpriteSheet) {
        this.png.ready.then(function () {
          var newPng = _this2.png.recolor(superColors);

          _this2.superSpriteSheet = newPng.toUrl();
        });
      }

      if (!this.hyperSpriteSheets) {
        this.png.ready.then(function () {
          return _this2.hyperSpriteSheets = [_this2.png.recolor(hyperColorsRed).toUrl(), _this2.png.recolor(hyperColorsCyan).toUrl(), _this2.png.recolor(hyperColorsPurple).toUrl(), _this2.png.recolor(hyperColorsWhite).toUrl(), _this2.png.recolor(hyperColorsGreen).toUrl(), _this2.png.recolor(hyperColorsBlue).toUrl(), _this2.png.recolor(hyperColorsYellow).toUrl()];
        });
      }
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(Sonic.prototype), "onRendered", this).call(this);

      if (!this.arm) {
        this.arm = new _Tag.Tag("<div class = \"rear-arm\">");
        this.box.appendChild(this.arm.node);
      }
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      if (this.args.grinding && this.args.falling && this.args.ySpeed > 0) {
        this.args.animation = 'airdash';
        this.args.grinding = false;
      }

      _get(_getPrototypeOf(Sonic.prototype), "updateStart", this).call(this);

      if (this.args.dead) {
        this.args.animation = 'dead';
        return;
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(Sonic.prototype), "updateEnd", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (this.args.falling && this.isHyper && this.dashed && this.yAxis < -0.5) {
        this.args.ySpeed -= 0.6;
      }

      if (this.args.dead) {
        this.args.animation = 'dead';

        _get(_getPrototypeOf(Sonic.prototype), "update", this).call(this);

        return;
      }

      if (this.isSuper) {
        if (this.viewport.args.frameId % 60 === 0) {
          if (this.args.rings > 0) {
            this.args.rings--;
          } else {
            this.isSuper = false;
            this.isHyper = false;
            this.setProfile();
          }
        }
      }

      if (this.isHyper) {
        if (this.viewport.args.frameId % 45 === 0) {
          this.args.spriteSheet = this.hyperSpriteSheets[this.hyperSheet++];

          if (this.hyperSheet >= this.hyperSpriteSheets.length) {
            this.hyperSheet = 0;
          }
        }
      }

      if (this.args.falling) {
        if (this.args.wallSticking && !this.dashed) {
          if (this.args.mode === 1) {
            this.args.direction = -1;
            this.args.facing = 'left';
          } else if (this.args.mode === 3) {
            this.args.direction = 1;
            this.args.facing = 'right';
          }

          this.args.animation = 'wall-dropping-start';
          this.onTimeout(150, function () {
            if (_this3.args.falling && _this3.args.wallDropping) {
              _this3.args.animation = 'wall-dropping';
            }
          });
          this.args.wallDropping = true;
          this.args.groundAngle = 0;
          this.args.ignore = 30;
        }

        if (this.args.wallDropping) {
          this.args.groundAngle = 0;
        }

        this.args.wallSticking = false;
      } else {
        if (this.springing) {
          this.args.groundAngle = 0;
        }

        this.springing = false;
        this.doubleSpin = this.dashed = false;

        if (this.args.mode % 2 === 0) {
          this.args.wallSticking = false;
        }

        if (!this.args.wallSticking) {
          this.willStick = false;
        } // this.pincherBg.args.scale = 0;

      }

      if (this.lightDashingCoolDown > 0) {
        this.lightDashingCoolDown--;
      }

      if (this.dashTimer > 0) {
        this.dashTimer--;
      }

      var falling = this.args.falling;

      if (falling) {
        this.args.cameraBias = 0;
      }

      if (this.args.wallSticking) {
        this.args.animation = 'wall-stick';
        var slip = 3;

        if (this.yAxis < 0) {
          this.args.animation = 'wall-stick-brake';
          this.stayStuck = true;
          slip = 0;
        } else if (this.yAxis > 0) {
          slip = 6;
        }

        if (this.args.modeTime < 15) {
          slip = 0;
        }

        if (this.args.mode === 1) {
          this.args.facing = 'left';
          this.args.direction = 1;

          if (Math.abs(this.args.gSpeed) < slip) {
            this.args.gSpeed += 1;
          } else {
            this.args.gSpeed = slip;
          }
        } else if (this.args.mode === 3) {
          this.args.facing = 'right';
          this.args.direction = -1;

          if (Math.abs(this.args.gSpeed) < slip) {
            this.args.gSpeed -= 1;
          } else {
            this.args.gSpeed = -slip;
          }
        }

        var radius = Math.ceil(this.args.width / 2);
        var direction = Math.sign(this.args.gSpeed);
        var headPoint = this.rotatePoint(radius * -direction, this.args.height);

        if (this.getMapSolidAt(this.x + headPoint[0], this.y + headPoint[1])) {
          this.doJump(0);
        }
      } else if (this.lightDashing) {
        var _direction = Math.sign(this.args.xSpeed) || Math.sign(this.args.gSpeed);

        if (_direction < 0) {
          this.args.animation = 'lightdash-back';
        } else if (_direction > 0) {
          this.args.animation = 'lightdash';
        }

        if (falling) {
          this.args.direction = Math.sign(this.args.xSpeed) || this.args.direction;
          this.args.mode = MODE_FLOOR;
        }
      } else if (!falling) {
        var _direction2 = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;
        this.args.height = this.args.normalHeight;

        if (this.spindashCharge) {
          this.args.animation = 'spindash';
        } else if (!this.args.rolling) {
          if (Math.sign(_direction2) && Math.sign(gSpeed) && Math.sign(gSpeed) !== Math.sign(_direction2)) {
            this.args.animation = 'skidding';
          } else if (this.args.moving && speed > maxSpeed * 0.75) {
            if (this.isSuper && this.args.moving && speed > maxSpeed * 1.85) {
              this.args.animation = 'dash';
            } else if (this.args.moving && speed > maxSpeed * 2.25) {
              this.args.animation = 'running-4';
            } else if (this.args.moving && speed > maxSpeed * 1.75) {
              this.args.animation = 'running-3';
            } else if (this.args.moving && speed > maxSpeed * 1.25) {
              this.args.animation = 'running-2';
            } else {
              this.args.animation = 'running';
            }
          } else if (this.args.moving && this.args.gSpeed) {
            this.args.animation = 'walking';
          } else if (this.args.moving && this.args.gSpeed) {
            this.args.pushing = Math.sign(this.args.gSpeed);
          } else {
            if (this.yAxis > 0.5 && !this.args.ignore) {
              this.args.animation = 'crouching';
              this.args.lookTime--;

              if (this.args.lookTime < -45) {
                this.args.cameraBias = -0.5;
              }
            } else if (this.yAxis < -0.5 && !this.args.ignore) {
              this.args.animation = 'looking-up';
              this.args.lookTime++;

              if (this.args.lookTime > 45) {
                this.args.cameraBias = 0.25;
              }
            } else {
              if (this.args.idleTime > 60 * 300) {
                this.args.animation = 'idle-3';
              } else if (this.args.idleTime > 250) {
                this.args.animation = 'idle-2';
              } else if (this.args.idleTime > 200) {
                this.args.animation = 'idle';
              } else {
                this.args.animation = 'standing';
              }

              this.args.cameraBias = 0;
              this.args.lookTime = 0;
            }
          }
        }

        if (!this.spindashCharge && this.dashDust) {
          this.dashDust.remove();
          this.dashDust = null;
        }

        if (this.dropDashCharge) {
          this.args.animation = 'spindash';
          this.args.rolling = true;
        }
      } else if (!this.dashed) {
        this.args.height = this.args.rollingHeight;

        if (this.args.jumping) {
          this.args.animation = 'jumping';
        } else if (!this.args.xSpeed && !this.args.ySpeed) {// this.box.setAttribute('data-animation', 'airdash');
        }
      } else if (falling && !this.args.jumping && this.isSuper && this.args.ySpeed > 0) {
        this.args.animation = 'dropping';
        this.onTimeout(150, function () {
          if (_this3.args.falling) {
            _this3.args.animation = 'dropping';
          }
        });
      }

      if (this.args.hangingFrom) {
        this.args.animation = 'hanging';
      }

      if (this.args.rolling) {
        if (this.args.animation !== 'spindash') {
          this.args.animation = 'rolling';
        } else {
          this.viewport.onFrameOut(14, function () {
            return _this3.args.animation = 'rolling';
          });
          this.args.animation = 'spindash';
        }
      }

      if (this.skidding && !this.args.rolling && !this.args.falling && !this.spindashCharge) {
        this.args.xOff = 8 * -this.args.direction;
        this.args.yOff = 32;
        var warp = -this.args.gSpeed * 15;

        if (Math.abs(warp) > 120) {
          warp = 120 * Math.sign(warp);
        }

        this.twist(warp);
      } else if (!this.spindashCharge) {
        this.twister && (this.twister.args.scale = 0);
      }

      if (this.args.standingOn && this.args.standingOn.isVehicle) {
        this.args.animation = this.args.standingOn.ridingAnimation || 'standing';
      }

      if (this.args.grinding && !this.args.falling) {
        // `<div class = "particle-sparks">`
        var sparkTag = document.createElement('div');
        sparkTag.classList.add('particle-sparks');
        var sparkParticle = new _Tag.Tag(sparkTag); // `<div class = "envelope-sparks">`

        var envelopeTag = document.createElement('div');
        envelopeTag.classList.add('envelope-sparks');
        var sparkEnvelope = new _Tag.Tag(envelopeTag);
        sparkEnvelope.appendChild(sparkParticle.node);
        var sparkPoint = this.rotatePoint(-this.args.gSpeed * 1.75 * this.args.direction, 8);
        var flip = Math.sign(this.args.gSpeed);
        sparkEnvelope.style({
          '--x': sparkPoint[0] + this.x,
          '--y': sparkPoint[1] + this.y + Math.random * -3,
          'z-index': 0,
          'animation-delay': -Math.random() * 0.25 + 's',
          '--xMomentum': Math.max(Math.abs(this.args.gSpeed), 4) * flip,
          '--flip': flip,
          '--angle': this.realAngle,
          opacity: Math.random() * 2
        });
        sparkEnvelope.particle = sparkParticle;
        this.viewport.particles.add(sparkEnvelope);
        this.sparks.add(sparkEnvelope);
        this.viewport.onFrameOut(30, function () {
          _this3.viewport.particles.remove(sparkEnvelope);

          _this3.sparks["delete"](sparkEnvelope);
        });
      }

      if (this.pincherBg) {
        this.pincherBg.args.scale *= 0.85; // this.pincherFg.args.scale *= 0.875;

        if (Math.abs(this.pincherBg.args.scale) < 0.1) {// this.pincherBg.args.scale = 0;
          // this.pincherFg.args.scale = 0;
        }
      } else {// this.pinch(0, 0);
      }

      if (!this.twister) {
        this.twist(0);
      }

      if (this.args.grinding) {
        this.args.rolling = false;

        if (this.yAxis > 0.5) {
          this.args.animation = 'grinding-crouching';
        } else {
          this.args.animation = 'grinding';
        }
      }

      _get(_getPrototypeOf(Sonic.prototype), "update", this).call(this);

      if (this.args.falling && this.springing && this.args.ySpeed >= 0) {
        this.args.groundAngle = 0;
        this.args.animation = 'dropping-start';
        this.springing = false;
        this.onTimeout(150, function () {
          if (!_this3.args.falling || _this3.args.animation !== 'dropping-start') {
            return;
          }

          _this3.args.animation = 'dropping';
        });
      }

      if (this.args.boltDash) {
        this.dimmer = this.dimmer || new _Tag.Tag('<div class = "particle particle-dimmer">');
        var boltParticle = new _Tag.Tag('<div class = "particle particle-bolt">');

        var _speed = this.args.falling ? this.args.airSpeed : this.args.gSpeed;

        var boltPoint = this.rotatePoint(_speed < 0 ? 8 : -8, this.args.falling ? this.dashed ? _speed < 0 ? 28 : 32 : 14 : 28);
        this.dimmer.style({
          '--x': this.x + boltPoint[0],
          '--y': this.y + boltPoint[1]
        });
        this.args.boltCount++;

        var _direction3 = Math.sign(this.args.gSpeed || this.args.xSpeed);

        boltParticle.attr({
          'data-direction': _direction3
        });
        boltParticle.style({
          '--x': this.x + boltPoint[0],
          '--y': this.y + boltPoint[1],
          '--index': this.args.boltCount,
          '--direction': _direction3,
          '--mod': this.viewport.args.frameId % 4,
          '--wipe': Math.abs(_speed),
          '--angle': this.args.falling ? this.args.airAngle : this.realAngle,
          '--dashCharge': 0
        });
        this.viewport.particles.add(boltParticle);

        if (Math.abs(_speed) < 20 && this.args.falling) {
          this.args.boltDash = false;
        }

        this.viewport.particles.add(this.dimmer);
        this.viewport.onFrameOut(30, function () {
          _this3.viewport.particles.remove(boltParticle);
        });
      }

      if (_toConsumableArray(this.regions).filter(function (r) {
        return r.isWater;
      }).length && !this.checkBelow(this.x, this.y + 16) && this.args.falling && this.dashed) {
        if (this.yAxis < 0) {
          this.args.xSpeed = this.args.xSpeed * 0.95;
          this.args.ySpeed -= Math.abs(this.args.xSpeed) * 0.05;
        }

        if (this.yAxis > 0) {
          this.args.xSpeed += Math.abs(this.args.ySpeed) * 0.05 * Math.sign(this.args.xSpeed);
          this.args.ySpeed = this.args.ySpeed * 0.95;
        }
      }

      if (this.args.grinding && !this.args.falling && this.args.gSpeed) {
        var _iterator = _createForOfIteratorHelper(this.sparks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var spark = _step.value;

            var _sparkPoint = this.rotatePoint(1.75 * this.args.direction, 8);

            spark.style({
              opacity: Math.random() * 2,
              '--x': _sparkPoint[0] + this.x,
              '--y': _sparkPoint[1] + this.y
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }, {
    key: "readInput",
    value: function readInput() {
      if (!this.lightDashing) {
        _get(_getPrototypeOf(Sonic.prototype), "readInput", this).call(this);
      }
    }
  }, {
    key: "airDash",
    value: function airDash(direction) {
      var _this4 = this;

      if (this.dashed || this.args.ignore && this.args.ignore !== -2) {
        return;
      }

      var dashSpeed = direction * (this.isSuper || this.isHyper ? 13 : 8);

      if (this.args.wallSticking) {
        this.args.x += dashSpeed;
        dashSpeed = direction * (this.isSuper || this.isHyper ? 18 : 9);
      }

      this.args.mode = 0;
      this.args["float"] = 2;
      this.args.rolling = false;
      this.args.height = this.args.normalHeight;

      if (this.args.xSpeed && Math.sign(this.args.xSpeed) !== Math.sign(direction)) {
        dashSpeed = direction * Math.abs(dashSpeed);
        this.args["float"] = 4;
        this.args.xSpeed = 0;
      }

      this.args.falling = true;
      var finalSpeed = this.args.xSpeed + dashSpeed; // if(Math.abs(finalSpeed) > Math.abs(space))
      // {
      // 	dashSpeed = space * Math.sign(finalSpeed);
      // }

      this.args.animation = 'rolling';
      this.viewport.onFrameOut(3, function () {
        return _this4.args.animation = 'airdash';
      });
      this.args.xSpeed = finalSpeed;
      this.args.ySpeed = 0;
      this.args.gSpeed = 0;
      this.dashTimer = 0;
      this.dashed = true;
      this.args.mode = 0;
      this.args.groundAngle = 0;
    }
  }, {
    key: "command_0",
    value: function command_0() {
      var _this5 = this;

      this.dropDashCharge = 0;

      if (this.args.jumping && !this.dashed && !this.doubleSpin) {
        this.doubleSpin = true;
        this.args.xOff = 0;
        this.args.yOff = 32;
        this.pinch(-600, 50);
        var marker = new _Marker.Marker({
          x: this.x,
          y: this.y
        });
        marker.owner = this;
        this.markers.add(marker);
        this.viewport.spawn.add({
          object: marker
        });
        var debindX = this.args.bindTo('x', function (v, k) {
          return marker.args[k] = v;
        });
        var debindY = this.args.bindTo('y', function (v, k) {
          return marker.args[k] = v + 18;
        });
        this.viewport.onFrameOut(25, function () {
          _this5.viewport.actors.remove(marker);

          debindX();
          debindY();
        });
      }

      _get(_getPrototypeOf(Sonic.prototype), "command_0", this).call(this);
    }
  }, {
    key: "command_4",
    value: function command_4() {
      if (this.args.ignore) {
        return;
      }

      if (this.args.falling) {
        this.airDash(-1);
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "hold_4",
    value: function hold_4(button) {
      if (this.args.ignore) {
        return;
      }

      if (this.args.jumping || this.dashed) {
        this.dropDashCharge = 0;
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "release_4",
    value: function release_4() {
      var _this6 = this;

      this.onNextFrame(function () {
        _this6.willStick = false;
        _this6.stayStuck = false;
      });

      if (this.args.wallSticking && !this.dashed) {
        this.args.falling = true;

        if (this.args.ySpeed > 128) {// this.args.ySpeed = this.args.ySpeed / 4;
        } else {
          this.args.ySpeed = 0;
        }

        var mode = this.args.mode;
        this.airDash(mode === 1 ? 1 : -1);
        this.args.facing = mode === 1 ? 'left' : 'right';
        this.args.mode = 0;
        this.dashed = true;
      }
    }
  }, {
    key: "command_5",
    value: function command_5() {
      if (this.args.ignore) {
        return;
      }

      if (this.args.falling) {
        this.airDash(1);
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "hold_5",
    value: function hold_5(button) {
      if (this.args.ignore) {
        return;
      }

      if (this.args.jumping || this.dashed && this.args.mode !== 2) {
        this.dropDashCharge = 0;
        this.willStick = 2;
        this.stayStuck = true;
      }
    }
  }, {
    key: "release_5",
    value: function release_5() {
      var _this7 = this;

      this.onNextFrame(function () {
        _this7.willStick = false;
        _this7.stayStuck = false;
      });

      if (this.args.wallSticking && !this.dashed) {
        this.args.falling = true;
        this.args.ySpeed = 0;
        var mode = this.args.mode;
        this.airDash(mode === 1 ? 1 : -1);
        this.args.facing = mode === 1 ? 'left' : 'right';
        this.args.mode = 0;
        this.dashed = true;
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      var _this8 = this;

      if (this.args.ignore) {
        return;
      }

      if (this.args.wallSticking) {
        this.args.x += this.args.width / 2 * (this.args.mode === 1 ? 1 : -1);
        this.doJump(0);
      }

      if (this.args.gSpeed && !this.args.falling && !this.args.rolling && Math.sign(this.args.gSpeed) === this.args.direction) {
        this.args.rolling = true;

        var standOrRecheck = function standOrRecheck() {
          var backOfHead = [_this8.args.width / 2, _this8.args.height + 4]; // const actualBackOfHead = this.rotatePoint(...backOfHead);

          var solid = _this8.getMapSolidAt(_this8.x - backOfHead[0], _this8.y - backOfHead[1]);

          if (solid) {
            _this8.viewport.onFrameOut(40, standOrRecheck);

            _this8.args.gSpeed = _this8.args.direction * 4;
            _this8.args.rolling = true;
            return;
          }

          _this8.args.rolling = false;
        };

        this.viewport.onFrameOut(20, standOrRecheck);
      }
    }
  }, {
    key: "release_1",
    value: function release_1() // spindash
    {
      this.dropDashCharge = 0;

      if (!this.spindashCharge) {
        return;
      }

      if (this.spindashCharge < 5 && (this.args.modeTime < 45 || this.args.skidding)) {
        this.spindashCharge = 15;
      }

      var direction = this.args.direction;
      var dashPower = this.spindashCharge / 40;

      if (dashPower > 1) {
        dashPower = 1;
      }

      this.args.rolling = true;
      var dashBoost = dashPower * 32;

      if (Math.sign(direction) !== Math.sign(this.args.gSpeed)) {
        this.args.gSpeed = dashBoost * Math.sign(direction);
      } else {
        this.args.gSpeed += dashBoost * Math.sign(direction);
      }

      this.args.ignore = 1;
      this.args.rolling = true;
      this.spindashCharge = 0;

      if (this.dashDust) {
        this.dashDust.remove();
      }
    }
  }, {
    key: "hold_1",
    value: function hold_1(button) // spindash
    {
      // if(this.skidding)
      // {
      // 	return;
      // }
      if (this.args.ignore || this.args.rolling) {
        return;
      }

      if (this.args.jumping) {
        if (this.dropDashCharge < 15) {
          this.dropDashCharge++;
          return;
        }
      }

      if (this.args.modeTime === 0) {
        return;
      }

      if (this.dropDashCharge) {
        return;
      }

      if (this.args.falling || this.willJump || this.args.gSpeed && !this.skidding) {
        if (!this.skidding) {
          this.spindashCharge = 0;
        }

        return;
      }

      this.args.ignore = 1;
      var dashCharge = this.spindashCharge / 20;

      if (dashCharge > 1) {
        dashCharge = 1;
      }

      if (this.spindashCharge === 0) {
        this.spindashCharge = 1;

        if (this.yAxis > 0.5) {
          this.spindashCharge = 10;
        }

        var viewport = this.viewport;
        var dustParticle = new _Tag.Tag('<div class = "particle-spindash-dust">');
        var dustPoint = this.rotatePoint(0, 0);
        dustParticle.style({
          '--x': dustPoint[0] + this.x,
          '--y': dustPoint[1] + this.y,
          '--direction': this.args.direction,
          '--dashCharge': 0
        });

        if (this.args.direction < 0) {
          dustParticle.setAttribute('data-facing', 'left');
        } else if (this.args.direction > 0) {
          dustParticle.setAttribute('data-facing', 'right');
        }

        viewport.particles.add(dustParticle.node);
        this.dashDust = dustParticle;
      } else if (this.dashDust) {
        this.dashDust.style({
          '--dashCharge': dashCharge
        });
      }

      if (this.viewport.args.frameId % 3 === 0) {
        this.spindashCharge++;
      }

      this.args.xOff = 5 * -this.args.direction;
      this.args.yOff = 32;
      this.twist(120 * dashCharge * this.args.direction);
      this.args.animation = 'spindash';

      if (this.args.direction < 0) {
        this.args.facing = 'left';
      } else if (this.args.direction > 0) {
        this.args.facing = 'right';
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      if (!this.args.falling) {
        return;
      }

      if (this.lightDashing) {
        return;
      }

      if (this.lightDashingCoolDown > 0) {
        return;
      }

      var ring = this.findDashableRing(48);

      if (ring) {
        this.lightDash(ring);
        this.lightDashingCoolDown = 9;
        return;
      }
    }
  }, {
    key: "command_2",
    value: function command_2() {
      var _this9 = this;

      if (this.viewport.collisions.has(this)) {
        var objects = this.viewport.collisions.get(this);

        var _iterator2 = _createForOfIteratorHelper(objects.keys()),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var object = _step2.value;

            if (typeof object.lift === 'function') {
              object.lift(this);
              return;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      this.onNextFrame(function () {
        var speed = _this9.args.falling ? _this9.args.airSpeed : _this9.args.gSpeed;

        if (_this9.isSuper && !_this9.lightDashing && !_this9.args.boltDash && Math.abs(speed) > 6) {
          var xSpeed = _this9.args.xSpeed;
          var ySpeed = _this9.args.ySpeed;
          var gSpeed = _this9.args.gSpeed;

          if (!_this9.args.falling) {
            _this9.args.gSpeed *= 3;
            _this9.args.gSpeed = Math.max(-128, Math.min(_this9.args.gSpeed, 128));
          } else {
            _this9.args.xSpeed = Math.max(-64, Math.min(_this9.args.xSpeed, 64));
            _this9.args.ySpeed = Math.max(-64, Math.min(_this9.args.ySpeed, 64));
            _this9.args["float"] = 5;
            _this9.args.xSpeed *= 5;
            _this9.args.ySpeed *= 5;
          }

          _this9.args.boltCount = 0;
          _this9.args.boltDash = true;

          if (_this9.viewport.args.audio) {
            _this9.sampleBoltDash.currentTime = 0;

            _this9.sampleBoltDash.play();
          }

          _this9.args.opacity = 0;

          _this9.viewport.onFrameOut(35, function () {
            _this9.args.opacity = 1;
            _this9.args.boltDash = false;
            _this9.args.xSpeed = _this9.args.xSpeed ? xSpeed : 0;
            _this9.args.ySpeed = _this9.args.ySpeed ? ySpeed : 0;
            _this9.args.gSpeed = _this9.args.gSpeed ? gSpeed : 0;
            _this9.dimmer && _this9.viewport.particles.remove(_this9.dimmer);
            _this9.dimmer = false;
          });
        }
      });
    }
  }, {
    key: "release_2",
    value: function release_2() {
      if (!this.args.boltDash) {
        return;
      }

      this.args.opacity = 1;
      this.args.boltDash = false;
      this.args.xSpeed /= 2;
      this.args.ySpeed /= 2;
      this.args.gSpeed /= 3;
      this.dimmer && this.viewport.particles.remove(this.dimmer);
      this.dimmer = false;
    }
  }, {
    key: "command_3",
    value: function command_3() {
      var _this10 = this;

      if (this.args.ignore && !this.isSuper) {
        return;
      }

      this.isSuper = !this.isSuper;
      this.isHyper = !this.isHyper;
      this.onTimeout(150, function () {
        if (_this10.args.rings === 0) {
          _this10.isSuper = false;
          _this10.isHyper = false;

          _this10.setProfile();
        }

        ;
      });
      this.setProfile();
    }
  }, {
    key: "setProfile",
    value: function setProfile() {
      if (this.isHyper) {
        this.args.spriteSheet = this.superSpriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxSuper;
        this.args.jumpForce = this.jumpForceSuper;
        this.args.accel = this.accelSuper;
      } else if (this.isSuper) {
        this.args.spriteSheet = this.superSpriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxSuper;
        this.args.jumpForce = this.jumpForceSuper;
        this.args.accel = this.accelSuper;
      } else {
        this.args.spriteSheet = this.spriteSheet;
        this.args.gSpeedMax = this.gSpeedMaxNormal;
        this.args.jumpForce = this.jumpForceNormal;
        this.args.accel = this.accelNormal;
      }
    }
  }, {
    key: "findNearestRing",
    value: function findNearestRing() {
      return this.findDashableRing(64);
    }
  }, {
    key: "findDashableRing",
    value: function findDashableRing() {
      var _this11 = this;

      var maxDist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;

      var findRing = function findRing(actor) {
        if (!(actor instanceof _Ring.Ring)) {
          return false;
        }

        var direction = Math.sign(_this11.args.xSpeed);

        if (direction > 0 && actor.x < _this11.x) {
          return false;
        }

        if (direction < 0 && actor.x > _this11.x) {
          return false;
        }

        return true;
      };

      var ring = this.findNearestActor(findRing, maxDist);

      if (!ring) {
        return;
      }

      var nextRing = ring.findNearestActor(findRing, maxDist);

      if (!nextRing) {
        return;
      }

      var firstAngle = Math.atan2(this.y - ring.y, this.x - ring.x);
      var secondAngle = Math.atan2(ring.y - nextRing.y, ring.x - nextRing.x);

      if (Math.abs(firstAngle - secondAngle) > Math.PI / 2) {
        return;
      }

      return ring;
    }
  }, {
    key: "lightDash",
    value: function lightDash(ring) {
      if (!this.args.falling) {
        this.lightDashing = false;
        return false;
      }

      var currentAngle;
      this.spindashCharge = 0;
      var angle = Math.atan2(ring.y - this.y, ring.x - this.x);
      currentAngle = this.args.groundAngle;
      var angleDiff = Math.abs(currentAngle - angle);
      var dashSpeed = this.distanceFrom(ring) * 4 * (Math.PI / 2 / angleDiff);
      var maxDash = 55;

      if (dashSpeed > maxDash) {
        dashSpeed = maxDash;
      }

      var space = this.scanForward(dashSpeed, 0.5);

      if (space && dashSpeed > space) {
        dashSpeed = space;
      }

      var direction = Math.sign(this.args.xSpeed) || Math.sign(this.args.gSpeed);

      if (this.args.direction < 0) {
        this.args.animation = 'lightdash-back';
      } else if (this.args.direction > 0) {
        this.args.animation = 'lightdash';
      }

      var breakGroundAngle = Math.PI / 4;
      this.args.airAngle = angle;
      this.lightDashing = true;
      this.args.xSpeed = dashSpeed * Math.cos(angle) * 0.5;
      this.args.ySpeed = dashSpeed * Math.sin(angle) * 0.5;
      this.lightDashTimeout();
    }
  }, {
    key: "collect",
    value: function collect(pickup) {
      _get(_getPrototypeOf(Sonic.prototype), "collect", this).call(this, pickup);

      if (pickup instanceof _Ring.Ring) {
        if (this.lightDashing) {
          var ring = this.findNearestActor(function (actor) {
            return actor instanceof _Ring.Ring;
          }, 128);

          if (ring) {
            // this.args.x = pickup.x;
            // this.args.y = pickup.y;
            this.lightDash(ring);
          } else {
            this.lightDashing = false;
            this.args["float"] = 0;
          }
        }
      }
    }
  }, {
    key: "lightDashTimeout",
    value: function lightDashTimeout() {
      var _this12 = this;

      if (this.clearLightDash) {
        this.clearLightDash();
        this.clearLightDash = false;
      }

      this.clearLightDash = this.viewport.onFrameOut(9, function () {
        _this12.lightDashing = false;
        _this12.args["float"] = 0;
      });
    }
  }, {
    key: "setCameraMode",
    value: function setCameraMode() {
      if (this.args.boltDash) {
        this.args.cameraMode = 'draggable';
      } else if (this.args.wallSticking) {
        this.args.cameraMode = 'aerial';
      } else {
        _get(_getPrototypeOf(Sonic.prototype), "setCameraMode", this).call(this);
      }
    }
  }, {
    key: "startle",
    value: function startle() {
      var _this13 = this;

      _get(_getPrototypeOf(Sonic.prototype), "startle", this).call(this);

      this.onNextFrame(function () {
        return _this13.args.animation = 'startle';
      });
    }
  }, {
    key: "die",
    value: function die() {
      var _this14 = this;

      _get(_getPrototypeOf(Sonic.prototype), "die", this).call(this);

      this.onNextFrame(function () {
        return _this14.args.animation = 'dead';
      });
    }
  }, {
    key: "loseRings",
    value: function loseRings(count, age) {
      _get(_getPrototypeOf(Sonic.prototype), "loseRings", this).call(this, count, age);

      if (this.viewport.args.audio && this.sampleRingLoss) {
        this.sampleRingLoss.volume = 0.15 + Math.random() * -0.05;
        this.sampleRingLoss.play();
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this15 = this;

      if (other instanceof _Spring.Spring) {
        this.onNextFrame(function () {
          if (!_this15.args.falling) {
            return;
          }

          _this15.springing = true;
          _this15.args.animation = 'springdash';
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return !this.args.wallSticking;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }, {
    key: "facePoint",
    get: function get() {
      if (this.args.wallSticking) {
        return this.rotatePoint(0, -5);
      }

      return _get(_getPrototypeOf(Sonic.prototype), "facePoint", this);
    }
  }, {
    key: "crossRegionBoundary",
    value: function crossRegionBoundary(region, entered) {
      if (region instanceof _GrindingRegion.GrindingRegion) {
        if (!entered) {
          if (this.args.falling) {
            this.args.animation = 'springdash';
          } else {
            this.args.grinding = false;
          }
        }
      }

      _get(_getPrototypeOf(Sonic.prototype), "crossRegionBoundary", this).call(this, region, entered);
    }
  }]);

  return Sonic;
}(_PointActor2.PointActor);

exports.Sonic = Sonic;
});

;require.register("actor/Spawner.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spawner = void 0;

var _PointActor2 = require("./PointActor");

var _ObjectPalette = require("../ObjectPalette");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Spawner = /*#__PURE__*/function (_PointActor) {
  _inherits(Spawner, _PointActor);

  var _super = _createSuper(Spawner);

  function Spawner() {
    var _this;

    _classCallCheck(this, Spawner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 16;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-spawner';
    return _this;
  }

  _createClass(Spawner, [{
    key: "activate",
    value: function activate() {
      if (!this.args.spawn || !this.args.point) {
        return;
      }

      var point = this.viewport.objDefs.get(this.args.point);
      var type = _ObjectPalette.ObjectPalette[this.args.spawn]; // console.log(point, type);

      if (!point || !type) {
        return;
      }

      var spawned = new type({
        x: point.x,
        y: point.y
      });

      var _iterator = _createForOfIteratorHelper(this.def),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              property = _step$value[0],
              value = _step$value[1];

          if (property === 'point' || property === 'type') {
            continue;
          }

          spawned.args[property] = value;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      spawned.args[name] = this.args.spawn;
      this.viewport.spawn.add({
        object: spawned
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Spawner;
}(_PointActor2.PointActor);

exports.Spawner = Spawner;
});

;require.register("actor/Spikes.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spikes = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Spikes = /*#__PURE__*/function (_PointActor) {
  _inherits(Spikes, _PointActor);

  var _super = _createSuper(Spikes);

  function Spikes(args, parent) {
    var _this;

    _classCallCheck(this, Spikes);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-spikes';
    _this.args.width = args.width || 32;
    _this.args.height = args.height || 32;
    _this.args.pointing = _this.args.pointing || 0;
    _this.hazard = true;
    return _this;
  }

  _createClass(Spikes, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(Spikes.prototype), "onRendered", this).call(this, event);

      this.autoAttr.get(this.box)['data-pointing'] = 'pointing';
    }
  }, {
    key: "startle",
    value: function startle() {}
  }, {
    key: "damage",
    value: function damage() {}
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other.isRegion) {
        return;
      }

      if (this.args.falling && !this.args["float"]) {
        other.damage(false);
        return;
      }

      if (type === this.args.pointing) {
        if (this.args.pointing === 3) {
          var speed = other.args.xSpeed || other.args.gSpeed * (other.args.mode === 2 ? -1 : 1);

          if (speed <= 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 1) {
          var _speed = other.args.xSpeed || other.args.gSpeed * (other.args.mode === 2 ? -1 : 1);

          if (_speed >= 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 2) {
          var _speed2 = other.args.ySpeed || other.args.gSpeed * (other.args.mode === 1 ? -1 : 1);

          if (_speed2 <= 0) {
            other.damage(this);
          }
        } else if (this.args.pointing === 0) {
          var _speed3 = other.args.ySpeed || other.args.gSpeed * (other.args.mode === 3 ? -1 : 1);

          if (_speed3 >= 0) {
            other.damage(this);
          }
        }
      }

      return true;
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Spikes), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);
      return obj;
    }
  }]);

  return Spikes;
}(_PointActor2.PointActor);

exports.Spikes = Spikes;
});

;require.register("actor/SpikesSmall.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpikesSmall = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor = require("./PointActor");

var _Spikes2 = require("./Spikes");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SpikesSmall = /*#__PURE__*/function (_Spikes) {
  _inherits(SpikesSmall, _Spikes);

  var _super = _createSuper(SpikesSmall);

  function SpikesSmall(args, parent) {
    var _this;

    _classCallCheck(this, SpikesSmall);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-spikes actor-spikes-small';
    _this.args.width = args.width || 32;
    _this.args.height = 10;
    _this.args.pointing = _this.args.pointing || 0;
    _this.hazard = true;

    if (_this.args.width < 16) {
      _this.args.narrow = true;
    }

    return _this;
  }

  _createClass(SpikesSmall, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(SpikesSmall.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/0A3H.wav');
      }

      var breakSplit = 4;

      if (this.sprite && !this.graphic) {
        this.graphic = new _Tag.Tag("<svg style  = \"--breakSplit: ".concat(breakSplit, ";\" data-narrow = \"").concat(this.args.narrow, "\">\n\t\t\t\t<defs>\n\t\t\t\t\t<pattern\n\t\t\t\t\t\tid     = \"spikes-").concat(this._id, "\"\n\t\t\t\t\t\twidth  = \"").concat(16 / this.args.width, "\"\n\t\t\t\t\t\theight = \"1\"\n\t\t\t\t\t\tx      = \"0\"\n\t\t\t\t\t\ty      = \"0\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<image href = \"/Sonic/spikes-small-single.png\">\n\t\t\t\t\t</pattern>\n\t\t\t\t</defs>\n\t\t\t\t<rect fill = \"url(#spikes-").concat(this._id, ")\"></rect>\n\t\t\t\t<rect fill = \"url(#spikes-").concat(this._id, ")\"></rect>\n\t\t\t</svg>"));
        this.sprite.appendChild(this.graphic.node);
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.args.broken || other instanceof _Spikes2.Spikes || other.args["static"]) {
        return false;
      }

      if (other.isVehicle) {
        this.args.broken = true;
        this.args.gravity = 0.40;
        other.halt(10);
        var minSpace = 8 + (other.args.width + this.args.width) / 2;
        other.args.x = this.x + -minSpace * Math.sign(this.x - other.x);
        this.args.type = 'actor-item actor-spikes actor-spikes-small actor-spikes-breaking';
        this.viewport.onFrameOut(7, function () {
          _this2.args.falling = true;
          _this2.args.xSpeed = other.args.hSpeed * 0.25 + 1 * Math.pow(Math.random(), 2);
          _this2.args.ySpeed = -5 + -5 * Math.pow(Math.random(), 2);
          _this2.args.type = 'actor-item actor-spikes actor-spikes-small actor-spikes-broken';

          if (_this2.sample) {
            _this2.sample.volume = 0.7 + Math.random() * -0.5;
            _this2.sample.currentTime = 0.471;

            _this2.sample.play();
          }
        });
        this.args["float"] = 8;
        this.noClip = true;
        return false;
      }

      return _get(_getPrototypeOf(SpikesSmall.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "activate",
    value: function activate() {
      this.args["float"] = 0;
      this.noClip = true;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.args.broken && !this.noClip;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(SpikesSmall), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = 10;
      obj.args.x = obj.originalX = objDef.x + Math.floor(objDef.width / 2);
      return obj;
    }
  }]);

  return SpikesSmall;
}(_Spikes2.Spikes);

exports.SpikesSmall = SpikesSmall;
});

;require.register("actor/Spinner.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Boosted = Symbol('Boosted');

var Spinner = /*#__PURE__*/function (_PointActor) {
  _inherits(Spinner, _PointActor);

  var _super = _createSuper(Spinner);

  function Spinner() {
    var _this;

    _classCallCheck(this, Spinner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-spinner';
    _this.args.width = 64;
    _this.args.height = 24;
    _this.args.direction = _this.args.direction || 1;
    return _this;
  }

  _createClass(Spinner, [{
    key: "update",
    value: function update() {
      if (!this.sample) {
        this.sample = new Audio('/Sonic/S2_2B.wav');
      }
    }
  }, {
    key: "collideB",
    value: function collideB(other) {
      if (other.args.gSpeed === 0) {// return;
      }

      if (other.args.falling || other[Boosted]) {
        return;
      }

      this.viewport.onFrameOut(10, function () {
        return delete other[Boosted];
      });
      other[Boosted] = this;
      var toSpeed = this.args.toSpeed || 40;
      other.args.ignore = 2;
      other.args.direction = this.args.direction;
      other.args.facing = this.args.direction > 0 ? 'right' : 'left';
      other.args.gSpeed = Math.abs(other.args.gSpeed) > toSpeed ? Math.abs(other.args.gSpeed) * this.args.direction : toSpeed * this.args.direction;

      if (this.viewport.args.audio && this.sample) {
        this.sample.currentTime = 0;
        this.sample.volume = 0.5 + Math.random() / 2.5;
        this.sample.play();
      }
    }
  }]);

  return Spinner;
}(_PointActor2.PointActor);

exports.Spinner = Spinner;
});

;require.register("actor/Spring.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spring = void 0;

var _LayerSwitch = require("./LayerSwitch");

var _PointActor2 = require("./PointActor");

var _Region = require("../region/Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WillSpring = Symbol('WillSpring');
var WontSpring = Symbol('WontSpring');

var Spring = /*#__PURE__*/function (_PointActor) {
  _inherits(Spring, _PointActor);

  var _super = _createSuper(Spring);

  function Spring() {
    var _this;

    _classCallCheck(this, Spring);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _defineProperty(_assertThisInitialized(_this), "template", "<div\n\t\tclass = \"point-actor actor-item [[type]] [[collType]] [[active]]\"\n\t\tstyle = \"\n\t\t\tdisplay:[[display]];\n\t\t\t--angle:[[angle]];\n\t\t\t--airAngle:[[airAngle]];\n\t\t\t--ground-angle:[[groundAngle]];\n\t\t\t--height:[[height]];\n\t\t\t--width:[[width]];\n\t\t\t--x:[[x]];\n\t\t\t--y:[[y]];\n\t\t\"\n\t\tdata-colliding = \"[[colliding]]\"\n\t\tdata-diagonal  = \"[[diagonal]]\"\n\t\tdata-falling   = \"[[falling]]\"\n\t\tdata-facing    = \"[[facing]]\"\n\t\tdata-angle     = \"[[angle|rad2deg]]\"\n\t\tdata-mode      = \"[[mode]]\"\n\t>\n\t\t<div\n\t\t\tdata-color = \"[[color]]\"\n\t\t\tdata-type  = \"[[base]]\"\n\t\t\tclass      = \"spring-pad\"\n\t\t\tstyle = \"--color:[[color]]deg\"\n\t\t></div>\n\t\t<div class = \"sprite\"></div>\n\t</div>");

    _this.args.type = 'actor-item actor-spring';
    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 32;
    _this.args.color = _this.args.color || 0;
    _this.args["static"] = true;
    _this.args.actingOn = new Set();
    return _this;
  }

  _createClass(Spring, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Spring.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/spring-activated.wav');
        this.sample.volume = 0.05 + Math.random() * 0.1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this2 = this;

      if (other.args.hangingFrom) {
        other.args.hangingFrom.unhook();
      }

      if (other[WontSpring]) {
        return false;
      }

      if (other.args["static"]) {
        return false;
      }

      if (other instanceof this.constructor) {
        return false;
      }

      if (other instanceof _LayerSwitch.LayerSwitch) {
        return false;
      }

      _get(_getPrototypeOf(Spring.prototype), "collideA", this).call(this, other);

      if (this.args.actingOn.has(other)) {
        return;
      }

      if (other.args.platform) {
        return;
      }

      if (other instanceof _Region.Region) {
        return;
      }

      if (this.viewport.args.audio && this.sample) {
        this.sample.currentTime = 0;
        this.sample.volume = 0.05 + Math.random() * 0.1;
        this.sample.play();
      }

      if (other[WillSpring]) {
        return;
      }

      this.args.actingOn.add(other);
      this.viewport.onFrameOut(1, function () {
        _this2.args.active = true;
      });
      this.viewport.onFrameOut(5, function () {
        delete other[WillSpring];
        _this2.args.active = false;

        _this2.args.actingOn["delete"](other);
      });

      if (other.noClip) {
        return;
      } // other.args.direction = Math.sign(this.args.gSpeed);


      other[WillSpring] = true;
      other.args.gSpeed = 0;
      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      var rounded = this.roundAngle(this.args.angle, 8, true);

      if (this.viewport.settings.rumble && other.controller && other.controller.rumble) {
        other.controller.rumble({
          duration: 120,
          strongMagnitude: 1.0,
          weakMagnitude: 1.0
        });
        this.onTimeout(100, function () {
          other.controller.rumble({
            duration: 500,
            strongMagnitude: 0.0,
            weakMagnitude: 0.25
          });
        });
      }

      other.args.x = this.x + Math.cos(rounded) * 16;
      other.args.y = this.y + Math.sin(rounded) * 16;
      other.args.jumping = false;
      other.args.ignore = other.args.falling ? 4 : 12;
      other.args["float"] = 2;
      this.viewport.onFrameOut(2, function () {
        other.args["float"] = 2;
        other.args.direction = Math.sign(xImpulse);
        other.impulse(_this2.args.power, rounded, ![0, Math.PI].includes(_this2.args.angle) && Math.abs(Math.PI - _this2.args.angle) > 0.01);
      });
      var xImpulse = Number(Number(Math.cos(rounded) * 1).toFixed(3));
      var yImpulse = Number(Number(Math.sin(rounded) * 1).toFixed(3));
      var isRolling = other.args.rolling;

      if (![0, Math.PI].includes(this.args.angle) && Math.abs(Math.PI - this.args.angle) > 0.01 || other.args.falling || other.args.mode !== 0) {
        other.args.falling = true;
        other.args.mode = 0;
      } else {
        this.viewport.onFrameOut(3, function () {
          return other.args.rolling = isRolling;
        });
        this.viewport.onFrameOut(2, function () {
          return other.args.rolling = isRolling;
        });
        this.viewport.onFrameOut(1, function () {
          return other.args.rolling = isRolling;
        });
      }

      if (Math.abs(other.args.xSpeed) < 3 || Math.sign(other.args.xSpeed) !== Math.sign(xImpulse)) {
        other.args.xSpeed = xImpulse;
      } else {
        other.args.xSpeed += xImpulse;
      }

      if (Math.abs(other.args.ySpeed) < 3 || Math.sign(other.args.ySpeed) !== Math.sign(yImpulse)) {
        other.args.ySpeed = yImpulse;
      } else {
        other.args.ySpeed += yImpulse;
      }

      other.args.airAngle = this.args.angle;
      other.args.displayAngle = 0;
      other.args.groundAngle = 0;
      other.args.airAngle = -Math.PI / 2;
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.args.actingOn.clear();
      this.args.active = false;
    }
  }, {
    key: "canStick",
    get: function get() {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Spring), "fromDef", this).call(this, objDef);

      obj.args.angle = Number(obj.args.angle);
      obj.args.width = objDef.width || 32;
      obj.args.height = objDef.height || 32;
      return obj;
    }
  }]);

  return Spring;
}(_PointActor2.PointActor);

exports.Spring = Spring;

_defineProperty(Spring, "WontSpring", WontSpring);
});

;require.register("actor/Springboard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Springboard = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Springboard = /*#__PURE__*/function (_PointActor) {
  _inherits(Springboard, _PointActor);

  var _super = _createSuper(Springboard);

  function Springboard() {
    var _this;

    _classCallCheck(this, Springboard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-springboard';
    _this.args.width = 56;
    _this.args.height = 16;
    _this.args.animation = 'idle';
    return _this;
  }

  _createClass(Springboard, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Springboard.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/spring-activated.wav');
        this.sample.currentTime = 0;
        this.sample.volume = 0.05 + Math.random() * 0.1;
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (!other.controllable || this.args.ignore) {
        return;
      }

      var power = Math.min(1, Math.max(0, 1 + (-this.x + -26 + other.x) / 56));

      if (power < 0.5) {
        power *= 0.5;
      }

      this.args.animation = 'depressed';

      if (other.args.jumping && this.args.animation !== 'idle' && other.args.ySpeed < 0) {
        this.args.ignore = 6;
        this.args.animation = 'idle';
        var xSpeed = Math.max(other.args.gSpeed / 2, other.args.xSpeed);
        this.onNextFrame(function () {
          other.args.xSpeed = xSpeed;
          other.args.ySpeed += -12 * power;
        });

        if (this.viewport && this.viewport.args.audio && this.sample) {
          this.sample.volume = 0.05 + power * 0.3;
          this.sample.currentTime = 0;
          this.sample.play();
          console.log('A', power);
        }
      }

      if (-this.x + other.x <= -26) {
        this.args.animation = 'idle';
      }

      if ((-this.x + other.x >= 26 || Math.abs(other.args.gSpeed) > 13) && other.args.mode === 0) {
        this.args.ignore = 6;

        var _xSpeed = Math.max(other.args.gSpeed / 2, other.args.xSpeed);

        this.onNextFrame(function () {
          other.args.falling = true;
          other.args.xSpeed = _xSpeed;
          other.args.ySpeed = -8;
        });
        this.viewport.onFrameOut(5, function () {
          return _this2.args.animation = 'idle';
        });

        if (this.viewport && this.viewport.args.audio && this.sample) {
          this.sample.volume = 0.05 + power * 0.1;
          this.sample.play();
          console.log('B', power);
        }
      }

      if (other.args.ySpeed < 0) {
        this.args.animation = 'idle';
      }
    }
  }]);

  return Springboard;
}(_PointActor2.PointActor);

exports.Springboard = Springboard;
});

;require.register("actor/StarBalloon.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarBalloon = void 0;

var _Balloon2 = require("./Balloon");

var _Spring = require("./Spring");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarBalloon = /*#__PURE__*/function (_Balloon) {
  _inherits(StarBalloon, _Balloon);

  var _super = _createSuper(StarBalloon);

  function StarBalloon() {
    var _this;

    _classCallCheck(this, StarBalloon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-balloon actor-star-balloon';
    _this.args.target = _this.args.target || 0;
    _this.args.gravity = 0.475;
    _this[_Spring.Spring.WontSpring] = true;
    return _this;
  }

  _createClass(StarBalloon, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(StarBalloon.prototype), "update", this).call(this);

      if (!this.popped) {
        if (!this.launched) {
          this.args.ySpeed = 0; // this.args.ySpeed = Math.sin(this.viewport.args.frameId / 10) / 5;
        } else {
          var maxSpeed = this.args.target - this.y;
          this.args.ySpeed = Math.min(8, Math.abs(maxSpeed)) * Math.sign(maxSpeed);
        }
      }

      this.args.groundAngle = 0;
    }
  }, {
    key: "activate",
    value: function activate() {
      this.launched = true;
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      if (!other.controllable || other.args.hangingFrom) {
        return false;
      }

      if (this.popped) {
        return false;
      }

      if (other.args.ySpeed >= 0 || other.args.spinning) {
        other.args.ySpeed = -14;
        this.pop();
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.tags.sprite && this.tags.sprite.classList.remove('popped');
      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.args.xSpeed = 0;
      this.args.ySpeed = 0;
      this.args["float"] = -1;
      this.popped = this.launched = false;
      this.args.falling = true;
      this.viewport.setColCell(this);
      this.noClip = false;
    }
  }, {
    key: "damage",
    value: function damage() {
      this.pop();
    }
  }, {
    key: "pop",
    value: function pop() {
      var exploded = new CustomEvent('exploded', {
        detail: {
          actor: this
        }
      });
      this.dispatchEvent(exploded);
      this.tags.sprite.classList.add('popped');
      this.popped = true;
      this.args["float"] = 0;
      this.noClip = true;
    }
  }]);

  return StarBalloon;
}(_Balloon2.Balloon);

exports.StarBalloon = StarBalloon;
});

;require.register("actor/StarPost.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarPost = void 0;

var _CharacterString = require("../ui/CharacterString");

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Monitor = require("./Monitor");

var _RingMonitor = require("./monitor/RingMonitor");

var _SheildElectricMonitor = require("./monitor/SheildElectricMonitor");

var _SheildWaterMonitor = require("./monitor/SheildWaterMonitor");

var _SheildFireMonitor = require("./monitor/SheildFireMonitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StarPost = /*#__PURE__*/function (_PointActor) {
  _inherits(StarPost, _PointActor);

  var _super = _createSuper(StarPost);

  function StarPost() {
    var _this$args$active;

    var _this;

    _classCallCheck(this, StarPost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-star-post';
    _this.args.width = 16;
    _this.args.height = 48;
    _this.args.active = (_this$args$active = _this.args.active) !== null && _this$args$active !== void 0 ? _this$args$active : false;
    _this.args["static"] = true;
    _this.spinning = false;
    return _this;
  }

  _createClass(StarPost, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      _get(_getPrototypeOf(StarPost.prototype), "update", this).call(this);

      if (this.viewport && this.viewport.args.audio && !this.sample) {
        this.sample = new Audio('/Sonic/starpost-active.wav');
        this.sample.volume = 0.5 + Math.random() * 0.025;
      }

      if (this.args.wasActive) {
        var monitor = new _RingMonitor.RingMonitor({
          direction: 0,
          ySpeed: -4,
          x: this.x - 10,
          y: this.y - 48
        });
        this.viewport.onFrameOut(12, function () {
          _this2.viewport.spawn.add({
            object: monitor
          });
        });
        this.args.wasActive = false;
      }
    }
  }, {
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(StarPost.prototype), "onRendered", this).call(this);

      this.sprite = this.findTag('div.sprite');
      this.box = this.findTag('div');
      this.headBox = new _Tag.Tag('<div class = "star-post-head-box">');
      this.head = new _Tag.Tag('<div class = "star-post-head">');
      this.headBox.appendChild(this.head.node);
      this.box.appendChild(this.headBox.node);
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this3 = this;

      _get(_getPrototypeOf(StarPost.prototype), "collideA", this).call(this, other);

      if (other.args.owner) {
        other = other.args.owner;
      }

      if (!other.controllable && !other.occupant) {
        return;
      }

      if (!this.box) {
        return;
      }

      if (!this.args.active) {
        this.args.active = true;
        this.box.setAttribute('data-direction', other.args.direction);
        this.box.setAttribute('data-active', 'true');
        this.box.setAttribute('data-spin', 'true');
        this.viewport.args.audio && this.sample && this.sample.play();
        var throwSpeed = other.args.gSpeed || other.args.xSpeed;

        if (Math.abs(throwSpeed) > 8) {
          throwSpeed = 8 * Math.sign(throwSpeed);
        }

        var monitorClasses = other.args.rings > 50 ? [_RingMonitor.RingMonitor, _SheildFireMonitor.SheildFireMonitor, _SheildWaterMonitor.SheildWaterMonitor, _SheildElectricMonitor.SheildElectricMonitor] : [_RingMonitor.RingMonitor];
        var monitorClass = monitorClasses[Math.floor(Math.random() * monitorClasses.length)];
        var monitor = new monitorClass({
          direction: other.args.direction,
          xSpeed: throwSpeed,
          ySpeed: -5,
          x: this.x - 10,
          y: this.y - 48
        });
        this.viewport.storeCheckpoint(other.args.canonical, this.args.id);
        this.viewport.spawn.add({
          object: monitor
        }); // this.viewport.onFrameOut(360, () => {
        // 	this.box.setAttribute('data-active', 'false');
        // 	this.box.setAttribute('data-spin', 'false');
        // 	this.args.active = false;
        // });

        this.spinning = true;
        this.viewport.onFrameOut(36, function () {
          _this3.spinning = false;
        });

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'starpost',
            eventAction: 'activated',
            eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
          });
        } // const time  = (this.viewport.args.frameId - this.viewport.args.startFrameId) / 60;
        // let minutes = String(Math.floor(Math.abs(time) / 60)).padStart(2,'0')
        // let seconds = String((Math.abs(time) % 60).toFixed(0)).padStart(2,'0');
        // const neg = time < 0 ? '-' : '';
        // if(neg)
        // {
        // 	minutes = Number(minutes);
        // }
        // const yardsPerFrame = other.args.gSpeed / 32;
        // const feetPerSecond = yardsPerFrame * 60 * 3;
        // this.args.charStrings = [
        // 	new CharacterString({value: `Speed: ${feetPerSecond.toFixed(3)} ft/s`})
        // 	, new CharacterString({value: `Time: ${neg}${minutes}:${seconds}`})
        // 	, new CharacterString({value: `Score: ${other.args.score}`})
        // 	, new CharacterString({value: `Rings: ${other.args.rings}`})
        // ];

      } // else if(other instanceof Projectile && !this.spinning)
      // {
      // 	this.box.setAttribute('data-direction', other.args.direction);
      // 	this.box.setAttribute('data-spin', 'false');
      // 	if(this.viewport.args.audio && this.sample)
      // 	{
      // 		this.sample.currentTime = 0;
      // 		this.sample.play();
      // 	}
      // 	this.onTimeout(0, () => this.box.setAttribute('data-spin', 'true'));
      // 	this.spinning = true;
      // 	this.onTimeout(600, () => this.spinning = false);
      // }

    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return StarPost;
}(_PointActor2.PointActor);

exports.StarPost = StarPost;
});

;require.register("actor/SteelCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SteelCrate = void 0;

var _Block = require("./Block");

var _BreakableBlock2 = require("./BreakableBlock");

var _Projectile = require("./Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SteelCrate = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(SteelCrate, _BreakableBlock);

  var _super = _createSuper(SteelCrate);

  function SteelCrate() {
    var _this$args$static;

    var _this;

    _classCallCheck(this, SteelCrate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-breakable-block actor-steel-crate';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["static"] = (_this$args$static = _this.args["static"]) !== null && _this$args$static !== void 0 ? _this$args$static : false;
    return _this;
  }

  _createClass(SteelCrate, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (other instanceof _Block.Block) {
        return true;
      }

      if (other instanceof _Projectile.Projectile && !this.broken) {
        this["break"]();
        return true;
      }

      if (other.args.bouncing && !this.broken) {
        this["break"]();
        return true;
      }

      if (other.punching && !this.broken) {
        this["break"]();
        return false;
      }

      if (other.args.rolling && !this.broken) {
        return true;
      }

      if (type === 0 && other.controllable) {
        return true;
      }

      if (type !== 1 && type !== 3 || other.y <= this.y - this.args.height) {
        return true;
      }

      if (!this.viewport) {
        return false;
      }

      if (type === -1 || other.args.rolling) {
        return _get(_getPrototypeOf(SteelCrate.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return SteelCrate;
}(_BreakableBlock2.BreakableBlock);

exports.SteelCrate = SteelCrate;
});

;require.register("actor/Stopper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stopper = void 0;

var _BreakableBlock2 = require("./BreakableBlock");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Stopper = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(Stopper, _BreakableBlock);

  var _super = _createSuper(Stopper);

  function Stopper() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Stopper);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-breakable-block actor-stopper';
    _this.args.height = 16;
    _this.args["float"] = -1;
    return _this;
  }

  _createClass(Stopper, [{
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.broken) {
        return false;
      }

      if (!this.broken && type === 2 || Math.abs(other.args.ySpeed) > 20 && type === 0) {
        if (other.args.ySpeed > 0 || other.ySpeedLast > 0) {
          other.args.groundAngle = 0;
          other.args.x = this.args.x;
          other.args.xSpeed = 0;
          other.args.ySpeed = Math.abs(other.args.gSpeed);
          other.args.falling = true;
          other.args.mode = 0;
          this["break"]();
          return false;
        }

        return true;
      } else if (other.args.jumping && other.args.ySpeed > 0 || other.args.rolling) {
        other.args.x = this.args.x;
        other.args.y = this.args.y;
        this.viewport.onFrameOut(1, function () {
          other.args.groundAngle = 0;
          other.args.falling = true;
          other.args.animation = 'rolling';
          other.args.x = _this2.args.x;
          other.args.gSpeed = 0;
          other.args.xSpeed = 0;
          other.args.ySpeed = Math.abs(other.args.gSpeed);
        });

        if (other.args.jumping) {
          other.args.gSpeed = 0;
          other.args.xSpeed = 0;
          other.args.ySpeed = 0;
          other.args.ignore = 30;
          other.args["float"] = 30;
          this.viewport.onFrameOut(30, function () {
            other.args.xSpeed = 0;
            other.args.ySpeed = 10;
          });
        }

        return _get(_getPrototypeOf(Stopper.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return Stopper;
}(_BreakableBlock2.BreakableBlock);

exports.Stopper = Stopper;
});

;require.register("actor/SuperRing.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuperRing = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var THREE = require('three');

var ColladaLoader = require('three-collada-loader');

var SuperRing = /*#__PURE__*/function (_PointActor) {
  _inherits(SuperRing, _PointActor);

  var _super = _createSuper(SuperRing);

  function SuperRing() {
    var _this;

    _classCallCheck(this, SuperRing);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-super-ring actor-item';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["float"] = -1;
    _this.args.gone = false;
    _this.args.xRot = 0;
    _this.args.yRot = 0;
    _this.args.zRot = 0;
    _this.args.speed = 4;
    _this.leaving = new WeakSet();
    _this.args.xOff = 0;
    _this.args.yOff = 0;
    return _this;
  }

  _createClass(SuperRing, [{
    key: "onAttached",
    value: function onAttached() {
      this.initRenderer();
      this.pinch(0);
    }
  }, {
    key: "initRenderer",
    value: function initRenderer() {
      var _this2 = this;

      this.cameraRear = new THREE.PerspectiveCamera(12.5, undefined, 10, 100);
      this.cameraFore = new THREE.PerspectiveCamera(12.5, undefined, 1, 10.1);
      var modelUrl = '/models/ring.dae';
      var specular = 0xBBBBBB;
      var color = 0xBBBB00;
      var outline = 0x000000; // const finalX     = qTurn / 8 * 7;

      var emissive = 0x999900;
      var lineColor = 0x0000AA;
      var colladaLoader = new ColladaLoader();
      colladaLoader.load(modelUrl, function (response) {
        var geometry = response.dae.geometries['root-mesh'].mesh.geometry3js;
        _this2.cameraRear.position.z = 10;
        _this2.cameraRear.position.x = 0;
        _this2.cameraRear.position.y = 0;
        _this2.cameraFore.position.z = 10;
        _this2.cameraFore.position.x = 0;
        _this2.cameraFore.position.y = 0;
        _this2.scene = new THREE.Scene();
        var edgeGeometry = new THREE.EdgesGeometry(geometry);
        var goldMaterial = new THREE.MeshPhongMaterial({
          side: THREE.FrontSide,
          transparent: true,
          skinning: true,
          emissive: emissive,
          specular: specular,
          color: color
        });
        var blackMaterial = new THREE.MeshBasicMaterial({
          color: outline,
          side: THREE.BackSide
        });
        _this2.mainMesh = new THREE.Mesh(geometry, goldMaterial);
        _this2.outlineMesh = new THREE.Mesh(geometry, blackMaterial);
        _this2.inlineMesh = new THREE.Mesh(geometry, blackMaterial);

        _this2.outlineMesh.scale.multiplyScalar(1.075);

        _this2.inlineMesh.scale.multiplyScalar(0.925);

        _this2.wireMaterial = new THREE.LineBasicMaterial({
          depthTest: true,
          linewidth: 1.25,
          color: lineColor,
          transparent: true,
          opacity: 0.125
        });
        _this2.wireframe = new THREE.LineSegments(edgeGeometry, _this2.wireMaterial);
        var light = new THREE.DirectionalLight(0xFFFFFF, 0.333);
        light.position.set(1, 1.75, 0).normalize();
        light.target = _this2.wireframe;
        var light2 = new THREE.DirectionalLight(0xFFFFFF);
        light2.position.set(0.75, -1, 0).normalize();
        light.target = _this2.wireframe;

        _this2.scene.add(_this2.mainMesh);

        _this2.scene.add(_this2.outlineMesh);

        _this2.scene.add(_this2.inlineMesh);

        _this2.scene.add(_this2.wireframe);

        _this2.scene.add(light);

        _this2.rendererRear = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true
        });
        _this2.rendererFore = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true
        });

        _this2.resizeRenderer();

        var parent = _this2.tags.sprite.node.parentNode;
        parent.appendChild(_this2.rendererRear.domElement);
        parent.appendChild(_this2.rendererFore.domElement);

        _this2.rendererRear.render(_this2.scene, _this2.cameraRear);

        _this2.rendererFore.render(_this2.scene, _this2.cameraFore);
      });
    }
  }, {
    key: "resizeRenderer",
    value: function resizeRenderer() {
      var parent = this.tags.sprite.node;
      var width = this.args.width; //parent.clientWidth  || parent.offsetWidth || width || 0;

      var height = this.args.height; //parent.clientHeight || parent.offsetHeight || height || 0;

      var longAxis = width > height ? width : height;
      var shortAxis = width < height ? width : height;
      this.cameraRear.aspect = 1;
      this.cameraFore.aspect = 1;
      this.rendererRear.setSize(shortAxis, shortAxis);
      this.rendererFore.setSize(shortAxis, shortAxis); // parent.style.setProperty('--long-axis', longAxis + 'px');
      // parent.style.setProperty('--short-axis', shortAxis + 'px');

      this.wireMaterial.linewidth = shortAxis / 750;
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      _get(_getPrototypeOf(SuperRing.prototype), "update", this).call(this);

      if (!this.wireframe) {
        return;
      }

      if (this.caught) {
        this.wireframe.material.opacity = 0.125;
        var caught = this.caught;
        caught.args.xSpeed = 0;
        caught.args.ySpeed = 0;

        if (this.caught.yAxis > 0) {
          this.drop();
        } else if (this.caught.yAxis < 0) {
          this.wireframe.material.opacity = 0.25;
          this.args.speed++;
          caught.args.x = this.args.x;
          caught.args.y = this.args.y - 16;
        } else {
          var toX = this.args.x;
          var toY = this.args.y - 16;
          var speed = 12;

          if (caught.args.x !== toX) {
            caught.args.x += Math.sign(toX - caught.args.x) * this.args.speed;
          }

          if (caught.args.y !== toY) {
            caught.args.y += Math.sign(toY - caught.args.y) * this.args.speed;
          }

          if (Math.abs(caught.args.x - toX) < speed) {
            caught.args.x = toX;
          }

          if (Math.abs(caught.args.y - toY) < speed) {
            caught.args.y = toY;
          }
        }

        if (this.args.speed < 5) {
          this.args.speed += 0.25;
        }

        if (this.args.speed > 5) {
          this.args.speed -= 0.5;
        }
      } else {
        this.wireframe.material.opacity = 0.1;

        if (this.args.speed > 4) {
          this.args.speed -= 0.125;
        }
      }

      var yRot = this.args.yRot / 60 % (Math.PI * 2);

      if (yRot > Math.PI / 2 - 0.125 && yRot < Math.PI / 2 + 0.125) {
        if (this.args.speed > 20) {
          this.onTimeout(500, function () {
            return _this3.drop();
          });
        }
      } // this.wireframe.rotation.x
      //	= this.mainMesh.rotation.x
      //	= this.outlineMesh.rotation.x
      //	= this.inlineMesh.rotation.x
      //	= this.args.xRot / 200;


      this.wireframe.rotation.y = this.mainMesh.rotation.y = this.outlineMesh.rotation.y = this.inlineMesh.rotation.y = yRot;
      this.wireframe.rotation.z = this.mainMesh.rotation.z = this.outlineMesh.rotation.z = this.inlineMesh.rotation.z = this.args.zRot / 60;
      this.args.yRot += this.args.speed; // this.args.xRot++;

      this.args.zRot++;
      this.onTimeout(0, function () {
        _this3.rendererRear.render(_this3.scene, _this3.cameraRear);

        _this3.rendererFore.render(_this3.scene, _this3.cameraFore);
      });
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      var _this4 = this;

      _get(_getPrototypeOf(SuperRing.prototype), "collideA", this).call(this, other);

      if (!other.controllable || other.args.flying) {
        if (this.leaving["delete"](other)) {
          return;
        }

        return;
      }

      if (this.leaving.has(other)) {
        return;
      }

      if (this.caught) {
        this.caught.args.xSpeed = Math.sign(other.args.xSpeed) * 3 || 3;
        this.leaving.add(this.caught);
      }

      if (this.caught !== other) {
        this.drop();

        if (this.leaving.has(other)) {
          return;
        }

        this.onTimeout(500, function () {
          if (_this4.leaving.has(other)) {
            return;
          }

          _this4.caught = other;
        });
        this.grab();
      }

      other.args.xSpeed = 0;
      other.args.ySpeed = 0;
      other.args["float"] = -1;
    }
  }, {
    key: "drop",
    value: function drop() {
      var _this5 = this;

      if (this.caught) {
        var caught = this.caught;
        this.pinchFilterBg.classList.add('grabbing-start');
        this.pinch(-50, 15);
        this.leaving.add(caught);

        if (this.startGrab) {
          clearTimeout(this.startDrop);
          this.startDrop = false;
        }

        this.startDrop = this.onTimeout(150, function () {
          _this5.pinchFilterBg.classList.add('grabbing');

          caught.args["float"] = 0;
          caught.args.ySpeed = 10;

          if (_this5.dropDone) {
            clearTimeout(_this5.dropDone);
            _this5.dropDone = false;
          }

          _this5.dropDone = _this5.onTimeout(650, function () {
            _this5.pinchFilterBg.classList.remove('grabbing-start');

            _this5.pinchFilterBg.classList.remove('grabbing');

            _this5.pinch(0, 0);
          });
          _this5.caught = null;
        });
        this.onTimeout(1500, function () {
          _this5.leaving["delete"](caught);
        });
      }
    }
  }, {
    key: "grab",
    value: function grab() {
      var _this6 = this;

      if (this.pinchFilterFg) {
        this.pinchFilterFg.classList.add('grabbing-start');
        this.onTimeout(150, function () {
          _this6.pinchFilterFg.classList.add('grabbing');

          _this6.pinch(0, 100);

          _this6.onTimeout(650, function () {
            _this6.pinch(0, 0);

            _this6.pinchFilterFg.classList.remove('grabbing-start');

            _this6.pinchFilterFg.classList.remove('grabbing');
          });
        });
      }
    }
  }]);

  return SuperRing;
}(_PointActor2.PointActor);

exports.SuperRing = SuperRing;
});

;require.register("actor/Switch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Switch = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Switch = /*#__PURE__*/function (_PointActor) {
  _inherits(Switch, _PointActor);

  var _super = _createSuper(Switch);

  function Switch() {
    var _this$args$threshold;

    var _this;

    _classCallCheck(this, Switch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-switch';
    _this.args.width = 32;
    _this.args.height = _this.height = 16; // this.args.float  = -1;

    _this.removeTimer = null;
    _this.args.active = false;
    _this.args.latch = _this.args.latch || false;
    _this.activator = null;

    _this.args.bindTo('active', function (v) {
      _this.box && _this.box.setAttribute('data-active', v ? 'true' : 'false');
    });

    _this.args.threshold = (_this$args$threshold = _this.args.threshold) !== null && _this$args$threshold !== void 0 ? _this$args$threshold : 100;
    _this.ignore = 0;
    return _this;
  }

  _createClass(Switch, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Switch.prototype), "update", this).call(this);

      if (this.args.active) {
        this.args.height = this.height + -6;
      } else {
        this.args.height = this.height;
      }

      if (this.ignore > 0) {
        this.ignore--;
        return;
      }

      if (this.args.latch) {
        return;
      }

      if (!this.activator || this.activator.args.standingOn !== this || this.activator.y === this.args.y) {
        this.args.active = false;
        this.activator = null;
      }
    }
  }, {
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sample = new Audio('/Sonic/switch-activated.wav');
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      var _this2 = this;

      if (this.activator === other && other.y > this.y) {
        this.ignore = 8;
        return true;
      }

      if (other.args.ySpeed < 0) {
        if (other.args.ySpeed === 0 && other.y > this.y) {
          return true;
        }

        return false;
      }

      if (this.args.active && other.y < this.y) {
        return true;
      }

      if (other.isEffect || other.isRegion) {
        return;
      }

      if (other.y > this.y - this.args.height + 0) {
        return false;
      }

      if (this.args.threshold && other.args.weight < this.args.threshold) {
        return true;
      }

      other.onRemove(function () {
        return _this2.activator = null;
      });

      if (other.y <= this.y - this.args.height) {
        if (!this.args.active) {
          this.activate(other);
        }

        this.ignore = 8;
        this.args.active = true;
        this.activator = other; // if(type === 1 || type === 3)
        // {
        // 	return false;
        // }

        return true;
      }

      return false;
    }
  }, {
    key: "activate",
    value: function activate(other) {
      this.beep();

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        target.activate(other, this);
      }

      if (this.args.destroyLayer) {
        var layerId = this.args.destroyLayer;
        var layer = this.viewport.args.layers[layerId];

        if (layer) {
          layer.args.destroyed = true;
        }
      }

      if (this.args.water) {
        var _this$args$fillSpeed, _this$args$drainSpeed;

        var water = this.viewport.actorsById[this.args.water];
        var level = this.viewport.objDefs.get(this.args.setPoint);
        water.target = Number(water.y || 0) - Number(level.y || 0);
        water.args.fillSpeed = (_this$args$fillSpeed = this.args.fillSpeed) !== null && _this$args$fillSpeed !== void 0 ? _this$args$fillSpeed : water.args.fillSpeed;
        water.args.drainSpeed = (_this$args$drainSpeed = this.args.drainSpeed) !== null && _this$args$drainSpeed !== void 0 ? _this$args$drainSpeed : water.args.drainSpeed;
      }

      var spawnPoint = this.viewport.objDefs.get(this.args.point);
      var spawnType = this.viewport.objectPalette[this.args.spawn];

      if (spawnType && spawnPoint) {
        this.viewport.spawn.add({
          object: new spawnType({
            x: spawnPoint.x,
            y: spawnPoint.y
          })
        });
      }

      this.args.active = true;
    }
  }, {
    key: "beep",
    value: function beep() {
      if (!this.viewport) {
        return;
      }

      if (this.args.silent) {
        return;
      }

      if (this.viewport.args.audio && this.sample) {
        this.sample.play();
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      var _this3 = this;

      if (!this.viewport) {
        return;
      }

      this.args.x = this.def.get('x');
      this.args.y = this.def.get('y');
      this.onNextFrame(function () {
        _this3.args.x = _this3.def.get('x');
        _this3.args.y = _this3.def.get('y');

        _this3.viewport.setColCell(_this3);

        _this3.args.xSpeed = 0;
        _this3.args.ySpeed = 0;
        _this3.args.pushed = 0;
        _this3.args["float"] = 0;
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }]);

  return Switch;
}(_PointActor2.PointActor);

exports.Switch = Switch;
});

;require.register("actor/Tails.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tails = void 0;

var _PointActor2 = require("./PointActor");

var _Tag = require("curvature/base/Tag");

var _Spring = require("./Spring");

var _SkidDust = require("../behavior/SkidDust");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Tails = /*#__PURE__*/function (_PointActor) {
  _inherits(Tails, _PointActor);

  var _super = _createSuper(Tails);

  function Tails() {
    var _this;

    _classCallCheck(this, Tails);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.canonical = 'Tails';

    _this.behaviors.add(new _SkidDust.SkidDust());

    _this.args.type = 'actor-item actor-tails';
    _this.jumpForceNormal = 11.5;
    _this.jumpForceSuper = 16;
    _this.accelNormal = 0.15;
    _this.accelSuper = 0.22;
    _this.args.accel = _this.accelNormal;
    _this.args.decel = 0.4;
    _this.args.flySpeedMax = 25;
    _this.args.gSpeedMax = 18;
    _this.args.jumpForce = _this.jumpForceNormal;
    _this.args.weight = 80;
    _this.args.gravity = 0.5;
    _this.args.width = 16;
    _this.args.height = 32;
    _this.args.normalHeight = 32;
    _this.args.rollingHeight = 28;
    ;
    _this.willStick = false;
    _this.stayStuck = false;
    return _this;
  }

  _createClass(Tails, [{
    key: "onAttached",
    value: function onAttached() {
      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.tails = new _Tag.Tag('<div class = "tails-tails">');
      this.sprite.appendChild(this.tails.node);
      this.flyingSound = new Audio('/Sonic/tails-flying.wav');
      this.flyingSound.volume = 0.35 + Math.random() * -0.3;
      this.flyingSound.loop = true;
    }
  }, {
    key: "startle",
    value: function startle() {
      var _this2 = this;

      _get(_getPrototypeOf(Tails.prototype), "startle", this).call(this);

      this.args.animation = 'startle';
      this.onNextFrame(function () {
        return _this2.args.animation = 'startle';
      });
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      _get(_getPrototypeOf(Tails.prototype), "updateStart", this).call(this);

      if (this.args.dead) {
        this.args.animation = 'dead';
        return;
      }
    }
  }, {
    key: "update",
    value: function update() {
      var falling = this.args.falling;

      if (!this.viewport) {
        return;
      }

      if (this.viewport.args.audio && this.flyingSound) {
        if (!this.flyingSound.paused) {
          this.flyingSound.volume = 0.35 + Math.random() * -0.3;
        }

        if (this.flyingSound.currentTime > 0.2) {
          this.flyingSound.currentTime = 0.0;
        }
      }

      if (!this.box) {
        _get(_getPrototypeOf(Tails.prototype), "update", this).call(this);

        return;
      }

      if (this.args.tailFlyCoolDown > 0) {
        this.args.tailFlyCoolDown--;
      }

      if (this.args.tailFlyCoolDown < 0) {
        this.args.tailFlyCoolDown++;
      }

      if (this.args.tailFlyCoolDown === 0) {
        this.flyingSound.pause();
        this.args.flying = false;
      }

      if (!falling) {
        this.args.tailFlyCoolDown = 0;
        this.flyingSound.pause();
        var direction = this.args.direction;
        var gSpeed = this.args.gSpeed;
        var speed = Math.abs(gSpeed);
        var maxSpeed = this.args.gSpeedMax;

        if (!this.args.rolling) {
          if (Math.sign(this.args.gSpeed) !== direction && Math.abs(this.args.gSpeed - direction) > 5) {
            this.box.setAttribute('data-animation', 'skidding');
          } else if (speed > maxSpeed / 2) {
            this.box.setAttribute('data-animation', 'running');
          } else if (this.args.moving && this.args.gSpeed) {
            this.box.setAttribute('data-animation', 'walking');
          } else {
            this.box.setAttribute('data-animation', 'standing');
          }
        } else {
          this.box.setAttribute('data-animation', 'rolling');
        }
      } else if (this.args.flying && !this.args.startled) {
        if (this.yAxis > 0) {
          this.box.setAttribute('data-animation', 'jumping');
          this.args.ySpeed = this.args.ySpeed > this.args.jumpForce ? this.args.ySpeed : this.args.jumpForce;
        } else {
          this.box.setAttribute('data-animation', 'flying');
        }
      } else if (this.args.jumping) {
        this.flyingSound.pause();
        this.box.setAttribute('data-animation', 'jumping');
      }

      if (this.args.hangingFrom) {
        this.args.animation = 'hanging';
      }

      if (!this.args.startled) {} else {
        this.flyingSound.pause();
        this.args.flying = false;
      }

      _get(_getPrototypeOf(Tails.prototype), "update", this).call(this);
    }
  }, {
    key: "command_0",
    value: function command_0(button) {
      if (this.args.hangingFrom) {
        _get(_getPrototypeOf(Tails.prototype), "command_0", this).call(this);

        return;
      }

      _get(_getPrototypeOf(Tails.prototype), "command_0", this).call(this, button);

      if (!this.args.jumping) {
        return;
      }

      if (!this.args.falling) {
        this.args.tailFlyCoolDown = -80;
        return;
      }

      if (this.args.tailFlyCoolDown === 0) {
        this.args.tailFlyCoolDown = 80;
        return;
      }

      if (this.args.ySpeed > 0) {
        this.args.ySpeed = 0;
      }

      this.args.tailFlyCoolDown = 80;
      this.args.flying = true;
      this.flyingSound.volume = 0.35 + Math.random() * -0.3;

      if (this.viewport.args.audio && this.flyingSound.paused) {
        this.flyingSound.play();
      }
    }
  }, {
    key: "hold_0",
    value: function hold_0(button) {
      if (this.args.flying) {
        if (this.args.ySpeed > 0) {
          this.args.ySpeed = 0;
        }

        if (Math.random() > 0.8) {
          this.flyingSound.volume = 0.35 + Math.random() * -0.3;
        }

        this.args.tailFlyCoolDown = 80;
        this.args.ySpeed -= Math.min(3, button.time / 9);
        this.args.ySpeed = Math.max(-5, this.args.ySpeed);
      } else {
        this.args.flying = true;
      }
    }
  }, {
    key: "sleep",
    value: function sleep() {
      this.flyingSound && this.flyingSound.pause();
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "canRoll",
    get: function get() {
      return true;
    }
  }, {
    key: "canFly",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return false;
    }
  }, {
    key: "controllable",
    get: function get() {
      return !this.args.npc;
    }
  }]);

  return Tails;
}(_PointActor2.PointActor);

exports.Tails = Tails;
});

;require.register("actor/Tester.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tester = void 0;

var _PointActor2 = require("./PointActor");

var _Cursor = require("./Cursor");

var _ObjectPalette = require("../ObjectPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

window.testRuns = [];

var Tester = /*#__PURE__*/function (_PointActor) {
  _inherits(Tester, _PointActor);

  var _super = _createSuper(Tester);

  function Tester() {
    var _this;

    _classCallCheck(this, Tester);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "count", 0);

    _defineProperty(_assertThisInitialized(_this), "char", null);

    return _this;
  }

  _createClass(Tester, [{
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this["char"]) {
        var charType = _ObjectPalette.ObjectPalette['sonic'];
        var count = this.count;
        this["char"] = new charType({
          name: "Test #".concat(count),
          x: this.x + -(count % 160) + +80,
          y: this.y
        }); // this.char.cursor = new Cursor;

        var debind = this["char"].args.bindTo('falling', function () {
          var landed = _this2["char"].x;

          _this2.viewport.onFrameOut(5, function () {
            console.log({
              count: count,
              landed: landed,
              groundAngle: _this2["char"].args.groundAngle,
              gSpeed: _this2["char"].args.gSpeed
            });
          });

          debind();
        }, {
          now: false,
          frame: 1
        });
        window.testRuns[count] = this["char"];
        this.count++;
        this.viewport.spawn.add({
          object: this["char"]
        }); // this.viewport.spawn.add({object: this.char.cursor});
      } else {
        var controller = this["char"].controller;
        var press = 4;

        if (this["char"].age === 5) {
          controller.press(press, 1);
        }

        if (this["char"].age === 6) {
          controller.press(press, 0);
        }

        this["char"].readInput();
      }

      if (this["char"].args.dead) {
        var dead = this["char"];
        this["char"] = null; // this.viewport.actors.remove(dead.cursor)
        // dead.cursor.remove();

        this.viewport.onFrameOut(100, function () {
          return _this2.viewport.actors.remove(dead);
        });
      } else if (this["char"].age > 30) {
        this["char"].xAxis = +1;
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      if (this["char"]) {// this.char.cursor.args.x        = this.char.x;
        // this.char.cursor.args.y        = this.char.y;
        // this.char.cursor.args.angle    = this.char.angle;
        // this.char.cursor.args.airAngle = this.char.airAngle;
        // this.char.cursor.args.groundAngle = this.char.groundAngle;
      }
    }
  }]);

  return Tester;
}(_PointActor2.PointActor);

exports.Tester = Tester;
});

;require.register("actor/TextActor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextActor = void 0;

var _PointActor2 = require("./PointActor");

var _CharacterString = require("../ui/CharacterString");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextActor = /*#__PURE__*/function (_PointActor) {
  _inherits(TextActor, _PointActor);

  var _super = _createSuper(TextActor);

  function TextActor(args, parent) {
    var _this;

    _classCallCheck(this, TextActor);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-text-actor';
    _this.args["float"] = -1;
    _this.text = new _CharacterString.CharacterString({
      value: ''
    }); // this.args.x = args.x - 48;

    _this.args.bindTo('content', function (v) {
      _this.text.args.value = v;
      _this.text.args.color = args.color;
      _this.args.width = v.length * 18;
      _this.args.height = 18;
    });

    return _this;
  }

  _createClass(TextActor, [{
    key: "onAttached",
    value: function onAttached() {
      this.sprite = this.findTag('div.sprite');
      this.text.render(this.sprite);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return TextActor;
}(_PointActor2.PointActor);

exports.TextActor = TextActor;
});

;require.register("actor/TilesetSwapper.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TilesetSwapper = void 0;

var _PointActor2 = require("./PointActor");

var _ScreenFire = require("../effects/ScreenFire");

var _BackdropPalette = require("../BackdropPalette");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TilesetSwapper = /*#__PURE__*/function (_PointActor) {
  _inherits(TilesetSwapper, _PointActor);

  var _super = _createSuper(TilesetSwapper);

  function TilesetSwapper(args, parent) {
    var _this;

    _classCallCheck(this, TilesetSwapper);

    _this = _super.call(this, args, parent);
    _this.args.hidden = true;
    var img = new Image('../Sonic/tiles/azure-lake/azure-lake-burnt.png');
    var backdropClass = _BackdropPalette.BackdropPalette[_this.args.backdrop];
    _this.args.backdrop = new backdropClass();
    return _this;
  }

  _createClass(TilesetSwapper, [{
    key: "activate",
    value: function activate(other, button) {
      var _this2 = this;

      // this.viewport.tilemap.replacements.set(
      // 	this.args.original//'../Sonic/tiles/azure-lake/azure-lake.png'
      // 	, this.args.replacement//'../Sonic/tiles/azure-lake/azure-lake-burnt.png'
      // );
      if (this.activated) {
        return;
      }

      this.activated = true;
      this.viewport.onFrameOut(15, function () {
        _this2.viewport.args.screenEffects.push(new _ScreenFire.ScreenFire());

        _this2.viewport.onFrameOut(45, function () {
          _this2.viewport.tileMap.replacements.set('/map/../Sonic/tiles/azure-lake/azure-lake.png', '/map/../Sonic/tiles/azure-lake/azure-lake-burnt.png');

          _this2.viewport.args.backdrop = _this2.args.backdrop;

          _this2.viewport.tileMap.replacements.set('/map/../Sonic/tiles/azure-lake/azure-lake-shapes.png', '/map/../Sonic/tiles/azure-lake/azure-lake-burnt-shapes.png');

          _this2.viewport.tileMap.replacements.set('/map/../Sonic/tiles/azure-lake/rolling.png', '/map/../Sonic/tiles/azure-lake/rolling-burnt.png');

          _this2.viewport.tileMap.replacements.set('/map/../Sonic/tiles/azure-lake/giant-loop.png', '/map/../Sonic/tiles/azure-lake/giant-loop-burnt.png');
        });
      });
    }
  }]);

  return TilesetSwapper;
}(_PointActor2.PointActor);

exports.TilesetSwapper = TilesetSwapper;
});

;require.register("actor/Torch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Torch = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Torch = /*#__PURE__*/function (_PointActor) {
  _inherits(Torch, _PointActor);

  var _super = _createSuper(Torch);

  function Torch() {
    var _this;

    _classCallCheck(this, Torch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 16;
    _this.args.height = 32;
    _this.args.type = 'actor-item actor-torch';
    _this.args["float"] = -1;
    return _this;
  }

  _createClass(Torch, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return Torch;
}(_PointActor2.PointActor);

exports.Torch = Torch;
});

;require.register("actor/Tornado.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tornado = void 0;

var _Vehicle2 = require("./Vehicle");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Tornado = /*#__PURE__*/function (_Vehicle) {
  _inherits(Tornado, _Vehicle);

  var _super = _createSuper(Tornado);

  function Tornado() {
    var _this;

    _classCallCheck(this, Tornado);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-tornado';
    _this.args.width = 96;
    _this.args.height = 48;
    _this.removeTimer = null;
    _this.args.xSpeedMaxThrusting = 64;
    _this.args.xSpeedMaxOriginal = 32;
    _this.args.xSpeedMax = _this.args.xSpeedMaxOriginal;
    _this.args.gSpeedMax = 5;
    _this.args.decel = 0.15;
    _this.args.accel = 0.5;
    _this.args.seatHeight = 14;
    _this.args.seatForward = -32;
    _this.args.skidTraction = 0.95;
    _this.dustCount = 0;
    _this.args.flyAngle = -0.25;
    _this.args.particleScale = 2;
    _this.args["float"] = -1;
    _this.args.thrusting = false;
    _this.args.landingGear = true;
    _this.args.jumpForce = 8;
    _this.args.fuelLevel = 100;
    _this.args.thrusterFill = 0;
    _this.args.noThrust = 0;
    _this.plane = new _Tag.Tag('<div class = "plane">');
    _this.fuselage = new _Tag.Tag('<div class = "fuselage">');
    _this.propeller = new _Tag.Tag('<div class = "propeller">');
    _this.thruster = new _Tag.Tag('<div class = "thruster">');
    _this.fuelMeter = new _Tag.Tag('<div class = "fuel-meter">');
    _this.frontGear = new _Tag.Tag('<div class = "front-landing-gear">');
    _this.rearGear = new _Tag.Tag('<div class = "rear-landing-gear">');
    return _this;
  }

  _createClass(Tornado, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      this.box = this.findTag('div');
      this.sprite = this.findTag('div.sprite');
      this.sprite.appendChild(this.plane.node);
      this.thruster.appendChild(this.fuelMeter.node);
      this.plane.appendChild(this.thruster.node);
      this.plane.appendChild(this.propeller.node);
      this.plane.appendChild(this.frontGear.node);
      this.plane.appendChild(this.rearGear.node);
      this.plane.appendChild(this.fuselage.node);
      this.args.bindTo('landingGear', function (v) {
        if (_this2.plane) {
          _this2.plane.setAttribute('data-landing-gear', v);
        }
      });
      this.args.bindTo('thrusting', function (v) {
        if (_this2.plane) {
          _this2.plane.setAttribute('data-thrusting', v);
        }
      });
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.occupant || !this.args.falling) {
        this.args.flyAngle = this.args.falling ? 0.26 : -0.26;
        this.args.flying = false;
        this.args["float"] = 0;
      }

      if (!this.args.thrusting && Math.abs(this.args.xSpeed) < 8) {
        this.args["float"] = 0;
        this.args.flying = false;
      } else if (this.args.falling) {
        this.args["float"] = -1;
        this.args.flying = true;
      }

      if (!this.args.jumping && this.args.xSpeed === 0 && this.args.falling) {
        this.args.flying = false;
        this.args["float"] = 0;

        if (this.args.thrusting) {
          this.args.crashed = true;
          this.args.thrusting = false;
          this.args.noThrust = Date.now() + 500;
        }

        _get(_getPrototypeOf(Tornado.prototype), "update", this).call(this);

        return;
      }

      var maxAirSpeed = this.args.xSpeedMaxThrusting;

      if (this.args.thrusting && this.args.fuelLevel <= 0) {
        this.args.thrusting = false;
        this.args.noThrust = Date.now() + 500;
        this.args.thrusterFill = Date.now() + 500;
      }

      if (this.args.thrusting) {
        this.args.xSpeedMax = this.args.xSpeedMaxThrusting;

        if (this.args.fuelLevel > 0) {
          this.args.fuelLevel -= 0.1;
        }
      } else {
        this.args.xSpeedMax = this.args.xSpeedMaxOriginal;

        if (this.args.thrusterFill < Date.now() && this.args.fuelLevel < 100) {
          this.args.fuelLevel += 0.25;
        }
      }

      this.fuelMeter.style({
        '--fuelLevel': this.args.fuelLevel / 100
      });

      if (!this.args.thrusting && Math.abs(this.args.xSpeed) > maxAirSpeed) {
        this.args.xSpeed -= Math.sign(this.args.xSpeed) * 0.2;
      }

      if (this.args.thrusting && (Math.sign(this.args.xSpeed) !== this.args.direction || Math.abs(this.args.xSpeed) < maxAirSpeed)) {
        if (!this.args.falling && this.args.xSpeed === 0) {
          this.args.flyAngle = -0.26;
          this.args.falling = true;
          this.args.flying = true;
          this.args.ySpeed = -5;
        }

        this.args.xSpeed += Math.sign(this.args.direction) * 4;
      }

      if (Math.abs(this.args.xSpeed) > this.args.xSpeedMax / 2 && !this.args.thrusting && !this.xAxis) {
        this.args.xSpeed *= 0.95;
      }

      if (Math.abs(this.args.xSpeed) > maxAirSpeed) {
        this.args.xSpeed = maxAirSpeed * Math.sign(this.args.direction);
      }

      if (this.args.flying) {
        if (this.args.ySpeed === 0) {
          this.args.flyAngle = 0;
        }

        if (this.args.landingGear) {
          if (!this.args.thrusting && this.args.flyAngle < Math.PI / 4) {
            this.args.flyAngle += 0.005;
          } else if (this.args.thrusting && this.args.flyAngle > -Math.PI / 4) {
            this.args.flyAngle -= 0.005;
          }
        } else {
          if (Math.abs(this.args.flyAngle) > 0.00125) {
            this.args.flyAngle -= 0.00125 * Math.sign(this.args.flyAngle);
          } else {
            this.args.flyAngle = 0;
          }
        }

        if (!this.args.xSpeed) {
          this.args.flying = false;
          return;
        }

        var newAngle = this.args.flyAngle + Math.sign(this.yAxis) * 0.035;

        if (this.args.flyAngle > 0) {
          this.args.xSpeed *= 1.025;
        } else if (this.args.flyAngle > 0) {
          this.args.xSpeed /= 1.025;
        }

        if (this.yAxis && Math.abs(newAngle) < Math.PI / 2) {
          this.args.flyAngle = newAngle;
        }

        if (Math.sign(this.args.xSpeed) === this.args.direction) {
          var speed = this.args.xSpeed || this.args.gSpeed;
          this.args.ySpeed = Math.sin(this.args.flyAngle) * speed * (this.args.direction || Math.sign(speed)) * 2;
        }
      } else {
        if (!this.args.thrusting && this.args.flyAngle < Math.PI / 2 && this.args.ySpeed > 0) {
          this.args.flyAngle += 0.025;
        }
      }

      if (this.args.flying) {
        this.args.airAngle = this.args.flyAngle;
        this.args.jumping = false;
      }

      if (!this.args.falling) {
        this.args.landingGear = true;
        this.args.flyAngle = -0.26;
      }

      _get(_getPrototypeOf(Tornado.prototype), "update", this).call(this);

      if (this.args.flying) {
        this.args.cameraMode = 'airplane';
      }
    }
  }, {
    key: "command_1",
    value: function command_1() {
      if (this.args.falling) {
        this.args.landingGear = !this.args.landingGear;
      }
    }
  }, {
    key: "hold_2",
    value: function hold_2() {
      if (!this.args.thrusting && this.args.fuelLevel <= 1) {
        return;
      }

      if (this.args.fuelLevel <= 0) {
        return;
      }

      if (this.args.crashed || this.args.noThrust > Date.now()) {
        this.args["false"] = true;
        return;
      }

      this.args.thrusting = true;
    }
  }, {
    key: "release_2",
    value: function release_2() {
      this.args.thrusting = false;
      this.args.crashed = false;
    }
  }, {
    key: "solid",
    get: function get() {
      return !this.occupant;
    }
  }]);

  return Tornado;
}(_Vehicle2.Vehicle);

exports.Tornado = Tornado;
});

;require.register("actor/UnbreakableCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnbreakableCrate = void 0;

var _PointActor = require("./PointActor");

var _Block2 = require("./Block");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var UnbreakableCrate = /*#__PURE__*/function (_Block) {
  _inherits(UnbreakableCrate, _Block);

  var _super = _createSuper(UnbreakableCrate);

  function UnbreakableCrate(args, parent) {
    var _this;

    _classCallCheck(this, UnbreakableCrate);

    _this = _super.call(this, args, parent);
    _this.args.type = 'actor-item actor-unbreakable-crate';
    _this.args.width = 64;
    _this.args.height = 64;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(UnbreakableCrate, [{
    key: "update",
    value: function update() {
      if (this.viewport && this.args.gate) {
        var gatekeeper = this.viewport.actorsById[this.args.gate];

        if (!gatekeeper.args.hitPoints) {
          this.viewport.actors.remove(this);
        }
      }

      _get(_getPrototypeOf(UnbreakableCrate.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      return true;
    }
  }, {
    key: "damage",
    value: function damage(other, type) {
      return true;
    }
  }]);

  return UnbreakableCrate;
}(_Block2.Block);

exports.UnbreakableCrate = UnbreakableCrate;
});

;require.register("actor/Vehicle.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vehicle = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Vehicle = /*#__PURE__*/function (_PointActor) {
  _inherits(Vehicle, _PointActor);

  var _super = _createSuper(Vehicle);

  function Vehicle() {
    _classCallCheck(this, Vehicle);

    return _super.apply(this, arguments);
  }

  _createClass(Vehicle, [{
    key: "update",
    value: function update() {
      if (this.occupant) {
        this.running = this.occupant.running;
        this.crawling = this.occupant.crawling;
      }

      _get(_getPrototypeOf(Vehicle.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other.noClip) {
        return false;
      }

      if (other.controllable) {
        if (other.args.falling && this.y + -other.y + 24 <= this.args.seatHeight) {
          return false;
        } else if (other.args.ySpeed > 0 && !this.occupant) {
          var seatHeight = this.args.seatHeight || 0;
          other.args.ySpeed = 0;
          other.args.y = this.y + -seatHeight + 1;
          other.args.x = this.x;
          other.args.standingOn = this;
          return true;
        } else {
          return false;
        }
      }

      if (other.y >= this.y) {
        return false;
      }

      if (!other.args["float"]) {
        other.args.ySpeed = -other.args.ySpeed;
        other.args.xSpeed = other.args.xSpeed || other.args.direction * 5;

        if (other.args.ySpeed > -5) {
          other.args.ySpeed = -5;
        }
      }

      return false;
    }
  }, {
    key: "standBelow",
    value: function standBelow(other) {
      if (!other.controllable) {
        other.args.ySpeed = -other.args.ySpeed;
        other.args.xSpeed = other.args.xSpeed || other.args.direction * 5;

        if (other.args.ySpeed > -5) {
          other.args.ySpeed = -5;
        }
      }
    }
  }, {
    key: "isVehicle",
    get: function get() {
      return true;
    }
  }]);

  return Vehicle;
}(_PointActor2.PointActor);

exports.Vehicle = Vehicle;
});

;require.register("actor/Voltorb.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Voltorb = void 0;

var _GohlaBall2 = require("../actor/GohlaBall");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Voltorb = /*#__PURE__*/function (_GohlaBall) {
  _inherits(Voltorb, _GohlaBall);

  var _super = _createSuper(Voltorb);

  function Voltorb() {
    var _this;

    _classCallCheck(this, Voltorb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-gohla-ball actor-voltorb';
    return _this;
  }

  _createClass(Voltorb, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Voltorb.prototype), "update", this).call(this);

      if (!this.viewport) {
        return;
      }

      if (!this.viewport.controlActor) {
        return;
      }

      var player = this.viewport.controlActor;
      this.direction = Math.sign(this.x - player.x);
      this.args.facing = this.direction < 0 ? 'left' : 'right';

      if (Math.abs(player.y - this.y) <= 16) {
        if (Math.abs(player.x - this.x) < 34) {
          this.args.animation = 'sparking';
          player.damage(this, 'electric');
        } else if (!player.args.dead && !player.args.mercy) {
          this.args.animation = 'standing';
        }
      } else if (!player.args.dead && !player.args.mercy) {
        this.args.animation = 'standing';
      }
    }
  }]);

  return Voltorb;
}(_GohlaBall2.GohlaBall);

exports.Voltorb = Voltorb;
});

;require.register("actor/WaterController.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterController = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WaterController = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterController, _PointActor);

  var _super = _createSuper(WaterController);

  function WaterController(args, parent) {
    var _this;

    _classCallCheck(this, WaterController);

    _this = _super.call(this, args, parent);
    _this.args.activated = false;
    _this.args.levelLimit = _this.args.levelLimit || 0;
    _this.args.levelSpeed = _this.args.levelSpeed || 1;
    _this.args.level = _this.args.level || 0;
    _this.args["static"] = true;
    _this.args.hidden = true;
    return _this;
  }

  _createClass(WaterController, [{
    key: "updateStart",
    value: function updateStart() {
      _get(_getPrototypeOf(WaterController.prototype), "updateStart", this).call(this);

      if (this.args["switch"] && !this["switch"]) {
        this["switch"] = this.viewport.actorsById[this.args["switch"]];
      }

      if (this["switch"]) {
        if (this["switch"].args.active > 0) {
          this.activate(this["switch"].activator, this["switch"]);
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      // if(this.args.activated && this.args.levelSpeed < 18)
      // {
      // 	this.args.levelSpeed += 1;
      // }
      if (this.args.level < this.args._levelLimit) {
        this.args.level += this.args.levelSpeed || 0;
      }

      if (this.args.level > this.args._levelLimit) {
        this.args.levelSpeed = 0;
        this.args.level = this.args._levelLimit;
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras["delete"](target);
        this.viewport.auras["delete"](this);
      }
    }
  }, {
    key: "activate",
    value: function activate(other, button) {
      if (this.args.activated) {
        return;
      }

      this.args._levelLimit = this.args.levelLimit || 4096;
      this.viewport.auras.add(this);
      this.args.activated = true;

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        var target = this.viewport.actorsById[this.args.target];
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }
  }]);

  return WaterController;
}(_PointActor2.PointActor);

exports.WaterController = WaterController;
});

;require.register("actor/WaterFall.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterFall = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterFall = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterFall, _PointActor);

  var _super = _createSuper(WaterFall);

  function WaterFall() {
    var _this;

    _classCallCheck(this, WaterFall);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 64;
    _this.args.type = 'actor-item actor-water-fall';
    _this.args.active = false;
    _this.args["static"] = true;
    return _this;
  }

  _createClass(WaterFall, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      _get(_getPrototypeOf(WaterFall.prototype), "onRendered", this).call(this);

      this.autoAttr.get(this.box)['data-upward'] = 'upward';

      if (!this.viewport || !this.args["switch"]) {
        return;
      }

      this["switch"] = this.viewport.actorsById[this.args["switch"]];

      if (!this["switch"]) {
        return;
      }

      this["switch"].args.bindTo('active', function (v) {
        if (v && v > 0 && !_this2.args.active) {
          _this2.args.active = true;

          _this2.onNextFrame(function () {
            _this2.args.toHeight = _this2.args.openHeight;
            _this2.args.y -= _this2.args.openOffset;
          });
        }
      });
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(WaterFall.prototype), "update", this).call(this);

      if (this.args.toHeight !== this.args.height) {
        var diff = this.args.toHeight - this.args.height;
        var increment = Math.sign(diff) * 32;

        if (diff <= increment) {
          this.args.height = this.args.toHeight;
          this.args.y = this.args.yOriginal + this.args.toHeight;
        } else {
          this.args.height += increment;
          this.args.y += increment;
        }
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(WaterFall), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.toHeight = objDef.toHeight || 0;
      obj.args.x = objDef.x + 32;
      obj.args.yOriginal = objDef.y;
      return obj;
    }
  }]);

  return WaterFall;
}(_PointActor2.PointActor);

exports.WaterFall = WaterFall;
});

;require.register("actor/WaterJet.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterJet = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterJet = /*#__PURE__*/function (_PointActor) {
  _inherits(WaterJet, _PointActor);

  var _super = _createSuper(WaterJet);

  function WaterJet() {
    var _this;

    _classCallCheck(this, WaterJet);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 64;
    _this.args.type = 'actor-item actor-water-jet';
    return _this;
  } // onAttach()
  // {
  // 	this.autoAttr.get(this.box)['data-upward'] = 'upward';
  // 	if(!this.viewport || !this.args.switch)
  // 	{
  // 		return;
  // 	}
  // 	this.switch = this.viewport.actorsById[ this.args.switch ];
  // 	if(!this.switch)
  // 	{
  // 		return;
  // 	}
  // 	this.switch.args.bindTo('active', v => {
  // 		if(v && v > 0 && !this.args.active)
  // 		{
  // 			this.args.active = true;
  // 			this.onNextFrame(()=>{
  // 				this.args.toWidth = this.args.openWidth;
  // 				// this.args.y -= this.args.openOffset;
  // 			});
  // 		}
  // 	});
  // }
  // update()
  // {
  // 	super.update();
  // 	if(this.args.toWidth !== this.args.width)
  // 	{
  // 		const diff = this.args.toWidth - this.args.width;
  // 		const increment = Math.sign(diff) * 32;
  // 		if(diff <= increment)
  // 		{
  // 			this.args.width = this.args.toWidth;
  // 			// this.args.y = this.args.yOriginal + this.args.toWidth;
  // 		}
  // 		else
  // 		{
  // 			this.args.width += increment;
  // 			// this.args.x += increment;
  // 		}
  // 	}
  // }
  // activate()
  // {
  // 	this.args.active = 1;
  // }


  _createClass(WaterJet, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }, {
    key: "isGhost",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(WaterJet), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = objDef.x + objDef.width / 2;
      return obj;
    }
  }]);

  return WaterJet;
}(_PointActor2.PointActor);

exports.WaterJet = WaterJet;
});

;require.register("actor/WindStone.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindStone = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WindStone = /*#__PURE__*/function (_PointActor) {
  _inherits(WindStone, _PointActor);

  var _super = _createSuper(WindStone);

  function WindStone() {
    var _this;

    _classCallCheck(this, WindStone);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 8;
    _this.args.height = 24;
    _this.args.type = 'actor-item actor-wind-stone';

    _this.bindTo('carriedBy', function (carrier) {
      if (_this.cX) {
        _this.cX();

        _this.cX = null;
      }

      if (_this.cY) {
        _this.cY();

        _this.cY = null;
      }

      if (carrier) {
        _this.cX = carrier.args.bindTo('x', function (v) {
          return _this.args.x = v + carrier.args.direction * 8;
        });
        _this.cY = carrier.args.bindTo('y', function (v) {
          return _this.args.y = v + -16;
        });
        carrier.carrying.add(_assertThisInitialized(_this));
        _this.args["float"] = -1;
      } else if (_this.carriedBy) {
        var _carrier = _this.carriedBy;
        _this.carriedBy = null;
        _this.args.xSpeed = _carrier.args.xSpeed;
        _this.args.ySpeed = _carrier.args.ySpeed;
        _this.args.xSpeed += Math.sign(_carrier.args.gSpeed || _carrier.args.xSpeed) * 4;
        _this.args.ySpeed -= 4;

        _carrier.carrying["delete"](_assertThisInitialized(_this));

        _this.args.falling = true;
        _this.args["float"] = 0;
      }
    });

    return _this;
  }

  _createClass(WindStone, [{
    key: "lift",
    value: function lift(actor) {
      if (this.carriedBy === actor) {
        this.carriedBy = null;
        return;
      }

      this.carriedBy = actor;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }]);

  return WindStone;
}(_PointActor2.PointActor);

exports.WindStone = WindStone;
});

;require.register("actor/Window.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Window = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Window = /*#__PURE__*/function (_PointActor) {
  _inherits(Window, _PointActor);

  var _super = _createSuper(Window);

  function Window() {
    var _this;

    _classCallCheck(this, Window);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "float", -1);

    _this.args.type = 'actor-item actor-window';
    _this.args.width = 64;
    _this.args.height = 160;
    return _this;
  }

  _createClass(Window, [{
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return Window;
}(_PointActor2.PointActor);

exports.Window = Window;
});

;require.register("actor/WoodenCrate.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WoodenCrate = void 0;

var _BreakableBlock2 = require("./BreakableBlock");

var _Projectile = require("./Projectile");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WoodenCrate = /*#__PURE__*/function (_BreakableBlock) {
  _inherits(WoodenCrate, _BreakableBlock);

  var _super = _createSuper(WoodenCrate);

  function WoodenCrate() {
    var _this;

    _classCallCheck(this, WoodenCrate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'actor-item actor-breakable-block actor-wooden-crate';
    _this.args.width = 60;
    _this.args.height = 60;
    _this.args["static"] = false;
    return _this;
  }

  _createClass(WoodenCrate, [{
    key: "collideA",
    value: function collideA(other, type) {
      if (type === 0 && other.controllable) {
        return true; // return super.collideA(other, type);
      }

      if (other instanceof _Projectile.Projectile && !this.broken) {
        this["break"](other);
        return true;
      }

      if (other.spindashCharge) {
        this["break"](other);
        return true;
      }

      if (type === -1 && !other.args.gSpeed && !other.args.falling && other.controllable) {
        this["break"](other);
        return false;
      }

      if (type !== 1 && type !== 3 || other.y <= this.y - this.args.height) {
        return true;
      }

      if (other.args.rolling || type === 2) {
        this["break"](other);
        return false;
      }

      if (other.punching && !this.broken) {
        this["break"](other);
        return false;
      }

      if (!this.viewport) {
        return false;
      }

      if (type === -1 || other.args.rolling) {
        return _get(_getPrototypeOf(WoodenCrate.prototype), "collideA", this).call(this, other, type);
      }

      return true;
    }
  }]);

  return WoodenCrate;
}(_BreakableBlock2.BreakableBlock);

exports.WoodenCrate = WoodenCrate;
});

;require.register("actor/Zipline.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zipline = void 0;

var _PointActor2 = require("./PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Zipline = /*#__PURE__*/function (_PointActor) {
  _inherits(Zipline, _PointActor);

  var _super = _createSuper(Zipline);

  function Zipline() {
    var _this;

    _classCallCheck(this, Zipline);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.width = 1;
    _this.args.height = 1;
    _this.args.type = 'actor-item actor-zipline';
    _this.args.z = 128;
    _this.args["static"] = false;
    _this.breakable = false;
    _this.args.decel = 0;
    _this.args.accel = 0;
    return _this;
  }

  _createClass(Zipline, [{
    key: "activate",
    value: function activate() {
      this.viewport.auras.add(this);
      this.args.launched = true;
    }
  }, {
    key: "update",
    value: function update() {
      if (this.args.launched) {
        if (this.args.gSpeed < 1) {
          this.args.gSpeed = 1;
        }

        this.args.gSpeed += 0.1;
        var maxSpeed = Infinity; // const maxSpeed = 25;

        if (this.args.gSpeed > maxSpeed) {
          this.args.gSpeed = maxSpeed;
        }
      }

      _get(_getPrototypeOf(Zipline.prototype), "update", this).call(this);
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (!this.breakable) {
        return true;
      }

      return _get(_getPrototypeOf(Zipline.prototype), "collideA", this).call(this, other, type);
    }
  }]);

  return Zipline;
}(_PointActor2.PointActor);

exports.Zipline = Zipline;
});

;require.register("actor/monitor/RingMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RingMonitor = void 0;

var _Monitor2 = require("../Monitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RingMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(RingMonitor, _Monitor);

  var _super = _createSuper(RingMonitor);

  function RingMonitor() {
    _classCallCheck(this, RingMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(RingMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(RingMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'ring'
      });
      this.ringSample = new Audio('/Sonic/ring-collect.wav');
      this.ringSample.volume = 0.10 + Math.random() * -0.05;
    }
  }, {
    key: "effect",
    value: function effect(other) {
      other.args.rings += 10;
      this.ringSample && this.ringSample.play();
    }
  }]);

  return RingMonitor;
}(_Monitor2.Monitor);

exports.RingMonitor = RingMonitor;
});

;require.register("actor/monitor/SheildElectricMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildElectricMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _ElectricSheild = require("../../powerups/ElectricSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildElectricMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildElectricMonitor, _Monitor);

  var _super = _createSuper(SheildElectricMonitor);

  function SheildElectricMonitor() {
    _classCallCheck(this, SheildElectricMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildElectricMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildElectricMonitor.prototype), "onRendered", this).call(this, event);

      this.box && this.box.attr({
        'data-monitor': 'sheild-electric'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _ElectricSheild.ElectricSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildElectricMonitor;
}(_Monitor2.Monitor);

exports.SheildElectricMonitor = SheildElectricMonitor;
});

;require.register("actor/monitor/SheildFireMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildFireMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _FireSheild = require("../../powerups/FireSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildFireMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildFireMonitor, _Monitor);

  var _super = _createSuper(SheildFireMonitor);

  function SheildFireMonitor() {
    _classCallCheck(this, SheildFireMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildFireMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildFireMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-fire'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _FireSheild.FireSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildFireMonitor;
}(_Monitor2.Monitor);

exports.SheildFireMonitor = SheildFireMonitor;
});

;require.register("actor/monitor/SheildNormalMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildNormalMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _NormalSheild = require("../../powerups/NormalSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildNormalMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildNormalMonitor, _Monitor);

  var _super = _createSuper(SheildNormalMonitor);

  function SheildNormalMonitor() {
    _classCallCheck(this, SheildNormalMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildNormalMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildNormalMonitor.prototype), "onRendered", this).call(this, event);

      this.box && this.box.attr({
        'data-monitor': 'sheild-normal'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _NormalSheild.NormalSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildNormalMonitor;
}(_Monitor2.Monitor);

exports.SheildNormalMonitor = SheildNormalMonitor;
});

;require.register("actor/monitor/SheildStarMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildStarMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _StarSheild = require("../../powerups/StarSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildStarMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildStarMonitor, _Monitor);

  var _super = _createSuper(SheildStarMonitor);

  function SheildStarMonitor() {
    _classCallCheck(this, SheildStarMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildStarMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildStarMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-star'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _StarSheild.StarSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildStarMonitor;
}(_Monitor2.Monitor);

exports.SheildStarMonitor = SheildStarMonitor;
});

;require.register("actor/monitor/SheildWaterMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheildWaterMonitor = void 0;

var _Monitor2 = require("../Monitor");

var _BubbleSheild = require("../../powerups/BubbleSheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SheildWaterMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(SheildWaterMonitor, _Monitor);

  var _super = _createSuper(SheildWaterMonitor);

  function SheildWaterMonitor() {
    _classCallCheck(this, SheildWaterMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(SheildWaterMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(SheildWaterMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'sheild-water'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      if (!other.controllable) {
        return;
      }

      var sheild = new _BubbleSheild.BubbleSheild();
      other.inventory.add(sheild);
    }
  }]);

  return SheildWaterMonitor;
}(_Monitor2.Monitor);

exports.SheildWaterMonitor = SheildWaterMonitor;
});

;require.register("actor/monitor/WebMonitor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebMonitor = void 0;

var _HtmlFrame = require("../HtmlFrame");

var _Monitor2 = require("../Monitor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WebMonitor = /*#__PURE__*/function (_Monitor) {
  _inherits(WebMonitor, _Monitor);

  var _super = _createSuper(WebMonitor);

  function WebMonitor() {
    _classCallCheck(this, WebMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(WebMonitor, [{
    key: "onRendered",
    value: function onRendered(event) {
      _get(_getPrototypeOf(WebMonitor.prototype), "onRendered", this).call(this, event);

      this.box.attr({
        'data-monitor': 'web-monitor'
      });
    }
  }, {
    key: "effect",
    value: function effect(other) {
      var frame = new _HtmlFrame.HtmlFrame({
        x: this.x,
        y: this.y,
        width: 240,
        height: 180
      });
      this.viewport.spawn.add({
        object: frame
      });
    }
  }]);

  return WebMonitor;
}(_Monitor2.Monitor);

exports.WebMonitor = WebMonitor;
});

;require.register("audio/Bgm.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BgmHandler = exports.Bgm = void 0;

var _Elicit = require("curvature/net/Elicit");

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BgmHandler = /*#__PURE__*/function (_Mixin$with) {
  _inherits(BgmHandler, _Mixin$with);

  var _super = _createSuper(BgmHandler);

  function BgmHandler() {
    var _this;

    _classCallCheck(this, BgmHandler);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "theme", '/Sonic/carnival-night-zone-act-2-beta.mp3');

    _defineProperty(_assertThisInitialized(_this), "overlay", '/audio/leslie-wai/feel-the-sunshine.mp3');

    _defineProperty(_assertThisInitialized(_this), "tracks", new Map());

    _defineProperty(_assertThisInitialized(_this), "plays", new Map());

    _defineProperty(_assertThisInitialized(_this), "tags", new Map());

    _defineProperty(_assertThisInitialized(_this), "stack", []);

    _defineProperty(_assertThisInitialized(_this), "playing", null);

    _defineProperty(_assertThisInitialized(_this), "id3", new Map());

    return _this;
  }

  _createClass(BgmHandler, [{
    key: "register",
    value: function register(tag, url) {
      var _this2 = this;

      var maxConcurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var list = Array(maxConcurrent).fill().map(function (x) {
        return new Audio(url);
      });
      this.tracks.set(tag, list);
      var getTags = new _Elicit.Elicit(url);
      getTags.buffer().then(function (buffer) {
        var bytes = new Uint8Array(buffer);
        var prefix = String.fromCharCode.apply(String, _toConsumableArray(bytes.slice(0, 3)));

        if (prefix !== 'ID3') {
          return;
        }

        var version = bytes[3];
        var revision = bytes[4];
        var flags = bytes[5];
        var size = bytes[6] << 21 | bytes[7] << 14 | bytes[8] << 7 | bytes[9];
        var i = 10;
        var tags = {};

        while (i < size) {
          var framePrefix = String.fromCharCode.apply(String, _toConsumableArray(bytes.slice(i, i + 4)));
          var frameSize = 10 + (bytes[i + 4] << 21 | bytes[i + 5] << 14 | bytes[i + 6] << 7 | bytes[i + 7]);

          if (frameSize === 10) {
            break;
          }

          if (i + frameSize > size) {
            break;
          }

          var frameValue = String.fromCharCode.apply(String, _toConsumableArray(bytes.slice(i + 11, i + frameSize)));

          if (!framePrefix) {
            break;
          }

          i += frameSize;

          if (!framePrefix) {
            break;
          }

          tags[framePrefix] = frameValue;
        }

        var _iterator = _createForOfIteratorHelper(list),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var track = _step.value;

            _this2.id3.set(track, tags);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "play",
    value: function play(tag) {
      var _this3 = this;

      var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.tags.get(this.playing) === tag) {
        if (this.playing.paused) {
          return this.unpause();
        }
      } else if (this.playing) {
        this.playing.pause();
      }

      if (!this.tracks.has(tag)) {
        return;
      }

      var candidates = new Map();
      var tracks = this.tracks.get(tag);
      var selected = null;

      var _iterator2 = _createForOfIteratorHelper(tracks),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var track = _step2.value;

          if (!this.plays.has(track)) {
            selected = track;
            break;
          }

          candidates.set(this.plays.get(track), track);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (!selected) {
        var sorted = _toConsumableArray(candidates).sort(function (a, b) {
          return Math.sign(a[0] - b[0]);
        });

        selected = sorted[0][1];
      }

      if (selected && selected !== this.playing) {
        var cancelable = true;
        var detail = this.id3.get(selected);
        var play = new CustomEvent('play', {
          detail: detail,
          cancelable: cancelable
        });
        selected.playbackRate = 1.0;
        selected.currentTime = 0.0;
        selected.volume = 0.25;
        selected.loop = loop;
        this.plays.set(selected, Date.now());
        this.playing = selected;
        this.stack.push(this.playing);

        var onCompleted = function onCompleted(event) {
          _this3.stack.pop();

          _this3.stack[_this3.stack.length - 1].play();
        };

        if (!loop) {
          this.playing.addEventListener('ended', onCompleted, {
            once: true
          });
        }

        this.tags.set(selected, tag);

        if (this.dispatchEvent(play)) {
          try {
            selected.play();
          } catch (error) {
            console.warn(error);
          }
        }
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (tag === null && this.playing) {
        this.playing.pause();
        this.playing = null;
      }

      for (var _i = 0, _Object$keys = Object.keys(this.stack); _i < _Object$keys.length; _i++) {
        var t = _Object$keys[_i];
        var track = this.stack[t];

        if (!this.tags.has(track)) {
          delete this.stack.splice(t, 1);
          continue;
        }

        if (tag === null || this.tags.get(track) === tag) {
          var cancelable = true;
          var detail = this.id3.get(this.playing);
          var stop = new CustomEvent('stop', {
            detail: detail,
            cancelable: cancelable
          });

          if (this.dispatchEvent(stop)) {
            if (!track.paused) {
              track.pause();
            }

            delete this.stack.splice(t, 1);
          }
        }
      }

      this.playing = this.stack[this.stack.length - 1];

      if (this.playing) {
        this.playing.play();
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      if (!this.playing || this.playing.paused) {
        return;
      }

      var cancelable = true;
      var detail = this.id3.get(this.playing);
      var pause = new CustomEvent('pause', {
        detail: detail,
        cancelable: cancelable
      });

      if (!this.dispatchEvent(pause)) {
        return;
      }

      this.playing.pause();
    }
  }, {
    key: "unpause",
    value: function unpause() {
      if (!this.playing || !this.playing.paused) {
        return;
      }

      var cancelable = true;
      var detail = this.id3.get(this.playing);
      var unpause = new CustomEvent('unpause', {
        detail: detail,
        cancelable: cancelable
      });

      if (!this.dispatchEvent(unpause)) {
        return;
      }

      this.playing && this.playing.play();
    }
  }, {
    key: "fadeOut",
    value: function fadeOut(time) {
      var _this4 = this;

      return new Promise(function (accept) {
        var track = _this4.playing;
        var start;
        var initial = track.volume;
        var interval;

        var fade = function fade() {
          if (!start) {
            start = Date.now();
          }

          var now = Date.now();
          var vol = 1 - Math.min(1, (now - start) / time);
          track.volume = vol * initial;

          if (!vol) {
            _this4.stop(_this4.tags.get(track));

            clearInterval(interval);
            accept();
          }
        };

        interval = setInterval(fade, 16);
      });
    }
  }]);

  return BgmHandler;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.BgmHandler = BgmHandler;
var Bgm = new BgmHandler();
exports.Bgm = Bgm;
});

require.register("audio/Sfx.js", function(exports, require, module) {
"use strict";
});

;require.register("backdrop/Backdrop.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Backdrop = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var layers = [];

var Backdrop = /*#__PURE__*/function (_View) {
  _inherits(Backdrop, _View);

  var _super = _createSuper(Backdrop);

  function Backdrop() {
    var _this;

    _classCallCheck(this, Backdrop);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"backdrop [[name]]\">\n\t\t<div cv-ref = \"backdrop\" class = \"parallax\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "layers", []);

    _defineProperty(_assertThisInitialized(_this), "urls", []);

    _defineProperty(_assertThisInitialized(_this), "stacked", 0);

    return _this;
  }

  _createClass(Backdrop, [{
    key: "onAttached",
    value: function onAttached(event) {
      var _this2 = this;

      if (this.alreadyAttached) {
        return;
      }

      this.alreadyAttached = true;
      var backdrop = this.tags.backdrop;
      var strips = this.args.strips.reverse();
      var yPositions = [];
      var xPositions = [];
      var urls = [];
      var stacked = 0;

      for (var i in strips) {
        var strip = strips[i];
        yPositions.push("calc(100% - calc(1px * ".concat(stacked, "))"));
        var xFormula = "0px";

        if (strip.parallax) {
          xFormula = "calc(".concat(xFormula, " + calc(1px * calc(").concat(strip.parallax, " * var(--xPan))))");
        }

        if (strip.autoscroll) {
          xFormula = "calc(".concat(xFormula, " + calc(1px * calc(").concat(strip.autoscroll, " * var(--frame) )) )");
        }

        xPositions.push(xFormula);
        urls.push(strips[i].url);
        stacked += strips[i].height - 1;
      }

      this.urls = urls;
      this.stacked = stacked;
      var xPos = xPositions.join(', ');
      var yPos = yPositions.join(', ');
      var url = this.urls.map(function (u) {
        return "url(".concat(u, ")");
      }).join(', ');
      backdrop.style({
        'background-position-y': yPos,
        'background-position-x': xPos,
        'background-repeat': 'repeat-x',
        'background-image': url
      });
      this.args.bindTo(['x', 'y', 'xPan', 'yPan', 'bX', 'bY', 'width', 'height', 'right', 'xMax', 'yMax', 'frame', 'stacked', 'top', 'bottom'], function (v, k) {
        return backdrop.style(_defineProperty({}, "--".concat(k), v));
      });
      this.args.bindTo('frame', function (v, k) {
        for (var _i in _this2.args.strips) {
          var _strip = _this2.args.strips[_i];

          if (_strip.frames) {
            if (_strip.timeout-- === 0) {
              _strip.timeout = _strip.interval;
              _strip.frame++;

              if (_strip.frame >= _strip.frames.length) {
                _strip.frame = 0;
              }

              _this2.urls[_i] = _strip.frames[_strip.frame];

              _this2.refreshLayers();
            }
          }
        }
      });
    }
  }, {
    key: "refreshLayers",
    value: function refreshLayers() {
      this.tags.backdrop.style({
        'background-image': this.urls.map(function (u) {
          return "url(".concat(u, ")");
        }).join(', ')
      });
    }
  }]);

  return Backdrop;
}(_View2.View);

exports.Backdrop = Backdrop;
});

;require.register("backdrop/Industrial.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Industrial = void 0;

var _Backdrop2 = require("./Backdrop");

var _Tag = require("curvature/base/Tag");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Industrial = /*#__PURE__*/function (_Backdrop) {
  _inherits(Industrial, _Backdrop);

  var _super = _createSuper(Industrial);

  function Industrial(args, parent) {
    var _this;

    _classCallCheck(this, Industrial);

    _this = _super.call(this, args, parent);
    _this.args.name = 'industrial';
    _this.args.sunrise = 0;

    _this.args.bindTo('sunrise', function (v) {
      _this.nodes[1] && _this.nodes[1].style.setProperty('--sunrise', v);
    });

    _this.args.strips = [{
      autoscroll: 0.4,
      parallax: 0.035,
      url: '/Sonic/backdrop/labrynth-industrial/0.png',
      height: 24
    }, {
      autoscroll: 0.35,
      parallax: 0.025,
      url: '/Sonic/backdrop/labrynth-industrial/1.png',
      height: 24
    }, {
      autoscroll: 0.25,
      parallax: 0.015,
      url: '/Sonic/backdrop/labrynth-industrial/0.png',
      height: 24
    }, {
      autoscroll: 0.125,
      parallax: 0.0125,
      url: '/Sonic/backdrop/labrynth-industrial/1.png',
      height: 24
    }, {
      autoscroll: 0.025,
      parallax: 0.012,
      url: '/Sonic/backdrop/labrynth-industrial/2.png',
      height: 24
    }, {
      autoscroll: 0.015,
      parallax: 0.011,
      url: '/Sonic/backdrop/labrynth-industrial/3.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.02,
      url: '/Sonic/backdrop/labrynth-industrial/4-dist.png',
      height: 70
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/labrynth-industrial/4.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/labrynth-industrial/flame-0.png',
      height: 1,
      interval: 1,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/flame-0a.png', '/Sonic/backdrop/labrynth-industrial/flame-1.png', '/Sonic/backdrop/labrynth-industrial/flame-1.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-2.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-3.png', '/Sonic/backdrop/labrynth-industrial/flame-4.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-4.png', '/Sonic/backdrop/labrynth-industrial/flame-5.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-6.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png', '/Sonic/backdrop/labrynth-industrial/flame-0.png']
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/labrynth-industrial/5-bw-small.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/labrynth-industrial/5-bw-small.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-dim.png',
      height: 50
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-pink-lights.png',
      height: 1,
      interval: 20,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-lights-0.png', '/Sonic/backdrop/labrynth-industrial/5-lights-0.png', '/Sonic/backdrop/labrynth-industrial/5-lights-1.png', '/Sonic/backdrop/labrynth-industrial/5-lights-1.png', '/Sonic/backdrop/labrynth-industrial/5-lights-2.png', '/Sonic/backdrop/labrynth-industrial/5-lights-2.png']
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/labrynth-industrial/5-signals-0.png',
      height: 1,
      interval: 10,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png']
    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5.png',
      height: 40
    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5-pink-lights.png',
      height: 1 // , interval: 100
      // , timeout:  0
      // , frame:    0
      // , frames:   [
      // 	'/Sonic/backdrop/labrynth-industrial/5-lights-0.png',
      // 	'/Sonic/backdrop/labrynth-industrial/5-lights-1.png'
      // ]

    }, {
      autoscroll: 0,
      parallax: 0.35,
      url: '/Sonic/backdrop/labrynth-industrial/5-signals-0.png',
      height: 1,
      interval: 20,
      timeout: 0,
      frame: 0,
      frames: ['/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-2.png', '/Sonic/backdrop/labrynth-industrial/5-signals-0.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png', '/Sonic/backdrop/labrynth-industrial/5-signals-1.png']
    }, {
      autoscroll: 0,
      parallax: 0.4,
      url: '/Sonic/backdrop/labrynth-industrial/6-half.png',
      height: 88
    }];
    return _this;
  }

  return _createClass(Industrial);
}(_Backdrop2.Backdrop);

exports.Industrial = Industrial;
});

;require.register("backdrop/MarbleGarden.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarbleGarden = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MarbleGarden = /*#__PURE__*/function (_Backdrop) {
  _inherits(MarbleGarden, _Backdrop);

  var _super = _createSuper(MarbleGarden);

  function MarbleGarden(args, parent) {
    var _this;

    _classCallCheck(this, MarbleGarden);

    _this = _super.call(this, args, parent);
    _this.args.name = 'marble-garden';
    _this.args.strips = [{
      autoscroll: -1.25,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/0.png',
      height: 32
    }, {
      autoscroll: -1,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/1.png',
      height: 24
    }, {
      autoscroll: -0.9,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/2.png',
      height: 8
    }, {
      autoscroll: -0.8,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/3.png',
      height: 24
    }, {
      autoscroll: -0.7,
      parallax: 0.015,
      url: '/Sonic/backdrop/marble-garden/4.png',
      height: 8
    }, {
      autoscroll: -0.6,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/5.png',
      height: 24
    }, {
      autoscroll: -0.5,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/6.png',
      height: 16
    }, {
      autoscroll: -0.45,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/7.png',
      height: 8
    }, {
      autoscroll: -0.45,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/8.png',
      height: 16
    }, {
      autoscroll: -0.4,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/9.png',
      height: 8
    }, {
      autoscroll: -0.35,
      parallax: 0.0125,
      url: '/Sonic/backdrop/marble-garden/10.png',
      height: 16
    }, {
      autoscroll: -0.3,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/11.png',
      height: 8
    }, {
      autoscroll: -0.25,
      parallax: 0.0075,
      url: '/Sonic/backdrop/marble-garden/12.png',
      height: 8
    }, {
      autoscroll: -0.2,
      parallax: 0.0075,
      url: '/Sonic/backdrop/marble-garden/13.png',
      height: 8
    }, {
      autoscroll: -0.15,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/14.png',
      height: 8
    }, {
      autoscroll: -0.1,
      parallax: 0.01,
      url: '/Sonic/backdrop/marble-garden/15.png',
      height: 5
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/marble-garden/16.png',
      height: 30
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/marble-garden/17.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/marble-garden/18.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/marble-garden/19.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/marble-garden/20.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.2,
      url: '/Sonic/backdrop/marble-garden/21.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.225,
      url: '/Sonic/backdrop/marble-garden/22.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.25,
      url: '/Sonic/backdrop/marble-garden/23.png',
      height: 344
    }];
    return _this;
  }

  return _createClass(MarbleGarden);
}(_Backdrop2.Backdrop);

exports.MarbleGarden = MarbleGarden;
});

;require.register("backdrop/Moon.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Moon = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Moon = /*#__PURE__*/function (_Backdrop) {
  _inherits(Moon, _Backdrop);

  var _super = _createSuper(Moon);

  function Moon(args, parent) {
    var _this;

    _classCallCheck(this, Moon);

    _this = _super.call(this, args, parent);
    _this.args.name = 'moon';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.0019,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-0a.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.0016,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-0b.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.0015,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-1.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.0013,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-2.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.0010,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-3.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.0009,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-4.png',
      height: 5
    }, {
      autoscroll: 0,
      parallax: 0.0007,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-5.png',
      height: 14
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/doomsday/backdrop-inverted-0-6.png',
      height: 140
    }, {
      autoscroll: 0,
      parallax: 0.015,
      url: '/mmpr/moon/terrain-00-00.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.035,
      url: '/mmpr/moon/terrain-00-01.png',
      height: 2
    }, {
      autoscroll: 0,
      parallax: 0.045,
      url: '/mmpr/moon/terrain-00-02.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.055,
      url: '/mmpr/moon/terrain-00-03.png',
      height: 4
    }, {
      autoscroll: 0,
      parallax: 0.065,
      url: '/mmpr/moon/terrain-00-04.png',
      height: 4
    }, {
      autoscroll: 0,
      parallax: 0.075,
      url: '/mmpr/moon/terrain-00-05.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.085,
      url: '/mmpr/moon/terrain-00-06.png',
      height: 5
    }, {
      autoscroll: 0,
      parallax: 0.095,
      url: '/mmpr/moon/terrain-00-07-b.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/mmpr/moon/terrain-00-08.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.105,
      url: '/mmpr/moon/terrain-00-09.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.115,
      url: '/mmpr/moon/terrain-00-10-b.png',
      height: 12
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/mmpr/moon/terrain-00-11.png',
      height: 5
    }, {
      autoscroll: 0,
      parallax: 0.1325,
      url: '/mmpr/moon/terrain-00-09-b.png',
      height: 12
    } // , {
    // 	autoscroll:  0
    // 	, parallax:  0.145
    // 	, url:       '/mmpr/moon/terrain-00-10.png'
    // 	, height:    12
    // }
    , {
      autoscroll: 0,
      parallax: 0.1435,
      url: '/mmpr/moon/terrain-00-12.png',
      height: 22
    }];
    return _this;
  }

  return _createClass(Moon);
}(_Backdrop2.Backdrop);

exports.Moon = Moon;
});

;require.register("backdrop/MysticCave.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MysticCave = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MysticCave = /*#__PURE__*/function (_Backdrop) {
  _inherits(MysticCave, _Backdrop);

  var _super = _createSuper(MysticCave);

  function MysticCave(args, parent) {
    var _this;

    _classCallCheck(this, MysticCave);

    _this = _super.call(this, args, parent);
    _this.args.name = 'mystic-cave';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.11,
      url: '/Sonic/backdrop/mystic-cave/1.png',
      height: 37
    }, {
      autoscroll: 0,
      parallax: 0.12,
      url: '/Sonic/backdrop/mystic-cave/2.png',
      height: 23
    }, {
      autoscroll: 0,
      parallax: 0.13,
      url: '/Sonic/backdrop/mystic-cave/3.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.14,
      url: '/Sonic/backdrop/mystic-cave/4.png',
      height: 7
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/5.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.16,
      url: '/Sonic/backdrop/mystic-cave/6.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.18,
      url: '/Sonic/backdrop/mystic-cave/7.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.20,
      url: '/Sonic/backdrop/mystic-cave/8.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.22,
      url: '/Sonic/backdrop/mystic-cave/9.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.21,
      url: '/Sonic/backdrop/mystic-cave/10.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.20,
      url: '/Sonic/backdrop/mystic-cave/11.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.19,
      url: '/Sonic/backdrop/mystic-cave/12.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.18,
      url: '/Sonic/backdrop/mystic-cave/13.png',
      height: 19
    }, {
      autoscroll: 0,
      parallax: 0.17,
      url: '/Sonic/backdrop/mystic-cave/14.png',
      height: 34
    }, {
      autoscroll: 0,
      parallax: 0.16,
      url: '/Sonic/backdrop/mystic-cave/15.png',
      height: 62
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/16.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.14,
      url: '/Sonic/backdrop/mystic-cave/16.5.png',
      height: 19
    }, {
      autoscroll: 0,
      parallax: 0.13,
      url: '/Sonic/backdrop/mystic-cave/17.png',
      height: 13
    }, {
      autoscroll: 0,
      parallax: 0.12,
      url: '/Sonic/backdrop/mystic-cave/18.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/mystic-cave/19.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/mystic-cave/20.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.2,
      url: '/Sonic/backdrop/mystic-cave/21.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.25,
      url: '/Sonic/backdrop/mystic-cave/22.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.275,
      url: '/Sonic/backdrop/mystic-cave/23.png',
      height: 1
    }, {
      autoscroll: 0,
      parallax: 0.325,
      url: '/Sonic/backdrop/mystic-cave/24.png',
      height: 6
    }, {
      autoscroll: 0,
      parallax: 0.375,
      url: '/Sonic/backdrop/mystic-cave/25.png',
      height: 7
    }, {
      autoscroll: 0,
      parallax: 0.4,
      url: '/Sonic/backdrop/mystic-cave/26.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.425,
      url: '/Sonic/backdrop/mystic-cave/27.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.45,
      url: '/Sonic/backdrop/mystic-cave/28.png',
      height: 23
    }, {
      autoscroll: 0,
      parallax: 0.5,
      url: '/Sonic/backdrop/mystic-cave/29.png',
      height: 37
    }];
    return _this;
  }

  return _createClass(MysticCave);
}(_Backdrop2.Backdrop);

exports.MysticCave = MysticCave;
});

;require.register("backdrop/ProtoLabrynth.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProtoLabrynth = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ProtoLabrynth = /*#__PURE__*/function (_Backdrop) {
  _inherits(ProtoLabrynth, _Backdrop);

  var _super = _createSuper(ProtoLabrynth);

  function ProtoLabrynth(args, parent) {
    var _this;

    _classCallCheck(this, ProtoLabrynth);

    _this = _super.call(this, args, parent);
    _this.args.name = 'proto-labrynth';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/protolabrynth/0.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/protolabrynth/1.png',
      height: 24
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/protolabrynth/2.png',
      height: 8
    }, {
      autoscroll: 0,
      parallax: 0.075,
      url: '/Sonic/backdrop/protolabrynth/3.png',
      height: 68
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/protolabrynth/4.png',
      height: 18
    }, {
      autoscroll: 0,
      parallax: 0.125,
      url: '/Sonic/backdrop/protolabrynth/5.png',
      height: 27
    }, {
      autoscroll: 0,
      parallax: 0.15,
      url: '/Sonic/backdrop/protolabrynth/5.png',
      height: 27
    }, {
      autoscroll: 0,
      parallax: 0.175,
      url: '/Sonic/backdrop/protolabrynth/6.png',
      height: 76
    }];
    return _this;
  }

  return _createClass(ProtoLabrynth);
}(_Backdrop2.Backdrop);

exports.ProtoLabrynth = ProtoLabrynth;
});

;require.register("backdrop/SouthRidge.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SouthRidge = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SouthRidge = /*#__PURE__*/function (_Backdrop) {
  _inherits(SouthRidge, _Backdrop);

  var _super = _createSuper(SouthRidge);

  function SouthRidge(args, parent) {
    var _this;

    _classCallCheck(this, SouthRidge);

    _this = _super.call(this, args, parent);
    _this.args.name = 'south-ridge';
    _this.args.strips = [{
      autoscroll: -0.03,
      parallax: 0.11,
      url: '/Sonic/backdrop/south-ridge/clouds-10.png',
      height: 10
    }, {
      autoscroll: 0,
      parallax: 0.1,
      url: '/Sonic/backdrop/south-ridge/ridge.png',
      height: 10
    }, {
      autoscroll: -0.06,
      parallax: 0.12,
      url: '/Sonic/backdrop/south-ridge/clouds-9.png',
      height: 0
    }, {
      autoscroll: -0.06,
      parallax: 0.12,
      url: '/Sonic/backdrop/south-ridge/clouds-9b.png',
      height: 8
    }, {
      autoscroll: -0.065,
      parallax: 0.13,
      url: '/Sonic/backdrop/south-ridge/clouds-8.png',
      height: 11
    }, {
      autoscroll: 0,
      parallax: 0.11,
      url: '/Sonic/backdrop/south-ridge/ridge-b.png',
      height: 20
    }, {
      autoscroll: -0.07,
      parallax: 0.14,
      url: '/Sonic/backdrop/south-ridge/clouds-7.png',
      height: 11 - 20
    }, {
      autoscroll: -0.075,
      parallax: 0.15,
      url: '/Sonic/backdrop/south-ridge/clouds-6.png',
      height: 9
    }, {
      autoscroll: -0.08,
      parallax: 0.16,
      url: '/Sonic/backdrop/south-ridge/clouds-5.png',
      height: 8
    }, {
      autoscroll: -0.09,
      parallax: 0.18,
      url: '/Sonic/backdrop/south-ridge/clouds-4.png',
      height: 16
    }, {
      autoscroll: -0.1,
      parallax: 0.20,
      url: '/Sonic/backdrop/south-ridge/clouds-3.png',
      height: 13
    }, {
      autoscroll: -0.1125,
      parallax: 0.22,
      url: '/Sonic/backdrop/south-ridge/clouds-2.png',
      height: 17
    }, {
      autoscroll: -0.15,
      parallax: 0.21,
      url: '/Sonic/backdrop/south-ridge/clouds-1.png',
      height: 15
    }, {
      autoscroll: -0.175,
      parallax: 0.21,
      url: '/Sonic/backdrop/south-ridge/clouds-0.png',
      height: 16
    }, {
      autoscroll: -0.15,
      parallax: 0.22,
      url: '/Sonic/backdrop/south-ridge/clouds-1.png',
      height: 15
    }, {
      autoscroll: -0.175,
      parallax: 0.23,
      url: '/Sonic/backdrop/south-ridge/clouds-0.png',
      height: 16
    }];
    return _this;
  }

  return _createClass(SouthRidge);
}(_Backdrop2.Backdrop);

exports.SouthRidge = SouthRidge;
});

;require.register("backdrop/Underground.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Underground = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Underground = /*#__PURE__*/function (_Backdrop) {
  _inherits(Underground, _Backdrop);

  var _super = _createSuper(Underground);

  function Underground(args, parent) {
    var _this;

    _classCallCheck(this, Underground);

    _this = _super.call(this, args, parent);
    _this.args.name = 'underground';
    _this.args.strips = [{
      autoscroll: 0.045,
      parallax: 0.075,
      url: '/Sonic/backdrop/wing-fortress/sky-1b-recolor.png',
      height: 32
    }, {
      autoscroll: 0.043,
      parallax: 0.070,
      url: '/Sonic/backdrop/wing-fortress/sky-0-recolor.png',
      height: 48
    }, {
      autoscroll: 0.041,
      parallax: 0.065,
      url: '/Sonic/backdrop/wing-fortress/sky-1-recolor.png',
      height: 32
    }, {
      autoscroll: 0.039,
      parallax: 0.060,
      url: '/Sonic/backdrop/wing-fortress/sky-2-recolor.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0.075,
      url: '/Sonic/backdrop/aquatic-ruin/mountains-0-recolor.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0,
      url: '/Sonic/backdrop/aquatic-ruin/mountains-1-recolor.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0,
      url: '/Sonic/backdrop/aquatic-ruin/mountains-1-recolor.png',
      height: 48
    }, {
      autoscroll: 0,
      parallax: 0,
      url: '/Sonic/backdrop/aquatic-ruin/mountains-1-recolor.png',
      height: 24
    }];
    return _this;
  }

  return _createClass(Underground);
}(_Backdrop2.Backdrop);

exports.Underground = Underground;
});

;require.register("backdrop/WestSide.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSide = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSide = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSide, _Backdrop);

  var _super = _createSuper(WestSide);

  function WestSide(args, parent) {
    var _this;

    _classCallCheck(this, WestSide);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side';
    _this.args.strips = [{
      autoscroll: 0.001,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-0.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-1.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0004,
      url: '/Sonic/backdrop/west-side/water-shine-2.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water.png',
      height: 142
    }, {
      autoscroll: 0.001,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.03,
      url: '/Sonic/backdrop/launch-base/bushes-0-night.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/launch-base/bushes-1-night.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.05,
      url: '/Sonic/backdrop/launch-base/bushes-2-night.png',
      height: 48
    }];
    return _this;
  }

  return _createClass(WestSide);
}(_Backdrop2.Backdrop);

exports.WestSide = WestSide;
});

;require.register("backdrop/WestSideCloudy.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSideCloudy = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSideCloudy = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSideCloudy, _Backdrop);

  var _super = _createSuper(WestSideCloudy);

  function WestSideCloudy(args, parent) {
    var _this;

    _classCallCheck(this, WestSideCloudy);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side-cloudy';
    _this.args.strips = [{
      autoscroll: 0.14,
      parallax: 0.02,
      url: '/Sonic/backdrop/west-side/clouds-0.png',
      height: 33
    }, {
      autoscroll: 0.13,
      parallax: 0.014,
      url: '/Sonic/backdrop/west-side/clouds-1.png',
      height: 32
    }, {
      autoscroll: 0.12,
      parallax: 0.013,
      url: '/Sonic/backdrop/west-side/clouds-2.png',
      height: 24
    }, {
      autoscroll: 0.11,
      parallax: 0.012,
      url: '/Sonic/backdrop/west-side/clouds-3.png',
      height: 16
    }, {
      autoscroll: 0.10,
      parallax: 0.011,
      url: '/Sonic/backdrop/west-side/clouds-4.png',
      height: 5
    }, {
      autoscroll: 0.09,
      parallax: 0.010,
      url: '/Sonic/backdrop/west-side/clouds-5.png',
      height: 3
    }, {
      autoscroll: 0.08,
      parallax: 0.009,
      url: '/Sonic/backdrop/west-side/clouds-6.png',
      height: 8
    }, {
      autoscroll: 0.07,
      parallax: 0.008,
      url: '/Sonic/backdrop/west-side/clouds-7.png',
      height: 5
    }, {
      autoscroll: 0.06,
      parallax: 0.007,
      url: '/Sonic/backdrop/west-side/clouds-8.png',
      height: 3
    }, {
      autoscroll: 0.05,
      parallax: 0.006,
      url: '/Sonic/backdrop/west-side/clouds-9.png',
      height: 8
    }, {
      autoscroll: 0.04,
      parallax: 0.005,
      url: '/Sonic/backdrop/west-side/clouds-10.png',
      height: 8
    }, {
      autoscroll: 0.03,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/clouds-11.png',
      height: 32
    }, {
      autoscroll: 0.02,
      parallax: 0.003,
      url: '/Sonic/backdrop/west-side/clouds-12.png',
      height: 8
    }, {
      autoscroll: 0.015,
      parallax: 0.002,
      url: '/Sonic/backdrop/west-side/clouds-13.png',
      height: 32
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-cloudy.png',
      height: 2
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-cloudy.png',
      height: 0
    }, {
      autoscroll: 0.015,
      parallax: 0.002,
      url: '/Sonic/backdrop/west-side/reflected-clouds-0.png',
      height: 32
    }, {
      autoscroll: 0.02,
      parallax: 0.003,
      url: '/Sonic/backdrop/west-side/reflected-clouds-1.png',
      height: 8
    }, {
      autoscroll: 0.03,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/reflected-clouds-2.png',
      height: 32
    }, {
      autoscroll: 0.04,
      parallax: 0.005,
      url: '/Sonic/backdrop/west-side/reflected-clouds-3.png',
      height: 8
    }, {
      autoscroll: 0.05,
      parallax: 0.006,
      url: '/Sonic/backdrop/west-side/reflected-clouds-4.png',
      height: 8
    }, {
      autoscroll: 0.06,
      parallax: 0.007,
      url: '/Sonic/backdrop/west-side/reflected-clouds-5.png',
      height: 3
    }, {
      autoscroll: 0.07,
      parallax: 0.008,
      url: '/Sonic/backdrop/west-side/reflected-clouds-6.png',
      height: 5
    }, {
      autoscroll: 0.08,
      parallax: 0.009,
      url: '/Sonic/backdrop/west-side/reflected-clouds-7.png',
      height: 16
    }, {
      autoscroll: 0.09,
      parallax: 0.010,
      url: '/Sonic/backdrop/west-side/reflected-clouds-8.png',
      height: 24
    }, {
      autoscroll: 0.1,
      parallax: 0.011,
      url: '/Sonic/backdrop/west-side/reflected-clouds-9.png',
      height: 20
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-cloudy-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water-cloudy.png',
      height: 48
    }];

    _this.args.bindTo('frame', function (v) {
      if (_this.args.ligtening) {
        return;
      }

      if (Math.random() > 0.995) {
        _this.args.name = 'west-side-cloudy lightning';
        _this.args.lightning = true;

        _this.onTimeout(1000, function () {
          _this.args.name = 'west-side-cloudy';
          _this.args.lightning = false;
        });
      }
    });

    return _this;
  }

  return _createClass(WestSideCloudy);
}(_Backdrop2.Backdrop);

exports.WestSideCloudy = WestSideCloudy;
});

;require.register("backdrop/WestSideNight.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WestSideNight = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WestSideNight = /*#__PURE__*/function (_Backdrop) {
  _inherits(WestSideNight, _Backdrop);

  var _super = _createSuper(WestSideNight);

  function WestSideNight(args, parent) {
    var _this;

    _classCallCheck(this, WestSideNight);

    _this = _super.call(this, args, parent);
    _this.args.name = 'west-side';
    _this.args.strips = [{
      autoscroll: 0,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-0.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/water-shine-1.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.0004,
      url: '/Sonic/backdrop/west-side/water-shine-2.png',
      height: 3
    }, {
      autoscroll: 0,
      parallax: 0.004,
      url: '/Sonic/backdrop/west-side/water.png',
      height: 142
    }, {
      autoscroll: 0,
      parallax: 0.001,
      url: '/Sonic/backdrop/west-side/stars-reflected.png',
      height: 0
    }, {
      autoscroll: 0,
      parallax: 0.0005,
      url: '/Sonic/backdrop/west-side/island-dark-reflected.png',
      height: 0
    }];
    return _this;
  }

  return _createClass(WestSideNight);
}(_Backdrop2.Backdrop);

exports.WestSideNight = WestSideNight;
});

;require.register("backdrop/Wood.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wood = void 0;

var _Backdrop2 = require("./Backdrop");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Wood = /*#__PURE__*/function (_Backdrop) {
  _inherits(Wood, _Backdrop);

  var _super = _createSuper(Wood);

  function Wood(args, parent) {
    var _this;

    _classCallCheck(this, Wood);

    _this = _super.call(this, args, parent);
    _this.args.name = 'wood';
    _this.args.strips = [{
      autoscroll: 0.0,
      parallax: 0.1,
      url: '/Sonic/backdrop/wood/forest.png',
      height: 1600
    }];
    return _this;
  }

  return _createClass(Wood);
}(_Backdrop2.Backdrop);

exports.Wood = Wood;
});

;require.register("behavior/Behavior.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Behavior = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Behavior = /*#__PURE__*/function () {
  function Behavior() {
    _classCallCheck(this, Behavior);
  }

  _createClass(Behavior, [{
    key: "update",
    value: function update(host) {}
  }]);

  return Behavior;
}();

exports.Behavior = Behavior;
});

;require.register("behavior/SkidDust.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkidDust = void 0;

var _Tag = require("curvature/base/Tag");

var _Behavior2 = require("./Behavior");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SkidDust = /*#__PURE__*/function (_Behavior) {
  _inherits(SkidDust, _Behavior);

  var _super = _createSuper(SkidDust);

  function SkidDust(dustType) {
    var _this;

    _classCallCheck(this, SkidDust);

    _this = _super.call(this);
    _this.dustType = dustType || 'particle-dust';
    return _this;
  }

  _createClass(SkidDust, [{
    key: "update",
    value: function update(host) {
      if (host.args.falling || host.args.rolling || host.spindashCharge) {
        return;
      }

      if (host.args.wallSticking || host.args.climbing) {
        return;
      }

      var direction = host.args.direction;

      if (!Math.sign(host.args.gSpeed) || !Math.sign(direction)) {
        return;
      }

      if (Math.abs(host.args.gSpeed - direction) < 5) {
        return;
      }

      if (!host.alwaysSkidding) {
        if (Math.sign(host.args.gSpeed) === Math.sign(direction)) {
          return;
        }

        if (!host.skidding) {
          return;
        }
      }

      var viewport = host.viewport;
      var dustFreq = host.distFreq || 2;

      if (viewport.args.frameId % dustFreq !== 0) {
        return;
      }

      var dustParticle = new _Tag.Tag(document.createElement('div'));
      dustParticle.classList.add(this.dustType);
      var dustDist = Math.sign(host.args.gSpeed) * host.dustDist || 0; // const dustPoint = host.rotatePoint(host.args.gSpeed, 0);

      var dustPoint = host.groundPoint;
      dustParticle.style({
        '--x': dustPoint[0] + dustDist,
        '--y': dustPoint[1],
        'z-index': 0,
        opacity: Math.random() * 0.25 + 0.5
      });
      viewport.particles.add(dustParticle);
      viewport.onFrameOut(20, function () {
        viewport.particles.remove(dustParticle);
      });
    }
  }]);

  return SkidDust;
}(_Behavior2.Behavior);

exports.SkidDust = SkidDust;
});

;require.register("cards/basic-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t</span>\n</div>\n"
});

;require.register("cards/basic-moves.html", function(exports, require, module) {
module.exports = "<p><b>jump</b> + <b>jump</b> - fly / double jump action</p>\n\n<p><span class = \"arrow-button arrow-north\"></span> + <b>jump</b> - disengage vehicle</p>\n\n<!-- <p><span class = \"arrow-button arrow-south\"></span> + <b>jump</b> - spindash</p> -->\n"
});

;require.register("cards/plane-air-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- double barrier\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t\t- <span>light dash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>air dash left</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>air dash right</span>\n\t</span>\n\n</div>\n"
});

;require.register("cards/sonic-air-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- double barrier\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>shift</b>\n\t\t- <span>light dash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>air dash left</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>air dash right</span>\n\t</span>\n\n</div>\n"
});

;require.register("cards/sonic-controls.html", function(exports, require, module) {
module.exports = "<div class = \"control-card\">\n\n\t<span class = \"button-index\">\n\t\t<span class = \"arrow button arrow-west\"></span>\n\t\t/ <span class = \"arrow button arrow-east\"></span>\n\t\t/ <b>wasd</b>\n\t\t- move\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-x\"></span>\n\t\t<span class = \"button xb xb-a\"></span>\n\t\t<b>space</b>\n\t\t- jump\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-o\"></span>\n\t\t<span class = \"button xb xb-b\"></span>\n\t\t<b>ctrl</b>\n\t\t- <span>spindash</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-s\"></span>\n\t\t<span class = \"button xb xb-x\"></span>\n\t\t<b>z</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-t\"></span>\n\t\t<span class = \"button xb xb-y\"></span>\n\t\t<b>x</b>\n\t\t- <span>super</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-l1\"></span>\n\t\t<span class = \"button xb xb-lb\"></span>\n\t\t<b>q</b>\n\t\t- <span>no action</span>\n\t</span>\n\n\t<span class = \"button-index\">\n\t\t<span class = \"button ps ps-r1\"></span>\n\t\t<span class = \"button xb xb-rb\"></span>\n\t\t<b>e</b>\n\t\t- <span>no action</span>\n\t</span>\n\n</div>\n"
});

;require.register("console/task/Impulse.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Impulse = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Impulse = /*#__PURE__*/function (_Task) {
  _inherits(Impulse, _Task);

  var _super = _createSuper(Impulse);

  function Impulse() {
    var _this;

    _classCallCheck(this, Impulse);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'Impulse task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Impulse, [{
    key: "init",
    value: function init(magnitude, angle) {
      if (!Impulse.viewport.controlActor) {
        return;
      } // this.print(`Pressing button ${buttonId} for ${ms} milliseconds...`);


      var actor = Impulse.viewport.controlActor;
      actor.impulse(magnitude, angle, true);
    }
  }, {
    key: "write",
    value: function write(line) {
      this.print(line);
    }
  }]);

  return Impulse;
}(_Task2.Task);

exports.Impulse = Impulse;

_defineProperty(Impulse, "viewport", null);

_defineProperty(Impulse, "helpText", 'Apply an impulse to the player object.');

_defineProperty(Impulse, "useText", 'input magnitude angle');
});

;require.register("console/task/Input.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Input = /*#__PURE__*/function (_Task) {
  _inherits(Input, _Task);

  var _super = _createSuper(Input);

  function Input() {
    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'Input task');

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Input, [{
    key: "init",
    value: function init(inputId) {
      var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      var magnitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      var frame,
          intervalId,
          onDone = function onDone() {};

      if (!Input.viewport.controlActor) {
        return;
      }

      var actor = Input.viewport.controlActor;
      var controller = actor.controller;

      if (inputId[0] === 'a') {
        var axisId = inputId.substring(1);
        this.print("Setting axis ".concat(axisId, " to ").concat(magnitude, " for ").concat(ms, " milliseconds..."));
        frame = {
          axes: _defineProperty({}, axisId, magnitude)
        };
        intervalId = setInterval(function () {
          controller.replay(frame);
          actor.readInput();
        }, 16);

        onDone = function onDone() {
          frame.axes[axisId] = 0;
          controller.replay(frame);
          actor.readInput();
          clearInterval(intervalId);
        };
      }

      if (inputId[0] === 'b') {
        var buttonId = inputId.substring(1);
        this.print("Pressing button ".concat(buttonId, " for ").concat(ms, " milliseconds..."));
        frame = {
          buttons: _defineProperty({}, buttonId, 1)
        };
        intervalId = setInterval(function () {
          frame.buttons[buttonId] = 1;
          controller.replay(frame);
          actor.readInput();
        }, 16);

        onDone = function onDone() {
          frame.buttons[buttonId] = 0;
          controller.replay(frame);
          actor.readInput();
          clearInterval(intervalId);
        };
      }

      if (!frame) {
        return;
      }

      controller.replay(frame);
      actor.readInput();
      return new Promise(function (accept) {
        setTimeout(function () {
          onDone();
          accept();
        }, ms);
      });
    }
  }, {
    key: "write",
    value: function write(line) {
      this.print(line);
    }
  }]);

  return Input;
}(_Task2.Task);

exports.Input = Input;

_defineProperty(Input, "viewport", null);

_defineProperty(Input, "helpText", 'Press a button x for y milliseconds.');

_defineProperty(Input, "useText", 'input x y');
});

;require.register("console/task/Move.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Move = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Move = /*#__PURE__*/function (_Task) {
  _inherits(Move, _Task);

  var _super = _createSuper(Move);

  function Move() {
    var _this;

    _classCallCheck(this, Move);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Move, [{
    key: "init",
    value: function init(x, y) {
      if (!Move.viewport.controlActor) {
        return;
      }

      this.print("Moving character to x, y...");
      var actor = Move.viewport.controlActor;
      actor.args.x = Number(x);
      actor.args.y = Number(y);

      if (actor.viewport) {
        actor.viewport.setColCell(actor);
      }
    }
  }]);

  return Move;
}(_Task2.Task);

exports.Move = Move;

_defineProperty(Move, "viewport", null);

_defineProperty(Move, "helpText", 'Move the current actor to a position in space.');

_defineProperty(Move, "useText", 'move x y');
});

;require.register("console/task/Pos.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pos = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pos = /*#__PURE__*/function (_Task) {
  _inherits(Pos, _Task);

  var _super = _createSuper(Pos);

  function Pos() {
    _classCallCheck(this, Pos);

    return _super.apply(this, arguments);
  }

  _createClass(Pos, [{
    key: "init",
    value: function init(x, y) {
      if (!Pos.viewport.controlActor) {
        return;
      }

      var actor = Pos.viewport.controlActor;
      this.print("Character is at ".concat(actor.x, ", ").concat(actor.y, "."));
    }
  }]);

  return Pos;
}(_Task2.Task);

exports.Pos = Pos;

_defineProperty(Pos, "viewport", null);

_defineProperty(Pos, "helpText", 'Check the current actor\'s position in space.');
});

;require.register("console/task/Settings.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Settings = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Settings = /*#__PURE__*/function (_Task) {
  _inherits(Settings, _Task);

  var _super = _createSuper(Settings);

  function Settings() {
    var _this;

    _classCallCheck(this, Settings);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "prompt", '..');

    return _this;
  }

  _createClass(Settings, [{
    key: "init",
    value: function init(key, val) {
      var viewport = Settings.viewport;

      if (val !== undefined) {
        viewport.settings[key] = JSON.parse(val);
      }

      this.print(JSON.stringify(viewport.settings[key]));
    }
  }]);

  return Settings;
}(_Task2.Task);

exports.Settings = Settings;

_defineProperty(Settings, "viewport", null);

_defineProperty(Settings, "helpText", 'Get/set the values of settings variables.');

_defineProperty(Settings, "useText", 'set key val');
});

;require.register("console/task/Spawn.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spawn = void 0;

var _Task2 = require("subspace-console/Task");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Spawn = /*#__PURE__*/function (_Task) {
  _inherits(Spawn, _Task);

  var _super = _createSuper(Spawn);

  function Spawn() {
    _classCallCheck(this, Spawn);

    return _super.apply(this, arguments);
  }

  _createClass(Spawn, [{
    key: "init",
    value: function init(typeName) {
      if (!Spawn.viewport || !Spawn.viewport.controlActor) {
        return;
      }

      var palette = Spawn.viewport.objectPalette;
      var actor = Spawn.viewport.controlActor;

      if (!typeName) {
        this.print(Object.keys(palette).join(', '));
        return;
      }

      if (!(typeName in palette)) {
        this.print("Type not found: \"".concat(typeName, "\"."));
        return;
      }

      var type = palette[typeName];
      Spawn.viewport.spawn.add({
        object: new type({
          x: actor.x + 128,
          y: actor.y - 128
        })
      });
    }
  }]);

  return Spawn;
}(_Task2.Task);

exports.Spawn = Spawn;

_defineProperty(Spawn, "viewport", null);

_defineProperty(Spawn, "helpText", 'Spawn an object.');
});

;require.register("controller/Axis.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Axis = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Axis = /*#__PURE__*/function () {
  function Axis(_ref) {
    var _ref$deadZone = _ref.deadZone,
        deadZone = _ref$deadZone === void 0 ? 0 : _ref$deadZone,
        _ref$proportional = _ref.proportional,
        proportional = _ref$proportional === void 0 ? true : _ref$proportional;

    _classCallCheck(this, Axis);

    _defineProperty(this, "magnitude", 0);

    _defineProperty(this, "delta", 0);

    if (deadZone) {
      this.proportional = proportional;
      this.deadZone = deadZone;
    }
  }

  _createClass(Axis, [{
    key: "tilt",
    value: function tilt(magnitude) {
      if (this.deadZone && Math.abs(magnitude) >= this.deadZone) {
        magnitude = (Math.abs(magnitude) - this.deadZone) / (1 - this.deadZone) * Math.sign(magnitude);
      } else {
        magnitude = 0;
      }

      this.delta = Number(magnitude - this.magnitude).toFixed(3) - 0;
      this.magnitude = Number(magnitude).toFixed(3) - 0;
    }
  }, {
    key: "zero",
    value: function zero() {
      this.magnitude = this.delta = 0;
    }
  }]);

  return Axis;
}();

exports.Axis = Axis;
});

;require.register("controller/Button.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Button = /*#__PURE__*/function () {
  function Button() {
    _classCallCheck(this, Button);

    _defineProperty(this, "active", false);

    _defineProperty(this, "pressure", 0);

    _defineProperty(this, "delta", 0);

    _defineProperty(this, "time", 0);
  }

  _createClass(Button, [{
    key: "update",
    value: function update() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.pressure) {
        this.time++;
      } else if (!this.pressure && this.time > 0) {
        this.time = -1;
      } else if (!this.pressure && this.time < 0) {
        this.time--;
      }

      if (this.time < -1 && this.delta === -1) {
        this.delta = 0;
      }
    }
  }, {
    key: "press",
    value: function press(pressure) {
      this.delta = Number(pressure - this.pressure).toFixed(3) - 0;
      this.pressure = Number(pressure).toFixed(3) - 0;
      this.active = true;
      this.time = this.time > 0 ? this.time : 0;
    }
  }, {
    key: "release",
    value: function release() {
      if (!this.active) {
        return;
      }

      this.delta = Number(-this.pressure).toFixed(3) - 0;
      this.pressure = 0;
      this.active = false;
    }
  }, {
    key: "zero",
    value: function zero() {
      this.pressure = this.delta = 0;
      this.active = false;
    }
  }]);

  return Button;
}();

exports.Button = Button;
});

;require.register("controller/Controller.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Controller = void 0;

var _Axis = require("./Axis");

var _Button = require("./Button");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var keys = {
  'Space': 0,
  'Enter': 0,
  'NumpadEnter': 0,
  'ControlLeft': 1,
  'ControlRight': 1,
  'ShiftLeft': 2,
  'ShiftRight': 2,
  'KeyZ': 3,
  'KeyQ': 4,
  'KeyE': 5,
  'Digit1': 6,
  'Digit3': 7,
  'KeyW': 12,
  'KeyA': 14,
  'KeyS': 13,
  'KeyD': 15,
  'KeyH': 112,
  'KeyJ': 113,
  'KeyK': 114,
  'KeyL': 115,
  'KeyP': 9,
  'Pause': 9,
  'Tab': 11,
  'ArrowUp': 12,
  'ArrowDown': 13,
  'ArrowLeft': 14,
  'ArrowRight': 15,
  'Numpad4': 112,
  'Numpad2': 113,
  'Numpad8': 114,
  'Numpad6': 115,
  'Backquote': 1010,
  'NumpadAdd': 1011,
  'NumpadSubtract': 1012,
  'NumpadMultiply': 1013,
  'NumpadDivide': 1014,
  'Escape': 1020
};

_toConsumableArray(Array(12)).map(function (x, fn) {
  return keys["F".concat(fn)] = 2000 + fn;
});

var axisMap = {
  12: -1,
  13: +1,
  14: -0,
  15: +0,
  112: -2,
  113: +3,
  114: -3,
  115: +2
};

var Controller = /*#__PURE__*/function () {
  function Controller(_ref) {
    var _ref$keys = _ref.keys,
        keys = _ref$keys === void 0 ? {} : _ref$keys,
        _ref$deadZone = _ref.deadZone,
        deadZone = _ref$deadZone === void 0 ? 0 : _ref$deadZone,
        _ref$gamepad = _ref.gamepad,
        gamepad = _ref$gamepad === void 0 ? null : _ref$gamepad,
        _ref$keyboard = _ref.keyboard,
        keyboard = _ref$keyboard === void 0 ? null : _ref$keyboard;

    _classCallCheck(this, Controller);

    this.deadZone = deadZone;
    Object.defineProperties(this, {
      buttons: {
        value: {}
      },
      pressure: {
        value: {}
      },
      axes: {
        value: {}
      },
      keys: {
        value: {}
      }
    });
  }

  _createClass(Controller, [{
    key: "update",
    value: function update(_ref2) {
      var gamepad = _ref2.gamepad;

      for (var i in this.buttons) {
        var button = this.buttons[i];
        button.update();
      }

      if (gamepad && this.willRumble) {
        if (_typeof(this.willRumble) !== 'object') {
          this.willRumble = {
            duration: 1000,
            strongMagnitude: 1.0,
            weakMagnitude: 1.0
          };
        }

        if (gamepad.vibrationActuator) {
          gamepad.vibrationActuator.playEffect("dual-rumble", this.willRumble);
        }

        this.willRumble = false;
      }
    }
  }, {
    key: "rumble",
    value: function rumble() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.willRumble = options;
    }
  }, {
    key: "readInput",
    value: function readInput(_ref3) {
      var keyboard = _ref3.keyboard,
          gamepad = _ref3.gamepad;
      var pressed = {};
      var released = {};

      if (gamepad) {
        for (var i in gamepad.buttons) {
          var button = gamepad.buttons[i];

          if (button.pressed) {
            this.press(i, button.value);
            pressed[i] = true;
          }
        }
      }

      if (keyboard) {
        for (var _i in _toConsumableArray(Array(10))) {
          if (pressed[_i]) {
            continue;
          }

          if (keyboard.getKeyCode(_i) > 0) {
            this.press(_i, 1);
            pressed[_i] = true;
          }
        }

        for (var keycode in keys) {
          if (pressed[keycode]) {
            continue;
          }

          var buttonId = keys[keycode];

          if (keyboard.getKeyCode(keycode) > 0) {
            this.press(buttonId, 1);
            pressed[buttonId] = true;
          }
        }
      }

      if (gamepad) {
        for (var _i2 in gamepad.buttons) {
          if (pressed[_i2]) {
            continue;
          }

          var _button = gamepad.buttons[_i2];

          if (!_button.pressed) {
            this.release(_i2);
            released[_i2] = true;
          }
        }
      }

      if (keyboard) {
        for (var _i3 in _toConsumableArray(Array(10))) {
          if (released[_i3]) {
            continue;
          }

          if (pressed[_i3]) {
            continue;
          }

          if (keyboard.getKeyCode(_i3) < 0) {
            this.release(_i3);
            released[_i3] = true;
          }
        }

        for (var _keycode in keys) {
          var _buttonId = keys[_keycode];

          if (released[_buttonId]) {
            continue;
          }

          if (pressed[_buttonId]) {
            continue;
          }

          if (keyboard.getKeyCode(_keycode) < 0) {
            this.release(_buttonId);
            released[_keycode] = true;
          }
        }
      }

      var tilted = {};

      if (gamepad) {
        for (var _i4 in gamepad.axes) {
          var axis = gamepad.axes[_i4];
          tilted[_i4] = true;
          this.tilt(_i4, axis);
        }
      }

      for (var inputId in axisMap) {
        if (!this.buttons[inputId]) {
          this.buttons[inputId] = new _Button.Button();
        }

        var _axis = axisMap[inputId];
        var value = Math.sign(1 / _axis);
        var axisId = Math.abs(_axis);

        if (this.buttons[inputId].active) {
          tilted[axisId] = true;
          this.tilt(axisId, value);
        } else if (!tilted[axisId]) {
          this.tilt(axisId, 0);
        }
      }
    }
  }, {
    key: "tilt",
    value: function tilt(axisId, magnitude) {
      if (!this.axes[axisId]) {
        this.axes[axisId] = new _Axis.Axis({
          deadZone: this.deadZone
        });
      }

      this.axes[axisId].tilt(magnitude);
    }
  }, {
    key: "press",
    value: function press(buttonId) {
      var pressure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      if (!this.buttons[buttonId]) {
        this.buttons[buttonId] = new _Button.Button();
      }

      this.buttons[buttonId].press(pressure);
    }
  }, {
    key: "release",
    value: function release(buttonId) {
      if (!this.buttons[buttonId]) {
        this.buttons[buttonId] = new _Button.Button();
      }

      this.buttons[buttonId].release();
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var buttons = {};

      for (var i in this.buttons) {
        buttons[i] = this.buttons[i].pressure;
      }

      var axes = {};

      for (var _i5 in this.axes) {
        axes[_i5] = this.axes[_i5].magnitude;
      }

      return {
        axes: axes,
        buttons: buttons
      };
    }
  }, {
    key: "replay",
    value: function replay(input) {
      if (input.buttons) {
        for (var i in input.buttons) {
          if (input.buttons[i] > 0) {
            this.press(i, input.buttons[i]);
          } else {
            this.release(i);
          }
        }
      }

      if (input.axes) {
        for (var _i6 in input.axes) {
          if (input.axes[_i6].magnitude !== input.axes[_i6]) {
            this.tilt(_i6, input.axes[_i6]);
          }
        }
      }
    }
  }, {
    key: "zero",
    value: function zero() {
      for (var i in this.axes) {
        this.axes[i].zero();
      }

      for (var _i7 in this.buttons) {
        this.buttons[_i7].zero();
      }
    }
  }]);

  return Controller;
}();

exports.Controller = Controller;
});

;require.register("debug/LineDump.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineDump = void 0;

var _View2 = require("curvature/base/View");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LineDump = /*#__PURE__*/function (_View) {
  _inherits(LineDump, _View);

  var _super = _createSuper(LineDump);

  function LineDump() {
    var _this;

    _classCallCheck(this, LineDump);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"line-dump\" style = \"--x:[[x]];--y:[[y]];--length:[[len]];--angle:[[angle]]\">\n\t\t<div class = \"line\" style = \"border-color:[[color]]\"></div>\n\t</div>");

    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    return _this;
  }

  return _createClass(LineDump);
}(_View2.View);

exports.LineDump = LineDump;
});

;require.register("debug/PointDump.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointDump = void 0;

var _View2 = require("curvature/base/View");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PointDump = /*#__PURE__*/function (_View) {
  _inherits(PointDump, _View);

  var _super = _createSuper(PointDump);

  function PointDump() {
    var _this;

    _classCallCheck(this, PointDump);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"point-dump\">\n\t\t<div class = \"point\" style = \"--color:[[color]]\">[[x]], [[y]]</div>\n\t</div>");

    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    return _this;
  }

  return _createClass(PointDump);
}(_View2.View);

exports.PointDump = PointDump;
});

;require.register("debug/arrow-east.svg", function(exports, require, module) {
module.exports = "<svg width=\"497.81px\" height=\"497.81px\" enable-background=\"new 0 0 497.812 497.812\" version=\"1.1\" viewBox=\"0 0 497.81 497.81\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<g transform=\"matrix(-1 0 0 1 497.81 0)\">\n\t\t<path d=\"m203.66 312.91 117.03 117.03-67.906 67.875-248.91-248.91 248.91-248.91 67.906 67.875-117.06 117.06 290.28-0.031 0.031 127.97z\"/>\n\t</g>\n</svg>\n"
});

;require.register("effects/Cylinder.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cylinder = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Cylinder = /*#__PURE__*/function (_View) {
  _inherits(Cylinder, _View);

  var _super = _createSuper(Cylinder);

  function Cylinder(args, parent) {
    var _this;

    _classCallCheck(this, Cylinder);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'cylinder';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    return _this;
  }

  _createClass(Cylinder, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag("<canvas width = \"".concat(this.args.width, "\" height = \"").concat(this.args.height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, this.args.width, this.args.height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / this.args.width);
        var x = w % this.args.width;
        var ox = x - this.args.width / 2;
        var oy = y - this.args.height / 2;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));
        var s = Math.min(this.args.width, this.args.height) / 2;
        c = Math.abs(ox / this.args.width) / 2; // d = p / s;

        r = 128 + ox * 4 * c;
        g = 128; // + (oy * 4) * d;

        b = 0;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Cylinder;
}(_View2.View);

exports.Cylinder = Cylinder;
});

;require.register("effects/Droop.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Droop = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Droop = /*#__PURE__*/function (_View) {
  _inherits(Droop, _View);

  var _super = _createSuper(Droop);

  function Droop(args, parent) {
    var _this;

    _classCallCheck(this, Droop);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./droop.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'droop';
    _this.args.width = (args.width || 64) * 2;
    _this.args.height = args.height || 64;
    _this.args.intensity = 1.0;
    _this.args.droopWidth = '102%';
    return _this;
  }

  _createClass(Droop, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      this.constructor.generateMap(this.args.width, this.args.height).then(function (image) {
        _this2.args.blob = image;
      });
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }], [{
    key: "generateMap",
    value: function generateMap(width, height) {
      var memoKey = "".concat(width, "::").concat(height);
      var memoMap = this.memoMaps;

      if (memoMap.has(memoKey)) {
        return Promise.resolve(memoMap.get(memoKey));
      }

      var displacer = new _Tag.Tag("<canvas width = \"".concat(width, "\" height = \"").concat(height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, width, height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b, _a;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / width);
        var x = w % width;
        var ux = x / width;
        var uy = y / height;
        var input = -Math.PI + ux * Math.PI;
        r = 128;
        g = 128 + Math.round(128 * (Math.cos(input) * 0.5 + 0.5));
        b = 0;
        a = 255;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = (_a = a) !== null && _a !== void 0 ? _a : 255;
      }

      context.putImageData(image, 0, 0);
      return new Promise(function (accept) {
        displacer.toBlob(function (png) {
          var blob = URL.createObjectURL(png, 'image/png');
          memoMap.set(memoKey, blob);
          accept(blob);
        });
      });
    }
  }]);

  return Droop;
}(_View2.View);

exports.Droop = Droop;

_defineProperty(Droop, "memoMaps", new Map());
});

;require.register("effects/Pinch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pinch = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pinch = /*#__PURE__*/function (_View) {
  _inherits(Pinch, _View);

  var _super = _createSuper(Pinch);

  function Pinch(args, parent) {
    var _this;

    _classCallCheck(this, Pinch);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'pinch';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    return _this;
  }

  _createClass(Pinch, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag("<canvas width = \"".concat(this.args.width, "\" height = \"").concat(this.args.height, "\">"));
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, this.args.width, this.args.height);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g, _b;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = void 0,
            d = 0;
        var w = i / 4;
        var y = Math.floor(w / this.args.width);
        var x = w % this.args.width;
        var ox = x - this.args.width / 2;
        var oy = y - this.args.height / 2;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));
        var ss = Math.min(this.args.width, this.args.height);
        var s = ss / 2;

        if (p < s) {
          c = Math.pow(1 - p / s, 2);
          d = Math.pow(1 - p / s, 2);
        } else {
          c = 0;
          d = 0;
        }

        r = 128 + ox * 4 * c;
        g = 128 + oy * 4 * d;
        b = 0;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 128;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 128;
        pixels[i + 2] = (_b = b) !== null && _b !== void 0 ? _b : 128;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Pinch;
}(_View2.View);

exports.Pinch = Pinch;
});

;require.register("effects/ScreenFire.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenFire = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ScreenFire = /*#__PURE__*/function (_View) {
  _inherits(ScreenFire, _View);

  var _super = _createSuper(ScreenFire);

  function ScreenFire() {
    var _this;

    _classCallCheck(this, ScreenFire);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./screen-fire'));

    return _this;
  }

  _createClass(ScreenFire, [{
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      this.args.animation = 'playing';
      this.onTimeout(5000, function () {
        return _this2.remove();
      });
    }
  }]);

  return ScreenFire;
}(_View2.View);

exports.ScreenFire = ScreenFire;
});

;require.register("effects/ScreenWarp.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenWarp = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ScreenWarp = /*#__PURE__*/function (_View) {
  _inherits(ScreenWarp, _View);

  var _super = _createSuper(ScreenWarp);

  function ScreenWarp() {
    var _this;

    _classCallCheck(this, ScreenWarp);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./screen-fire'));

    return _this;
  }

  _createClass(ScreenWarp, [{
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      this.args.animation = 'playing';
      this.onTimeout(5000, function () {
        return _this2.remove();
      });
    }
  }]);

  return ScreenWarp;
}(_View2.View);

exports.ScreenWarp = ScreenWarp;
});

;require.register("effects/Twist.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Twist = void 0;

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Twist = /*#__PURE__*/function (_View) {
  _inherits(Twist, _View);

  var _super = _createSuper(Twist);

  function Twist(args, parent) {
    var _this;

    _classCallCheck(this, Twist);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./twist.svg'));

    _this.args.scale = _this.args.scale || 0;
    _this.args.id = _this.args.id || 'twist';
    _this.args.width = _this.args.width || 64;
    _this.args.height = _this.args.height || 64;
    _this.args.dx = 0;
    _this.args.dy = 0;
    return _this;
  }

  _createClass(Twist, [{
    key: "onRendered",
    value: function onRendered() {
      var _this2 = this;

      var displacer = new _Tag.Tag('<canvas width = "64" height = "64">');
      var context = displacer.getContext('2d');
      context.imageSmoothingEnabled = false;
      var image = context.getImageData(0, 0, 64, 64);
      var pixels = image.data;

      for (var i = 0; i < pixels.length; i += 4) {
        var _r, _g;

        var r = void 0,
            g = void 0,
            b = void 0,
            a = void 0,
            c = 1;
        var w = i / 4;
        var y = Math.floor(w / 64);
        var x = w % 64;
        var ox = x - 31.5;
        var oy = y - 31.5 - 15.5;
        var p = Math.sqrt(Math.pow(ox, 2) + Math.pow(oy, 2));

        if (p > 32) {
          c = 0;
        } else {
          c = Math.pow(1 - p / 32, 3);
        }

        r = 128 + oy * 4 * c;
        g = 128 - ox * 4 * c;
        pixels[i + 0] = (_r = r) !== null && _r !== void 0 ? _r : 0;
        pixels[i + 1] = (_g = g) !== null && _g !== void 0 ? _g : 0;
        pixels[i + 2] = b !== null && b !== void 0 ? b : 0;
        pixels[i + 3] = a !== null && a !== void 0 ? a : 255;
      }

      context.putImageData(image, 0, 0);
      displacer.toBlob(function (png) {
        return _this2.args.blob = URL.createObjectURL(png);
      }, 'image/png');
    }
  }, {
    key: "name",
    get: function get() {
      return "".concat(this.args.id); // return `filter_${this.args.id}`;
    }
  }]);

  return Twist;
}(_View2.View);

exports.Twist = Twist;
});

;require.register("effects/droop.svg", function(exports, require, module) {
module.exports = "<svg\n\twidth  =\"100%\"\n\theight =\"100%\"\n>\n\t<defs>\n\n\t\t<filter\n\t\t\tcv-ref = \"filter\"\n\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\tid = \"[[id]]\"\n\t\t\twidth  =\"102%\"\n\t\t\theight =\"1204%\"\n\t\t\tx  = \"-1%\"\n\t\t\ty  = \"-2%\"\n\n\t\t>\n\t\t\t<feImage\n\t\t\t\tpreserveAspectRatio = \"none\"\n\t\t\t\tresult  = \"DisplacementSourceLeft\"\n\t\t\t\tcv-attr = \"width:droopWidthLeft,href:blob\"\n\t\t\t/>\n\n\t\t\t<feImage\n\t\t\t\tpreserveAspectRatio = \"none\"\n\t\t\t\tresult  = \"DisplacementSourceRightInvert\"\n\t\t\t\tcv-attr = \"x:droopRightStart,width:droopWidthRight,href:blob\"\n\t\t\t/>\n\n\t\t\t<feColorMatrix\n\t\t\t\tin     = \"DisplacementSourceRightInvert\"\n\t\t\t\tresult = \"DisplacementSourceRight\"\n\t\t\t\ttype   = \"matrix\"\n\t\t\t\tvalues=\"\n\t\t\t\t\t1 0 0 0 0\n\t\t\t\t\t0 -1 0 0 1.5\n\t\t\t\t\t0 0 1 0 0\n\t\t\t\t\t0 0 0 1 0\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSourceLeft\"\n\t\t\t\tin2    = \"DisplacementSourceRight\"\n\t\t\t\tresult = \"DisplacementSource\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feFlood flood-color=\"#808000\" result = \"OffsetNeutral\" />\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSource\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin     = \"DisplacementSource\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t\t<feDisplacementMap\n\t\t\t\txChannelSelector = \"R\"\n\t\t\t\tyChannelSelector = \"G\"\n\t\t\t\tin      = \"SourceGraphic\"\n\t\t\t\tin2     = \"DisplacementResult\"\n\t\t\t\tcv-ref  = \"displace\"\n\t\t\t\tcv-attr = \"scale:scale\"\n\t\t\t\twidth  =\"102%\"\n\t\t\t/>\n\n\t\t</filter>\n\n\t</defs>\n</svg>\n"
});

;require.register("effects/screen-fire.html", function(exports, require, module) {
module.exports = "<div class = \"screen-fire [[animation]]\">\n\t<div class = \"fire-strip\" style = \"--index:0\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:1\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:2\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:3\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:4\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:5\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:6\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:7\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:8\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:9\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:10\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:11\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:12\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:13\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:14\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:15\"><div></div></div>\n\t<div class = \"fire-strip\" style = \"--index:16\"><div></div></div>\n</div>\n"
});

;require.register("effects/twist.svg", function(exports, require, module) {
module.exports = "<svg\n\theight =\"100%\"\n\twidth  =\"100%\"\n>\n\t<defs>\n\n\t\t<filter\n\t\t\tcv-ref = \"filter\"\n\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\theight = \"100%\"\n\t\t\twidth  = \"100%\"\n\t\t\tid     = \"[[id]]\"\n\t\t\tx      = \"0%\"\n\t\t\ty      = \"0%\"\n\n\t\t>\n\t\t\t<feFlood\n\t\t\t\tflood-color=\"#808000\"\n\t\t\t\theight = \"100%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t\tresult = \"OffsetNeutral\"\n\t\t\t\tx=\"0\"\n\t\t\t\ty=\"0\"\n\t\t\t/>\n\n\t\t\t<feImage\n\t\t\t\txlink:href=\"[[blob]]\"\n\t\t\t\tresult = \"DisplacementSource\"\n\t\t\t\theight = \"100%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t/>\n\n\t\t\t<feOffset\n\t\t\t\tin      = \"DisplacementSource\"\n\t\t\t\tresult  = \"OffsetSource\"\n\t\t\t\tcv-attr =  \"dx:dx,dy:dy\"\n\t\t\t/>\n\n\t\t\t<feComposite\n\t\t\t\toperator=\"over\"\n\t\t\t\tin2    = \"OffsetNeutral\"\n\t\t\t\tin     = \"OffsetSource\"\n\t\t\t\tresult = \"DisplacementResult\"\n\t\t\t/>\n\n\t\t\t<feDisplacementMap\n\t\t\t\txChannelSelector = \"R\"\n\t\t\t\tyChannelSelector = \"G\"\n\t\t\t\tin      = \"SourceGraphic\"\n\t\t\t\tin2     = \"DisplacementResult\"\n\t\t\t\tcv-ref  = \"displace\"\n\t\t\t\tcv-attr = \"scale:scale\"\n\t\t\t/>\n\n\t\t</filter>\n\n\t</defs>\n</svg>\n"
});

;require.register("initialize.js", function(exports, require, module) {
"use strict";

var _Bgm = require("./audio/Bgm");

var _Viewport = require("./viewport/Viewport");

var _Tag = require("curvature/base/Tag");

var _TileMap = require("./tileMap/TileMap");

var viewportA = new _Viewport.Viewport();
document.addEventListener('DOMContentLoaded', function () {
  console.log('Starting...'); // setTimeout(()=>console.log(window.myfunc(512, 512)), 1500);

  if (navigator.serviceWorker) {
    navigator.serviceWorker.register('/worker-cache.js');
  }

  var lastTime = 0;
  viewportA.render(document.body);
  viewportA.args.fps = '...';
  var body = new _Tag.Tag(document.body);
  var skyShift = 100;
  var frameTimes = [];

  var update = function update() {
    var now = performance.now();
    var frameTime = now - lastTime;
    var frameAgeMin = 1000 / (viewportA.args.maxFps || 60);
    requestAnimationFrame(update);

    if (viewportA.args.maxFps < 60 && frameAgeMin > frameTime) {
      return;
    }

    viewportA.update();
    lastTime = now;
    frameTimes.push(frameTime);

    if (frameTimes.length > 1) {
      var frameTimeSum = frameTimes.reduce(function (a, b) {
        return a + b;
      });
      var frameTimeAvg = frameTimeSum / frameTimes.length;
      viewportA.args.fps = 1000 / frameTimeAvg;
      frameTimes.splice(0);
    }
  };

  update();
});

_Bgm.Bgm.register('STAR_SHIELD', '/audio/leslie-wai/feel-the-sunshine.mp3', 1);

_Bgm.Bgm.register('RADICAL_CITY', '/audio/colbreakz/848482_ColBreakz---My-Universe.mp3', 1);

_Bgm.Bgm.register('WEST_SIDE', '/audio/akselmcbossmcgee123/1066486_Blammed-By-Pico.mp3', 1);

_Bgm.Bgm.register('UNDERGROUND_ZONE', '/audio/tee-lopes/under-ground-zone-remix.mp3', 1);

_Bgm.Bgm.register('MISTY_RUINS', 'audio/neil-voss/extol.mp3', 1);

_Bgm.Bgm.register('TITLE_THEME', '/Sonic/carnival-night-zone-act-2-beta.mp3', 1);

_Bgm.Bgm.register('MENU_THEME', '/Sonic/s3k-competition.mp3', 1);

_Bgm.Bgm.register('TUTORIAL_THEME', '/audio/teravex/1083419_Lowbeat.mp3', 1); // Bgm.register('ACT-BOSS', '', 4);
// Bgm.register('ZONE-BOSS', '', 4);
// Bgm.play('RADICAL_CITY');
});

require.register("intro/BootCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BootCard = void 0;

var _Card2 = require("./Card");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BootCard = /*#__PURE__*/function (_Card) {
  _inherits(BootCard, _Card);

  var _super = _createSuper(BootCard);

  function BootCard(args, parent) {
    var _this;

    _classCallCheck(this, BootCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'boot-card';
    _this.args.text = "PRODUCED BY\nSEAN MORRIS UNDER\nTHE APACHE 2.0 LICENSE";
    return _this;
  }

  return _createClass(BootCard);
}(_Card2.Card);

exports.BootCard = BootCard;
});

;require.register("intro/Card.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Card = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Card = /*#__PURE__*/function (_View) {
  _inherits(Card, _View);

  var _super = _createSuper(Card);

  function Card() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Card);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./card.html'));

    args.text = args.text || 'this is an intro card.';
    _this.args.timeout = _this.args.timeout || 1000;
    _this.args.animation = 'opening';
    _this.done = new Promise(function (accept) {
      return _this.accept = accept;
    });
    return _this;
  }

  _createClass(Card, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      this.onTimeout(50, function () {
        return _this2.args.animation = 'opened';
      });
      var waitFor = this.args.waitFor || Promise.resolve();
      return new Promise(function (accept) {
        waitFor.then(function () {
          var timeAcc = _this2.args.timeout;

          if (timeAcc > 0) {
            _this2.onTimeout(timeAcc - 500, function () {
              return _this2.args.animation = 'closing';
            });

            _this2.onTimeout(timeAcc, function () {
              _this2.args.animation = 'closed';
              var done = new Promise(function (acceptDone) {
                return _this2.onTimeout(timeAcc, acceptDone);
              });
              accept(_this2.accept([done]));
            });
          }
        });
      });
    }
  }]);

  return Card;
}(_View2.View);

exports.Card = Card;
});

;require.register("intro/DebianCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DebianCard = void 0;

var _Card2 = require("./Card");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DebianCard = /*#__PURE__*/function (_Card) {
  _inherits(DebianCard, _Card);

  var _super = _createSuper(DebianCard);

  function DebianCard(args, parent) {
    var _this;

    _classCallCheck(this, DebianCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./debian-card.html'));

    _this.args.cardName = 'debian-card';
    _this.args.text = "";
    return _this;
  }

  return _createClass(DebianCard);
}(_Card2.Card);

exports.DebianCard = DebianCard;
});

;require.register("intro/GamepadCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GamepadCard = void 0;

var _Card2 = require("./Card");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GamepadCard = /*#__PURE__*/function (_Card) {
  _inherits(GamepadCard, _Card);

  var _super = _createSuper(GamepadCard);

  function GamepadCard(args, parent) {
    var _this;

    _classCallCheck(this, GamepadCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./gamepad-card.html'));

    _this.args.cardName = 'gamepad-card';
    _this.args.text = "";
    return _this;
  }

  return _createClass(GamepadCard);
}(_Card2.Card);

exports.GamepadCard = GamepadCard;
});

;require.register("intro/LoadingCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingCard = void 0;

var _Card2 = require("./Card");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LoadingCard = /*#__PURE__*/function (_Card) {
  _inherits(LoadingCard, _Card);

  var _super = _createSuper(LoadingCard);

  function LoadingCard(args, parent) {
    var _this;

    _classCallCheck(this, LoadingCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'loading-card';
    return _this;
  }

  return _createClass(LoadingCard);
}(_Card2.Card);

exports.LoadingCard = LoadingCard;
});

;require.register("intro/LogoSplash.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogoSplash = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LogoSplash = /*#__PURE__*/function (_View) {
  _inherits(LogoSplash, _View);

  var _super = _createSuper(LogoSplash);

  function LogoSplash() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, LogoSplash);

    _this = _super.call(this, args, parent);
    _this.ringSample = new Audio('/Sonic/ring-collect.wav');
    _this.ringSample.volume = 0.50;
    _this.template = "\n\t\t<div class = \"player-waving\"></div>\n\t\t<div class = \"splash [[animation]]\" style = \"\n\t\t\tpointer-events: [[pointerEvents]]\n\t\t\">\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t\t<div class = \"center\">SEAN<span class = \"min\">MORRIS</span><div class = \"sm\">SM</div></div>\n\t\t</div>";
    return _this;
  }

  _createClass(LogoSplash, [{
    key: "onAttached",
    value: function onAttached() {
      var _this2 = this;

      if (this.alreadyAttached) {
        return;
      }

      this.alreadyAttached = true;
      this.args.left = 0;
      this.args.right = 0;
      this.args.fade = 1;
      this.args.frame = 0;
      this.args.fullFade = 1;
      this.args.pointerEvents = 'all';
      this.args.animation = 'hide';
      this.onTimeout(500, function () {
        return _this2.args.animation = 'slide';
      });
      this.onTimeout(1250, function () {
        return _this2.args.animation = 'show';
      });
      this.onTimeout(5000, function () {
        return _this2.args.animation = 'done';
      });
      this.onTimeout(1250, function () {
        return _this2.parent.args.audio && _this2.ringSample.play();
      });
    }
  }]);

  return LogoSplash;
}(_View2.View);

exports.LogoSplash = LogoSplash;
});

;require.register("intro/SeanCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SeanCard = void 0;

var _Card2 = require("./Card");

var _LogoSplash = require("./LogoSplash");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SeanCard = /*#__PURE__*/function (_Card) {
  _inherits(SeanCard, _Card);

  var _super = _createSuper(SeanCard);

  function SeanCard(args, parent) {
    var _this;

    _classCallCheck(this, SeanCard);

    _this = _super.call(this, args, parent);
    _this.args.cardName = 'sean-card';
    _this.args.text = new _LogoSplash.LogoSplash({}, parent);
    return _this;
  }

  return _createClass(SeanCard);
}(_Card2.Card);

exports.SeanCard = SeanCard;
});

;require.register("intro/Series.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Series = void 0;

var _View2 = require("curvature/base/View");

var _Card = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Series = /*#__PURE__*/function (_View) {
  _inherits(Series, _View);

  var _super = _createSuper(Series);

  function Series() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Series);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"intro-cards\" cv-each = \"cards:card:c\">[[card]]</div>");

    _this.cards = _this.args.cards;
    _this.args.cards = [];
    _this.args.card = null;
    _this.startTime = false;
    return _this;
  }

  _createClass(Series, [{
    key: "play",
    value: function play() {
      var _this2 = this;

      var card = this.cards.shift();
      var early = new Promise(function (accept) {
        return card.onRemove(accept);
      });
      var play = card.play();
      this.args.cards.push(card);
      this.startTime = Date.now();
      var racers = [early, card.done];

      if (play) {
        racers.push(play);
      }

      return Promise.race(racers).then(function (done) {
        if (done) {
          _this2.parent.onFrameOut(10, function () {
            Promise.all(done).then(function () {
              return card.remove();
            });
          });
        }

        if (_this2.cards.length) {
          return _this2.play();
        } else {
          return play;
        }
      });
    }
  }, {
    key: "input",
    value: function input(controller) {
      var card = this.args.cards[this.args.cards.length - 1];

      if (card && card.input) {
        card.input(controller);
      }
    }
  }]);

  return Series;
}(_View2.View);

exports.Series = Series;
});

;require.register("intro/ThankYouCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThankYouCard = void 0;

var _Card2 = require("./Card");

var _CharacterString = require("../ui/CharacterString");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ThankYouCard = /*#__PURE__*/function (_Card) {
  _inherits(ThankYouCard, _Card);

  var _super = _createSuper(ThankYouCard);

  function ThankYouCard(args, parent) {
    var _this;

    _classCallCheck(this, ThankYouCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./thank-you.html'));

    _this.args.cardName = 'thank-you-card';
    _this.args.text = new _CharacterString.CharacterString({
      value: 'Thank you for playing!'
    });
    _this.args.backdrop = '...';
    return _this;
  }

  return _createClass(ThankYouCard);
}(_Card2.Card);

exports.ThankYouCard = ThankYouCard;
});

;require.register("intro/TitleScreenCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleScreenCard = void 0;

var _Card2 = require("./Card");

var _CharacterString = require("../ui/CharacterString");

var _Bgm = require("../audio/Bgm");

var _MarbleGarden = require("../backdrop/MarbleGarden");

var _Keyboard = require("curvature/input/Keyboard");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TitleScreenCard = /*#__PURE__*/function (_Card) {
  _inherits(TitleScreenCard, _Card);

  var _super = _createSuper(TitleScreenCard);

  function TitleScreenCard(args, parent) {
    var _this;

    _classCallCheck(this, TitleScreenCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./titlescreen.html'));

    _this.args.cardName = 'title-screen-card';
    _this.args.text = '';
    _this.args.backdrop = '...';
    _this.startPressed = false;
    var backdrop = new _MarbleGarden.MarbleGarden();
    backdrop.args.frame = 0;
    backdrop.args.x = 0;
    backdrop.args.y = 140;
    backdrop.args.xMax = 10000;
    backdrop.args.yMax = 800;
    _this.started = 0; // this.bgm = new Audio('/Sonic/carnival-night-zone-act-2-beta.mp3');
    // this.bgm.volume = 0.5;
    // this.onRemove(() => this.bgm.pause());

    var keyBinding = _Keyboard.Keyboard.get().codes.bindTo('Enter', function (v) {
      if (!_this.started || Date.now() - _this.started < 2000) {
        return;
      }

      _this.onTimeout(200, function () {
        return _this.startPressed = true;
      });

      _this.args.animation = 'closing'; // this.audioDebind();
    });

    _this.onRemove(keyBinding);

    backdrop.args.xPan = 0;
    _this.start = new Promise(function (accept) {
      _this.onFrame(function () {
        if (!_this.started || Date.now() - _this.started < 0) {
          return;
        } // backdrop.args.x -= 24;


        backdrop.args.xPan -= 24;
        backdrop.args.frame++;

        if (_this.startPressed) {
          var done = new Promise(function (acceptDone) {
            return _this.onTimeout(200, acceptDone);
          });
          accept([done]);
        }
      });
    });
    _this.args.backdrop = backdrop;
    _this.args.pressStart = new _CharacterString.CharacterString({
      value: 'press start/enter'
    });
    return _this;
  }

  _createClass(TitleScreenCard, [{
    key: "input",
    value: function input(controller) {
      var _this2 = this;

      if (!this.started || Date.now() - this.started < 2000) {
        return;
      }

      if (controller.buttons[9] && controller.buttons[9].time === 1) {
        this.onTimeout(200, function () {
          return _this2.startPressed = true;
        });
        this.args.animation = 'closing'; // this.audioDebind();
      }
    }
  }, {
    key: "play",
    value: function play() {
      var _this3 = this;

      this.onTimeout(1000, function () {
        // this.audioDebind = this.parent.args.bindTo('audio', (v) => {
        // 	v ? this.bgm.play() : this.bgm.pause();
        // });
        _this3.onRemove(function () {
          return _Bgm.Bgm.stop('TITLE_THEME');
        });

        _Bgm.Bgm.play('TITLE_THEME');
      });
      this.onTimeout(2000, function () {
        return _this3.args.aurora = 'aurora';
      });
      this.started = Date.now();

      var play = _get(_getPrototypeOf(TitleScreenCard.prototype), "play", this).call(this); // play.then(()=>{ this.bgm.pause(); this.audioDebind(); this.remove(); });


      return Promise.race([this.start, play]);
    }
  }]);

  return TitleScreenCard;
}(_Card2.Card);

exports.TitleScreenCard = TitleScreenCard;
});

;require.register("intro/WebkitCard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebkitCard = void 0;

var _Card2 = require("./Card");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WebkitCard = /*#__PURE__*/function (_Card) {
  _inherits(WebkitCard, _Card);

  var _super = _createSuper(WebkitCard);

  function WebkitCard(args, parent) {
    var _this;

    _classCallCheck(this, WebkitCard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./webkit-card.html'));

    _this.args.cardName = 'webkit-card';
    _this.args.text = "";
    return _this;
  }

  _createClass(WebkitCard, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      this.onTimeout(1500, function () {
        return _this2.args.animation = 'spindash-charge';
      });
      this.onTimeout(3000, function () {
        return _this2.args.animation = 'spindash';
      });
      return _get(_getPrototypeOf(WebkitCard.prototype), "play", this).call(this, event);
    }
  }]);

  return WebkitCard;
}(_Card2.Card);

exports.WebkitCard = WebkitCard;
});

;require.register("intro/card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]]\">\n\t<span>[[text]]</span>\n</div>\n"
});

;require.register("intro/debian-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"debian-logo\"></div>\n\t\t<div class = \"caption\">Built on Debian</div>\n\t</div>\n</div>\n"
});

;require.register("intro/gamepad-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"gamepad-svg\"></div>\n\t\t<div class = \"caption\">Supports HTML5 Gamepad API.</div>\n\t</div>\n</div>\n\n"
});

;require.register("intro/thank-you.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"player-waving\"></div>\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"title-emblem\"></div>\n\t\t[[text]]\n\t</div>\n</div>\n"
});

;require.register("intro/titlescreen.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t[[backdrop]]\n\n\t<div class = \"main-elements-container\">\n\n\t\t<div class = \"title-emblem\"></div>\n\t\t<div class = \"press-start\">[[pressStart]]</div>\n\n\t</div>\n\n</div>\n"
});

;require.register("intro/webkit-card.html", function(exports, require, module) {
module.exports = "<div class = \"screen-card screen-card-[[cardName]] [[animation]] [[aurora]]\">\n\t<div class = \"main-elements-container\">\n\t\t<div class = \"chromium-logo\"></div>\n\t\t<div class = \"caption\">WebKit recommended for best experience.</div>\n\t</div>\n</div>\n"
});

;require.register("legacy/Actor.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Actor = void 0;

var _View2 = require("curvature/base/View");

var _PointDump = require("../debug/PointDump");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Actor = /*#__PURE__*/function (_View) {
  _inherits(Actor, _View);

  var _super = _createSuper(Actor);

  function Actor() {
    var _this;

    _classCallCheck(this, Actor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "speed", 15);

    _defineProperty(_assertThisInitialized(_this), "template", require('./actor.html'));

    _this.world = null;
    _this.x = 92;
    _this.y = 1024;
    _this.width = 64;
    _this.height = 64;
    _this.boxWidth = 64;
    _this.boxHeight = 64;
    _this.directions = 16;
    _this.state = 'standing';
    _this.gSpeed = 0; // this.gSpeedMax = 48;

    _this.gSpeedMax = 40;
    _this.xSpeed = 0;
    _this.ySpeed = 0;
    _this.angle = 0;
    _this.maxGravity = 48;
    _this.gravity = 0;
    _this.slopeFactor = 0.01;
    _this.falling = true;
    _this.sensors = {
      top: false,
      bottom: false,
      left: false,
      right: false
    };
    _this.mode = _this.args.mode = 0;
    _this.modes = {
      floor: 0,
      leftWall: 1,
      ceiling: 2,
      rightWall: 3
    };
    _this.animationClasses = {};
    _this.currentClasses = null;
    _this.pdL = new _PointDump.PointDump({
      color: 'red'
    });
    _this.pdR = new _PointDump.PointDump({
      color: 'green'
    });
    _this.args.debugs = [_this.pdL, _this.pdR];
    return _this;
  }

  _createClass(Actor, [{
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "update",
    value: function update() {
      if (!this.tags.actor) {
        return;
      }

      var g = this.gSpeed;
      this.args.animspeed = Math.floor((this.gSpeedMax - Math.abs(g)) / 12);

      if (this.args.animspeed < 1) {
        this.args.animspeed = 1;
      }

      var angle = Math.round(this.angle * 1000) / 1000;

      if (!this.falling) {
        if (angle > Math.PI / 4 && angle < 2 * Math.PI / 4) {
          if (this.mode === this.modes.floor) {
            this.args.mode = this.mode = this.modes.leftWall;
          } else if (this.mode === this.modes.leftWall) {
            this.args.mode = this.mode = this.modes.ceiling;
          } else if (this.mode === this.modes.ceiling) {
            this.args.mode = this.mode = this.modes.rightWall;
          } else if (this.mode === this.modes.rightWall) {
            this.args.mode = this.mode = this.modes.floor;
          }
        }

        if (angle < -Math.PI / 4 && angle > -2 * Math.PI / 4) {
          if (this.mode === this.modes.floor) {
            this.args.mode = this.mode = this.modes.rightWall;
          } else if (this.mode === this.modes.rightWall) {
            this.args.mode = this.mode = this.modes.ceiling;
          } else if (this.mode === this.modes.ceiling) {
            this.args.mode = this.mode = this.modes.leftWall;
          } else if (this.mode === this.modes.leftWall) {
            this.args.mode = this.mode = this.modes.floor;
          }
        }

        if (Math.abs(g) > this.gSpeedMax / 2) {
          this.args.state = 'running';
        } else if (Math.abs(g) > 0) {
          this.args.state = 'walking';
        } else {
          this.args.state = 'standing';
        }

        if (g > 0) {
          this.args.facing = 'facing-right';
        } else {
          this.args.facing = 'facing-left';
        }
      } else if (this.falling || this.jumped) {
        this.args.state = 'jumping';
      }

      if (this.falling) {
        if (this.mode == this.modes.floor) {
          this.ySpeed++;
        } else if (this.mode == this.modes.ceiling) {
          this.ySpeed--;
        } else if (this.mode == this.modes.leftWall) {
          this.xSpeed--;
        } else if (this.mode == this.modes.rightWall) {
          this.xSpeed++;
        }
      } else if (!this.jumped) {
        this.xSpeed = 0;
        this.ySpeed = 0;
      }

      this.x += this.xSpeed;
      this.ySpeed && (this.y += this.ySpeed > 0 ? 1 : -1);

      if (g) {
        var max = 8;
        var abG = Math.abs(g);
        var div = abG > max ? max : abG;

        for (var i = 0; i < div; i++) {
          this.iteratePosition(Math.floor(g / div));
        }
      } else {
        this.iteratePosition(0);
      }

      if (this.ySpeed > 32) {
        this.ySpeed = 32;
      }

      if (this.ySpeed < -32) {
        this.ySpeed = -32;
      }

      if (this.xSpeed > 32) {
        this.xSpeed = 32;
      }

      if (this.xSpeed < -32) {
        this.xSpeed = -32;
      }

      this.tags.actor.style({
        '--x': Math.floor(this.x),
        '--y': Math.floor(this.y)
      });

      if (this.mode === this.modes.floor) {
        this.tags.actor.style({
          '--angle': this.angle
        });
      } else if (this.mode === this.modes.leftWall) {
        this.tags.actor.style({
          '--angle': this.angle + 1 * (Math.PI / 2)
        });
      } else if (this.mode === this.modes.ceiling) {
        this.tags.actor.style({
          '--angle': this.angle + 2 * (Math.PI / 2)
        });
      } else if (this.mode === this.modes.rightWall) {
        this.tags.actor.style({
          '--angle': this.angle + 3 * (Math.PI / 2)
        });
      }

      if (this.jumped) {
        this.jumped = false;
      }
    }
  }, {
    key: "iteratePosition",
    value: function iteratePosition(speed) {
      var sin = Math.sin(this.angle);
      var cos = Math.cos(this.angle);
      var center = this.center;
      var top = this.top;
      var bottom = this.bottom;
      var left = this.left;
      var right = this.right;
      var arm, leg, sensorLeft, sensorRight, sensorSpread;

      if (this.mode == this.modes.floor || this.mode == this.modes.ceiling) {
        arm = right - center[0];
        leg = bottom - center[1];
      } else if (this.mode == this.modes.leftWall || this.mode == this.modes.rightWall) {
        arm = right - center[1];
        leg = bottom - center[0];
      }

      sensorLeft = this.left - arm * sin + arm * 0.5;
      sensorRight = this.right - arm * sin - arm * 0.5;
      sensorSpread = Math.abs(sensorRight - sensorLeft);
      var map = this.viewport.tileMap;
      var leftScan = 0;
      var rightScan = 0;
      var scanLX, scanLY, scanRX, scanRY;
      var leftSolid = false,
          rightSolid = false;
      var height = this.falling ? this.height : this.height;
      var scans = [[-height, 0], [-height, height]];

      regress: for (var i in scans) {
        leftScan = scans[i][0];

        while (leftScan < scans[i][1]) {
          if (this.mode == this.modes.floor) {
            scanLX = sensorLeft;
            scanLY = bottom + leftScan;
          } else if (this.mode == this.modes.ceiling) {
            scanLX = sensorLeft;
            scanLY = bottom - leftScan;
          } else if (this.mode == this.modes.leftWall) {
            scanLX = bottom - leftScan;
            scanLY = sensorLeft;
          } else if (this.mode == this.modes.rightWall) {
            scanLX = bottom + leftScan;
            scanLY = sensorLeft;
          }

          leftSolid = map.getSolid(scanLX, scanLY);

          if (leftSolid) {
            if (leftScan !== 0) {
              break regress;
            }

            break;
          }

          leftScan++;
        }
      }

      regress: for (var _i in scans) {
        rightScan = scans[_i][0];

        while (rightScan < scans[_i][1]) {
          if (this.mode == this.modes.floor) {
            scanRX = sensorRight;
            scanRY = bottom + rightScan;
          } else if (this.mode == this.modes.ceiling) {
            scanRX = sensorRight;
            scanRY = bottom - rightScan;
          } else if (this.mode == this.modes.leftWall) {
            scanRX = bottom - rightScan;
            scanRY = sensorRight;
          } else if (this.mode == this.modes.rightWall) {
            scanRX = bottom + rightScan;
            scanRY = sensorRight;
          }

          rightSolid = map.getSolid(scanRX, scanRY);

          if (rightSolid) {
            break;
          }

          rightScan++;
        }
      }

      this.pdL.args.x = scanLX;
      this.pdL.args.y = scanLY;
      this.pdR.args.x = scanRX;
      this.pdR.args.y = scanRY;
      this.angle = Math.atan((rightScan - leftScan) / sensorSpread);

      if (!this.falling) {
        var offset = (leftScan + rightScan) / 2;

        if (this.mode === this.modes.floor) {
          this.x += speed * cos;
          this.y += speed * sin;
        } else if (this.mode === this.modes.rightWall) {
          this.x += speed * sin;
          this.y -= speed * cos;
        } else if (this.mode === this.modes.ceiling) {
          this.x -= speed * cos;
          this.y -= speed * sin;
        } else if (this.mode === this.modes.leftWall) {
          this.x -= speed * sin;
          this.y += speed * cos;
        }

        if (leftSolid && rightSolid && leftScan <= 0 && rightScan <= 0) {
          if (this.mode == this.modes.floor) {
            this.y += Math.ceil(offset);
          } else if (this.mode == this.modes.ceiling) {
            this.y -= Math.ceil(offset);
          } else if (this.mode == this.modes.leftWall) {
            this.x -= offset;
          } else if (this.mode == this.modes.rightWall) {
            this.x += offset;
          }
        }
      }

      if (leftScan > 0 && rightScan > 0) {
        this.falling = true;
      } else {
        this.falling = false;
      }
    }
  }, {
    key: "isColliding",
    value: function isColliding(actor) {}
  }, {
    key: "animate",
    value: function animate() {
      if (!this.animationClasses[animation]) {
        return;
      }

      if (this.currentClasses == this.animationClasses[animation]) {
        return;
      }

      this.currentClasses.map(function (remClass) {
        this.tags.sprite.removeClass(remClass);
      });
      this.animationClasses[animation].map(function (newClass) {
        this.tags.sprite.addClass(newClass);
      });
      this.currentClasses = this.animationClasses[animation];
    }
  }, {
    key: "roundAngle",
    value: function roundAngle(angle, segments) {
      angle = Math.round(angle * (180 / Math.PI));
      var rAngle = "Math.round"(angle / (360 / segments)) * 360 / segments;
      return rAngle * (Math.PI / 180);
    }
  }, {
    key: "goLeft",
    value: function goLeft() {
      if (this.gSpeed > 0) {
        this.gSpeed = 0;
      }

      if (this.gSpeed > -this.gSpeedMax) {
        this.gSpeed--;
      }
    }
  }, {
    key: "goRight",
    value: function goRight() {
      if (this.gSpeed < 0) {
        this.gSpeed = 0;
      }

      if (this.gSpeed < this.gSpeedMax) {
        this.gSpeed++;
      }
    }
  }, {
    key: "slowDown",
    value: function slowDown() {
      if (Math.abs(this.gSpeed) > 32) {
        this.gSpeed = this.gSpeed * 0.95;
      } else {
        this.gSpeed = this.gSpeed * 0.75;
      }

      if (Math.abs(this.gSpeed) <= 0.1) {
        this.gSpeed = 0;
      }
    }
  }, {
    key: "jump",
    value: function jump() {
      if (this.falling) {
        return;
      }

      this.falling = true;
      this.jumped = true;
      this.mode = this.args.mode = this.modes.floor;
      var angle;

      if (this.mode === this.modes.floor) {
        angle = this.angle;
      } else if (this.mode === this.modes.leftWall) {
        angle = this.angle + 1 * (Math.PI / 2);
      } else if (this.mode === this.modes.ceiling) {
        angle = this.angle + 2 * (Math.PI / 2);
      } else if (this.mode === this.modes.rightWall) {
        angle = this.angle + 3 * (Math.PI / 2);
      }

      this.angle = 0;
      this.ySpeed = -Math.cos(angle) * 20;
      this.xSpeed = Math.sin(angle) * 20;

      if (this.mode === this.modes.leftWall || this.mode === this.modes.rightWall) {
        this.gSpeed = 0;
      }
    }
  }, {
    key: "center",
    get: function get() {
      return [this.x + this.boxWidth / 2, this.y + this.boxHeight / 2];
    }
  }, {
    key: "left",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[0] - this.width / 2;
      } else if (this.mode == this.modes.ceiling) {
        return this.center[0] + this.width / 2;
      } else if (this.mode == this.modes.leftWall) {
        return this.center[1] - this.width / 2;
      } else if (this.mode == this.modes.rightWall) {
        return this.center[1] + this.width / 2;
      }
    }
  }, {
    key: "right",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[0] + this.width / 2;
      } else if (this.mode == this.modes.ceiling) {
        return this.center[0] - this.width / 2;
      } else if (this.mode == this.modes.leftWall) {
        return this.center[1] + this.width / 2;
      } else if (this.mode == this.modes.rightWall) {
        return this.center[1] - this.width / 2;
      }
    }
  }, {
    key: "top",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[1] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.ceiling) {
        return this.center[1] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.leftWall) {
        return this.center[0] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.rightWall) {
        return this.center[0] - Math.floor(this.height / 2);
      }
    }
  }, {
    key: "bottom",
    get: function get() {
      if (this.mode == this.modes.floor) {
        return this.center[1] + Math.floor(this.height / 2);
      } else if (this.mode == this.modes.ceiling) {
        return this.center[1] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.leftWall) {
        return this.center[0] - Math.floor(this.height / 2);
      } else if (this.mode == this.modes.rightWall) {
        return this.center[0] + Math.floor(this.height / 2);
      }
    }
  }]);

  return Actor;
}(_View2.View);

exports.Actor = Actor;
});

;require.register("legacy/Walker.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Walker = void 0;

var _Actor2 = require("./Actor");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Walker = /*#__PURE__*/function (_Actor) {
  _inherits(Walker, _Actor);

  var _super = _createSuper(Walker);

  function Walker() {
    _classCallCheck(this, Walker);

    return _super.apply(this, arguments);
  }

  return _createClass(Walker);
}(_Actor2.Actor);

exports.Walker = Walker;
});

;require.register("legacy/actor.html", function(exports, require, module) {
module.exports = "<div class = \"actor knuckles [[state]] [[facing]]\" cv-ref = \"actor\" data-mode = \"[[mode]]\" style = \"--animspeed:[[animspeed]]\">\n\t<div class = \"sprite\" cv-ref = \"sprite\" ></div>\n</div>\n<div cv-each = \"debugs:debug\">[[debug]]</div>\n"
});

;require.register("mixin/CanPop.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanPop = void 0;

var _Tag = require("curvature/base/Tag");

var _Explosion = require("../actor/Explosion");

var _Projectile = require("../actor/Projectile");

var CanPop = {
  collideA: function collideA(other, type) {
    var _this = this;

    if (other.args.mercy) {
      return;
    }

    if (other.knocked) {
      other.pop && other.pop(other.knocked);
      this.pop(other.knocked);
      return;
    }

    if (other.punching) {
      this.args.falling = true;

      if (other.args.falling && other.args.ySpeed < 0) {
        // this.args.xSpeed = other.args.xSpeed + 10 * Math.sign(other.args.xSpeed);
        this.args.ySpeed = -10 + other.args.ySpeed;
      } else {
        this.args.xSpeed = other.args.gSpeed * Math.sign(other.args.gSpeed) * 2;
        this.args.ySpeed = -2;
      }

      this.args["float"] = 15;
      this.knocked = other;
      this.noClip = true;
      this["static"] = false;
      this.viewport.onFrameOut(30, function () {
        return _this.pop(other);
      });
      return false;
    }

    var shield = this.args.currentSheild;
    var immune = other.immune(this, shield ? shield.type : 'normal');

    if ((!shield || immune) && !this.args.gone && this.viewport && (immune || other.dashed || other.args.jumping || other.args.spinning || other instanceof _Projectile.Projectile)) {
      var otherShield = other.args.currentSheild;
      this.damage(other, otherShield ? otherShield.type : 'normal');
      return;
    }

    if (!this.knocked && other && other.controllable && !other.punching) {
      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'badnik',
          eventAction: 'damaged-player',
          eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id, "::").concat(other.args.id)
        });
      }

      other.damage(this, shield ? shield.type : 'normal');
    }

    return false;
  },
  damage: function damage(other, type) {
    var shield = this.args.currentSheild;
    var immune = other.immune(this, shield ? shield.type : 'normal');

    if ((!shield || immune) && !this.args.gone && this.viewport && (immune || other.dashed || other.args.jumping || other.args.spinning || other instanceof _Projectile.Projectile)) {
      this.pop(other);
    }
  },
  pop: function pop(other) {
    var _this2 = this;

    var viewport = this.viewport;

    if (!viewport || this.args.gone || other && other.args.owner === this) {
      return;
    }

    var explosionTag = document.createElement('div');
    explosionTag.classList.add('particle-explosion');
    var explosion = new _Tag.Tag(explosionTag);
    explosion.style({
      '--x': this.x,
      '--y': this.y - 16
    });
    viewport.particles.add(explosion);
    setTimeout(function () {
      return viewport.particles.remove(explosion);
    }, 512);
    setTimeout(function () {
      return _this2.screen && _this2.screen.remove();
    }, 1024);
    this.box && this.box.setAttribute('data-animation', 'broken');

    if (other && other.dashed) {
      other.args.gSpeed = 0;
      other.args.xSpeed = 0;
      other.args.ySpeed = -9;
      other.args.x = this.x;
      other.dashed = false;
    }

    if (other) {
      if (other.occupant) {
        other = other.occupant;
      }

      if (other.args.owner) {
        other = other.args.owner;
      }

      if (other.controllable && typeof this.effect === 'function') {
        if (this.args.gold) {
          other.args.score += 10000;
        } else {
          other.args.score += 100;
        }

        this.effect(other);
      }

      if (other.dashed) {
        other.args.xSpeed /= 4;
      }

      var ySpeed = other.args.ySpeed;

      if (other.args.falling && !other.punching) {
        this.onNextFrame(function () {
          if (ySpeed > 0) {
            other.args.ySpeed = Math.min(-ySpeed, -7);
          } else {
            other.args.ySpeed += 4;
          }

          other.args.falling = true;
        });
      }

      other.dashed = false;

      if (this.viewport.settings.rumble) {
        if (other && other.controller && other.controller.rumble) {
          other.controller.rumble({
            duration: 40,
            strongMagnitude: 0.0,
            weakMagnitude: 1.0
          });
          this.viewport.onTimeout(40, function () {
            other.controller.rumble({
              duration: 110,
              strongMagnitude: 0.75,
              weakMagnitude: 1.0
            });
          });
        }
      }
    }

    if (viewport.args.audio && this.sample) {
      this.sample.play();
    }

    if (this.args.target && this.viewport.actorsById[this.args.target]) {
      var target = this.viewport.actorsById[this.args.target];

      if (target) {
        this.viewport.auras.add(target);
        target.activate(other, this);
      }
    }

    if (typeof ga === 'function') {
      ga('send', 'event', {
        eventCategory: 'badnik',
        eventAction: 'defeated',
        eventLabel: "".concat(this.viewport.args.actName, "::").concat(this.args.id)
      });
    }

    this.viewport.actors.remove(this);
    this.args.gone = true;
  }
};
exports.CanPop = CanPop;
});

;require.register("mixin/Constrainable.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Constrainable = void 0;

var _Tag = require("curvature/base/Tag");

var Constrainable = {
  onAttached: function onAttached() {
    this.box = this.findTag('div');
    this.sprite = this.findTag('div.sprite');
  },
  wakeUp: function wakeUp() {
    var _this = this;

    if (!this.args._tiedTo) {
      this.args._tiedTo = this.viewport.actorsById[this.args.tiedTo];
    }

    var _tiedTo = this.args._tiedTo;

    if (_tiedTo && !_tiedTo.hanging.has(this.constructor)) {
      _tiedTo.hanging.set(this.constructor, new Set());

      var hangList = _tiedTo.hanging.get(this.constructor);

      hangList.add(this);
      this.chain = new _Tag.Tag('<div class = "chain">');
      this.sprite.appendChild(this.chain.node);
      this.onRemove(function () {
        return hangList["delete"](_this);
      });
    }
  },
  sleep: function sleep() {
    var _this2 = this;

    if (!this.viewport || this.args.stay) {
      return;
    }

    this.viewport.onFrameOut(5, function () {
      _this2.args.x = _this2.def.get('x');
      _this2.args.y = _this2.def.get('y');
      _this2.args.xSpeed = 0;
      _this2.args.ySpeed = 0;

      _this2.viewport.setColCell(_this2);
    });
  },
  findNextStep: function findNextStep() {
    return false;
  },
  setPos: function setPos() {
    if (!this.args._tiedTo) {
      this.args._tiedTo = this.viewport.actorsById[this.args.tiedTo];
    }

    var tiedTo = this.args._tiedTo;

    if (!tiedTo) {
      return false;
    }

    this.args.ropeLength = this.args.ropeLength || tiedTo.args.ropeLength;
    this.args.falling = true;
    var xDist = tiedTo.x - this.x;
    var yDist = tiedTo.y - this.y;
    var angle = Math.atan2(yDist, xDist);
    var dist = Math.sqrt(Math.pow(yDist, 2) + Math.pow(xDist, 2));
    var maxDist = this.args.ropeLength || 64;

    if (this.chain) {
      this.chain.style({
        '--distance': Math.min(dist, maxDist)
      });
    }

    this.args.groundAngle = -(angle + Math.PI / 2);
    var gravityAngle = angle;

    if (dist > maxDist) {
      var overshot = dist - maxDist;
      var xMove = Math.cos(angle) * maxDist;
      var yMove = Math.sin(angle) * maxDist;
      var xNext = tiedTo.x - xMove;
      var yNext = tiedTo.y - yMove;
      this.args.xSpeed += Math.cos(gravityAngle) * overshot;
      this.args.ySpeed += Math.sin(gravityAngle) * overshot;
      this.args.x = xNext;
      this.args.y = yNext;

      if (this.viewport) {
        this.viewport.setColCell(this);
      }

      if (this.x === tiedTo.x && !tiedTo.args.xSpeed) {
        this.args.ySpeed = 0;
      }
    }

    if (tiedTo.args.ySpeed > 0 && !tiedTo.args.xSpeed && !this.args.xSpeed) {
      this.args.x = tiedTo.x;
      this.args.y = tiedTo.y + this.args.ropeLength;
    }
  }
};
exports.Constrainable = Constrainable;
});

require.register("mixin/Pushable.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pushable = void 0;
var Pushable = {
  collideA: function collideA(other, type) {
    if (type === -1 || other.isEffect) {
      return false;
    }

    var otherMag = Math.ceil(Math.abs(other.args.gSpeed || other.args.xSpeed));
    var otherDir = Math.sign(other.args.gSpeed || other.args.xSpeed);
    var otherSpeed = otherMag * otherDir;

    if (Math.abs(other.args.ySpeed) > Math.abs(other.args.xSpeed)) {
      return true;
    }

    if (!this.args.falling && type === 1 && otherSpeed <= 0) {
      return false;
    }

    if (!this.args.falling && type === 3 && otherSpeed >= 0) {
      return false;
    }

    var blockTop = this.y - this.args.height;

    if ((type === 1 || type === 3) && (other.y >= this.y || other.y > blockTop)) {
      if (!otherSpeed) {
        return true;
      }

      this.args.gSpeed = otherSpeed;
      this.args.pushed = Math.sign(otherSpeed) || this.args.pushed;
      var tileMap = this.viewport.tileMap;
      var moveBy = type === 1 && 1 || type === 3 && -1;
      var scan = this.scanBottomEdge(moveBy);
      var blockers = tileMap.getSolid(this.x + Math.ceil(this.args.width / 2) * moveBy, this.y);

      if (blockers) {
        return true;
      }

      var radius = this.args.width / 2;

      if (moveBy > 0 && scan === 0) {
        this.args.falling = true;
      } else if (moveBy < 0 && scan === 0) {
        this.args.falling = true;
      } else if (!this.args.falling || scan > 0) {
        var nextCenter = this.findNextStep(moveBy);
        var nextWall = this.findNextStep(moveBy + radius * Math.sign(moveBy));

        if ((!nextCenter[1] || nextCenter[2]) && !nextWall[3]) {
          // this.args.x += nextPosition[0] || moveBy;
          var otherRadius = other.args.width;
          var myRadius = this.args.width / 2;
          this.args.x = other.args.x + moveBy * (myRadius + otherRadius);
          return scan === 0;
        }

        return true;
      }
    }

    return true;
  }
};
exports.Pushable = Pushable;
});

;require.register("network/ChatBox.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatBox = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ChatBox = /*#__PURE__*/function (_View) {
  _inherits(ChatBox, _View);

  var _super = _createSuper(ChatBox);

  function ChatBox(args, parent) {
    var _this;

    _classCallCheck(this, ChatBox);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./chat-box.html'));

    _this.args.outputLines = [];

    var onOpen = function onOpen(event) {
      return _this.args.outputLines = ['You joined the chat.'];
    };

    var onMessage = function onMessage(event) {
      var packet = JSON.parse(event.detail);

      if (packet.message) {
        _this.args.outputLines.push("> ".concat(packet.message));

        _this.onNextFrame(function () {
          var chatOutput = _this.tags.chatOutput;
          chatOutput && chatOutput.scrollTo(0, chatOutput.scrollHeight);
        });
      }
    };

    _this.listen(args.pipe, 'open', onOpen);

    _this.listen(args.pipe, 'message', onMessage);

    return _this;
  }

  _createClass(ChatBox, [{
    key: "send",
    value: function send(event) {
      var _this2 = this;

      if (event && event.key !== 'Enter') {
        return;
      }

      var message = this.args.chatInput;

      if (!message) {
        return;
      }

      this.args.outputLines.push("< ".concat(message));
      this.args.chatInput = '';
      this.onNextFrame(function () {
        var tag = _this2.tags.chatOutput;
        tag.scrollTo(0, tag.scrollHeight);
        tag.focus();
      });
      this.args.pipe.send(JSON.stringify({
        message: message
      }));
    }
  }]);

  return ChatBox;
}(_View2.View);

exports.ChatBox = ChatBox;
});

;require.register("network/Rtc.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rtc = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Rtc = /*#__PURE__*/_createClass(function Rtc() {
  _classCallCheck(this, Rtc);
});

exports.Rtc = Rtc;
});

;require.register("network/RtcClient.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcClient = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RtcClient = /*#__PURE__*/function (_Mixin$with) {
  _inherits(RtcClient, _Mixin$with);

  var _super = _createSuper(RtcClient);

  function RtcClient(rtcConfig) {
    var _this;

    _classCallCheck(this, RtcClient);

    _this = _super.call(this);
    _this.peerClient = new RTCPeerConnection(rtcConfig);
    _this.peerClientChannel = _this.peerClient.createDataChannel("chat");

    _this.peerClientChannel.addEventListener('open', function (event) {
      var openEvent = new CustomEvent('open', {
        detail: event.data
      });
      openEvent.originalEvent = event;

      _this.dispatchEvent(openEvent);

      _this.connected = true;
    });

    _this.peerClientChannel.addEventListener('close', function (event) {
      var closeEvent = new CustomEvent('close', {
        detail: event.data
      });
      closeEvent.originalEvent = event;

      _this.dispatchEvent(closeEvent);

      _this.connected = false;
    });

    _this.peerClientChannel.addEventListener('message', function (event) {
      var messageEvent = new CustomEvent('message', {
        detail: event.data
      });
      messageEvent.originalEvent = event;

      _this.dispatchEvent(messageEvent);
    });

    return _this;
  }

  _createClass(RtcClient, [{
    key: "send",
    value: function send(input) {
      this.peerClientChannel && this.peerClientChannel.send(input);
    }
  }, {
    key: "close",
    value: function close() {
      this.peerClientChannel && this.peerClientChannel.close();
    }
  }, {
    key: "offer",
    value: function offer() {
      var _this2 = this;

      this.peerClient.createOffer().then(function (offer) {
        _this2.peerClient.setLocalDescription(offer);
      });
      var candidates = new Set();
      return new Promise(function (accept) {
        _this2.peerClient.addEventListener('icecandidate', function (event) {
          if (!event.candidate) {
            return;
          } else {
            console.log(event.candidate);
            candidates.add(event.candidate);
          }

          accept(_this2.peerClient.localDescription);
        });
      });
    }
  }, {
    key: "accept",
    value: function accept(answer) {
      var session = new RTCSessionDescription(answer);
      this.peerClient.setRemoteDescription(session);
    }
  }]);

  return RtcClient;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.RtcClient = RtcClient;
});

;require.register("network/RtcClientTask.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcClientTask = void 0;

var _Task2 = require("subspace-console/Task");

var _Tag = require("curvature/base/Tag");

var _RtcClient = require("./RtcClient");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('accept');

var RtcClientTask = /*#__PURE__*/function (_Task) {
  _inherits(RtcClientTask, _Task);

  var _super = _createSuper(RtcClientTask);

  function RtcClientTask() {
    var _this;

    _classCallCheck(this, RtcClientTask);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'RTC Client Task');

    _defineProperty(_assertThisInitialized(_this), "connected", false);

    return _this;
  }

  _createClass(RtcClientTask, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      this.client = new _RtcClient.RtcClient({
        iceServers: [{
          urls: 'stun:stun1.l.google.com:19302'
        }, {
          urls: 'stun:stun2.l.google.com:19302'
        }]
      });
      this["finally"](function () {
        console.log('Terminating connection...');

        _this2.client.close();
      });
      this.client.addEventListener('open', function () {
        _this2.print('Remote peer client accepted!');
      });
      this.client.addEventListener('close', function () {
        _this2.print('Peer reset connection.');
      });
      this.client.addEventListener('message', function (event) {
        _this2.print("> ".concat(event.detail));
      });
      this.client.offerToken.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://request/".concat(btoa(tokenString));

        _this2.print("Client request code: ".concat(encodedToken));

        var offerTag = new _Tag.Tag('<textarea style = "display:none">');
        offerTag.innerText = encodedToken;
        document.body.append(offerTag.node);
        offerTag.select();
        document.execCommand("copy");
        offerTag.node.remove();
      });
      return new Promise(function (accept) {
        _this2[Accept] = accept;
      });
    }
  }, {
    key: "main",
    value: function main(input) {
      if (!input) {
        return;
      }

      if (!this.client.connected) {
        this.accept(input);
        return;
      }

      this.print("< ".concat(input));
      this.client.send(input);
    }
  }, {
    key: "accept",
    value: function accept(answerString) {
      if (!answerString) {
        this.print("Please supply server's accept string.");
        return;
      }

      var isEncoded = /^s3ktp:\/\/accept\/(.+)/.exec(answerString);
      console.log(isEncoded);

      if (isEncoded) {
        answerString = atob(isEncoded[1]);
      }

      var answer = JSON.parse(answerString);
      this.client.accept(answer);
    }
  }]);

  return RtcClientTask;
}(_Task2.Task);

exports.RtcClientTask = RtcClientTask;

_defineProperty(RtcClientTask, "helpText", 'RTC Client.');

_defineProperty(RtcClientTask, "useText", '');
});

;require.register("network/RtcServer.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcServer = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RtcServer = /*#__PURE__*/function (_Mixin$with) {
  _inherits(RtcServer, _Mixin$with);

  var _super = _createSuper(RtcServer);

  function RtcServer(rtcConfig) {
    var _this;

    _classCallCheck(this, RtcServer);

    _this = _super.call(this);
    _this.peerServer = new RTCPeerConnection(rtcConfig);

    _this.peerServer.addEventListener('datachannel', function (event) {
      _this.peerServerChannel = event.channel;

      _this.peerServerChannel.addEventListener('open', function (event) {
        var openEvent = new CustomEvent('open', {
          detail: event.data
        });
        openEvent.originalEvent = event;

        _this.dispatchEvent(openEvent);

        _this.connected = true;
      });

      _this.peerServerChannel.addEventListener('close', function (event) {
        var closeEvent = new CustomEvent('close', {
          detail: event.data
        });
        closeEvent.originalEvent = event;

        _this.dispatchEvent(closeEvent);

        _this.connected = false;
      });

      _this.peerServerChannel.addEventListener('message', function (event) {
        var messageEvent = new CustomEvent('message', {
          detail: event.data
        });
        messageEvent.originalEvent = event;

        _this.dispatchEvent(messageEvent);
      });
    });

    return _this;
  }

  _createClass(RtcServer, [{
    key: "send",
    value: function send(input) {
      this.peerServerChannel && this.peerServerChannel.send(input);
    }
  }, {
    key: "close",
    value: function close() {
      this.peerServerChannel && this.peerServerChannel.close();
    }
  }, {
    key: "answer",
    value: function answer(offer) {
      var _this2 = this;

      return new Promise(function (accept) {
        _this2.peerServer.setRemoteDescription(offer);

        _this2.peerServer.createAnswer(function (answer) {
          return _this2.peerServer.setLocalDescription(answer);
        }, function (error) {
          return console.error(error);
        });

        var candidates = new Set();

        _this2.peerServer.addEventListener('icecandidate', function (event) {
          if (!event.candidate) {
            return;
          } else {
            console.log(event.candidate);
            candidates.add(event.candidate);
          }

          accept(_this2.peerServer.localDescription);
        });
      });
    }
  }]);

  return RtcServer;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.RtcServer = RtcServer;
});

;require.register("network/RtcServerTask.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RtcServerTask = void 0;

var _Task2 = require("subspace-console/Task");

var _Tag = require("curvature/base/Tag");

var _RtcServer = require("./RtcServer");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('accept');

var RtcServerTask = /*#__PURE__*/function (_Task) {
  _inherits(RtcServerTask, _Task);

  var _super = _createSuper(RtcServerTask);

  function RtcServerTask() {
    var _this;

    _classCallCheck(this, RtcServerTask);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "title", 'RTC Server Task');

    _defineProperty(_assertThisInitialized(_this), "connected", false);

    return _this;
  }

  _createClass(RtcServerTask, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      this.server = new _RtcServer.RtcServer({
        iceServers: [{
          urls: 'stun:stun1.l.google.com:19302'
        }, {
          urls: 'stun:stun2.l.google.com:19302'
        }]
      });
      this["finally"](function () {
        _this2.print('Terminating connection...');

        _this2.server.close();
      });
      this.server.addEventListener('open', function () {
        _this2.print('Remote peer client accepted!');
      });
      this.server.addEventListener('close', function () {
        _this2.print('Peer reset connection.');
      });
      this.server.addEventListener('message', function (event) {
        _this2.print("> ".concat(event.detail));
      });
      this.server.answerToken.then(function (token) {
        var tokenString = JSON.stringify(token);
        var encodedToken = "s3ktp://accept/".concat(btoa(tokenString));

        _this2.print("Server accept code: ".concat(encodedToken));

        var answerTag = new _Tag.Tag('<textarea style = "display:none">');
        answerTag.innerText = encodedToken;
        document.body.append(answerTag.node);
        answerTag.select();
        document.execCommand("copy");
        answerTag.node.remove();
      });
      this.printErr("Please supply client's request code.");
      return new Promise(function (accept) {
        _this2[Accept] = accept;
      });
    }
  }, {
    key: "main",
    value: function main(input) {
      if (!input) {
        return;
      }

      if (!this.server.connected) {
        this.answer(input);
        return;
      }

      this.print("< ".concat(input));
      this.server.send(input);
    }
  }, {
    key: "answer",
    value: function answer(offerString) {
      var isEncoded = /^s3ktp:\/\/request\/(.+)/.exec(offerString);
      console.log(isEncoded);

      if (isEncoded) {
        offerString = atob(isEncoded[1]);
      }

      var offer = JSON.parse(offerString);
      this.server.answer(offer);
    }
  }, {
    key: "done",
    value: function done() {}
  }]);

  return RtcServerTask;
}(_Task2.Task);

exports.RtcServerTask = RtcServerTask;

_defineProperty(RtcServerTask, "helpText", 'RTC Server.');

_defineProperty(RtcServerTask, "useText", '');
});

;require.register("network/chat-box.html", function(exports, require, module) {
module.exports = "<div class = \"chatbox\">\n\n\t<div class = \"chat-output\" cv-each = \"outputLines:line\" cv-ref = \"chatOutput\">\n\t\t<p>[[line]]</p>\n\t</div>\n\n\t<div class = \"chat-input\">\n\t\t<input cv-bind = \"chatInput\" cv-ref = \"chatInput\" cv-on = \"keydown:send(event)\">\n\t\t<button cv-on = \"click:send\">send</button>\n\t</div>\n\n</div>\n"
});

;require.register("particle/Particle3d.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Particle3d = void 0;

var _Tag2 = require("curvature/base/Tag");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Particle3d = /*#__PURE__*/function (_Tag) {
  _inherits(Particle3d, _Tag);

  var _super = _createSuper(Particle3d);

  function Particle3d() {
    var _this;

    _classCallCheck(this, Particle3d);

    _this = _super.call(this, '<div class = "particle-3d">');
    var front = new _Tag2.Tag('<div class = "front-3d">');
    var back = new _Tag2.Tag('<div class = "back-3d">');
    var left = new _Tag2.Tag('<div class = "right-3d">');
    var right = new _Tag2.Tag('<div class = "left-3d">');
    var top = new _Tag2.Tag('<div class = "top-3d">');
    var bottom = new _Tag2.Tag('<div class = "bottom-3d">');

    _this.append(back.node);

    _this.append(left.node);

    _this.append(right.node);

    _this.append(front.node);

    _this.append(top.node);

    _this.append(bottom.node);

    return _this;
  }

  return _createClass(Particle3d);
}(_Tag2.Tag);

exports.Particle3d = Particle3d;
});

;require.register("powerups/BubbleSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BubbleSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BubbleSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(BubbleSheild, _Sheild);

  var _super = _createSuper(BubbleSheild);

  function BubbleSheild() {
    var _this;

    _classCallCheck(this, BubbleSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild bubble-sheild [[bouncing]]\"><div class = \"bubble-sheild-shine\"></div></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'water');

    return _this;
  }

  _createClass(BubbleSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "command_0",
    value: function command_0(host, button) {
      if (host.canFly || host.dashed) {
        return;
      }

      if (host.args.standingOn && host.args.standingOn.isVehicle) {
        return;
      }

      this.args.force = 10;

      if (host.args.jumping) {
        host.impulse(14, Math.PI / 2);
        this.args.bouncing = 'bouncing';
        host.args.bouncing = true;
      }
    }
  }, {
    key: "hold_0",
    value: function hold_0() {
      if (this.args.bouncing && this.args.force < 25) {
        this.args.force++;
      }
    }
  }, {
    key: "update",
    value: function update(host) {
      var _this3 = this;

      if (host.args.ySpeed < -5) {
        this.onNextFrame(function () {
          host.args.bouncing = false;
          _this3.args.bouncing = false;
          _this3.args.force = 0;
        });
      }

      if (!this.sample) {
        this.initSample = new Audio('/Sonic/S3K_3F.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_44.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (host.canFly) {
        return;
      }

      if (!host.args.falling) {
        if (this.args.bouncing && this.args.force) {
          // host.args.gSpeed = 0;
          // host.args.xSpeed = 0;
          this.onNextFrame(function () {
            host.args.standingOn = null;
            host.args.bouncing = false;
            host.args.falling = true;
            host.args.jumping = true;
            host.impulse(_this3.args.force, -Math.PI / 2, true);
          });
          this.args.bouncing = '';

          if (host.viewport.args.audio) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          if (host.viewport.settings.rumble) {
            host.controller.rumble({
              duration: 200,
              strongMagnitude: 1.0,
              weakMagnitude: 1.0
            });
          }
        }
      }
    }
  }]);

  return BubbleSheild;
}(_Sheild2.Sheild);

exports.BubbleSheild = BubbleSheild;
});

;require.register("powerups/ElectricSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElectricSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ElectricSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(ElectricSheild, _Sheild);

  var _super = _createSuper(ElectricSheild);

  function ElectricSheild() {
    var _this;

    _classCallCheck(this, ElectricSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild electric-sheild [[boosted]]\"></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'electric');

    _defineProperty(_assertThisInitialized(_this), "jumps", 3);

    _defineProperty(_assertThisInitialized(_this), "attract", new Set());

    _defineProperty(_assertThisInitialized(_this), "magnetism", 0);

    _defineProperty(_assertThisInitialized(_this), "magnetTimeout", false);

    return _this;
  }

  _createClass(ElectricSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        console.log(event);
        event.preventDefault();
        var other = event.detail.other;

        if (_this2.immune(host, other, event.detail.type)) {
          event.detail.immune = true;
          return;
        }

        other && other.damage && other.damage(host, 'electric');

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "immune",
    value: function immune(host, other) {
      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';

      if (type === 'electric') {
        return true;
      }

      return false;
    }
  }, {
    key: "command_0",
    value: function command_0(host, button) {
      var _this3 = this;

      if (host.canFly) {
        return;
      }

      if (this.jumps > 0 && host.args.jumping) {
        host.args.ySpeed = 0;
        host.impulse(10, -Math.PI / 2);
        this.jumps--;
        this.args.boosted = 'boosted';
        this.onTimeout(250, function () {
          return _this3.args.boosted = '';
        });

        if (host.viewport.args.audio) {
          this.sample.currentTime = 0;
          this.sample.play();
        }

        if (host.xAxis && Math.sign(host.xAxis) !== Math.sign(host.args.xSpeed)) {
          host.args.xSpeed = 1 * host.xAxis;
        }
      }
    }
  }, {
    key: "release_6",
    value: function release_6(host, button) {// this.magnetism = 0;
      // for(const ring of this.attract)
      // {
      // 	this.onTimeout(3000, () => {
      // 		ring.args.x = ring.def.get('x');
      // 		ring.args.y = ring.def.get('y');
      // 		host.viewport.auras.delete(ring);
      // 		host.viewport.setColCell(ring);
      // 		ring.restore = true;
      // 		ring.args.float = -1;
      // 		ring.noClip = false;
      // 		ring.args.xSpeed  = 0;
      // 		ring.args.ySpeed  = 0;
      // 	});
      // 	this.attract.delete(ring);
      // }
    }
  }, {
    key: "hold_6",
    value: function hold_6(host, button) {
      var _this4 = this;

      host.args.xOff = 0;
      host.args.yOff = 32;
      this.args.boosted = 'boosted';
      this.magnetism = Math.max(0, button.pressure - 0.25);
      host.pinch(260 * this.magnetism, 0);
      var Ring = host.viewport.objectPalette.ring;

      var findRing = function findRing(actor) {
        if (_this4.attract.has(actor)) {
          return false;
        }

        if (!(actor instanceof Ring)) {
          return false;
        }

        if (actor.args.gone) {
          return false;
        }

        if (actor.restore) {
          return false;
        }

        return true;
      };

      var ring = host.findNearestActor(findRing, this.magnetism * 386);

      if (ring) {
        host.viewport.auras.add(ring);
        this.attract.add(ring);
      }
    }
  }, {
    key: "update",
    value: function update(host) {
      var _this5 = this;

      if (!host.args.falling && !this.magnetTimeout) {
        this.magnetTimeout = this.onTimeout(100, function () {
          _this5.magnetTimeout = false;
          _this5.args.boosted = '';
        });
      }

      if (!this.sample && host.controllable) {
        this.initSample = new Audio('/Sonic/S3K_41.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_45.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (host.canFly) {
        return;
      }

      if (!host.args.falling) {
        this.jumps = 3;
      }

      var ringsMoved = 0;

      var _iterator = _createForOfIteratorHelper(this.attract),
          _step;

      try {
        var _loop = function _loop() {
          var ring = _step.value;

          if (ring.args.gone) {
            _this5.attract["delete"](ring);

            ring.attract = null;

            _this5.onTimeout(500, function () {
              if (!ring.def) {
                return;
              }

              ring.args["static"] = false;
              ring.args.xSpeed = 0;
              ring.args.ySpeed = 0;
              ring.args.x = ring.def.get('x');
              ring.args.y = ring.def.get('y');
              host.viewport.setColCell(ring);

              _this5.onTimeout(3000, function () {
                host.viewport.auras["delete"](ring);
                ring.args["float"] = -1;
                ring.noClip = false;
                ring.restore = true;
              });
            });

            return "continue";
          }

          ring.args["static"] = false;
          ring.attract = host;
          ring.noClip = true;
          var xDiff = host.x - ring.x;
          var yDiff = host.y - host.args.height / 2 - ring.y;
          var angle = Math.atan2(yDiff, xDiff);
          var distance = Math.sqrt(Math.pow(yDiff, 2) + Math.pow(xDiff, 2));
          var maxDistance = 512;
          var xDir = Math.sign(xDiff);
          var yDir = Math.sign(yDiff);
          var xSame = Math.sign(ring.args.xSpeed || 0) === xDir;
          var ySame = Math.sign(ring.args.ySpeed || 0) === yDir;

          if (distance > maxDistance) {
            if (ringsMoved > 45) {
              return "continue";
            }

            ring.args.x = host.x - Math.cos(angle) * maxDistance;
            ring.args.y = host.y - Math.sin(angle) * maxDistance;
          }

          host.viewport.setColCell(ring);
          ringsMoved++;
          var force = (_this5.magnetism || 0.75) * 2;
          var xMag = Math.max(force, xSame ? 0.45 : 0.55);
          var yMag = Math.max(force, ySame ? 0.45 : 0.45); // const xMag = Math.max(this.magnetism, xDiff === xDir ? 0.35 : 0.35);
          // const yMag = Math.max(this.magnetism, yDiff === yDir ? 0.125 : 0.135);

          ring.args.groundAngle = 0;
          var fudge = _this5.magnetism ? Math.random() : 1;

          if (!xSame || Math.abs(ring.args.xSpeed) < 8 || distance > maxDistance) {
            ring.args.xSpeed += Math.max(0.1, xMag * fudge) * xDir;
          }

          if (!ySame || Math.abs(ring.args.ySpeed) < 8 || distance > maxDistance) {
            ring.args.ySpeed += Math.max(0.1, yMag * fudge) * yDir;
          }

          ring.args.falling = true;
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return ElectricSheild;
}(_Sheild2.Sheild);

exports.ElectricSheild = ElectricSheild;
});

;require.register("powerups/FireSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FireSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FireSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(FireSheild, _Sheild);

  var _super = _createSuper(FireSheild);

  function FireSheild() {
    var _this;

    _classCallCheck(this, FireSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild fire-sheild [[boosted]]\"></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'fire');

    return _this;
  }

  _createClass(FireSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "immune",
    value: function immune(host, other) {
      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';

      if (type === 'fire') {
        return true;
      }

      return false;
    }
  }, {
    key: "update",
    value: function update(host) {
      if (!this.initSample) {
        this.initSample = new Audio('/Sonic/S3K_3E.wav');
        this.initSample.volume = 0.15 + Math.random() * -0.05;
        this.sample = new Audio('/Sonic/S3K_43.wav');
        this.sample.volume = 0.15 + Math.random() * -0.05;

        if (host.viewport.args.audio) {
          this.initSample.play();
        }
      }

      if (!host.args.falling) {
        this.power = 15;
      }
    }
  }, {
    key: "hold_4",
    value: function hold_4(host, button) {
      var _this3 = this;

      if (this.power <= 0) {
        return;
      }

      this.power--;

      if (host.canFly) {
        return;
      }

      if (host.args.falling) {
        host.impulse(1, Math.PI);

        if (!this.args.boosted) {
          this.args.boosted = 'boosted';

          if (this.sample) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          host.viewport.onFrameOut(15, function () {
            return _this3.args.boosted = '';
          });
        }
      } else {
        this.args.boosted = '';
      }
    }
  }, {
    key: "hold_5",
    value: function hold_5(host, button) {
      var _this4 = this;

      if (this.power <= 0) {
        return;
      }

      this.power--;

      if (host.canFly) {
        return;
      }

      if (host.args.falling) {
        host.impulse(1, 0);

        if (!this.args.boosted) {
          this.args.boosted = 'boosted';

          if (this.sample) {
            this.sample.currentTime = 0;
            this.sample.play();
          }

          host.viewport.onFrameOut(15, function () {
            return _this4.args.boosted = '';
          });
        }
      } else {
        this.args.boosted = '';
      }
    }
  }]);

  return FireSheild;
}(_Sheild2.Sheild);

exports.FireSheild = FireSheild;
});

;require.register("powerups/NormalSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NormalSheild = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NormalSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(NormalSheild, _Sheild);

  var _super = _createSuper(NormalSheild);

  function NormalSheild() {
    var _this;

    _classCallCheck(this, NormalSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild normal-sheild\"></div>");

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "type", 'normal');

    return _this;
  }

  _createClass(NormalSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var invertDamage = function invertDamage(event) {
        if (host.args.currentSheild !== _Bindable.Bindable.make(_this2)) {
          return;
        }

        event.preventDefault();
        var other = event.detail.other;
        other && other.damage && other.damage(host);

        _this2.onNextFrame(function () {
          host.args.currentSheild = null;
          host.inventory.remove(_this2);
        });

        host.removeEventListener('damage', invertDamage);
        host.startle();
      };

      host.addEventListener('damage', invertDamage);
    }
  }, {
    key: "immune",
    value: function immune(host, other) {
      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';
      return false;
    }
  }]);

  return NormalSheild;
}(_Sheild2.Sheild);

exports.NormalSheild = NormalSheild;
});

;require.register("powerups/Powerup.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Powerup = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Powerup = /*#__PURE__*/function (_View) {
  _inherits(Powerup, _View);

  var _super = _createSuper(Powerup);

  function Powerup() {
    _classCallCheck(this, Powerup);

    return _super.apply(this, arguments);
  }

  _createClass(Powerup, [{
    key: "equip",
    value: function equip() {}
  }, {
    key: "unequip",
    value: function unequip() {}
  }, {
    key: "acquire",
    value: function acquire() {}
  }, {
    key: "drop",
    value: function drop() {}
  }]);

  return Powerup;
}(_View2.View);

exports.Powerup = Powerup;
});

;require.register("powerups/Sheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sheild = void 0;

var _Powerup2 = require("./Powerup");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Sheild = /*#__PURE__*/function (_Powerup) {
  _inherits(Sheild, _Powerup);

  var _super = _createSuper(Sheild);

  function Sheild() {
    _classCallCheck(this, Sheild);

    return _super.apply(this, arguments);
  }

  return _createClass(Sheild);
}(_Powerup2.Powerup);

exports.Sheild = Sheild;
});

;require.register("powerups/StarSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarSheild = void 0;

var _Sheild2 = require("./Sheild");

var _Bgm = require("../audio/Bgm");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StarSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(StarSheild, _Sheild);

  var _super = _createSuper(StarSheild);

  // bgm = new Audio('/audio/leslie-wai/feel-the-sunshine.mp3');
  function StarSheild() {
    var _this;

    _classCallCheck(this, StarSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args)); // this.onRemove(() => this.bgm.pause());

    _defineProperty(_assertThisInitialized(_this), "type", 'star');

    _defineProperty(_assertThisInitialized(_this), "protect", true);

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild star-sheild\">\n\t\t<div class = \"star-sheild-stars\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "frame", 0);

    return _this;
  }

  _createClass(StarSheild, [{
    key: "acquire",
    value: function acquire(host) {
      var _this2 = this;

      var viewport = host.viewport;

      if (!viewport) {
        return;
      } // this.bgm.play();
      // if(viewport.args.audio)
      // {
      // }


      var previous = host.args.currentSheild;

      var invertDamage = function invertDamage(event) {
        event.preventDefault();
        var other = event.detail.other;
        other && other.pop && other.pop(host);
      };

      host.addEventListener('damage', invertDamage);
      viewport.onFrameOut(1560, function () {
        _Bgm.Bgm.stop('STAR_SHIELD');

        host.onRemove(function () {
          return _Bgm.Bgm.stop('STAR_SHIELD');
        });
        host.inventory.remove(_this2);
        host.removeEventListener('damage', invertDamage);
        host.args.currentSheild = previous;
        _this2.debindPaused && _this2.debindPaused();
        delete _this2.debindPaused;
      });

      _Bgm.Bgm.play('STAR_SHIELD');

      if (!viewport.args.audio) {
        _Bgm.Bgm.pause();
      } // this.debindPaused = viewport.args.bindTo('paused', v => {
      // 	if(v !== false)
      // 	{
      // 		this.bgm.pause();
      // 	}
      // 	else
      // 	{
      // 		this.bgm.play();
      // 	}
      // });

    }
  }, {
    key: "immune",
    value: function immune() {
      return true;
    }
  }, {
    key: "drop",
    value: function drop(host) {
      console.log(this, host);
      this.debindPaused && this.debindPaused();
      delete this.debindPaused;
    }
  }, {
    key: "update",
    value: function update(host) {
      var viewport = host.viewport;

      if (!viewport) {
        return;
      }

      var particle = new _Tag.Tag('<div class = "particle-stars">');
      var point = host.rotatePoint(host.args.gSpeed, host.args.height / 2);
      var dashed = host.dashed || host.args.animation === 'springdash';
      particle.style({
        '--x': point[0] + host.x + -3 + host.args.xSpeed,
        '--y': point[1] + host.y + (dashed ? -18 : 0) + host.args.ySpeed,
        '--frame': this.frame++,
        'z-index': -1,
        opacity: Math.random() * 2
      });
      viewport.particles.add(particle);
      viewport.onFrameOut(15, function () {
        return viewport.particles.remove(particle);
      });
    }
  }]);

  return StarSheild;
}(_Sheild2.Sheild);

exports.StarSheild = StarSheild;
});

;require.register("powerups/SuperSheild.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuperSheild = void 0;

var _Sheild2 = require("./Sheild");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SuperSheild = /*#__PURE__*/function (_Sheild) {
  _inherits(SuperSheild, _Sheild);

  var _super = _createSuper(SuperSheild);

  function SuperSheild() {
    var _this;

    _classCallCheck(this, SuperSheild);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"sheild super-sheild\">\n\t\t<div class = \"super-sheild-shine\"></div>\n\t\t<div class = \"super-sheild-spark\"></div>\n\t\t<div class = \"super-sheild-flare\"></div>\n\t</div>");

    _defineProperty(_assertThisInitialized(_this), "type", 'super');

    return _this;
  }

  _createClass(SuperSheild, [{
    key: "immune",
    value: function immune(host, other) {
      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';

      if (host.isSuper || host.isHyper) {
        return true;
      }

      return false;
    }
  }]);

  return SuperSheild;
}(_Sheild2.Sheild);

exports.SuperSheild = SuperSheild;
});

;require.register("region/BgShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BgShadeRegion = void 0;

var _ShadeRegion2 = require("./ShadeRegion");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BgShadeRegion = /*#__PURE__*/function (_ShadeRegion) {
  _inherits(BgShadeRegion, _ShadeRegion);

  var _super = _createSuper(BgShadeRegion);

  function BgShadeRegion() {
    var _this;

    _classCallCheck(this, BgShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['studio', 'western', 'heat', 'hydro', 'lava', 'frost', 'eight-bit', 'corruption', 'black-hole', 'normal']);

    _this.args.type = 'region region-shade bg-region-shade';
    return _this;
  }

  return _createClass(BgShadeRegion);
}(_ShadeRegion2.ShadeRegion);

exports.BgShadeRegion = BgShadeRegion;
});

;require.register("region/BossRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BossRegion = void 0;

var _Region2 = require("./Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BossRegion = /*#__PURE__*/function (_Region) {
  _inherits(BossRegion, _Region);

  var _super = _createSuper(BossRegion);

  // static fromDef(objDef)
  // {
  // 	const width = objDef.width;
  // 	const height = objDef.height;
  // 	const x = objDef.x;
  // 	const y = objDef.y;
  // 	const obj = super.fromDef(objDef);
  // 	obj.args.width  = width;
  // 	obj.args.height = height;
  // 	// obj.args.x = x - width  / 2;
  // 	obj.args.y = y + height;
  // 	return obj;
  // }
  function BossRegion() {
    var _this;

    _classCallCheck(this, BossRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region boss';
    _this.args.hidden = true;
    return _this;
  }

  _createClass(BossRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      // console.log(other);
      if (other.args.falling) {
        return;
      }

      if (!this.args._boss) {
        var boss = this.viewport.actorsById[this.args.boss];

        if (!boss.args.hitPoints) {
          other.args.bossMode = false;
        } else {
          other.args.bossMode = true;
        }
      }
    }
  }]);

  return BossRegion;
}(_Region2.Region);

exports.BossRegion = BossRegion;
});

;require.register("region/CorkscrewRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CorkscrewRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CorkscrewRegion = /*#__PURE__*/function (_Region) {
  _inherits(CorkscrewRegion, _Region);

  var _super = _createSuper(CorkscrewRegion);

  function CorkscrewRegion() {
    var _this;

    _classCallCheck(this, CorkscrewRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region corkscrew';
    _this.args.hidden = true;
    return _this;
  }

  _createClass(CorkscrewRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      if (!other.canRoll || other.args.falling && other.args.ySpeed < 0) {
        return;
      }

      if (Math.abs(other.args.xSpeed) < 5) {
        return;
      }

      other.args.groundAngle = 0;
      var xDist = (other.x - this.x) / this.args.width;
      var shiftFactor = 1 + Math.cos(-Math.PI + xDist * Math.PI * 2);
      var yShift = shiftFactor * this.args.height * 0.5;
      other.args.y = this.y - yShift + -1;
      other.args.ySpeed = 0;
      other.args.xSpeed = Math.max(Math.abs(other.args.xSpeed) || other.args.width) * Math.sign(other.args.xSpeed);
      other.args.gSpeed = other.args.xSpeed;
      other.args.mode = 0;
      other.args.ignore = -2;
      other.args.cameraMode = 'corkscrew';
      other.args.xSpeed -= Math.sign(other.args.xSpeed) * (-1 + Math.abs(shiftFactor)) * 0.10;

      if (xDist > 1 || xDist < 0) {
        other.args.falling = false;
        other.args.y = this.y - 1;
      } else {
        other.args.animation = 'rolling';
      }
    }
  }, {
    key: "collideA",
    value: function collideA(other) {
      return false;
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var width = objDef.width;
      var height = objDef.height;
      var x = objDef.x;
      var y = objDef.y;

      var obj = _get(_getPrototypeOf(CorkscrewRegion), "fromDef", this).call(this, objDef);

      obj.args.width = width;
      obj.args.height = height; // obj.args.x = x - width  / 2;

      obj.args.y = y + height;
      return obj;
    }
  }]);

  return CorkscrewRegion;
}(_Region2.Region);

exports.CorkscrewRegion = CorkscrewRegion;
});

;require.register("region/DarkRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DarkRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DarkRegion = /*#__PURE__*/function (_Region) {
  _inherits(DarkRegion, _Region);

  var _super = _createSuper(DarkRegion);

  function DarkRegion() {
    var _this;

    _classCallCheck(this, DarkRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-shade region-dark';
    _this.paths = new Map();
    _this.actors = new Set();
    return _this;
  }

  _createClass(DarkRegion, [{
    key: "onAttached",
    value: function onAttached(event) {
      this.basePath = "M 0 0\n    \t\t\t\t\tL 0 ".concat(32 * 17, "\n    \t\t\t\t\tL ").concat(32 * 17, " ").concat(32 * 17, "\n    \t\t\t\t\tL ").concat(32 * 17, " 0\n    \t\t\t\t\tZ");
      this.mask = _View.View.from("<svg style = \"width: 100vw;height: 100vh\">\n\t\t\t<defs>\n\t\t\t\t<clipPath id = \"mask-".concat(this.args.id, "\" clipPathUnits=\"userSpaceOnUse\">\n\t\t\t\t\t<path />\n\t\t\t\t</clipPath>\n\t\t\t</defs>\n\t\t<svg>"));
      this.mask.render(this.tags.sprite);
      this.path = this.mask.findTag('clipPath > path');
      this.path.attr({
        d: "".concat(this.basePath, " ").concat(this.lightPath)
      });
      this.tags.sprite.style({
        '--maskImage': "url(#mask-".concat(this.args.id, ")")
      });
    }
  }, {
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(DarkRegion.prototype), "update", this).call(this);

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
      }
    }
  }, {
    key: "updateEnd",
    value: function updateEnd() {
      _get(_getPrototypeOf(DarkRegion.prototype), "updateEnd", this).call(this);

      var _iterator = _createForOfIteratorHelper(this.actors),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var actor = _step.value;
          var lightSize = 128;
          var x = actor.x + actor.viewport.args.x;
          var y = actor.y + actor.viewport.args.y - actor.args.height * 0.5;
          this.paths.set(actor, "M ".concat(x, " ").concat(y + lightSize * 0.5, "\n\t\t\t\t A ").concat(lightSize * 0.5, " ").concat(lightSize * 0.5, ", 0, 1 1, ").concat(x, " ").concat(y + -lightSize * 0.5, "\n\t\t\t\t A ").concat(lightSize * 0.5, " ").concat(lightSize * 0.5, ", 0, 0 1, ").concat(x, " ").concat(y + lightSize * 0.5, "\n        \t\t Z"));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.path.attr({
        d: this.basePath + _toConsumableArray(this.paths.values()).join(' ')
      });
      this.actors.clear();
      this.paths.clear();
    }
  }, {
    key: "updateActor",
    value: function updateActor(actor) {
      if (!actor.controllable) {
        return;
      }

      this.actors.add(actor);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return DarkRegion;
}(_Region2.Region);

exports.DarkRegion = DarkRegion;
});

;require.register("region/ExitRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExitRegion = void 0;

var _Region2 = require("./Region");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ExitRegion = /*#__PURE__*/function (_Region) {
  _inherits(ExitRegion, _Region);

  var _super = _createSuper(ExitRegion);

  function ExitRegion() {
    var _this;

    _classCallCheck(this, ExitRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region exit';
    _this.args.hidden = true;
    return _this;
  }

  _createClass(ExitRegion, [{
    key: "updateActor",
    value: function updateActor(other) {
      var _this2 = this;

      if (other.occupant) {
        other = other.occupant;
      }

      if (!other.controllable) {
        return;
      }

      var viewport = this.viewport;
      viewport.args.fade = true;
      viewport.clearCheckpoints(other.args.id);
      viewport.onFrameOut(30, function () {
        viewport.actors.remove(_this2);

        if (_this2.args.nextStage) {
          viewport.quit(2);
          viewport.loadMap({
            mapUrl: '/map/' + _this2.args.nextStage
          });
        } else {
          viewport.quit();
        }
      });
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ExitRegion;
}(_Region2.Region);

exports.ExitRegion = ExitRegion;
});

;require.register("region/ExplodingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExplodingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ExplodingRegion = /*#__PURE__*/function (_Region) {
  _inherits(ExplodingRegion, _Region);

  var _super = _createSuper(ExplodingRegion);

  function ExplodingRegion() {
    var _this;

    _classCallCheck(this, ExplodingRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-exploding';
    _this.hitSound = new Audio('/Sonic/S3K_6E.wav');
    return _this;
  }

  _createClass(ExplodingRegion, [{
    key: "updateActor",
    value: function updateActor(actor) {
      if (!this.args.active) {
        return;
      }

      if (actor.controllable) {
        return;
      }

      if (actor["break"]) {
        actor["break"]();

        if (!this.viewport.actorIsOnScreen(actor)) {
          this.viewport.actors.remove(actor);
        }
      }

      if (actor.pop) {
        actor.pop();

        if (!this.viewport.actorIsOnScreen(actor)) {
          this.viewport.actors.remove(actor);
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      _get(_getPrototypeOf(ExplodingRegion.prototype), "update", this).call(this);

      var viewport = this.viewport;

      if (!viewport) {
        return;
      }

      if (!this.args.active) {
        if (this.args.target && viewport.actorsById[this.args.target]) {
          var target = viewport.actorsById[this.args.target];
          viewport.auras["delete"](target);
        }

        viewport.auras["delete"](this);
        return;
      }

      if (!viewport) {
        return;
      } // if(viewport.args.audio)
      // {
      // 	this.hitSound.currentTime = 0;
      // 	this.hitSound.volume = 0.35 + (Math.random() * -0.15);
      // 	this.hitSound.play();
      // }


      var _loop = function _loop(i) {
        var explosionTag = document.createElement('div');
        explosionTag.classList.add('particle-explosion');
        var explosion = new _Tag.Tag(explosionTag);
        var xOff = _this2.args.width * Math.random();
        var yOff = _this2.args.height * Math.random();
        var left = Math.max(_this2.x, -_this2.viewport.args.x);
        var bottom = Math.max(_this2.y, -_this2.viewport.args.y);
        var right = Math.min(_this2.x + _this2.args.width, -_this2.viewport.args.x + _this2.viewport.args.width);
        var top = Math.min(_this2.y - _this2.args.height, -_this2.viewport.args.y - _this2.viewport.args.height / 2);
        var xRange = right - left;
        var yRange = bottom - top;
        explosion.style({
          '--x': left + xRange * Math.random(),
          '--y': top + yRange * Math.random()
        });
        viewport.particles.add(explosion);
        setTimeout(function () {
          return viewport.particles.remove(explosion);
        }, 512);
      };

      for (var i = 0; i < 1; i++) {
        _loop(i);
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      var _this3 = this;

      this.args.active = true;
      this.viewport.onFrameOut(250, function () {
        return _this3.args.active = false;
      });

      if (this.args.target && this.viewport.actorsById[this.args.target]) {
        this.viewport.onFrameOut(60, function () {
          var target = _this3.viewport.actorsById[_this3.args.target];

          _this3.viewport.auras.add(target);

          target.activate(other, _this3);
        });
      }
    }
  }]);

  return ExplodingRegion;
}(_Region2.Region);

exports.ExplodingRegion = ExplodingRegion;
});

;require.register("region/FgShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FgShadeRegion = void 0;

var _ShadeRegion2 = require("./ShadeRegion");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FgShadeRegion = /*#__PURE__*/function (_ShadeRegion) {
  _inherits(FgShadeRegion, _ShadeRegion);

  var _super = _createSuper(FgShadeRegion);

  function FgShadeRegion() {
    var _this;

    _classCallCheck(this, FgShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['studio', 'western', 'heat', 'hydro', 'lava', 'frost', 'eight-bit', 'corruption', 'black-hole', 'normal']);

    _this.args.type = 'fg-region-shade region region-shade';
    return _this;
  }

  return _createClass(FgShadeRegion);
}(_ShadeRegion2.ShadeRegion);

exports.FgShadeRegion = FgShadeRegion;
});

;require.register("region/ForceRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ForceRegion = /*#__PURE__*/function (_Region) {
  _inherits(ForceRegion, _Region);

  var _super = _createSuper(ForceRegion);

  function ForceRegion(args, parent) {
    var _this$args$active;

    var _this;

    _classCallCheck(this, ForceRegion);

    _this = _super.call(this, args, parent);
    _this.args.type = 'region region-force';
    _this.args.xForce = _this.args.xForce || 0;
    _this.args.yForce = _this.args.yForce || -5;
    _this.args.active = (_this$args$active = _this.args.active) !== null && _this$args$active !== void 0 ? _this$args$active : 1;
    return _this;
  }

  _createClass(ForceRegion, [{
    key: "update",
    value: function update() {
      if (!this.originalHeight) {
        this.originalHeight = this.args.height;
      }

      _get(_getPrototypeOf(ForceRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "onAttach",
    value: function onAttach() {
      var _this2 = this;

      if (!this.viewport || !this.args["switch"]) {
        return;
      }

      this["switch"] = this.viewport.actorsById[this.args["switch"]];

      if (!this["switch"]) {
        return;
      }

      this["switch"].args.bindTo('active', function (v) {
        _this2.args.active = v || _this2.args.active;
      });
    }
  }, {
    key: "activate",
    value: function activate() {
      this.args.active = 1;
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      var _this3 = this;

      if (other instanceof _Region2.Region || other.args["static"]) {
        return;
      }

      if (this.args.active <= 0) {
        return;
      }

      if (other.args.falling) {
        this.onNextFrame(function () {
          other.args.xSpeed += Math.sign(_this3.args.xForce);
          other.args.ySpeed += Math.sign(_this3.args.yForce);
          other.args.animation = 'springdash';
          other.args.groundAngle = 0;
        });
        return;
      }

      switch (other.args.mode) {
        case 0:
          other.args.gSpeed += Math.sign(this.args.xForce);
          break;

        case 1:
          other.args.gSpeed += Math.sign(this.args.yForce);
          break;

        case 2:
          other.args.gSpeed -= Math.sign(this.args.xForce);
          break;

        case 3:
          other.args.gSpeed -= Math.sign(this.args.yForce);
          break;
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ForceRegion;
}(_Region2.Region);

exports.ForceRegion = ForceRegion;
});

;require.register("region/GrindingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrindingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GrindingRegion = /*#__PURE__*/function (_Region) {
  _inherits(GrindingRegion, _Region);

  var _super = _createSuper(GrindingRegion);

  function GrindingRegion() {
    var _this;

    _classCallCheck(this, GrindingRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "grind", true);

    _this.args.type = 'region grinding';
    _this.args.hidden = true;
    return _this;
  }

  _createClass(GrindingRegion, [{
    key: "update",
    value: function update() {
      if (!this.originalHeight) {
        this.originalHeight = this.args.height;
      }

      _get(_getPrototypeOf(GrindingRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      if (other.args.falling) {
        return;
      }

      other.args.grinding = true;
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(GrindingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      _get(_getPrototypeOf(GrindingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return GrindingRegion;
}(_Region2.Region);

exports.GrindingRegion = GrindingRegion;
});

;require.register("region/LavaRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LavaRegion = void 0;

var _Region2 = require("./Region");

var _Ring = require("../actor/Ring");

var _MarbleBlock = require("../actor/MarbleBlock");

var _Tag = require("curvature/base/Tag");

var _Bindable = require("curvature/base/Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LavaRegion = /*#__PURE__*/function (_Region) {
  _inherits(LavaRegion, _Region);

  var _super = _createSuper(LavaRegion);

  function LavaRegion() {
    var _this;

    _classCallCheck(this, LavaRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isWater", true);

    _this.args.type = 'region region-lava'; // this.entryParticle = '<div class = "particle-splash">';

    _this.args.gravity = 0.5;
    _this.args.drag = 0.85;
    _this.args.density = 15;
    _this.skimSpeed = 0;
    return _this;
  }

  _createClass(LavaRegion, [{
    key: "update",
    value: function update() {
      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
      }

      if (!this.originalHeight) {
        this.originalHeight = this.args.height;
      }

      _get(_getPrototypeOf(LavaRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      if (other instanceof _Ring.Ring) {
        other.args.ySpeed = -Math.abs(other.args.ySpeed || -6);
        return;
      }

      if (other.noClip) {
        return;
      }

      if (!other.controllable && !(other instanceof _Ring.Ring)) {
        return;
      }

      if (other.y < this.y + -this.args.height + 8) {
        return;
      }

      if (other.args.ySpeed < 0 || other.args.ignore) {
        return;
      }

      if (other.args.mercy || other.immune(this, 'fire')) {
        return;
      } // other.args.ySpeed = Math.min(-8, -(other.args.ySpeed || other.ySpeedLast) * 1.1);
      // other.args.xSpeed = (other.args.xSpeed || other.xSpeedLast || other.args.gSpeed) * -1.1;
      // other.args.falling = true;
      // other.args.y = this.y + -this.args.height;
      // other.damage(this, 'fire');

    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      if (other.noClip) {
        return;
      }

      if (other instanceof _MarbleBlock.MarbleBlock) {
        return false;
      }

      if (other.args.standingOn && other.args.standingOn !== _Bindable.Bindable.make(this)) {
        return false;
      }

      _get(_getPrototypeOf(LavaRegion.prototype), "collideA", this).call(this, other, type);

      if (!other.controllable) {
        return false;
      }

      if (other.args.mercy || other.immune(this, 'fire')) {
        return true;
      } // other.args.ySpeed = Math.min(-8, -(other.args.ySpeed || other.ySpeedLast) * 1.1);
      // other.args.xSpeed = (other.args.xSpeed || other.xSpeedLast || other.args.gSpeed) * -1.1;
      // other.args.falling = true;


      other.args.y = this.y + -this.args.height + -32;
      other.damage(this, 'fire');
      return false;
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      if (other.noClip) {
        return;
      }

      _get(_getPrototypeOf(LavaRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return true;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return LavaRegion;
}(_Region2.Region);

exports.LavaRegion = LavaRegion;
});

;require.register("region/RainRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RainRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RainRegion = /*#__PURE__*/function (_Region) {
  _inherits(RainRegion, _Region);

  var _super = _createSuper(RainRegion);

  function RainRegion() {
    var _this;

    _classCallCheck(this, RainRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-shade region-rain';
    return _this;
  }

  _createClass(RainRegion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(RainRegion.prototype), "update", this).call(this);

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return RainRegion;
}(_Region2.Region);

exports.RainRegion = RainRegion;
});

;require.register("region/Region.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Region = void 0;

var _Tag = require("curvature/base/Tag");

var _PointActor2 = require("../actor/PointActor");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Region = /*#__PURE__*/function (_PointActor) {
  _inherits(Region, _PointActor);

  var _super = _createSuper(Region);

  function Region() {
    var _this;

    _classCallCheck(this, Region);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region';
    _this.args.width = _this.args.width || 32;
    _this.args.height = _this.args.height || 32;
    _this.args.density = 1;
    _this.args.gravity = 1;
    _this.args.drag = 1;
    _this.skimSpeed = Infinity;
    _this.args["float"] = -1;
    _this.skimmers = new WeakSet();
    return _this;
  }

  _createClass(Region, [{
    key: "onRendered",
    value: function onRendered() {
      this.mainElem = new _Tag.Tag(this.tags.sprite.parentNode);

      _get(_getPrototypeOf(Region.prototype), "onRendered", this).call(this);
    }
  }, {
    key: "skim",
    value: function skim(actor) {
      this.skimmers.add(actor);
    }
  }, {
    key: "updateStart",
    value: function updateStart() {
      this.skimmers = new WeakSet();

      _get(_getPrototypeOf(Region.prototype), "updateStart", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.viewport) {
        return;
      }

      if (!this.focus && this.args.focus) {
        this.focus = this.viewport.actorsById[this.args.focus];
      }

      _get(_getPrototypeOf(Region.prototype), "update", this).call(this);

      var topBoundry = -this.viewport.args.y - (this.y - this.args.height);
      var leftBoundry = -this.viewport.args.x - this.x;
      this.mainElem && this.mainElem.style({
        '--viewportWidth': this.viewport.args.width + 'px',
        '--viewportHeight': this.viewport.args.height + 'px',
        '--leftBoundry': leftBoundry + 'px',
        '--topBoundry': topBoundry + 'px',
        '--vpX': this.viewport.args.x + 'px',
        '--vpY': this.viewport.args.y + 'px'
      });
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {}
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }], [{
    key: "fromDef",
    value: function fromDef(objDef) {
      var obj = _get(_getPrototypeOf(Region), "fromDef", this).call(this, objDef);

      obj.args.width = objDef.width;
      obj.args.height = objDef.height;
      obj.args.x = obj.originalX = -0 + Math.floor(objDef.x);
      obj.args.y = obj.originalY = -0 + Math.floor(objDef.y);
      this["static"] = true;
      return obj;
    }
  }]);

  return Region;
}(_PointActor2.PointActor);

exports.Region = Region;
});

;require.register("region/RollingRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RollingRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RollingRegion = /*#__PURE__*/function (_Region) {
  _inherits(RollingRegion, _Region);

  var _super = _createSuper(RollingRegion);

  function RollingRegion(args, parent) {
    var _this$args$maxSpeed, _this$args$minSpeed, _this$args$canJump;

    var _this;

    _classCallCheck(this, RollingRegion);

    _this = _super.call(this, args, parent);
    _this.args.sticky = true;
    _this.args.type = 'region rolling';
    _this.args.maxSpeed = (_this$args$maxSpeed = _this.args.maxSpeed) !== null && _this$args$maxSpeed !== void 0 ? _this$args$maxSpeed : -1;
    _this.args.minSpeed = (_this$args$minSpeed = _this.args.minSpeed) !== null && _this$args$minSpeed !== void 0 ? _this$args$minSpeed : -1;
    _this.args.canJump = (_this$args$canJump = _this.args.canJump) !== null && _this$args$canJump !== void 0 ? _this$args$canJump : false;
    _this.args.hidden = true;
    return _this;
  }

  _createClass(RollingRegion, [{
    key: "update",
    value: function update() {
      // if(!this.filterWrapper && this.tags.sprite)
      // {
      // 	this.filterWrapper = new Tag('<div class = "region-filter-wrapper">');
      // 	this.colorWrapper  = new Tag('<div class = "region-color-wrapper">');
      // 	this.filter = new Tag('<div class = "region-filter">');
      // 	this.color  = new Tag('<div class = "region-color">');
      // 	this.filterWrapper.appendChild(this.filter.node);
      // 	this.colorWrapper.appendChild(this.color.node);
      // 	this.tags.sprite.appendChild(this.filterWrapper.node);
      // 	this.tags.sprite.appendChild(this.colorWrapper.node);
      // }
      if (!this.originalHeight) {
        this.originalHeight = this.args.height;
      }

      _get(_getPrototypeOf(RollingRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      if (!other.controllable) {
        return;
      }

      if (other.args.falling) {
        return;
      }

      other.willStick = false;
      var gSpeedLast = other.args.modeTime > 5 ? other.gSpeedLast : 0;

      if (Math.abs(other.args.gSpeed) < this.args.minSpeed) {
        other.args.gSpeed = this.args.minSpeed * Math.sign(other.args.gSpeed || gSpeedLast || other.args.direction);
      }

      if (this.args.maxSpeed > 0 && Math.abs(other.args.gSpeed) > this.args.maxSpeed) {
        other.args.gSpeed = this.args.maxSpeed * Math.sign(other.args.gSpeed || gSpeedLast || other.args.direction);

        if (other.args.mode === 1) {
          other.args.gSpeed = other.ySpeedLast;
        }

        if (other.args.mode === 3) {
          other.args.gSpeed = -other.ySpeedLast;
        }
      }

      if (!other.args.gSpeed) {
        other.args.gSpeed = 2 * Math.sign(gSpeedLast || other.args.direction);
      }

      if (!other.args.rolling) {
        other.args.rolling = true;
      }

      if (other.willJump) {
        if (!this.args.canJump) {
          other.willJump = false;
        } // else
        // {
        // 	other.doJump(12);
        // 	other.args.jumping = false;
        // }

      }
    }
  }, {
    key: "collideA",
    value: function collideA(other, type) {
      _get(_getPrototypeOf(RollingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "collideB",
    value: function collideB(other, type) {
      _get(_getPrototypeOf(RollingRegion.prototype), "collideA", this).call(this, other, type);
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return RollingRegion;
}(_Region2.Region);

exports.RollingRegion = RollingRegion;
});

;require.register("region/ShadeRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShadeRegion = void 0;

var _CharacterString = require("../ui/CharacterString");

var _Cylinder = require("../effects/Cylinder");

var _Pinch = require("../effects/Pinch");

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ShadeRegion = /*#__PURE__*/function (_Region) {
  _inherits(ShadeRegion, _Region);

  var _super = _createSuper(ShadeRegion);

  function ShadeRegion() {
    var _this;

    _classCallCheck(this, ShadeRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "currentFilter", -1);

    _defineProperty(_assertThisInitialized(_this), "filters", ['western', 'heat', 'hydro', 'lava', 'black-hole', 'normal']);

    _this.args.type = 'region region-shade';
    return _this;
  }

  _createClass(ShadeRegion, [{
    key: "onRendered",
    value: function onRendered() {
      _get(_getPrototypeOf(ShadeRegion.prototype), "onRendered", this).call(this);

      this.actorFilterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
      this.actorColorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
      this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
      this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
      this.actorFilter = new _Tag.Tag('<div class = "region-filter">');
      this.actorColor = new _Tag.Tag('<div class = "region-color">');
      this.filter = new _Tag.Tag('<div class = "region-filter">');
      this.color = new _Tag.Tag('<div class = "region-color">');
      this.filterWrapper.appendChild(this.filter.node);
      this.colorWrapper.appendChild(this.color.node); // this.actorFilterWrapper.appendChild(this.actorFilter.node);
      // this.actorColorWrapper.appendChild(this.actorColor.node);
      // this.actorLayer = new Tag('<div class = "actor-layer">');
      // this.actorLayer.appendChild(this.actorFilterWrapper.node);
      // this.actorLayer.appendChild(this.actorColorWrapper.node);
      // this.mainElem.appendChild(this.actorLayer.node);

      this.tags.sprite.appendChild(this.filterWrapper.node);
      this.tags.sprite.appendChild(this.colorWrapper.node);
      this.text = new _CharacterString.CharacterString({
        value: ''
      });
      this.text.render(this.tags.sprite);
      this.cylinder = new _Cylinder.Cylinder({
        id: 'shade-cylinder',
        width: this.args.width,
        height: this.args.height
      });
      this.cylinder.render(this.tags.sprite);
      this.pinch = new _Pinch.Pinch({
        id: 'shade-pinch',
        width: this.args.width,
        height: this.args.height,
        scale: 150
      });
      this.pinch.render(this.tags.sprite); // this.args.bindTo('scale', v => {
      // 	this.pinch.args.scale = v;
      // 	this.cylinder.args.scale = v;
      // });

      if (this.args.filter) {
        this.filters = [this.args.filter];
      }

      this.rotateFilter();
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      _get(_getPrototypeOf(ShadeRegion.prototype), "update", this).call(this);

      this.args.scale = 175 - Math.abs(Math.sin(Date.now() / 200) * 25);

      if (!this["switch"] && this.args["switch"]) {
        this["switch"] = this.viewport.actorsById[this.args["switch"]];

        if (this["switch"]) {
          this["switch"].args.bindTo('active', function (v) {
            if (v) {
              _this2.rotateFilter();
            }
          });
        }
      }
    }
  }, {
    key: "rotateFilter",
    value: function rotateFilter() {
      if (this.mainElem && this.args.filter) {
        this.mainElem.classList.remove(this.args.filter);
      }

      if (this.mainElem) {
        this.args.filter = this.filters[this.currentFilter++];

        if (this.currentFilter >= this.filters.length) {
          this.currentFilter = 0;
        }

        this.args.filter && this.mainElem.classList.add(this.args.filter);

        if (this.args.filter) {
          this.text.remove();
          this.text = new _CharacterString.CharacterString({
            value: "".concat(this.currentFilter, ": ").concat(this.args.filter)
          });
          this.text.render(this.tags.sprite);
        }
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return ShadeRegion;
}(_Region2.Region);

exports.ShadeRegion = ShadeRegion;
});

;require.register("region/SwitchRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SwitchRegion = void 0;

var _Region2 = require("./Region");

var _Rocket = require("../actor/Rocket");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SwitchRegion = /*#__PURE__*/function (_Region) {
  _inherits(SwitchRegion, _Region);

  var _super = _createSuper(SwitchRegion);

  function SwitchRegion() {
    var _this;

    _classCallCheck(this, SwitchRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-switch';
    _this.activated = false;
    return _this;
  }

  _createClass(SwitchRegion, [{
    key: "onAttach",
    value: function onAttach(event) {
      event && event.preventDefault();
      return false;
    }
  }, {
    key: "activate",
    value: function activate(actor) {
      if (this.args.latch && this.activated) {
        return;
      }

      var target = this.viewport.actorsById[this.args.target];

      if (!target) {
        return;
      }

      if (this.args.latch) {
        this.activated = true;
      }

      target.activate(actor, this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(actor) {
      var _this2 = this;

      if (this.args.rocket) {
        if (actor instanceof _Rocket.Rocket) {
          var _target = this.viewport.actorsById[this.args.target];

          if (!_target || !_target.activate) {
            return;
          }

          this.viewport.onFrameOut(this.args.delay || 1, function () {
            return _target.activate(actor, _this2);
          });
        }

        return;
      }

      if (actor.isVehicle && actor.occupant) {
        actor = actor.occupant;
      }

      if (!actor.controllable || !this.args.target) {
        return;
      }

      var target = this.viewport.actorsById[this.args.target];

      if (!target || !target.activate) {
        return;
      }

      this.viewport.onFrameOut(this.args.delay || 1, function () {
        return _this2.activate(actor);
      });
    }
  }]);

  return SwitchRegion;
}(_Region2.Region);

exports.SwitchRegion = SwitchRegion;
});

;require.register("region/WaterRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WaterRegion = /*#__PURE__*/function (_Region) {
  _inherits(WaterRegion, _Region);

  var _super = _createSuper(WaterRegion);

  function WaterRegion() {
    var _this;

    _classCallCheck(this, WaterRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isWater", true);

    _this.args.type = 'region region-water';
    _this.entryParticle = '<div class = "particle-splash">';
    _this.args.gravity = 0.40;
    _this.args.drag = 0.85;
    _this.args.density = 1;
    _this.skimSpeed = 15;
    _this.draining = 0;
    return _this;
  }

  _createClass(WaterRegion, [{
    key: "skim",
    value: function skim(actor) {
      var _this2 = this;

      _get(_getPrototypeOf(WaterRegion.prototype), "skim", this).call(this, actor);

      if (this.viewport.args.frameId % 4) {
        return;
      }

      var splashParticle = new _Tag.Tag("<div class = \"particle-skim\">");
      var splashPoint = actor.rotatePoint(actor.args.gSpeed, 0);
      splashParticle.style({
        '--x': splashPoint[0] + actor.x + actor.args.gSpeed,
        '--y': splashPoint[1] + actor.y,
        'z-index': 0,
        '--flip': "".concat(actor.args.direction)
      });
      this.viewport.particles.add(splashParticle);
      this.viewport.onFrameOut(16, function () {
        return _this2.viewport.particles.remove(splashParticle);
      });
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      if (!this.viewport) {
        return;
      }

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.colorWrapper.appendChild(this.color.node);
        this.filterWrapper.appendChild(this.filter.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
      }

      if (this.args.controller) {
        var controller = this.viewport.actorsById[this.args.controller];

        if (controller) {
          this.args.height = controller.args.level;
        }
      }

      if (!this["switch"] && this.args["switch"]) {
        this["switch"] = this.viewport.actorsById[this.args["switch"]];

        if (this["switch"]) {
          this["switch"].args.bindTo('active', function (v) {
            if (!v && _this3.draining > 0) {// this.draining = -1;
            }

            if (v) {
              _this3.draining = 1;
            } else {
              _this3.draining = -1;
            }
          });
        }
      }

      if (!this.originalHeight) {
        this.originalHeight = this.args.height;
      }

      if (this.draining) {
        if (this.draining > 0 && this.args.height >= 32) {
          this.args.height -= 3.5;
        } else if (this.draining < 0 && this.args.height < this.originalHeight) {
          this.args.height += 3.5;
        }

        if (this.args.height <= 0) {
          this.args.display = 'none';

          if (this.draining > 0) {
            this.draining = 0;
          }
        } else {
          this.args.display = 'initial';
        }
      }

      if (this.target && this.args.height !== this.target) {
        var _this$args$drainSpeed, _this$args$fillSpeed;

        var space = this.args.height - this.target;
        var drainSpeed = (_this$args$drainSpeed = this.args.drainSpeed) !== null && _this$args$drainSpeed !== void 0 ? _this$args$drainSpeed : 1;
        var fillSpeed = (_this$args$fillSpeed = this.args.fillSpeed) !== null && _this$args$fillSpeed !== void 0 ? _this$args$fillSpeed : 1;
        var speed = space > 0 ? drainSpeed : fillSpeed;

        if (Math.abs(this.args.height - this.target) > speed) {
          this.args.height -= Math.abs(speed) * Math.sign(space);
        } else {
          this.args.height = this.target;
        }
      }

      _get(_getPrototypeOf(WaterRegion.prototype), "update", this).call(this);
    }
  }, {
    key: "updateActor",
    value: function updateActor(other) {
      var _this4 = this;

      if (!other.controllable) {
        return;
      }

      if (other.y - other.args.height < this.y - this.args.height) {
        return;
      }

      if (this.viewport.args.frameId % 5 === 0 && Math.random() > 0.9) {
        var viewport = this.viewport;
        var bubble = new _Tag.Tag('<div class = "particle-bubble">');
        var attach = other.rotatePoint.apply(other, _toConsumableArray(other.facePoint));
        var x = other.x + attach[0];
        var y = other.y + attach[1];
        bubble.style({
          '--startY': y,
          '--size': Math.random()
        });
        var stopHoldingBubble = this.onFrame(function () {
          var point = other.facePoint;
          var x = other.x + point[0];
          var y = other.y + point[1];

          if (other.y < _this4.y - _this4.args.height) {
            bubble.style({
              display: 'none'
            });
          }

          if (y < _this4.y - _this4.args.height) {
            bubble.style({
              display: 'none'
            });
          }

          bubble.style({
            '--x': x,
            '--y': y
          });
        });
        var stopWatchingBubble = this.onFrame(function () {
          bubble.style({
            '--maxY': _this4.y - _this4.args.height
          });
        });
        viewport.particles.add(bubble);
        viewport.onTimeout(350, function () {
          bubble.classList.add('float');
          stopHoldingBubble();
        });
        viewport.onTimeout(1000, function () {
          bubble.classList.add('floating');
        });
        setTimeout(function () {
          viewport.particles.remove(bubble);
          stopWatchingBubble();
        }, 1500);
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return WaterRegion;
}(_Region2.Region);

exports.WaterRegion = WaterRegion;
});

;require.register("region/WaterfallRegion.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterfallRegion = void 0;

var _Region2 = require("./Region");

var _Tag = require("curvature/base/Tag");

var _View = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WaterfallRegion = /*#__PURE__*/function (_Region) {
  _inherits(WaterfallRegion, _Region);

  var _super = _createSuper(WaterfallRegion);

  function WaterfallRegion() {
    var _this;

    _classCallCheck(this, WaterfallRegion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.args.type = 'region region-shade region-waterfall';
    return _this;
  }

  _createClass(WaterfallRegion, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(WaterfallRegion.prototype), "update", this).call(this);

      if (!this.filterWrapper && this.tags.sprite) {
        this.filterWrapper = new _Tag.Tag('<div class = "region-filter-wrapper">');
        this.colorWrapper = new _Tag.Tag('<div class = "region-color-wrapper">');
        this.filter = new _Tag.Tag('<div class = "region-filter">');
        this.color = new _Tag.Tag('<div class = "region-color">');
        this.filterWrapper.appendChild(this.filter.node);
        this.colorWrapper.appendChild(this.color.node);
        this.tags.sprite.appendChild(this.filterWrapper.node);
        this.tags.sprite.appendChild(this.colorWrapper.node);
        this.tags.sprite.style({
          '--maskImage': "url(#mask-".concat(this.args.id, ")")
        });
      }
    }
  }, {
    key: "solid",
    get: function get() {
      return false;
    }
  }, {
    key: "isEffect",
    get: function get() {
      return true;
    }
  }]);

  return WaterfallRegion;
}(_Region2.Region);

exports.WaterfallRegion = WaterfallRegion;
});

;require.register("savestates/Savestate.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Savestate = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ProgressState = /*#__PURE__*/_createClass(function ProgressState() {// Object.preventExtensions(this);

  _classCallCheck(this, ProgressState);

  _defineProperty(this, "lastCheckpoint", null);

  _defineProperty(this, "lastZone", null);

  _defineProperty(this, "zonesComplete", {});

  _defineProperty(this, "characters", {});
});

var Savestate = /*#__PURE__*/_createClass(function Savestate() {// Object.preventExtensions(this);

  _classCallCheck(this, Savestate);

  _defineProperty(this, "emeralds", {});

  _defineProperty(this, "characters", {});
});

exports.Savestate = Savestate;
});

;require.register("savestates/SavestateDatabase.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SavestateDatabase = void 0;

var _Database2 = require("curvature/model/Database");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SavestateDatabase = /*#__PURE__*/function (_Database) {
  _inherits(SavestateDatabase, _Database);

  var _super = _createSuper(SavestateDatabase);

  function SavestateDatabase() {
    _classCallCheck(this, SavestateDatabase);

    return _super.apply(this, arguments);
  }

  _createClass(SavestateDatabase, [{
    key: "_version_1",
    value: function _version_1(database) {
      this.createObjectStore('savestates', {
        keyPath: 'id',
        autoIncrement: true
      }).createIndex('id', 'id', {
        unique: true
      });
    }
  }]);

  return SavestateDatabase;
}(_Database2.Database);

exports.SavestateDatabase = SavestateDatabase;
});

;require.register("sprite/Png.js", function(exports, require, module) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Png = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var header = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A];

var Pixel = /*#__PURE__*/function () {
  function Pixel() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    _classCallCheck(this, Pixel);

    _defineProperty(this, "r", 0);

    _defineProperty(this, "g", 0);

    _defineProperty(this, "b", 0);

    _defineProperty(this, "a", 1);

    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }

  _createClass(Pixel, [{
    key: "mean",
    value: function mean() {
      return (this.r + this.g + this.b) / 3;
    }
  }, {
    key: "hex",
    value: function hex() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

      if (length === 3) {
        return "".concat(this.r.toString(16).padStart(2, '0')).concat(this.g.toString(16).padStart(2, '0')).concat(this.b.toString(16).padStart(2, '0'));
      }

      if (length === 4) {
        return "".concat(this.r.toString(16).padStart(2, '0')).concat(this.g.toString(16).padStart(2, '0')).concat(this.b.toString(16).padStart(2, '0')).concat(this.a.toString(16).padStart(2, '0'));
      }
    }
  }, {
    key: "valueOf",
    value: function valueOf() {
      return "rgba(".concat(this.r, ", ").concat(this.g, ", ").concat(this.b, ", ").concat(this.a, ")");
    }
  }]);

  return Pixel;
}();

var Chunk = /*#__PURE__*/function () {
  function Chunk() {
    _classCallCheck(this, Chunk);

    _defineProperty(this, "previous", null);

    _defineProperty(this, "content", null);

    _defineProperty(this, "length", 0);

    _defineProperty(this, "start", 0);

    _defineProperty(this, "type", '');

    _defineProperty(this, "crc", 0);
  }

  _createClass(Chunk, [{
    key: "text",
    get: function get() {
      return this.bytes.map(function (b) {
        return String.fromCharCode(b);
      }).join('');
    }
  }, {
    key: "bytes",
    get: function get() {
      var bytes = [];

      for (var i = 0; i < this.length; i++) {
        bytes.push(this.content.getUint8(i));
      }

      return bytes;
    }
  }]);

  return Chunk;
}();

var Png = /*#__PURE__*/function () {
  function Png(source) {
    var _this = this;

    _classCallCheck(this, Png);

    _defineProperty(this, "buffer", null);

    _defineProperty(this, "width", 0);

    _defineProperty(this, "height", 0);

    _defineProperty(this, "depth", 0);

    _defineProperty(this, "colorType", 0);

    _defineProperty(this, "compression", 0);

    _defineProperty(this, "filter", 0);

    _defineProperty(this, "interlace", 0);

    if (typeof source === 'string') {
      this.ready = fetch(source).then(function (response) {
        return response.arrayBuffer();
      }).then(function (buffer) {
        _this.buffer = buffer;

        _this.checkHeader();

        _this.indexChunks();
      });
    } else if (_typeof(source) === 'object') {
      if (source instanceof Png) {
        this.ready = Promise.resolve();
        this.buffer = source.buffer.slice(0);
        this.checkHeader();
        this.indexChunks();
      }
    }
  }

  _createClass(Png, [{
    key: "checkHeader",
    value: function checkHeader() {
      var bytes = new Uint8Array(this.buffer);

      for (var i in header) {
        if (header[i] !== bytes[i]) {
          throw new Error('Png is not valid.');
        }
      }
    }
  }, {
    key: "readIhdr",
    value: function readIhdr() {
      var ihdr = this.chunks[0];
      this.width = ihdr.content.getUint32(0);
      this.height = ihdr.content.getUint32(4);
      this.depth = ihdr.content.getUint8(8);
      this.colorType = ihdr.content.getUint8(9);
      this.compression = ihdr.content.getUint8(10);
      this.filter = ihdr.content.getUint8(11);
      this.interlace = ihdr.content.getUint8(12);
    }
  }, {
    key: "palette",
    get: function get() {
      var palette = [];

      for (var i in this.chunks) {
        var chunk = this.chunks[i];

        if (chunk.type !== 'PLTE') {
          continue;
        }

        for (var ii = 0; ii < chunk.bytes.length; ii += 3) {
          var color = new Pixel(chunk.bytes[ii + 0], chunk.bytes[ii + 1], chunk.bytes[ii + 2]);
          palette.push(color);
        }

        return palette;
      }
    }
  }, {
    key: "recolor",
    value: function recolor() {
      var colorMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var palette = this.palette;
      var newPalette = [];

      for (var i in palette) {
        var color = palette[i];
        var rgba = color.valueOf();
        var mean = color.mean();
        var hex = color.hex();

        if (colorMap[hex]) {
          var newColor = colorMap[hex];
          var newR = newColor.substring(0, 2);
          var newG = newColor.substring(2, 4);
          var newB = newColor.substring(4, 6);
          var triplet = [newR, newG, newB].map(function (x) {
            return parseInt(x, 16);
          });
          newPalette.push.apply(newPalette, _toConsumableArray(triplet));
        } else {
          newPalette.push(color.r, color.g, color.b);
        }
      }

      var newPng = new Png(this);

      for (var _i in newPng.chunks) {
        var chunk = newPng.chunks[_i];

        if (chunk.type !== 'PLTE') {
          continue;
        }

        var newBytes = new Uint8Array(newPng.buffer);
        var crcPointer = new DataView(newPng.buffer, chunk.start + chunk.length, 4);
        newBytes.set(newPalette, chunk.start);
        crcPointer.setUint32(0, newPng.runCrc(chunk));
      }

      return newPng;
    }
  }, {
    key: "runCrc",
    value: function runCrc(chunk) {
      if (!Png.crcTable) {
        Png.crcTable = new Uint32Array(256);

        for (var n = 0; n < 256; n++) {
          var c = n;

          for (var k = 0; k < 8; k++) {
            if ((c & 1) == 1) {
              c = 0xEDB88320 ^ c >>> 1;
            } else {
              c = c >>> 1;
            }
          }

          Png.crcTable[n] = c;
        }
      }

      var crc = 0xFFFFFFFF;
      var bytes = new Uint8Array(this.buffer);
      var chunkBytes = bytes.slice(chunk.start - 4, chunk.start + chunk.length);

      for (var i in chunkBytes) {
        var _byte = chunkBytes[i];
        crc = Png.crcTable[(crc ^ _byte) & 0xFF] ^ crc >>> 8;
      }

      crc = (crc ^ 0xFFFFFFFF) >>> 0;
      return crc;
    }
  }, {
    key: "indexChunks",
    value: function indexChunks() {
      var chunks = [];
      var pos = 8;

      while (pos < this.buffer.byteLength) {
        var lengthView = new DataView(this.buffer, pos, 4);
        pos += 4;
        var typeView = new DataView(this.buffer, pos, 4);
        pos += 4;
        var chunk = new Chunk();
        chunk.start = pos;
        chunk.length = lengthView.getUint32();

        for (var i = 0; i < 4; i++) {
          var _byte2 = typeView.getUint8(i);

          var _char = String.fromCharCode(_byte2);

          chunk.type += _char;
        }

        chunk.content = new DataView(this.buffer, pos, chunk.length);
        pos += chunk.length;
        var crcView = new DataView(this.buffer, pos, 4);
        chunk.crc = crcView.getUint32();
        chunk.previous = chunks[chunks.length - 1];
        chunks.push(chunk);
        pos += 4;
      }

      this.chunks = chunks;
    }
  }, {
    key: "toBlob",
    value: function toBlob() {
      return new Blob([new Uint8Array(this.buffer)], {
        type: 'image/png'
      });
    }
  }, {
    key: "toUrl",
    value: function toUrl() {
      return URL.createObjectURL(this.toBlob());
    }
  }]);

  return Png;
}();

exports.Png = Png;
Png.Pixel = Pixel;
Png.Chunk = Chunk;
});

require.register("tileMap/Elicit.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Elicit = void 0;

var _Mixin = require("curvature/base/Mixin");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

var _PromiseMixin = require("curvature/mixin/PromiseMixin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Elicit = /*#__PURE__*/function (_Mixin$with) {
  _inherits(Elicit, _Mixin$with);

  var _super = _createSuper(Elicit);

  function Elicit(url) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Elicit);

    _this = _super.call(this);
    _this.fetch = fetch(url, options).then(function (response) {
      return _this.handleFetch(response);
    });
    return _this;
  }

  _createClass(Elicit, [{
    key: "headers",
    value: function headers() {
      return this.fetch.then(function (_ref) {
        var response = _ref.response,
            stream = _ref.stream;
        return response.headers;
      });
    }
  }, {
    key: "stream",
    value: function stream(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.fetch.then(function (_ref2) {
        var response = _ref2.response,
            stream = _ref2.stream;
        return new Response(stream, {
          headers: response.headers
        });
      });
    }
  }, {
    key: "objectUrl",
    value: function objectUrl(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.stream(url, options).then(function (response) {
        return response.blob();
      }).then(function (blob) {
        return URL.createObjectURL(blob);
      });
    }
  }, {
    key: "emitProgressEvent",
    value: function emitProgressEvent(length, received) {
      var done = length ? received / length : 0;
      this.dispatchEvent(new CustomEvent('progress', {
        detail: {
          length: length,
          received: received,
          done: done
        }
      }));
    }
  }, {
    key: "iterateDownload",
    value: function iterateDownload(reader, controller, length) {
      var _this2 = this;

      this.emitProgressEvent(length, 0);
      var received = 0;

      var iterate = function iterate() {
        reader.read().then(function (_ref3) {
          var done = _ref3.done,
              value = _ref3.value;

          if (done) {
            _this2[_PromiseMixin.PromiseMixin.Accept]();

            controller.close();
            return;
          }

          controller.enqueue(value);
          received += value.length;

          _this2.emitProgressEvent(length, received);

          return iterate();
        });
      };

      return iterate();
    }
  }, {
    key: "handleFetch",
    value: function handleFetch(response) {
      var reader = response.body.getReader();
      var length = response.headers.get('Content-Length');
      var elicit = this;
      var stream = new ReadableStream({
        start: function start(controller) {
          elicit.iterateDownload(reader, controller, length);
        }
      });
      return {
        response: response,
        stream: stream
      };
    }
  }]);

  return Elicit;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin, _PromiseMixin.PromiseMixin));

exports.Elicit = Elicit;
});

;require.register("tileMap/TileMap.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileMap = void 0;

var _Tag = require("curvature/base/Tag");

var _Mixin = require("curvature/base/Mixin");

var _Bindable = require("curvature/base/Bindable");

var _EventTargetMixin = require("curvature/mixin/EventTargetMixin");

var _Elicit = require("./Elicit");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TileMap = /*#__PURE__*/function (_Mixin$with) {
  _inherits(TileMap, _Mixin$with);

  var _super = _createSuper(TileMap);

  function TileMap(args, parent) {
    var _this;

    _classCallCheck(this, TileMap);

    _this = _super.call(this);
    _this.meta = new Map();
    _this.heightMask = null;
    _this.tileImages = new Map();
    _this.tileNumberCache = new Map();
    _this.tileSetCache = new Map();
    _this.tileCache = new Map();
    _this.heightMasks = new Map();
    _this.heightMaskCache = new Map();
    _this.solidCache = new Map();
    _this.tileLayers = [];
    _this.destructibleLayers = [];
    _this.collisionLayers = [];
    _this.objectLayers = [];
    var url = args.mapUrl;
    _this.mapData = null;
    _this.mapUrl = url;
    _this.maps = new Map();
    _this.replacements = new Map();
    var elicit = new _Elicit.Elicit(url);
    elicit.addEventListener('progress', function (event) {
      var _event$detail = event.detail,
          received = _event$detail.received,
          length = _event$detail.length,
          done = _event$detail.done;
      var type = 'map';

      _this.dispatchEvent(new CustomEvent('level-progress', {
        detail: {
          length: length,
          received: received,
          done: done,
          url: url
        }
      }));
    });
    _this.ready = elicit.stream().then(function (response) {
      return response.json();
    }).then(function (tilemapData) {
      _this.mapData = tilemapData;

      if (tilemapData && tilemapData.properties) {
        var _iterator = _createForOfIteratorHelper(tilemapData.properties),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var property = _step.value;
            var name = property.name.replace(/-/g, '_');

            _this.meta.set(name, property.value);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      _this.loadLayers(tilemapData);

      return _this.loadTilesets(tilemapData.tilesets);
    });
    Object.preventExtensions(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TileMap, [{
    key: "loadTilesets",
    value: function loadTilesets(tilesetUrls) {
      var _this2 = this;

      var setHeightMasks = [];
      var imageProgress = new Map();
      var imageSize = new Map();

      var _loop = function _loop(i) {
        var tileset = _this2.mapData.tilesets[i];
        var image = new Image();

        _this2.tileImages.set(tileset, image);

        var imageUrl = '/map/' + tileset.image;
        tileset.original = tileset.image = imageUrl;
        var fetchImage = new _Elicit.Elicit(imageUrl);
        fetchImage.addEventListener('progress', function (event) {
          var _event$detail2 = event.detail,
              received = _event$detail2.received,
              length = _event$detail2.length,
              done = _event$detail2.done;
          imageProgress.set(fetchImage, received);
          imageSize.set(fetchImage, length);

          var imagesProgress = _toConsumableArray(imageProgress.values()).reduce(function (a, b) {
            return Number(a) + Number(b);
          });

          var imagesLength = _toConsumableArray(imageSize.values()).reduce(function (a, b) {
            return Number(a) + Number(b);
          });

          var imagesDone = imagesProgress / imagesLength;

          _this2.dispatchEvent(new CustomEvent('texture-progress', {
            detail: {
              length: imagesLength,
              received: imagesProgress,
              done: imagesDone,
              url: imageUrl
            }
          }));
        });
        var heightMask = fetchImage.objectUrl().then(function (url) {
          return new Promise(function (accept) {
            tileset.cachedImage = url;
            image.addEventListener('load', function (event) {
              _this2.replacements.set(imageUrl, url);

              var heightMask = new _Tag.Tag('<canvas>');
              heightMask.width = image.width;
              heightMask.height = image.height;
              heightMask.getContext('2d').drawImage(image, 0, 0, image.width, image.height);

              _this2.heightMasks.set(tileset, heightMask);

              accept(heightMask);
            }, {
              once: true
            });
            image.src = url;
          });
        });
        setHeightMasks.push(heightMask);
      };

      for (var i in tilesetUrls) {
        _loop(i);
      }

      return Promise.all(setHeightMasks);
    }
  }, {
    key: "loadLayers",
    value: function loadLayers(tilemapData) {
      var layerGroup = {};
      var layers = tilemapData.layers || [];
      tilemapData.layers.forEach(function (layer) {
        layer.offsetX = false;
        layer.offsetY = false;
        layer.offsetXChanged = false;
        layer.offsetYChanged = false;
        layer.destroyed = false;
        layer.layer = null;
        Object.preventExtensions(layer);
      });
      this.objectLayers = tilemapData.layers.filter(function (l) {
        return l.type === 'objectLayers';
      });
      this.tileLayers = tilemapData.layers.filter(function (l) {
        return l.type === 'tilelayer';
      }); // layerGroup.objectLayers = this.objectLayers;

      layerGroup.tileLayers = this.tileLayers;
      this.collisionLayers = this.tileLayers.filter(function (l) {
        if (!l.name.match(/^Collision\s\d+/)) {
          return false;
        }

        return true;
      });
      this.destructibleLayers = this.tileLayers.filter(function (l) {
        if (!l.name.match(/^Destructible\s\d+/)) {
          return false;
        }

        return true;
      });
      layerGroup.destructibleLayers = this.destructibleLayers;
      layerGroup.collisionLayers = this.collisionLayers;
    }
  }, {
    key: "addMap",
    value: function addMap(url) {
      var xOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var yOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var elicit = new _Elicit.Elicit(url);
      elicit.stream().then(function (response) {
        return response.json();
      }).then(function (data) {
        console.log(data);
      });
      elicit.addEventListener('progress', function (event) {
        var _event$detail3 = event.detail,
            received = _event$detail3.received,
            length = _event$detail3.length,
            done = _event$detail3.done; // const type = 'map';
        // this.dispatchEvent(new CustomEvent(
        // 	'level-progress', {detail: {length, received, done, url}}
        // ));
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      for (var i = 0; i < this.tileLayers.length; i++) {
        var layer = this.tileLayers[i];
        layer.destroyed = false;
        console.log(layer);
      }
    }
  }, {
    key: "coordsToTile",
    value: function coordsToTile(x, y, layerId) {
      var blockSize = this.blockSize;
      var offsetX = 0;
      var offsetY = 0;

      if (this.tileLayers[layerId]) {
        var _this$tileLayers$laye, _this$tileLayers$laye2;

        offsetX = (_this$tileLayers$laye = this.tileLayers[layerId].offsetX) !== null && _this$tileLayers$laye !== void 0 ? _this$tileLayers$laye : 0;
        offsetY = (_this$tileLayers$laye2 = this.tileLayers[layerId].offsetY) !== null && _this$tileLayers$laye2 !== void 0 ? _this$tileLayers$laye2 : 0;
      }

      return [Math.floor((x - offsetX) / blockSize), Math.floor((y - offsetY) / blockSize)];
    }
  }, {
    key: "getTileNumber",
    value: function getTileNumber(x, y) {
      var layerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var tileKey = x + ',' + y + ',' + layerId;
      var cached = this.tileNumberCache.get(tileKey);

      if (cached !== undefined) {
        return cached;
      }

      var tileLayers = this.tileLayers;
      var mapData = this.mapData;

      if (!tileLayers[layerId]) {
        this.tileNumberCache.set(tileKey, false);
        return false;
      }

      if (x >= mapData.width || x < 0) {
        if (x < 0 || !this.meta.get('wrapX')) {
          if (layerId !== 0) {
            this.tileNumberCache.set(tileKey, false);
            return false;
          }

          this.tileNumberCache.set(tileKey, 1);
          return 1;
        } else {
          if (x < 0 && x % this.mapData.width !== 0) {
            y++;
          }

          x = x % this.mapData.width;
        }
      }

      if (y >= mapData.height || y < 0) {
        if (y < 0 || !this.meta.get('wrapY')) {
          if (layerId !== 0) {
            this.tileNumberCache.set(tileKey, false);
            return false;
          }

          this.tileNumberCache.set(tileKey, 1);
          return 1;
        } else {
          y = y % this.mapData.height;
        }
      }

      var tileIndex = y * mapData.width + x;

      if (tileIndex in tileLayers[layerId].data) {
        var layer = tileLayers[layerId];
        var tile = layer.data[tileIndex];
        var tileNumber = tile > 0 ? tile - 1 : 0;
        this.tileNumberCache.set(tileKey, tileNumber);
        return tileNumber;
      }

      this.tileNumberCache.set(tileKey, false);
      return false;
    }
  }, {
    key: "getObjectDefs",
    value: function getObjectDefs() {
      if (!this.mapData) {
        return;
      }

      return this.mapData.layers.filter(function (layer) {
        return layer.type === 'objectgroup';
      }).map(function (layer) {
        return layer.objects;
      }).flat();
    }
  }, {
    key: "getTile",
    value: function getTile(tileNumber) {
      var cached = this.tileCache.get(tileNumber);

      if (cached !== undefined) {
        if (this.replacements.has(cached[3])) {
          cached[2] = this.replacements.get(cached[3]);
        }

        return cached;
      }

      var blockSize = this.blockSize;
      var x = 0;
      var y = 0;
      var src = '';
      var original = '';
      var tileset = this.getTileset(tileNumber);
      var image = this.tileImages.get(tileset);

      if (tileNumber) {
        var localTileNumber = tileNumber + -tileset.firstgid + 1;
        var blocksWide = Math.ceil(image.width / blockSize);
        x = localTileNumber % blocksWide;
        y = Math.floor(localTileNumber / blocksWide);
        src = tileset.image;
        original = tileset.original;
      }

      var result = [x, y, src, original];
      this.tileCache.set(tileNumber, result);
      return result;
    }
  }, {
    key: "getSolid",
    value: function getSolid(xInput, yInput) {
      var layerInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      xInput = Math.trunc(xInput);
      yInput = Math.trunc(yInput);
      var currentTile = this.coordsToTile(xInput, yInput, layerInput);
      var tileNumber = this.getTileNumber.apply(this, _toConsumableArray(currentTile).concat([layerInput]));
      var solidLayerCount = this.collisionLayers.length;

      if (layerInput > 0 && layerInput < solidLayerCount) {
        if (this.getSolid(xInput, yInput, 0)) {
          return this.tileLayers[0];
        }

        for (var i = 0 + solidLayerCount; i < this.tileLayers.length; i++) {
          var layer = this.tileLayers[i];

          if (layer.name.substring(0, 3) === 'Art') {
            continue;
          }

          if (layer.name.substring(0, 10) === 'Moving Art') {
            continue;
          }

          if (layer.name.substring(0, 10) === 'Foreground') {
            continue;
          }

          if (layer.name.substring(0, 12) === 'Destructible') {
            if (layer.destroyed) {
              continue;
            }
          }

          if (this.getSolid(xInput, yInput, i)) {
            return this.tileLayers[i];
          }
        }
      }

      if (1 || layerInput <= 3) {
        if (tileNumber === 0) {
          return false;
        }

        if (tileNumber === 1) {
          return this.tileLayers[layerInput];
        }
      }

      var tileSet = this.getTileset(tileNumber);
      var mapData = this.mapData;
      var blockSize = mapData.tilewidth;
      var tileCoords = this.getTile(tileNumber);
      var tilePos = [tileCoords[0] * blockSize, tileCoords[1] * blockSize];
      var x = Number(xInput) % blockSize;
      var y = Number(yInput) % blockSize;
      var xPixel = tilePos[0] + x;
      var yPixel = tilePos[1] + y;
      var heightMaskKey = [xPixel, yPixel, tileNumber].join('::');
      var heightMaskCache = this.heightMaskCache;

      if (heightMaskCache.has(heightMaskKey)) {
        return heightMaskCache.get(heightMaskKey);
      }

      var heightMask = this.heightMasks.get(tileSet);
      var pixel = heightMask.getContext('2d').getImageData(xPixel, yPixel, 1, 1).data;
      var result = false; // if(pixel[0] === 255 && pixel[1] === 0 && pixel[2] === 0 && pixel[3] === 255)
      // {
      // 	// result = 0xFF0000;
      // 	result = true;
      // }
      // else

      if (pixel[3] === 255) {
        // result = 0xFFFFFF;
        result = this.tileLayers[layerInput];
      } else {
        result = false;
      }

      heightMaskCache.set(heightMaskKey, result);
      return result;
    }
  }, {
    key: "getTileset",
    value: function getTileset(tileNumber) {
      tileNumber = Number(tileNumber);
      var cached = this.tileSetCache.get(tileNumber);

      if (cached !== undefined) {
        if (this.replacements.has(cached.original)) {
          cached.image = this.replacements.get(cached.original);
        }

        return cached;
      }

      if (!this.mapData) {
        return;
      }

      for (var i in this.mapData.tilesets) {
        var tileset = this.mapData.tilesets[i];

        if (tileNumber + 1 >= tileset.firstgid) {
          var nextTileset = this.mapData.tilesets[Number(i) + 1];

          if (nextTileset) {
            if (tileNumber + 1 < nextTileset.firstgid) {
              this.tileSetCache.set(tileNumber, tileset);

              if (this.replacements.has(tileset.original)) {
                tileset.image = this.replacements.get(tileset.original);
              }

              return tileset;
            }
          } else {
            this.tileSetCache.set(tileNumber, tileset);

            if (this.replacements.has(tileset.original)) {
              tileset.image = this.replacements.get(tileset.original);
            }

            return tileset;
          }
        }
      }
    }
  }, {
    key: "blockSize",
    get: function get() {
      return this.mapData.tilewidth;
    }
  }]);

  return TileMap;
}(_Mixin.Mixin["with"](_EventTargetMixin.EventTargetMixin));

exports.TileMap = TileMap;
});

;require.register("titlecard/Titlecard.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Titlecard = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Accept = Symbol('Accept');

var Titlecard = /*#__PURE__*/function (_View) {
  _inherits(Titlecard, _View);

  var _super = _createSuper(Titlecard);

  function Titlecard() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Titlecard);

    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./titlecard.html'));

    _this.args.firstLine = args.firstLine || 'First Line';
    _this.args.secondLine = args.secondLine || 'Second Line';
    _this.args.creditLine = args.creditLine || 'Credit Line';
    _this.args.actNumber = args.actNumber || 1;
    _this.args.animation = 'start';
    _this.played = new Promise(function (accept) {
      return _this[Accept] = accept;
    });
    return _this;
  }

  _createClass(Titlecard, [{
    key: "play",
    value: function play(event) {
      var _this2 = this;

      if (this.playing) {
        return this.playing;
      }

      var playing = new Promise(function (accept) {
        var waitFor = _this2.args.waitFor || Promise.resolve();
        var timeAcc = 750;

        _this2.onTimeout(timeAcc, function () {
          return _this2.onNextFrame(function () {
            return _this2.args.animation = '';
          });
        });

        timeAcc += 750;

        _this2.onTimeout(timeAcc, function () {
          return _this2.onNextFrame(function () {
            return _this2.args.animation = 'opening';
          });
        });

        timeAcc += 500;
        waitFor["finally"](function () {
          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'opening2';
            });
          });

          timeAcc += 750;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'closing';
            });
          });

          _this2.onTimeout(timeAcc, function () {
            accept([new Promise(function (acceptDone) {
              return _this2.onTimeout(timeAcc + 500, acceptDone);
            })]);

            _this2[Accept]();
          });

          timeAcc += 1000;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              return _this2.args.animation = 'closed';
            });
          });

          timeAcc += 2500;

          _this2.onTimeout(timeAcc, function () {
            return _this2.onNextFrame(function () {
              _this2.args.animation = 'done';
              _this2.playing = false;
            });
          });
        });
      });
      this.playing = playing; // return playing;
    }
  }]);

  return Titlecard;
}(_View2.View);

exports.Titlecard = Titlecard;
});

;require.register("titlecard/titlecard.html", function(exports, require, module) {
module.exports = "<div class = \"titlecard [[animation]]\">\n\n\t<div class = \"titlecard-field\"></div>\n\n\t<div class = \"titlecard-bottom-border\">\n\t\t<div class = \"titlecard-border-text\">[[creditLine]]</div>\n\t</div>\n\n\t<div class = \"titlecard-left-border\">\n\t\t<div class = \"titlecard-border-shadow\"></div>\n\t\t<div class = \"titlecard-border-color\"></div>\n\t</div>\n\n\t<div class = \"titlecard-title\">\n\n\t\t<div class = \"titlecard-title-box\">\n\n\t\t\t<div class = \"titlecard-title-line-1\">[[firstLine]]</div>\n\n\t\t\t<div class = \"titlecard-title-line-2\">\n\t\t\t\t[[secondLine]]<div class = \"titlecard-title-number\">[[actNumber]]</div>\n\t\t\t</div>\n\n\t\t</div>\n\n\t</div>\n\n</div>\n"
});

;require.register("ui/CharacterString.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CharacterString = void 0;

var _View2 = require("curvature/base/View");

var _Bindable = require("curvature/base/Bindable");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CharacterString = /*#__PURE__*/function (_View) {
  _inherits(CharacterString, _View);

  var _super = _createSuper(CharacterString);

  function CharacterString(args, parent) {
    var _this;

    _classCallCheck(this, CharacterString);

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", "<div cv-ref = \"main\" class = \"hud-character-string [[hide]] [[color]] [[font]]\" cv-each = \"chars:char:c\"><span\n\t\t\t\tclass = \"hud-character\"\n\t\t\t\tdata-type  = \"[[char.type]]\"\n\t\t\t\tdata-value = \"[[char.pos]]\"\n\t\t\t\tdata-index = \"[[c]]\"\n\t\t\t\tstyle      = \"--value:[[char.pos]];--index:[[c]];--length:[[chars.length]];\"\n\t\t\t>[[char.original]]</span></div>");

    var chars = [];
    chars[_Bindable.Bindable.NoGetters] = true;
    _this.args.chars = chars;
    _this.args.scale = _this.args.scale || 1;
    var high = _this.args.high;
    var med = _this.args.med;
    var low = _this.args.low;

    _this.args.bindTo('value', function (v) {
      // if(Math.abs(v) < low)
      // {
      // 	this.args.color = '';
      // }
      // else if(Math.abs(v) > low)
      // {
      // 	this.args.color = 'yellow';
      // }
      // else if(Math.abs(v) > med)
      // {
      // 	this.args.color = 'orange';
      // }
      // else if(Math.abs(v) > high)
      // {
      // 	this.args.color = 'red';
      // }
      // else if(this.args.flash > 0)
      // {
      // 	this.args.color = this.args.flashColor;
      // }
      // else
      // {
      // 	this.args.color = '';
      // }
      var chars = String(v).split('').map(_this.characterToModel.bind(_assertThisInitialized(_this)));

      if (chars.length !== _this.args.chars.length) {
        _this.args.chars.splice(chars.length);
      }

      Object.assign(_this.args.chars, chars);
    });

    return _this;
  }

  _createClass(CharacterString, [{
    key: "characterToModel",
    value: function characterToModel(pos, i) {
      var original = pos;
      var type = 'number';

      if (pos === ' ' || Number(pos) != pos) {
        switch (pos) {
          case ' ':
            pos = -1;
            type = 'number';
            break;

          case '-':
            pos = 11;
            type = 'number';
            break;

          case ':':
            pos = 10;
            type = 'number';
            break;

          case '.':
            pos = 12;
            type = 'number';
            break;

          case '/':
            pos = 13;
            type = 'number';
            break;

          case ',':
            pos = 14;
            type = 'number';
            break;

          case '?':
            pos = 15;
            type = 'number';
            break;

          case '!':
            pos = 16;
            type = 'number';
            break;

          case '@':
            pos = 17;
            type = 'number';
            break;

          case '#':
            pos = 18;
            type = 'number';
            break;

          case '$':
            pos = 19;
            type = 'number';
            break;

          case '%':
            pos = 20;
            type = 'number';
            break;

          case '^':
            pos = 21;
            type = 'number';
            break;

          case '&':
            pos = 22;
            type = 'number';
            break;

          case '*':
            pos = 23;
            type = 'number';
            break;

          case '(':
            pos = 24;
            type = 'number';
            break;

          case ')':
            pos = 25;
            type = 'number';
            break;

          case '⏺':
            pos = 0;
            type = 'symbol2';
            break;

          case '▶':
            pos = 1;
            type = 'symbol2';
            break;

          case '⏸':
            pos = 2;
            type = 'symbol2';
            break;

          case '⏹':
            pos = 3;
            type = 'symbol2';
            break;

          case '⏮':
            pos = 4;
            type = 'symbol2';
            break;

          case '⏭':
            pos = 5;
            type = 'symbol2';
            break;

          case '\'':
            pos = 6;
            type = 'symbol2';
            break;

          case '"':
            pos = 7;
            type = 'symbol2';
            break;

          case '"':
            pos = 8;
            type = 'symbol2';
            break;

          case '=':
            pos = 9;
            type = 'symbol2';
            break;

          case '+':
            pos = 10;
            type = 'symbol2';
            break;

          case '[':
            pos = 11;
            type = 'symbol2';
            break;

          case ']':
            pos = 12;
            type = 'symbol2';
            break;

          case '{':
            pos = 13;
            type = 'symbol2';
            break;

          case '}':
            pos = 14;
            type = 'symbol2';
            break;

          case '\\':
            pos = 15;
            type = 'symbol2';
            break;

          case ';':
            pos = 16;
            type = 'symbol2';
            break;

          case '~':
            pos = 17;
            type = 'symbol2';
            break;

          case '|':
            pos = 18;
            type = 'symbol2';
            break;

          case '_':
            pos = 19;
            type = 'symbol2';
            break;

          case '>':
            pos = 20;
            type = 'symbol2';
            break;

          case '<':
            pos = 21;
            type = 'symbol2';
            break;

          case '⯇':
            pos = 22;
            type = 'symbol2';
            break;

          case '⯅':
            pos = 23;
            type = 'symbol2';
            break;

          case '⯆':
            pos = 24;
            type = 'symbol2';
            break;
          // ⯈

          case '`':
            pos = 25;
            type = 'symbol2';
            break;

          default:
            pos = String(pos).toLowerCase().charCodeAt(0) - 97;
            type = 'letter';
            break;
        }
      }

      if (this.args.chars[i]) {
        this.args.chars[i].original = original;
        this.args.chars[i].type = type;
        this.args.chars[i].pos = pos;
        return this.args.chars[i];
      }

      return {
        pos: pos,
        type: type,
        original: original
      };
    }
  }]);

  return CharacterString;
}(_View2.View);

exports.CharacterString = CharacterString;
});

;require.register("ui/ClickSwitch.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClickSwitch = void 0;

var _View2 = require("curvature/base/View");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ClickSwitch = /*#__PURE__*/function (_View) {
  _inherits(ClickSwitch, _View);

  var _super = _createSuper(ClickSwitch);

  function ClickSwitch() {
    var _this;

    _classCallCheck(this, ClickSwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", require('./click-switch.html'));

    return _this;
  }

  _createClass(ClickSwitch, [{
    key: "toggle",
    value: function toggle() {
      this.args.active = !this.args.active;
    }
  }]);

  return ClickSwitch;
}(_View2.View);

exports.ClickSwitch = ClickSwitch;
});

;require.register("ui/HudFrame.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HudFrame = void 0;

var _View2 = require("curvature/base/View");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HudFrame = /*#__PURE__*/function (_View) {
  _inherits(HudFrame, _View);

  var _super = _createSuper(HudFrame);

  function HudFrame() {
    var _this;

    _classCallCheck(this, HudFrame);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "template", "<div class = \"hud-frame [[type]] [[alert]]\">\n\t\t<div class = \"hud-value\">[[value]]</div>\n\t</div>");

    return _this;
  }

  return _createClass(HudFrame);
}(_View2.View);

exports.HudFrame = HudFrame;
});

;require.register("ui/click-switch.html", function(exports, require, module) {
module.exports = "<div class = \"switch\" data-active = \"[[active]]\"  cv-on = \"click:toggle(event)\">\n\n\t<div class = \"label labelOff\">\n\t\t<img src = \"/ui/mute.svg\" />\n\t</div>\n\n\t<div class = \"slide\">\n\t\t<div class = \"head\"></div>\n\t</div>\n\n\t<div class = \"label labelOn\">\n\t\t<img src = \"/ui/unmute.svg\" />\n\t</div>\n\n</div>\n"
});

;require.register("viewport/Layer.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Layer = void 0;

var _Bindable = require("curvature/base/Bindable");

var _View2 = require("curvature/base/View");

var _Tag = require("curvature/base/Tag");

var _Bag = require("curvature/base/Bag");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Layer = /*#__PURE__*/function (_View) {
  _inherits(Layer, _View);

  var _super = _createSuper(Layer);

  function Layer(args, parent) {
    var _this;

    _classCallCheck(this, Layer);

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "template", require('./layer.html'));

    _this[_Bindable.Bindable.NoGetters] = true;
    _this.args.width = args.width || 320;
    _this.args.height = args.height || 200;
    _this.args.blockSize = 32;
    _this.x = 0;
    _this.y = 0;
    _this.args.offsetX = 0;
    _this.args.offsetY = 0;
    _this.args.layerId = 0 || _this.args.layerId;
    Object.defineProperty(_assertThisInitialized(_this), 'blocksXY', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'blocks', {
      value: new _Bag.Bag()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'offsets', {
      value: new Map()
    });
    Object.defineProperty(_assertThisInitialized(_this), 'blockSrcs', {
      value: new Map()
    });
    _this.args.blocks = _this.blocks.list;
    _this.meta = {};
    var viewport = _this.args.viewport;
    var layers = viewport.tileMap.tileLayers;
    var layerDef = layers[_this.args.layerId];

    if (layerDef.properties) {
      var _iterator = _createForOfIteratorHelper(layerDef.properties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          _this.meta[property.name] = property.value;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      layerDef.layer = _assertThisInitialized(_this);
    }

    _this.offsetXChanged = 0;
    _this.offsetYChanged = 0;
    _this.fallSpeed = 0;
    Object.preventExtensions(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Layer, [{
    key: "move",
    value: function move() {
      var viewport = this.args.viewport;
      var layers = viewport.tileMap.tileLayers;
      var layerDef = layers[this.args.layerId];
      var controller = viewport.actorsById[this.meta.controller];
      this.offsetXChanged = 0;
      this.offsetYChanged = 0;

      if (layerDef) {
        layerDef.offsetXChanged = 0;
        layerDef.offsetYChanged = 0;
      }

      if (controller) {
        if (layerDef) {
          layerDef['offsetX'] = this.args.offsetX;
          layerDef['offsetY'] = this.args.offsetY;
        }

        var changedX = (controller.args.xLayer || 0) - this.args.offsetX;
        var changedY = (controller.args.yLayer || 0) - this.args.offsetY;
        this.args.offsetX = controller.args.xLayer || 0;
        this.args.offsetY = controller.args.yLayer || 0;

        if (layerDef) {
          layerDef["offsetXChanged"] = changedX;
          layerDef["offsetYChanged"] = changedY;
        }

        this["offsetXChanged"] = changedX;
        this["offsetYChanged"] = changedY;
      } else {
        this.args.offsetX = 0;
        this.args.offsetY = 0;
      }

      this.fallSpeed = this.fallSpeed || 0;
    }
  }, {
    key: "onAttach",
    value: function onAttach(event) {
      var _this2 = this;

      var viewport = this.args.viewport;
      var layers = viewport.tileMap.tileLayers;
      var layerDef = layers[this.args.layerId];
      var controller = viewport.actorsById[this.meta.controller];

      if (!layerDef) {
        return;
      }

      this.args.bindTo('destroyed', function (v) {
        var viewport = _this2.args.viewport;
        var layers = viewport.tileMap.tileLayers;
        var layerDef = layers[_this2.args.layerId];
        layerDef.destroyed = !!v;

        if (controller) {
          controller.args.destroyed = !!v;
        }
      });
    }
  }, {
    key: "update",
    value: function update(tileMap) {
      var viewport = this.args.viewport;

      if (this.args.destroyed && this.tags.background) {
        var _tileMap = viewport.tileMap;
        var _layerId = this.args.layerId;
        var layers = _tileMap.tileLayers;
        var layerDef = layers[_layerId];
        layerDef.destroyed = true;
        this.tags.background.style({
          display: 'none'
        });
        return;
      }

      var blockSize = this.args.blockSize;
      var blocksWide = Math.ceil(this.args.width / blockSize) + 2;
      var blocksHigh = Math.ceil(this.args.height / blockSize) + 1;
      var blocksXY = this.blocksXY;
      var centerX = blocksWide / 2;
      var centerY = blocksHigh / 2;
      var blocks = this.blocks;
      var offsets = this.offsets;
      var blockSrcs = this.blockSrcs;
      var offsetX = this.args.offsetX;
      var offsetY = this.args.offsetY;
      var layerId = this.args.layerId;
      var startColumn = -1;
      var endColumn = blocksWide;
      var ii = 0;

      for (var i = startColumn; i <= endColumn; i += Math.sign(blocksWide)) {
        var tileX = i + -Math.ceil(this.x / blockSize) + -Math.ceil(offsetX / blockSize) + (offsetX > 0 ? 1 : 0);

        for (var j = 0; j <= blocksHigh; j += Math.sign(blocksHigh)) {
          var xy = String(i) + '::' + String(j); // const tileY = j - Math.ceil(this.y / blockSize);

          var tileY = j + Math.floor(-this.y / blockSize) + (this.offsetYChange < 0 ? -Math.ceil(offsetY / blockSize) : -Math.floor(offsetY / blockSize)) + (offsetY < 0 ? -1 : 0);
          var blockId = tileMap.getTileNumber(tileX, tileY, layerId);
          var block = void 0;

          if (!blocksXY.has(xy)) {
            block = new _Tag.Tag(document.createElement('div'));
            blocksXY.set(xy, block);
            block.style({
              width: blockSize + 'px',
              height: blockSize + 'px'
            });
            var transX = blockSize * i;
            var transY = blockSize * j;
            var scale = '1.02';
            block.style({
              transform: "translate(".concat(transX, "px, ").concat(transY, "px) scale(").concat(scale, ", ").concat(scale, ")"),
              position: 'absolute',
              left: 0,
              top: 0
            });
            blocks.add(block);
          } else {
            block = blocksXY.get(xy);
          }

          var tileXY = [];

          if (layerId && blockId === false) {
            tileXY[0] = -1;
            tileXY[1] = -1;
          } else {
            tileXY = tileMap.getTile(blockId);
          }

          var existingOffset = offsets.get(block);
          var existingSrc = blockSrcs.get(block);
          var blockOffset = -1 * (tileXY[0] * blockSize) + 'px ' + -1 * (tileXY[1] * blockSize) + 'px';
          var blockSrc = tileXY[2];

          if (existingOffset !== blockOffset || existingSrc !== blockSrc) {
            if (blockId !== false && blockId !== 0) {
              block.style({
                display: 'initial',
                'background-position': blockOffset,
                'background-image': "url(".concat(blockSrc, ")"),
                '--screenX': (centerX - ii) / centerX,
                '--screenY': (j - centerY) / centerY
              });
            } else {
              block.style({
                display: 'none'
              });
            }
          }

          offsets.set(block, blockOffset);
          blockSrcs.set(block, blockSrc);
        }

        ii++;
      }

      if (this.tags.background) {
        var background = this.tags.background;
        background.style({
          '--offsetX': -offsetX % blockSize,
          '--offsetY': -offsetY % blockSize
        });
      }
    }
  }]);

  return Layer;
}(_View2.View);

exports.Layer = Layer;
});

;require.register("viewport/Viewport.js", function(exports, require, module) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Viewport = void 0;

var _Bindable = require("curvature/base/Bindable");

var _Bag = require("curvature/base/Bag");

var _Tag = require("curvature/base/Tag");

var _View2 = require("curvature/base/View");

var _Router = require("curvature/base/Router");

var _Keyboard = require("curvature/input/Keyboard");

var _Sequence = require("curvature/input/Sequence");

var _QuadCell = require("../QuadCell");

var _Bgm = require("../audio/Bgm");

var _TileMap = require("../tileMap/TileMap");

var _Titlecard = require("../titlecard/Titlecard");

var _Particle3d = require("../particle/Particle3d");

var _MarbleGarden = require("../backdrop/MarbleGarden");

var _ProtoLabrynth = require("../backdrop/ProtoLabrynth");

var _MysticCave = require("../backdrop/MysticCave");

var _Series = require("../intro/Series");

var _Card = require("../intro/Card");

var _TitleScreenCard = require("../intro/TitleScreenCard");

var _ThankYouCard = require("../intro/ThankYouCard");

var _LoadingCard = require("../intro/LoadingCard");

var _BootCard = require("../intro/BootCard");

var _DebianCard = require("../intro/DebianCard");

var _WebkitCard = require("../intro/WebkitCard");

var _GamepadCard = require("../intro/GamepadCard");

var _SeanCard = require("../intro/SeanCard");

var _PauseMenu = require("../Menu/PauseMenu.js");

var _MainMenu = require("../Menu/MainMenu.js");

var _LayerSwitch = require("../actor/LayerSwitch");

var _Region = require("../region/Region");

var _CharacterString = require("../ui/CharacterString");

var _HudFrame = require("../ui/HudFrame");

var _Layer = require("./Layer");

var _Controller = require("../controller/Controller");

var _BackdropPalette = require("../BackdropPalette");

var _ObjectPalette = require("../ObjectPalette");

var _ClickSwitch = require("../ui/ClickSwitch");

var _Console = require("subspace-console/Console");

var _Input = require("../console/task/Input");

var _Impulse = require("../console/task/Impulse");

var _Settings = require("../console/task/Settings");

var _Move = require("../console/task/Move");

var _Pos = require("../console/task/Pos");

var _Spawn = require("../console/task/Spawn");

var _RtcClient = require("../network/RtcClient");

var _RtcServer = require("../network/RtcServer");

var _Classifier = require("../Classifier");

var _ChatBox = require("../network/ChatBox");

var _Sonic = require("../actor/Sonic");

var _Tails = require("../actor/Tails");

var _Knuckles = require("../actor/Knuckles");

var _Seymour = require("../actor/Seymour");

var _Chalmers = require("../actor/Chalmers");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ActorPointCache = Symbol('actor-point-cache');
var ColCellNear = Symbol('collision-cells-near');
var ColCell = Symbol('collision-cells');
var Run = Symbol('run');

var Viewport = /*#__PURE__*/function (_View) {
  _inherits(Viewport, _View);

  var _super = _createSuper(Viewport);

  function Viewport() {
    var _this;

    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var parent = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Viewport);

    args[_Bindable.Bindable.NoGetters] = true;
    _this = _super.call(this, args, parent);

    _defineProperty(_assertThisInitialized(_this), "secretSample", new Audio('/doom/dssecret.wav'));

    _defineProperty(_assertThisInitialized(_this), "secretsFound", new Set());

    _defineProperty(_assertThisInitialized(_this), "template", require('./viewport.html'));

    window.viewport = _assertThisInitialized(_this);
    _this[_Bindable.Bindable.NoGetters] = true;

    _Router.Router.listen(_assertThisInitialized(_this), {
      '': function _() {
        return '';
      }
    });

    _this.args.screenEffects = [];
    _this.meta = {};
    _this.characters = {
      'Sonic': _Sonic.Sonic,
      'Tails': _Tails.Tails,
      'Knuckles': _Knuckles.Knuckles
    };
    _this.objectPalette = _ObjectPalette.ObjectPalette; // this.quadCell = null;

    _this.callIntervals = new Map();
    _this.callFrames = new Map();
    _this.willDetach = new Map();
    _this.backdrops = new Map();
    _this.checkpoints = new Map();
    _this.server = null;
    _this.client = null;
    _this.args.networked = false;
    _this.args.mouse = 'moved';
    _this.settings = _Bindable.Bindable.make({
      blur: true,
      displace: true,
      showHud: true,
      shortcuts: true,
      showFps: true,
      debugOsd: false,
      outline: 1,
      musicVol: 100,
      sfxVol: 100,
      username: 'player'
    });
    _this.vizi = true;
    _this.args.shakeX = 0;
    _this.args.shakeY = 0;
    _this.args.level = '';
    var mapUrl = '';
    var inputMapUrl = _Router.Router.query.map;
    var noMenu = false;

    if (inputMapUrl && inputMapUrl.match(/^\w/)) {
      mapUrl = '/map/' + inputMapUrl;
      noMenu = true;
    }

    _this.args.startFrameId = 0;
    _this.args.lastFrameId = -1;

    if (mapUrl) {
      _this.loadMap({
        mapUrl: mapUrl
      });
    }

    _this.sprites = new _Bag.Bag();
    _this.world = null; // const ready = this.tileMap.ready;

    var noIntro = _Router.Router.query.nointro;
    var cards = [];

    if (noMenu) {
      noIntro = true;
    }

    if (!noIntro) {
      cards.push.apply(cards, _toConsumableArray(_this.introCards()));
    } else {
      cards.push(new _MainMenu.MainMenu({
        timeout: -1
      }, _assertThisInitialized(_this)));
    }

    _this.args.titlecard = new _Series.Series({
      cards: cards
    }, _assertThisInitialized(_this));

    if (!mapUrl) {
      _this.args.titlecard.play();
    }

    _this.args.noIntro = noIntro ? 'no-intro' : '';
    var debugKeys = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowUp', 'ArrowUp', 'ArrowUp', 'ArrowUp'];
    var debugSeq = new _Sequence.Sequence({
      keys: debugKeys,
      timing: 750
    });
    var konamiKeys = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA', 'Enter'];
    var konamiSeq = new _Sequence.Sequence({
      keys: konamiKeys,
      timing: 750
    });
    var gravityKeys = ['KeyS', 'KeyV', 'KeyG', 'KeyR', 'KeyA', 'KeyV'];
    var gravitySeq = new _Sequence.Sequence({
      keys: gravityKeys,
      timing: 750
    });
    _this.sequences = [debugSeq, konamiSeq, gravitySeq];
    _this.args.debugEnabled = false;
    _this.args.debugEditMode = false;
    _this.args.debugObjectCursor = 0;
    _this.args.debugObjectName = new _CharacterString.CharacterString({
      value: ''
    });
    _this.debugBank = {};
    debugSeq.addEventListener('complete', function (event) {
      if (_this.args.debugEnabled) {
        return;
      }

      _this.args.debugEnabled = true;
      console.log('Debug variable set.');
      _this.args.topLine.args.value = ' Debug variable set! ';
      _this.args.topLine.args.hide = '';

      _this.onTimeout(1750, function () {
        _this.args.topLine.args.value = '';
        _this.args.status.args.hide = 'hide';
      });
    });
    konamiSeq.addEventListener('complete', function (event) {
      if (_this.args.masterCheat) {
        return;
      }

      _this.args.masterCheat = true;
      _this.args.topLine.args.value = ' Master cheat detected. ';
      _this.args.topLine.args.hide = '';
      console.log('Master cheat detected.');

      _this.onTimeout(1750, function () {
        _this.args.topLine.args.value = '';
        _this.args.status.args.hide = 'hide';
      });
    });
    gravitySeq.addEventListener('complete', function (event) {
      if (!_this.controlActor) {
        return;
      }

      _this.controlActor.gravityCheat = !_this.controlActor.gravityCheat;
      _this.args.topLine.args.value = " Gravity cheat ".concat(_this.controlActor.gravityCheat ? 'on' : 'off', ". ");
      _this.args.topLine.args.hide = '';

      _this.onTimeout(1750, function () {
        _this.args.topLine.args.value = '';
        _this.args.status.args.hide = 'hide';
      });

      if (_this.controlActor.gravityCheat) {
        _this.controlActor.args.gravity *= 0.5;
      } else {
        _this.controlActor.args.gravity *= 2;
      }
    }); // console.log(this.debugSequence);

    _this.args.pauseMenu = new _PauseMenu.PauseMenu({}, _assertThisInitialized(_this));
    _this.particleObserver = new IntersectionObserver(function (entries, observer) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;

          if (entry.intersectionRation === 0) {
            entry.target.style.display = 'none';
            entry.target.remove();
          } else {
            delete entry.target.style.display;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }, {
      threshold: 0
    });
    _this.particles = new _Bag.Bag(function (i, s, a) {
      if (a === _Bag.Bag.ITEM_ADDED) {
        i.node && _this.particleObserver.observe(i.node);
        i.node && _this.tags.particles.appendChild(i.node);
      } else if (a === _Bag.Bag.ITEM_REMOVED) {
        i.remove();
      }
    });
    _this[Run] = 0;
    _this.effects = new _Bag.Bag();
    _this.maxCameraBound = 64;
    _this.cameraBound = 64;
    _this.args.particles = _this.particles.list;
    _this.args.effects = _this.effects.list;
    _this.args.maxFps = 120;
    _this.args.maxFps = 60;
    _this.args.currentActor = '';
    _this.args.xOffset = 0.5;
    _this.args.yOffset = 0.5;
    _this.args.xOffsetTarget = 0.5;
    _this.args.yOffsetTarget = 0.75;
    _this.args.topLine = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.status = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.focusMe = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.labelChar = new _CharacterString.CharacterString({
      value: 'Char: '
    });
    _this.args.labelX = new _CharacterString.CharacterString({
      value: 'x pos: '
    });
    _this.args.labelY = new _CharacterString.CharacterString({
      value: 'y pos: '
    });
    _this.args.demoIndicator = null;
    _this.args.labelGround = new _CharacterString.CharacterString({
      value: 'Grounded: '
    });
    _this.args.labelCamera = new _CharacterString.CharacterString({
      value: 'Camera: '
    });
    _this.args.labelAngle = new _CharacterString.CharacterString({
      value: 'Gnd theta: '
    });
    _this.args.labelGSpeed = new _CharacterString.CharacterString({
      value: 'Gnd spd: '
    });
    _this.args.labelXSpeed = new _CharacterString.CharacterString({
      value: 'X air spd: '
    });
    _this.args.labelYSpeed = new _CharacterString.CharacterString({
      value: 'Y air spd: '
    });
    _this.args.labelLayer = new _CharacterString.CharacterString({
      value: 'Layer: '
    });
    _this.args.labelMode = new _CharacterString.CharacterString({
      value: 'Mode: '
    });
    _this.args.labelFrame = new _CharacterString.CharacterString({
      value: 'Frame ID: '
    });
    _this.args.labelIgnore = new _CharacterString.CharacterString({
      value: 'Ignore: '
    });
    _this.args.labelFps = new _CharacterString.CharacterString({
      value: 'FPS: '
    });
    _this.args.labelAirAngle = new _CharacterString.CharacterString({
      value: 'Air theta: '
    });
    _this.args["char"] = new _CharacterString.CharacterString({
      value: '...'
    });
    _this.args.xPos = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.yPos = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.layer = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.gSpeed = new _CharacterString.CharacterString({
      value: 0,
      high: 199,
      med: 99,
      low: 49
    });
    _this.args.ground = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.xSpeed = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.ySpeed = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.mode = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.angle = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.ignore = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.cameraMode = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.airAngle = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.nowPlaying = new _CharacterString.CharacterString({
      value: 'Now playing'
    });
    _this.args.trackName = new _CharacterString.CharacterString({
      value: ''
    });
    _this.args.hideNowPlaying = 'hide-now-playing';

    _Bgm.Bgm.addEventListener('play', function (event) {
      _this.bgm = _this.meta.bgm; // console.log('PLAY', event.detail);

      if (!_this.args.audio) {
        event.preventDefault();
      }

      if (!event.detail) {
        _this.args.trackName.args.value = '';
        return;
      }

      _this.args.trackName.args.value = event.detail.TIT2 + ' by ' + event.detail.TPE1;
    });

    _Bgm.Bgm.addEventListener('stop', function (event) {
      _this.args.trackName.args.value = 'nothing!'; // console.log('STOP', event);
    });

    _Bgm.Bgm.addEventListener('pause', function (event) {// console.trace('PAUSE', event.detail);
    });

    _Bgm.Bgm.addEventListener('unpause', function (event) {
      // console.log(this.args.audio, 'UNPAUSE', event.detail);
      _this.args.audio || event.preventDefault();
    });

    _this.args.fpsSprite = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.frame = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.scoreLabel = new _CharacterString.CharacterString({
      value: 'SCORE:',
      color: 'yellow'
    });
    _this.args.timerLabel = new _CharacterString.CharacterString({
      value: 'TIME: ',
      color: 'yellow'
    });
    _this.args.ringLabel = new _CharacterString.CharacterString({
      value: 'RINGS: ',
      color: 'yellow'
    });
    _this.args.actClearLabel = new _CharacterString.CharacterString({
      value: '',
      color: 'yellow'
    });
    _this.args.dialogLines = [];
    _this.args.perfectBonusLabel = new _CharacterString.CharacterString({
      value: 'PERFECT BONUS: ',
      color: 'yellow'
    });
    _this.args.perfectBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.speedBonusLabel = new _CharacterString.CharacterString({
      value: 'SPEED BONUS: ',
      color: 'yellow'
    });
    _this.args.speedBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.ringBonusLabel = new _CharacterString.CharacterString({
      value: 'RING BONUS: ',
      color: 'yellow'
    });
    _this.args.ringBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.timeBonusLabel = new _CharacterString.CharacterString({
      value: 'TIME BONUS: ',
      color: 'yellow'
    });
    _this.args.timeBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.airBonusLabel = new _CharacterString.CharacterString({
      value: 'AIR TIME: ',
      color: 'yellow'
    });
    _this.args.airBonus = new _CharacterString.CharacterString({
      value: '0%'
    });
    _this.args.totalBonusLabel = new _CharacterString.CharacterString({
      value: 'TOTAL: ',
      color: 'yellow'
    });
    _this.args.totalBonus = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.rings = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.score = new _CharacterString.CharacterString({
      value: 0
    });
    _this.args.timer = new _CharacterString.CharacterString({
      value: '00:00'
    });
    _this.args.ntsc = 'ntsc';
    _this.args.frameId = -1;

    _this.settings.bindTo('displace', function (v) {
      return _this.args.displacement = v ? 'on' : 'off';
    });

    _this.settings.bindTo('outline', function (v) {
      return _this.args.outline = v;
    });

    _this.settings.bindTo('debugOsd', function (v) {
      return _this.args.debugOsd = v;
    });

    _this.settings.bindTo('showHud', function (v) {
      return _this.args.showHud = v;
    });

    _this.settings.bindTo('shortcuts', function (v) {
      return _this.args.shortcuts = v;
    });

    _this.settings.bindTo('showFps', function (v) {
      return _this.args.showFps = v;
    });

    _this.args.emeralds = [// 'green'
      // , 'cyan'
      // , 'white'
      // , 'orangered'
      // , 'yellow'
      // , 'purple'
    ];

    for (var setting in _this.settings) {
      var val = localStorage.getItem('sonic-3000-setting-v0.0.0=' + setting);

      try {
        var _JSON$parse;

        _this.settings[setting] = (_JSON$parse = JSON.parse(val)) !== null && _JSON$parse !== void 0 ? _JSON$parse : _this.settings[setting];
      } catch (e) {
        console.warn(e);
      }
    }

    _this.settings.bindTo(function (v, k) {
      localStorage.setItem('sonic-3000-setting-v0.0.0=' + k, JSON.stringify(v));
    });

    _this.args.blockSize = 32;
    _this.args.populated = false;
    _this.args.willStick = false;
    _this.args.stayStuck = false;
    _this.args.willStick = true;
    _this.args.stayStuck = true;
    _this.args.width = 32 * 16;
    _this.args.height = 32 * 9;
    _this.args.scale = 2;

    if (_Router.Router.query.noScale) {
      _this.args.width = 32 * 14 * 2;
      _this.args.height = 32 * 8 * 2;
      _this.args.scale = 1;
    }

    if (_Router.Router.query.bigScale) {
      _this.args.width = 32 * 60;
      _this.args.height = 32 * 34;
      _this.args.scale = 1;
    }

    _this.collisions = new Map();
    _this.args.x = _this.args.x || 0;
    _this.args.y = _this.args.y || 0;
    _this.args.fgLayers = [];
    _this.args.layers = [];
    _this.args.animation = '';
    _this.regions = new Set();
    _this.spawn = new Set();
    _this.auras = new Set();
    _this.recent = new Set();
    _this.actorsByName = {};
    _this.actorsById = {};
    _this.playable = new Set();
    _this.actors = new _Bag.Bag(function (i, s, a) {
      if (a == _Bag.Bag.ITEM_ADDED) {
        i.viewport = _assertThisInitialized(_this); // this.quadCell.insert(i, i.args);
        // this.quadCell.insert(i, {x: i.args.x - i.args.width / 2, y: i.args.y});
        // this.quadCell.insert(i, {x: i.args.x + i.args.width / 2, y: i.args.y});

        _this.setColCell(i);

        if (i instanceof _Region.Region) {
          _this.regions.add(i);
        }

        if (i.controllable) {
          _this.playable.add(i);
        }

        _this.actorsByName[i.args.name] = i;
        _this.actorsById[i.args.id] = i;

        _this.objectDb.add(i);
      } else if (a == _Bag.Bag.ITEM_REMOVED) {
        i.viewport = null;
        i.remove();

        if (i[ColCell]) {
          _this.playable["delete"](i);

          i[ColCell]["delete"](i);
        }

        if (i instanceof _Region.Region) {
          _this.regions["delete"](i);
        }

        _this.auras["delete"](i);

        delete _this.actorsById[i.args.name];
        delete _this.actorsById[i.args.id];
        delete i[ColCell]; // this.quadCell.remove(i);

        _this.objectDb.remove(i);
      }
    });
    var critiera = [/^Art\s+$/, /^Collision\s+$/, /^Destructible\s+$/];

    var comparator = function comparator() {};

    _this.layerDb = new _Classifier.Classifier(critiera, comparator);
    _this.objectDb = new _Classifier.Classifier(Object.values(_ObjectPalette.ObjectPalette));
    _this.blocks = new _Bag.Bag();
    _this.args.blocks = _this.blocks.list;
    _this.args.actors = _this.actors.list;

    _this.listen(window, 'gamepadconnected', function (event) {
      return _this.padConnected(event);
    });

    _this.listen(window, 'gamepaddisconnected', function (event) {
      return _this.padRemoved(event);
    });

    _this.colCellDiv = 0.75 * (_this.args.width > _this.args.height ? _this.args.width : _this.args.height);
    _this.colCellCache = new Map();
    _this.colCells = new Map();
    _this[ActorPointCache] = new Map();
    _this.startTime = null;
    _this.args.audio = true;
    _this.nextControl = false;
    _this.updateStarted = new Set();
    _this.updateEnded = new Set();
    _this.updated = new Set();
    _this.args.xBlur = 0;
    _this.args.yBlur = 0; // this.args.controlCard = View.from(require('../cards/sonic-controls.html'));

    _this.args.controlCard = _View2.View.from(require('../cards/basic-controls.html'));
    _this.args.moveCard = _View2.View.from(require('../cards/basic-moves.html'));
    _this.args.isRecording = false;
    _this.args.isReplaying = false;
    _this.replayInputs = [];
    _this.replayFrames = new Map();
    _this.args.standalone = '';
    _this.args.fullscreen = '';
    _this.args.initializing = 'initializing';
    _this.args.muteSwitch = new _ClickSwitch.ClickSwitch();
    _this.args.muteSwitch.args.active = !!JSON.parse(localStorage.getItem('sonic-3000-audio-enabled') || 0);

    _this.args.muteSwitch.args.bindTo('active', function (v) {
      return _this.args.audio = v;
    });

    _this.args.bindTo('audio', function (v) {
      localStorage.setItem('sonic-3000-audio-enabled', v);

      if (_this.args.started) {
        _this.onNextFrame(function () {
          return v ? _Bgm.Bgm.unpause() : _Bgm.Bgm.pause();
        });
      }
    });

    _this.args.showConsole = null;

    _this.listen(document, 'keydown', function (event) {
      if (event.key === 'Escape') {
        _this.args.showConsole = false;
      }

      if (event.key === 'F10' || event.key === '`') {
        if (!_this.args.subspace) {
          _this.args.subspace = new _Console.Console({
            scroller: _this.tags.subspace,
            path: {
              'input': _Input.Input,
              'move': _Move.Move,
              'impulse': _Impulse.Impulse,
              'pos': _Pos.Pos,
              'set': _Settings.Settings,
              'spawn': _Spawn.Spawn
            }
          }); // this.args.subspace.tasks.bindTo((v,k) => {
          // 	console.log(k,v);
          // });
        }

        _this.args.showConsole = _this.args.showConsole ? null : 'showConsole';
        event.preventDefault();
      }
    });

    _this.args.bindTo('shakeY', function (v, k, t, d, p) {
      if (!_this.controlActor || !_this.controlActor.controller || !_this.controlActor.controller.rumble) {
        return;
      }

      if (Math.abs(v) > 40 && Math.abs(v) > Math.abs(p)) {
        _this.controlActor.controller && _this.controlActor.controller.rumble({
          duration: 4 * v,
          strongMagnitude: 1.0,
          weakMagnitude: 1.0
        });
      } else if (Math.abs(v) > 20 && Math.abs(v) > Math.abs(p)) {
        _this.controlActor.controller && _this.controlActor.controller.rumble({
          duration: 8 * v,
          strongMagnitude: v / 20,
          weakMagnitude: 1.0
        });
      } else if (Math.abs(v) > 1) {
        _this.controlActor.controller && _this.controlActor.controller.rumble({
          duration: 16 * v,
          strongMagnitude: 0.1,
          weakMagnitude: 1.0
        });
      }
    });

    _this.args.bindTo('showConsole', function (v) {
      if (!_this.args.subspace) {
        return;
      }

      if (v) {
        _this.onNextFrame(function () {
          return _this.args.subspace.focus();
        });

        _this.args.showConsole = 'showConsole';
      } else {
        _this.onNextFrame(function () {
          return _this.tags.viewport.focus();
        });

        _this.args.showConsole = null;
      }
    });

    _this.controller = new _Controller.Controller({
      deadZone: 0.2
    });

    _this.controller.zero();

    return _this;
  }

  _createClass(Viewport, [{
    key: "loadMap",
    value: function loadMap(_ref) {
      var _this2 = this;

      var mapUrl = _ref.mapUrl,
          _ref$networked = _ref.networked,
          networked = _ref$networked === void 0 ? false : _ref$networked;
      var tileMap = new _TileMap.TileMap({
        mapUrl: mapUrl
      });
      this.currentMap = mapUrl;
      this.args.networked = networked;
      this.tileMap = tileMap;
      this.args.started = false;
      this.args.running = false;
      var load = new _LoadingCard.LoadingCard({
        timeout: -1,
        text: 'loading ... 0%'
      }, this);
      tileMap.addEventListener('level-progress', function (event) {
        var _event$detail = event.detail,
            received = _event$detail.received,
            length = _event$detail.length,
            done = _event$detail.done;
        load.args.text = "loading level ... ".concat((done * 100).toFixed(4), "%");
      });
      tileMap.addEventListener('texture-progress', function (event) {
        var _event$detail2 = event.detail,
            received = _event$detail2.received,
            length = _event$detail2.length,
            done = _event$detail2.done;
        load.args.text = "loading textures ... ".concat((done * 100).toFixed(4), "%");

        if (done === 1) {
          load.args.text = "initializing...";
        }
      });
      tileMap.ready.then(function () {
        _this2.args.layers.length = 0;
        var layers = _this2.tileMap.tileLayers;
        var layerCount = layers.length;

        for (var i = 0; i < layerCount; i++) {
          var layer = new _Layer.Layer({
            layerId: i,
            viewport: _this2,
            name: layers[i].name,
            width: _this2.args.width,
            height: _this2.args.height
          });

          if (layers[i].name.substring(0, 10) === 'Foreground') {
            _this2.args.fgLayers.push(layer);
          } else {
            _this2.args.layers.push(layer);
          }
        }
      }); // tileMap.ready.then(() => load.args.text = `starting level`);
      // if(mapUrl === '/map/see-saw-test.json')
      // {
      // 	tileMap.addMap('/map/appended-map.json');
      // }

      this.args.titlecard = new _Series.Series({
        cards: [load]
      }, this);
      this.args.titlecard.play();
      return tileMap.ready.then(function () {
        return _this2.startLevel();
      });
    }
  }, {
    key: "fullscreen",
    value: function fullscreen() {
      var _this3 = this;

      this.exitFullscreen();
      this.args.focusMe.args.hide = 'hide';
      this.initScale = this.args.scale;
      this.showStatus(3500, ' hit escape to revert. ');
      this.tags.viewport.node.requestFullscreen().then(function (res) {
        _this3.onTimeout(100, function () {
          _this3.fitScale();

          _this3.args.fullscreen = 'fullscreen';
        });
      })["catch"](function (e) {
        return console.error(e);
      });
    }
  }, {
    key: "exitFullscreen",
    value: function exitFullscreen() {
      if (document.fullscreenElement) {
        document.exitFullscreen();
        this.showStatus(0, '');
        this.args.focusMe.args.hide = '';
        this.args.fullscreen = '';
        return;
      }
    }
  }, {
    key: "fitScale",
    value: function fitScale() {
      var fill = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var hScale = window.innerHeight / this.args.height;
      var vScale = window.innerWidth / this.args.width;

      if (fill) {
        this.args.scale = hScale > vScale ? hScale : vScale;
      } else {
        this.args.scale = hScale > vScale ? vScale : hScale;
      }

      this.tags.frame && this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      });
    }
  }, {
    key: "showStatus",
    value: function showStatus(timeout, text) {
      var _this4 = this;

      this.args.status.args.hide = '';
      this.args.status.args.value = text;

      if (timeout >= 0) {
        this.onTimeout(timeout, function () {
          _this4.args.status.args.hide = 'hide';
        });
      }
    }
  }, {
    key: "onAttached",
    value: function onAttached(event) {
      var _this5 = this;

      _Settings.Settings.viewport = this;
      _Impulse.Impulse.viewport = this;
      _Input.Input.viewport = this;
      _Move.Move.viewport = this;
      _Pos.Pos.viewport = this;
      _Spawn.Spawn.viewport = this;
      this.buildDetect();
      this.cpuDetect();
      this.gpuDetect();
      this.onTimeout(100, function () {
        return _this5.fitScale(false);
      });
      this.onTimeout(5500, function () {
        return _this5.args.ntsc = '';
      });
      this.onTimeout(_Router.Router.query.map || _Router.Router.query.nointro ? 0 : 23500, function () {
        _this5.args.focusMe.args.value = ' Click here to enable keyboard control. ';
      });
      this.tags.blurDistance.setAttribute('style', "filter:url(#motionBlur)");
      this.tags.blurDistanceFg.setAttribute('style', "filter:url(#motionBlur)");
      this.listen(this.tags.frame, 'click', function (event) {
        if (event.target === _this5.tags.frame.node) {
          _this5.tags.viewport.focus();
        }
      });
      this.listen(window, 'resize', function (event) {
        _this5.onTimeout(100, function () {
          return _this5.fitScale(false);
        });
      });
      this.listen(document, 'fullscreenchange', function (event) {
        _this5.onTimeout(100, function () {
          return _this5.fitScale(false);
        });

        if (!document.fullscreenElement) {
          _this5.args.scale = _this5.initScale;
          _this5.args.fullscreen = '';
          return;
        }
      });
      this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      }); // this.update();

      if (!this.startTime) {
        this.startTime = 0;
      }

      this.args.started = false;
      this.args.running = false;
      this.args.paused = false;
      this.listen(document.body, 'click', function (event) {
        if (event.target !== document.body) {
          return;
        }

        _this5.tags.viewport.focus();
      });
      this.args.scale = this.args.scale || 1;

      var keyboard = _Keyboard.Keyboard.get();

      keyboard.listening = true;
      keyboard.focusElement = this.tags.viewport.node;
      keyboard.codes.bindTo(function (v, k, t, d) {
        if (v === -1) {
          _this5.sequences.map(function (s) {
            return s.check(k);
          });
        }
      });
      this.tags.viewport.node.focus();

      if (0 || window.matchMedia('(display-mode: standalone)').matches || window.matchMedia('(display-mode: fullscreen)').matches) {
        this.args.standalone = 'standalone';
        document.title = 'Sonic 3000';
        this.listen(window, 'resize', function () {
          return _this5.fitScale(false);
        });
        this.onTimeout(100, function () {
          return _this5.fitScale(false);
        });
      }

      this.onTimeout(100, function () {
        return _this5.args.initializing = '';
      });
    }
  }, {
    key: "setZoneCard",
    value: function setZoneCard() {
      this.args.zonecard = new _Titlecard.Titlecard({
        waitFor: this.tileMap.ready
      }, this);

      if (this.tileMap.mapData && this.tileMap.mapData.properties) {
        var _iterator2 = _createForOfIteratorHelper(this.tileMap.mapData.properties),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var property = _step2.value;
            var name = property.name.replace(/-/g, '_');
            this.meta[name] = property.value;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      var line1 = this.meta.titlecard_title_1;
      var line2 = this.meta.titlecard_title_2;
      var author = this.meta.titlecard_author;
      var number = this.meta.titlecard_number;
      this.args.zonecard.args.firstLine = line1;
      this.args.zonecard.args.secondLine = line2;
      this.args.zonecard.args.creditLine = author;
      this.args.zonecard.args.actNumber = number;
      this.args.actName = "".concat(line1, " ").concat(line2, " ").concat(number);
      this.args.titlecard = new _Series.Series({
        cards: [this.args.zonecard]
      }, this);
      return this.args.titlecard.play();
    }
  }, {
    key: "fillBackground",
    value: function fillBackground() {
      if (this.meta.backdrop && this.args.bg === this.meta.backdrop) {
        return;
      }

      var backdropClass = _BackdropPalette.BackdropPalette[this.meta.backdrop];
      delete this.args.backdrop;

      if (backdropClass) {
        this.args.backdrop = new backdropClass();
      } else {
        this.args.backdrop = null;
      }

      this.args.theme = this.meta.theme || 'construct';
      this.args.bg = this.meta.backdrop;
    }
  }, {
    key: "startLevel",
    value: function startLevel() {
      var _this6 = this;

      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.clearDialog();
      this.hideDialog();
      refresh && this.setZoneCard();

      if (this.meta.bgm) {
        if (this.bgm !== this.meta.bgm) {
          _Bgm.Bgm.fadeOut(250).then(function () {
            _Bgm.Bgm.play(_this6.meta.bgm, true);
          });
        }
      }

      if (!this.args.audio) {
        _Bgm.Bgm.pause();
      }

      this.args.startFrameId = this.args.frameId;
      this.fillBackground();
      this.populateMap();

      if (this.args.networked) {
        var sonic = new _Chalmers.Chalmers({
          name: 'Player 1'
        }, this);
        var tails = new _Seymour.Seymour({
          name: 'Player 2'
        }, this);
        var startDef = this.defsByName.get('player-start');
        sonic.args.x = startDef.x;
        sonic.args.y = startDef.y;
        tails.args.x = startDef.x;
        tails.args.y = startDef.y;
        this.spawn.add({
          object: sonic
        });
        this.spawn.add({
          object: tails
        });
        this.auras.add(sonic);
        this.auras.add(tails);
        this.actors.add(sonic);
        this.actors.add(tails);

        if (this.args.playerId === 1) {
          this.nextControl = sonic;
          this.remotePlayer = tails;
        } else if (this.args.playerId === 2) {
          this.remotePlayer = sonic;
          this.nextControl = tails;
        }
      }

      for (var _i = 0, _arr = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i < _arr.length; _i++) {
        var layer = _arr[_i];
        layer.args.destroyed = false;
      }

      if (!this.args.networked) {
        var actors = this.actors.list;

        if (!this.playableIterator) {
          this.playableIterator = this.playable.entries();
        }

        if (Object.values(this.args.actors)[0] && Object.values(this.args.actors)[0].controllable) {
          this.nextControl = Object.values(this.args.actors)[0];
        }
      }

      if (this.nextControl && this.nextControl.controller) {
        this.nextControl.controller.zero();
      } else if (this.controller) {
        this.controller.zero();
      }

      _Keyboard.Keyboard.get().reset();

      this.args.started = false; // Bgm.stop('MENU_THEME');
      // Bgm.stop('TITLE_THEME');

      _Bgm.Bgm.unpause();

      this.args.zonecard.played.then(function () {
        if (_this6.args.nowPlaying.args.value) {
          _this6.onFrameOut(30, function () {
            return _this6.args.hideNowPlaying = '';
          });

          _this6.onFrameOut(800, function () {
            return _this6.args.hideNowPlaying = 'hide-now-playing';
          });
        }

        _this6.args.startFrameId = _this6.args.frameId;

        if (_Router.Router.query.start) {
          var start = _Router.Router.query.start;

          if (start.match(/\d+,\d+/)) {
            var _start$split = start.split(','),
                _start$split2 = _slicedToArray(_start$split, 2),
                _start$split2$ = _start$split2[0],
                x = _start$split2$ === void 0 ? 128 : _start$split2$,
                _start$split2$2 = _start$split2[1],
                y = _start$split2$2 === void 0 ? 128 : _start$split2$2;

            _this6.nextControl.args.x = Number(x);
            _this6.nextControl.args.y = Number(y);
          } else if (_this6.defsByName.has(start)) {
            var point = _this6.defsByName.get(start);

            _this6.nextControl.args.x = Number(point.x);
            _this6.nextControl.args.y = Number(point.y);
          }

          if (_this6.nextControl.follower) {
            _this6.nextControl.follower.args.x = _this6.nextControl.x;
            _this6.nextControl.follower.args.y = _this6.nextControl.y;

            _this6.setColCell(_this6.nextControl.follower);
          }
        } else if (!_this6.args.isReplaying && !_this6.args.isRecording) {
          _this6.args.demoIndicator = null;

          if (_this6.nextControl) {
            var storedPosition = _this6.getCheckpoint(_this6.nextControl.args.canonical);

            if (storedPosition) {
              var checkpoint = storedPosition ? _this6.actorsById[storedPosition.checkpointId] : null;

              if (checkpoint) {
                _this6.args.startFrameId = _this6.args.frameId - storedPosition.frames;
                checkpoint.args.wasActive = true;
                checkpoint.args.active = true;
                _this6.nextControl.args.x = checkpoint.x;
                _this6.nextControl.args.y = checkpoint.y;

                if (_this6.nextControl.follower) {
                  _this6.nextControl.follower.args.x = checkpoint.x;
                  _this6.nextControl.follower.args.y = checkpoint.y;

                  _this6.setColCell(_this6.nextControl.follower);
                }

                _this6.args.xOffset = 0.5;
                _this6.args.yOffset = 0.5;
              }
            }
          }
        }

        _this6.args.level = 'level';
        _this6.args.fade = false;
        _this6.args.started = true;
        _this6.args.running = true;
        _this6.startTime = Date.now();

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'zone',
            eventAction: 'started',
            eventLabel: "".concat(_this6.args.actName)
          });
        }
      });
    }
  }, {
    key: "takeInput",
    value: function takeInput(controller) {
      var keyboard = _Keyboard.Keyboard.get();

      keyboard.update();

      if (!this.gamepad && !this.args.cutScene) {
        controller.readInput({
          keyboard: keyboard
        });
        this.args.inputType = 'input-keyboard';
      } else if (!this.args.cutScene) {
        var gamepads = navigator.getGamepads();

        for (var i = 0; i < gamepads.length; i++) {
          var gamepad = gamepads[i];

          if (!gamepad) {
            continue;
          }

          controller.readInput({
            keyboard: keyboard,
            gamepad: gamepad
          });

          if (gamepad) {
            var gamepadId = String(gamepad.id);

            if (gamepadId.match(/xbox/i)) {
              this.args.inputType = 'input-xbox';
            } else if (gamepadId.match(/playstation/i)) {
              this.args.inputType = 'input-playstation';
            } else {
              this.args.inputType = 'input-generic';
            }
          } else {
            this.args.inputName = 'keyboard';
            this.args.inputType = 'input-keyboard';
          }
        }
      } else {
        this.controlActor.args.idleTime = 0;
      }

      if (this.controlActor && this.args.debugEditMode) {
        if (controller.buttons[0] && controller.buttons[0].time === 1) {
          var defKeys = Object.keys(_ObjectPalette.ObjectPalette);
          var debugObjectType = defKeys[this.args.debugObjectCursor];

          if (!this.debugBank[debugObjectType]) {
            this.debugBank[debugObjectType] = new _ObjectPalette.ObjectPalette[debugObjectType]();
          }

          var spawnObject = this.debugBank[debugObjectType];
          this.spawn.add({
            object: spawnObject
          });

          if (spawnObject.controllable) {
            spawnObject.args.name = 'SPAWN';
            this.playable.add(spawnObject);
          }

          spawnObject[Run] = this[Run];
          spawnObject.args.x = this.controlActor.x;
          spawnObject.args.y = this.controlActor.y;
          delete this.debugBank[debugObjectType];
        }

        if (controller.buttons[1] && controller.buttons[1].time === 1) {
          this.args.debugObjectCursor++;

          var _defKeys = Object.keys(_ObjectPalette.ObjectPalette);

          if (this.args.debugObjectCursor >= _defKeys.length) {
            this.args.debugObjectCursor = 0;
          }

          var _debugObjectType = _defKeys[this.args.debugObjectCursor];

          if (!this.debugBank[_debugObjectType]) {
            this.debugBank[_debugObjectType] = new _ObjectPalette.ObjectPalette[_debugObjectType]();
          }

          while (this.tags.spawnPreview.node.firstChild) {
            this.tags.spawnPreview.node.firstChild.remove();
          }

          this.debugBank[_debugObjectType].render(this.tags.spawnPreview.node);

          this.args.debugObjectName.args.value = _debugObjectType;
        }

        if (controller.buttons[2] && controller.buttons[2].time === 1) {
          this.args.debugObjectCursor--;

          var _defKeys2 = Object.keys(_ObjectPalette.ObjectPalette);

          if (this.args.debugObjectCursor <= 0) {
            this.args.debugObjectCursor = _defKeys2.length - 1;
          }

          var _debugObjectType2 = _defKeys2[this.args.debugObjectCursor];

          if (!this.debugBank[_debugObjectType2]) {
            this.debugBank[_debugObjectType2] = new _ObjectPalette.ObjectPalette[_debugObjectType2]();
          }

          while (this.tags.spawnPreview.node.firstChild) {
            this.tags.spawnPreview.node.firstChild.remove();
          }

          this.debugBank[_debugObjectType2].render(this.tags.spawnPreview.node);

          this.args.debugObjectName.args.value = _debugObjectType2;
        }
      }

      if (this.args.debugEnabled) {
        if (controller.buttons[8] && controller.buttons[8].time === 1) {
          this.args.debugEditMode = !this.args.debugEditMode;
          this.settings.debugOsd = this.args.debugEditMode;
        }
      }

      if (controller.buttons[2011] && controller.buttons[2011].time === 1) {
        this.fullscreen();
      }

      if (controller.buttons[2008] && controller.buttons[2008].time === 1) {
        this.args.muteSwitch.args.active = !this.args.muteSwitch.args.active;
      }

      if (controller.buttons[2009] && controller.buttons[2009].time === 1) {
        this.settings.debugOsd = !this.settings.debugOsd;
      }

      if (controller.buttons[1020] && controller.buttons[1020].time === 1) {
        if (!this.args.fullscreen) {
          this.args.paused ? this.unpauseGame() : this.pauseGame();
        }

        this.exitFullscreen();
      }

      if (!this.args.networked && controller.buttons[1011] && controller.buttons[1011].time > 0) {
        this.args.pauseMenu.input(controller); // this.args.paused = 1;
      }

      if (!this.args.networked && !this.args.paused) {
        if (!this.dontSwitch && controller.buttons[11] && controller.buttons[11].time === 1) {
          this.playableIterator = this.playableIterator || this.playable.entries();
          var next = this.playableIterator.next();

          if (next.done) {
            this.playableIterator = false;
            this.playableIterator = this.playable.entries();
            next = this.playableIterator.next();
          }

          if (next.value) {
            this.nextControl = next.value[0];
            this.dontSwitch = 3;
          }
        }
      }

      if (this.args.started) {
        if (this.controlActor) {
          this.args.currentSheild = this.controlActor.args.currentSheild ? this.controlActor.args.currentSheild.type : '';
        }

        if (controller.buttons[9] && controller.buttons[9].active && controller.buttons[9].time === 1) {
          if (this.args.paused) {
            this.unpauseGame();
            this.args.started && _Bgm.Bgm.unpause();
          } else {
            this.pauseGame();
            this.args.started && _Bgm.Bgm.pause();
          }
        }

        if (this.args.isRecording) {
          if (!this.args.demoIndicator) {
            this.args.demoIndicator = new _CharacterString.CharacterString({
              value: '⏺ REC',
              color: 'red'
            });
          }

          var frame = this.args.frameId;
          var input = controller.serialize();
          var args = {};

          if (this.controlActor) {
            args = _defineProperty({}, this.controlActor.args.id, {
              x: this.controlActor.args.x,
              y: this.controlActor.args.y,
              gSpeed: this.controlActor.args.gSpeed,
              xSpeed: this.controlActor.args.xSpeed,
              ySpeed: this.controlActor.args.ySpeed
            });
          }

          this.replayInputs[frame] = {
            frame: frame,
            input: input,
            args: args
          };
        }
      }

      controller.update({
        gamepad: this.gamepad
      });
    }
  }, {
    key: "moveCamera",
    value: function moveCamera() {
      if (!this.controlActor) {
        return;
      }

      if (this.cameraBound <= this.maxCameraBound) {
        this.cameraBound = this.maxCameraBound;
      } else {
        this.cameraBound -= 0.05 * this.cameraBound;
      }

      var cameraSpeed = 30;
      var actor = this.controlActor;

      if (actor.args.standingOn && actor.args.standingOn.isVehicle) {
        actor = actor.args.standingOn;
      }

      if (actor.focused) {
        if (this.cameraMode !== 'panning' && actor.args.cameraMode === 'panning') {
          var focus = actor.focused;
          this.cameraBound = this.maxCameraBound = Math.max(Math.abs(focus.x - actor.x), Math.abs(focus.y - actor.y));
          this.args.x -= actor.x - focus.x;
          this.args.y -= actor.y - focus.y;
        }

        this.cameraMode = actor.args.cameraMode;
        actor = actor.focused;
      } else {
        this.cameraMode = actor.args.cameraMode;
      }

      var highJump = actor.args.highJump;
      var deepJump = actor.args.deepJump;
      var falling = actor.args.falling;
      var fallSpeed = actor.args.ySpeed;

      switch (this.cameraMode) {
        case 'panning':
          this.args.xOffsetTarget = 0.5;
          this.args.yOffsetTarget = 0.85;
          cameraSpeed = 8;
          break;

        case 'cutScene':
          this.args.xOffsetTarget = [0.50, 0.25, 0.50, 0.75][actor.args.mode];
          this.args.yOffsetTarget = [0.75, 0.50, 0.25, 0.50][actor.args.mode];
          this.maxCameraBound = 64;
          cameraSpeed = 15;
          break;

        case 'corkscrew':
          this.args.xOffsetTarget = 0.5;
          this.args.yOffsetTarget = 0.75;
          this.maxCameraBound = 96;
          cameraSpeed = 64;
          break;

        case 'normal':
          this.args.xOffsetTarget = [0.50, 0.25, 0.50, 0.75][actor.args.mode];
          this.args.yOffsetTarget = [0.55, 0.50, 0.45, 0.50][actor.args.mode];
          this.maxCameraBound = 64;
          cameraSpeed = 24;
          break;

        case 'airplane':
          {
            var _xSpeed = actor.args.xSpeed;
            var absSpeed = Math.abs(_xSpeed);
            var shiftSpeed = 5;
            cameraSpeed = 20;
            var speedBias = Math.max(absSpeed / 100, 0.45) * -Math.sign(_xSpeed);
            this.args.xOffsetTarget = 0.5 + speedBias;
            this.args.yOffsetTarget = 0.5;
            break;
          }
        // case 'railcar-aerial':
        // case 'railcar-normal':
        // 	this.args.xOffsetTarget = 0.5;
        // 	this.args.yOffsetTarget = 0.5;
        // 	this.maxCameraBound = 0;
        // 	cameraSpeed = 0;
        // 	break;

        case 'aerial':
          this.args.xOffsetTarget = 0.5;
          cameraSpeed = 25;

          if (!actor.args.flying && (deepJump || highJump)) {
            if (fallSpeed < 0) {
              this.args.yOffsetTarget = 0.75;
            } else {
              this.args.yOffsetTarget = 0.35; // cameraSpeed = 15;
            }
          } else {
            this.args.yOffsetTarget = 0.5;
          }

          break;

        case 'hooked':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.60;
          this.maxCameraBound = 1;
          cameraSpeed = 25;
          break;

        case 'tube':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.50;
          this.maxCameraBound = 64;
          cameraSpeed = 45;
          break;

        case 'cinematic':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.50;
          this.maxCameraBound = 1;
          cameraSpeed = 0;
          break;

        case 'cliff':
          this.args.xOffsetTarget = 0.50 + -0.02 * actor.args.direction;
          this.args.yOffsetTarget = 0.45;
          cameraSpeed = 30;
          break;

        case 'bridge':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.40;
          cameraSpeed = 18;
          break;

        case 'boss':
          this.args.xOffsetTarget = 0.50;
          this.args.yOffsetTarget = 0.72;
          this.maxCameraBound = 64;
          cameraSpeed = 24;
          break;

        case 'draggable':
          this.args.xOffsetTarget = 0.5;
          this.args.yOffsetTarget = 0.5;
          this.maxCameraBound = 48;
          cameraSpeed = 3;
          break;

        default:
          this.maxCameraBound = 64;
          cameraSpeed = 25;
          break;
      }

      var gSpeed = actor.args.gSpeed;
      var xSpeed = actor.args.xSpeed;
      var biasModes = ['normal', 'bridge', 'cliff', 'aerial', 'hooked', 'cutScene', 'tube', 'hooked', 'corkscrew'];

      if (biasModes.includes(this.cameraMode) && !actor.args.pushing && actor.args.modeTime > 0) {
        if (actor.args.hangingFrom) {
          xSpeed = actor.args.hangingFrom.args.xSpeed;
        }

        if (actor.args.standingLayer) {
          gSpeed += actor.args.standingLayer.offsetXChanged;
        }

        var grounded = !actor.args.falling;

        var _absSpeed = Math.abs(grounded ? gSpeed : xSpeed);

        var _shiftSpeed = 17;

        var _speedBias = Math.min(_absSpeed / _shiftSpeed, 1) * -Math.sign(gSpeed || xSpeed);

        switch (actor.args.mode) {
          case 0:
            this.args.xOffsetTarget += _speedBias * 0.4;
            break;

          case 1:
            this.args.yOffsetTarget += _speedBias * 0.4;
            break;

          case 2:
            this.args.xOffsetTarget -= _speedBias * 0.4;
            break;

          case 3:
            this.args.yOffsetTarget -= _speedBias * 0.4;
            break;
        }

        this.args.speedBias = _speedBias;
      }

      this.args.xOffsetTarget = Math.max(0, Math.min(1, this.args.xOffsetTarget));

      if (actor.args.jumping && actor.args.fallTime > 15) {
        this.maxCameraBound = 128;

        if (deepJump || highJump) {
          cameraSpeed *= 0.75;
        }
      }

      var ySpeedBias = 0;
      var ySpeedMax = 512;
      var ySpeed = 0;

      if (this.cameraMode !== 'boss' && this.cameraMode !== 'rocket' && actor.args.modeTime > 0) {
        if (!actor.args.falling && actor.args.mode === 1) {
          ySpeedMax = actor.args.gSpeedMax;
          ySpeed = actor.args.gSpeed / 12;
        } else if (!actor.args.falling && actor.args.mode === 3) {
          ySpeedMax = actor.args.gSpeedMax;
          ySpeed = -actor.args.gSpeed / 12;
        }

        if (actor.args.rolling) {
          ySpeed /= 4;
        }

        if (actor.args.falling && actor.args.ySpeed > 0) {
          if (deepJump || highJump) {
            ySpeed = actor.args.ySpeed;
          }

          if (actor.args.ySpeed > 0) {
            ySpeedBias += actor.args.ySpeed > 24 ? 0.5 : 0;
          } else {
            ySpeedBias += actor.args.deepJump || actor.args.ySpeed < -24 ? -0.5 : 0;
          }
        }

        if (actor.args.hangingFrom) {
          ySpeed = actor.args.ySpeed;
        }

        ySpeedBias += ySpeed / ySpeedMax;

        if (actor.args.hangingFrom) {
          ySpeedBias += 0.2;
        }
      }

      this.args.yOffsetTarget += actor.args.cameraBias - ySpeedBias;

      if (cameraSpeed) {
        var xOffsetDiff = this.args.xOffsetTarget - this.args.xOffset;
        var yOffsetDiff = this.args.yOffsetTarget - this.args.yOffset;
        this.args.xOffset += xOffsetDiff / cameraSpeed;
        this.args.yOffset += yOffsetDiff / cameraSpeed;
      } else {
        this.args.xOffset = this.args.xOffsetTarget;
        this.args.yOffset = this.args.yOffsetTarget;
      }

      var center = actor.rotatePoint(0, -actor.args.height / 2);
      var actorX = center[0] + -actor.x;
      var actorY = center[1] + -actor.y;
      var xNext = actorX + center[0] + this.args.width * this.args.xOffset;
      var yNext = actorY + center[1] + this.args.height * this.args.yOffset;
      var xDiff = this.args.x + -xNext;
      var yDiff = this.args.y + -yNext;
      var distance = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
      var angle = Math.atan2(yDiff, xDiff);
      var maxDistance = this.cameraBound;
      var dragDistance = Math.min(maxDistance, distance);
      var snapFactor = Math.abs(dragDistance / maxDistance);
      var snapFrames = this.cameraMode === 'panning' ? 6 : 12;
      var snapSpeed = dragDistance / snapFrames;
      var x = xNext + dragDistance * Math.cos(angle);
      var y = yNext + dragDistance * Math.sin(angle);
      x = x - snapFactor * Math.cos(angle) * snapSpeed;
      y = y - snapFactor * Math.sin(angle) * snapSpeed / 2;

      if (x > 0 && !this.meta.wrapX) {
        x = 0;
      }

      if (y > 0 && !this.meta.wrapY) {
        y = 0;
      }

      var playableHeight = this.meta.deathLine || this.tileMap.mapData.height * 32;
      var xMax = -(this.tileMap.mapData.width * 32) + this.args.width;
      var yMax = -playableHeight + this.args.height;

      if (x < xMax && !this.meta.wrapX) {
        x = xMax;
      }

      if (y < yMax && !this.meta.wrapY) {
        y = yMax;
      }

      this.args.shakeX *= -0.95;
      this.args.shakeY *= -0.95;

      if (actor.args.dead && !actor.args.respawning) {
        this.args.x = x + this.args.shakeX;
      } else {
        this.args.x = x + this.args.shakeX;
        this.args.y = y + this.args.shakeY;
      }
    }
  }, {
    key: "applyMotionBlur",
    value: function applyMotionBlur() {
      var controlActor = this.controlActor;

      if (this.settings.blur && controlActor && this.tags.blur) {
        var xMoved = this.args.x - this.xPrev;
        var yMoved = this.args.y - this.yPrev;
        var xBlur = Math.pow(Number(xMoved) / 5, 2);
        var yBlur = Math.pow(Number(yMoved) / 5, 2);
        var maxBlur = 32;
        xBlur = xBlur < maxBlur ? xBlur : maxBlur;
        yBlur = yBlur < maxBlur ? yBlur : maxBlur;
        var blur = Math.sqrt(Math.pow(xBlur, 2) + Math.pow(yBlur, 2)) / 3;
        var blurAngle = Math.atan2(yMoved, xMoved);

        if (blur > 0.5) {
          this.tags.blurAngle.setAttribute('style', "transform:rotate(calc(1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleFg.setAttribute('style', "transform:rotate(calc(1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleCancel.setAttribute('style', "transform:rotate(calc(-1rad * ".concat(blurAngle, "))"));
          this.tags.blurAngleCancelFg.setAttribute('style', "transform:rotate(calc(-1rad * ".concat(blurAngle, "))"));
          this.tags.blur.setAttribute('stdDeviation', "".concat(blur * 0.75 - 1, ", 0"));
        } else {
          this.tags.blurAngle.setAttribute('style', "transform:none;");
          this.tags.blurAngleFg.setAttribute('style', "transform:none;");
          this.tags.blurAngleCancel.setAttribute('style', "transform:none;");
          this.tags.blurAngleCancelFg.setAttribute('style', "transform:none;");
          this.tags.blur.removeAttribute('stdDeviation');
        }

        this.xPrev = this.args.x;
        this.yPrev = this.args.y;
      } else {
        this.tags.blurAngle.setAttribute('style', "transform:none;");
        this.tags.blurAngleFg.setAttribute('style', "transform:none;");
        this.tags.blurAngleCancel.setAttribute('style', "transform:none;");
        this.tags.blurAngleCancelFg.setAttribute('style', "transform:none;");
        this.tags.blur.removeAttribute('stdDeviation');
      }
    }
  }, {
    key: "updateBackground",
    value: function updateBackground() {
      var controlActor = this.controlActor;

      if (controlActor && controlActor.standingOn && controlActor.standingOn.isVehicle) {
        controlActor = this.controlActor.standingOn;
      }

      this.tags.bgFilters.style({
        '--x': this.args.x,
        '--y': this.args.y
      });
      this.tags.content.style({
        '--x': this.args.x,
        '--y': this.args.y,
        '--outlineWidth': this.settings.outline + 'px'
      });
      var xMod = this.args.x <= 0 ? this.args.x % this.args.blockSize : (-this.args.blockSize + this.args.x % this.args.blockSize) % this.args.blockSize;
      var yMod = this.args.y <= 0 ? this.args.y % this.args.blockSize : (-this.args.blockSize + this.args.y % this.args.blockSize) % this.args.blockSize;
      this.tags.background.style({
        transform: "translate( ".concat(xMod, "px, ").concat(yMod, "px )")
      });
      this.tags.foreground.style({
        transform: "translate( ".concat(xMod, "px, ").concat(yMod, "px )")
      });
      this.tags.frame.style({
        '--width': this.args.width,
        '--height': this.args.height,
        '--scale': this.args.scale
      });
    }
  }, {
    key: "updateBackdrops",
    value: function updateBackdrops() {
      var _this7 = this;

      var _iterator3 = _createForOfIteratorHelper(this.backdrops),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
              backdrop = _step3$value[1];

          if (!backdrop.view) {
            var args = {};
            var backdropType = '';

            var _iterator4 = _createForOfIteratorHelper(backdrop.properties),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var property = _step4.value;

                if (property.name === 'backdrop') {
                  backdropType = property.value;
                  continue;
                }

                args[property.name] = property.value;
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            args.width = backdrop.width;
            args.height = backdrop.height;
            args.bX = backdrop.x;
            args.bY = backdrop.y;
            var backdropClass = _BackdropPalette.BackdropPalette[backdropType];

            if (backdropClass) {
              backdrop.view = new backdropClass(args, this);
              backdrop.view.render(this.tags.backdrops);
            }
          }

          var leftIntersect = this.args.width + -this.args.x + -backdrop.x;
          var rightIntersect = -(-backdrop.width + -this.args.x + -backdrop.x);
          var topIntersect = this.args.height + -this.args.y + -backdrop.y;
          var bottomIntersect = -(-backdrop.height + -this.args.y + -backdrop.y);
          var xMax = this.tileMap ? -(this.tileMap.mapData.width * 32) : Math.pow(2, 9);
          var yMax = this.tileMap ? -(this.tileMap.mapData.height * 32) : Math.pow(2, 9);
          backdrop.view && Object.assign(backdrop.view.args, {
            x: this.args.x,
            xPan: this.args.x,
            xMax: xMax,
            y: this.args.y + backdrop.y,
            yMax: this.args.y + backdrop.y + -backdrop.view.stacked,
            stacked: -backdrop.view.stacked + 'px',
            frame: this.args.frameId,
            top: topIntersect,
            bottom: bottomIntersect
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.tileMap && this.tileMap.ready.then(function () {
        var xMax = _this7.tileMap ? -(_this7.tileMap.mapData.width * 32) : Math.pow(2, 9);
        var yMax = _this7.tileMap ? -(_this7.tileMap.mapData.height * 32) : Math.pow(2, 9);
        _this7.args.backdrop && Object.assign(_this7.args.backdrop.args, {
          x: 0,
          xPan: _this7.args.x,
          y: _this7.args.y + _this7.args.yOffset,
          xMax: xMax !== null && xMax !== void 0 ? xMax : 0,
          yMax: yMax !== null && yMax !== void 0 ? yMax : 0,
          frame: _this7.args.frameId,
          stacked: -_this7.args.backdrop.stacked + 'px'
        });
      });
    }
  }, {
    key: "populateMap",
    value: function populateMap() {
      if (this.args.populated) {
        return;
      }

      var mapWidth = this.tileMap.mapData.width * 32 + 64;
      var mapHeight = this.tileMap.mapData.height * 32 + 64; // this.quadCell = new QuadCell(
      // 	{x: mapWidth/2, y: mapHeight/2}
      // 	, {x: mapWidth, y: mapHeight}
      // );

      this.args.populated = true;
      var objDefs = this.tileMap.getObjectDefs();
      this.defsByName = new Map();
      this.objDefs = new Map();

      var _iterator5 = _createForOfIteratorHelper(this.backdrops),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              id = _step5$value[0],
              backdrop = _step5$value[1];

          if (backdrop.view) {
            backdrop.view.remove();
            backdrop.view = undefined;
          }

          this.backdrops["delete"](id);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(this.particles.list),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _particle = _step6.value;

          if (_particle) {
            _particle.remove();

            this.particles.remove(_particle);
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var selectedChar = String(this.args.selectedChar || _Router.Router.query["char"] || 'Sonic').toLowerCase();
      var charClass = _ObjectPalette.ObjectPalette[selectedChar] || _Sonic.Sonic;
      var character = new charClass({
        name: selectedChar
      }, this);

      for (var i in objDefs) {
        var objDef = objDefs[i];
        var objType = objDef.type;

        if (objType === 'particle') {
          var particle = new _Particle3d.Particle3d();
          particle.style({
            '--x': objDef.x,
            '--y': objDef.y
          });
          this.particles.add(particle.node);
        }

        if (objType === 'backdrop') {
          this.backdrops.set(objDef.id, objDef);
          continue;
        }

        this.defsByName.set(objDef.name, objDef);
        this.objDefs.set(objDef.id, objDef);

        if (!_ObjectPalette.ObjectPalette[objType]) {
          continue;
        } // if(this.args.networked)
        // {
        // 	if(![
        // 		'layer-switch'
        // 		, 'ring'
        // 		, 'companion-block'
        // 		, 'region'
        // 		, 'force-region'
        // 		, 'shade-region'
        // 		, 'rolling-region'
        // 		, 'water-region'
        // 		, 'lava-region'
        // 		, 'block'
        // 		, 'switch'
        // 		, 'base-region'
        // 		, 'water-region'
        // 		, 'force-region'
        // 		, 'rolling-region'
        // 		, 'lava-region'
        // 		, 'q-block'
        // 		, 'sheild-fire-monitor'
        // 		, 'sheild-water-monitor'
        // 		, 'sheild-electric-monitor'
        // 	].includes(objType)){
        // 		continue;
        // 	}
        // }


        var objClass = _ObjectPalette.ObjectPalette[objType];
        var rawActor = objClass.fromDef(objDef);
        rawActor[Run] = this[Run];
        rawActor[_Bindable.Bindable.NoGetters] = true;

        var actor = _Bindable.Bindable.make(rawActor);

        this.actors.add(actor);
        actor.render(this.tags.actors);

        if (this.actorIsOnScreen(actor) || actor.isRegion) {
          actor.args.display = actor.defaultDisplay || null;
        } else {
          actor.args.display = 'none';
          actor.detach();
        }

        if (actor.onAttach && actor.onAttach() === false || actor.args.hidden) {
          actor.args.display = 'none';
          actor.detach();
        }
        /* */
        // actor.onRendered();


        if (actor.controllable) {
          actor.name = objDef.name; // this.auras.add( actor );

          actor.args.display = actor.defaultDisplay || null;
        }
      }

      if (!this.args.networked) {
        var startType = 'player-start';

        if (character.args.height > 44 && this.defsByName.has('wide-player-start')) {
          startType = 'wide-player-start';
        }

        var startDef = this.defsByName.get(startType);
        character.args.x = startDef.x;
        character.args.y = startDef.y;
        character.args.z = startDef.z = 10;
        character.args.animation = 'dropping';
        var followerChar = String(this.args.followerChar || _Router.Router.query.follower || '').toLowerCase();

        if (followerChar) {
          var _charClass = _ObjectPalette.ObjectPalette[followerChar] || _Tails.Tails;

          var follower = new _charClass({
            following: true,
            name: followerChar,
            x: character.args.x,
            y: character.args.y,
            z: character.args.z - 1
          }, this);
          this.spawn.add({
            object: follower
          });
          this.auras.add(follower);
          this.actors.add(follower);
          character.follower = follower;
        }

        this.spawn.add({
          object: character
        });
        this.auras.add(character);
        this.actors.add(character);

        if (startDef.properties) {
          var _iterator7 = _createForOfIteratorHelper(startDef.properties),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var property = _step7.value;
              character.args[property.name] = property.value;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }

        this.nextControl = character;
      }

      this.onFrameOut(1, function () {
        if (character.follower) {
          character.follower.args.x = character.args.x;
          character.follower.args.y = character.args.y;
        }
      });

      var _iterator8 = _createForOfIteratorHelper(this.actors.list),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _actor = _step8.value;

          if (!_actor) {
            continue;
          }

          var position = this.getCheckpoint(_actor.args.id);

          if (position && position.checkpointId) {
            var checkpoint = this.actorsById[position.checkpointId];
            checkpoint.args.active = true;

            if (checkpoint) {
              _actor.args.x = checkpoint.x;
              _actor.args.y = checkpoint.y;
            }
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "actorIsOnScreen",
    value: function actorIsOnScreen(actor) {
      var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;

      if (!actor) {
        return;
      }

      var width = this.args.width;
      var height = this.args.height;
      var camLeft = -this.args.x + -16 + -margin;
      var camRight = -this.args.x + 16 + margin + width;
      var camTop = -this.args.y - margin;
      var camBottom = -this.args.y + height + margin;
      var actorWidth = actor.args.width;
      var actorTop = actor.y - actor.args.height;
      var actorLeft = actor.x - (actor.isRegion ? 0 : actorWidth / 2);
      var actorRight = actor.x + (actor.isRegion ? actorWidth : actorWidth / 2);

      if (camLeft > actorRight || actorLeft > camRight) {
        return false;
      }

      if (camTop > actor.y || actorTop > camBottom) {
        return false;
      }

      return true; // if((camLeft < actorRight && camRight > actorLeft)
      // 	&& camTop < actor.y && camBottom > actorTop
      // ){
      // 	return true;
      // }
      // else if((actorLeft < camRight && actorRight > camLeft)
      // 	&& actorTop < camBottom && actor.y > camTop
      // ){
      // 	return true;
      // }
      // else
      // {
      // 	return false;
      // }
    }
  }, {
    key: "spawnActors",
    value: function spawnActors() {
      var actorDoc = new DocumentFragment();
      var regionDoc = new DocumentFragment();
      var actorSpawned = false;
      var regionSpawned = false;

      var _iterator9 = _createForOfIteratorHelper(this.spawn),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var spawn = _step9.value;

          if (spawn.frame) {
            if (spawn.frame <= this.args.frameId) {
              this.spawn["delete"](spawn);
              spawn.object[_Bindable.Bindable.NoGetters] = true;
              spawn.object[Run] = this[Run];
              spawn.object.startFrame = this.args.frameId;
              this.actors.add(_Bindable.Bindable.make(spawn.object));
              var isRegion = spawn.object instanceof _Region.Region;
              var doc = isRegion ? actorDoc : actorDoc;
              spawn.object.render(doc);
              spawn.object.onRendered();

              if (spawn.object.onAttach && spawn.object.onAttach() === false) {
                if (!spawn.object.args.hidden) {
                  spawn.object.detach();
                }
              }

              if (isRegion) {
                actorSpawned = true;
              } else {
                actorSpawned = true;
              }
            }
          } else {
            this.spawn["delete"](spawn);
            spawn.object[_Bindable.Bindable.NoGetters] = true;
            spawn.object[Run] = this[Run];
            spawn.object.startFrame = this.args.frameId;
            this.actors.add(_Bindable.Bindable.make(spawn.object));
            spawn.object.render(actorDoc);
            spawn.object.onRendered();
            spawn.object.onAttached && spawn.object.onAttached();

            if (spawn.object.onAttach && spawn.object.onAttach() === false) {
              spawn.object.detach();
            }

            actorSpawned = true;
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      if (actorSpawned) {
        this.tags.actors.append(actorDoc);
      }

      if (regionSpawned) {
        this.tags.actors.append(regionDoc);
      }
    }
  }, {
    key: "actorUpdateStart",
    value: function actorUpdateStart(actor) {
      if (this.updateStarted.has(actor)) {
        return;
      }

      this.updateStarted.add(actor);
      actor.updateStart();

      if (actor.colliding) {
        actor.colliding = false;
      }
    }
  }, {
    key: "actorUpdate",
    value: function actorUpdate(actor) {
      if (this.updated.has(actor)) {
        return;
      }

      this.updated.add(actor);
      actor.update();
    }
  }, {
    key: "actorUpdateEnd",
    value: function actorUpdateEnd(actor) {
      if (this.updateEnded.has(actor)) {
        return;
      }

      this.updateEnded.add(actor);
      actor.args.colliding = actor.colliding;
      actor.updateEnd();
      this.setColCell(actor); // this.quadCell.remove(actor, actor.args);
      // this.quadCell.insert(actor, actor.args);
      // this.quadCell.insert(actor, {x: actor.args.x - actor.args.width / 2, y: actor.args.y});
      // this.quadCell.insert(actor, {x: actor.args.x + actor.args.width / 2, y: actor.args.y});
    }
  }, {
    key: "nearbyActors",
    value: function nearbyActors(actor) {
      // const nearbyActors = this.quadCell.select(actor.x, actor.y, x, y);
      // return nearbyActors;
      var nearbyCells = this.getNearbyColCells(actor);
      var width = this.args.width;
      var height = this.args.height;
      var x = this.args.x;
      var y = this.args.y;
      var result = new Set();

      for (var i in nearbyCells) {
        var cell = nearbyCells[i];
        var actors = cell;

        var _iterator10 = _createForOfIteratorHelper(actors),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _actor2 = _step10.value;

            if (_actor2.removed) {
              continue;
            }

            result.add(_actor2);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }

      return result;
    }
  }, {
    key: "update",
    value: function update() {
      var _this8 = this;

      if (this.args.paused > 0) {
        this.args.paused--;
      }

      var controller = this.controlActor ? this.controlActor.controller : this.controller;

      if (this.args.frameId % 600 === 0) {
        ga('set', 'metric1', this.args.frameId / 60);

        if (typeof ga === 'function') {
          ga('send', 'event', {
            eventCategory: 'fps-check',
            eventAction: "fps-check::".concat(navigator.platform, "::cores_").concat(navigator.hardwareConcurrency),
            eventLabel: "".concat(this.args.actName),
            eventValue: Math.trunc(this.args.fps)
          });
        }
      }

      if (!this.args.started) {
        this.startTime = Date.now();

        if (controller) {
          this.takeInput(controller);

          if (this.args.titlecard) {
            this.args.titlecard.input(controller);
          }
        }
      }

      if (this.args.paused !== false && !this.args.networked) {
        this.takeInput(controller);
        this.args.pauseMenu.input(controller);
      }

      if (this.args.paused === false || this.args.paused > 0 || this.args.networked) {
        this.callFrameOuts();
        this.callFrameIntervals();
        this.args.lastFrameId = this.args.frameId;

        if (this.args.cutScene) {
          this.args.startFrameId++;
          this.args.showHud = false;
        } else {
          this.args.showHud = true;
        }

        if (!this.args.debugEditMode) {
          this.args.frameId++;
        }

        this.args.frame.args.value = this.args.frameId;
      }

      if (this.args.started && this.args.paused !== false && this.args.paused <= 0) {
        return;
      }

      if (this.tileMap && this.tileMap.mapData) {
        this.updateBackdrops();
      }

      if (!this.args.started) {
        return;
      }

      var _iterator11 = _createForOfIteratorHelper(this.willDetach),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _step11$value = _slicedToArray(_step11.value, 2),
              detachee = _step11$value[0],
              detacher = _step11$value[1];

          this.willDetach["delete"](detachee);
          detacher();
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      if (!Number(this.args.rings.args.value)) {
        this.args.ringLabel.args.color = 'red-alert';
      } else {
        this.args.ringLabel.args.color = 'yellow';
      }

      this.args.fpsSprite.args.value = Number(this.args.fps).toFixed(2);
      var time = (this.args.frameId - this.args.startFrameId) / 60;
      var minutes = String(Math.trunc(Math.abs(time) / 60)).padStart(2, '0');
      var seconds = String(Math.trunc(Math.abs(time) % 60)).padStart(2, '0');
      var neg = time < 0 ? '-' : '';

      if (neg) {
        minutes = Number(minutes);
      }

      this.args.timer.args.value = "".concat(neg).concat(minutes, ":").concat(seconds);

      if (this.dontSwitch > 0) {
        this.dontSwitch--;
      }

      if (this.dontSwitch < 0) {
        this.dontSwitch = 0;
      }

      this.args.rippleFrame = this.args.frameId % 128;
      this.args.displaceWater = this.args.frameId % 128;
      this[ActorPointCache].clear();

      if (!this.args.isReplaying && !this.args.isRecording) {
        this.args.demoIndicator = null;
      }

      this.updateBackground();

      if (this.controlActor) {
        if (this.args.isReplaying) {
          if (!this.args.demoIndicator) {
            this.args.demoIndicator = new _CharacterString.CharacterString({
              value: '▶ PLAY',
              color: 'green'
            });
          }

          this.args.focusMe.args.hide = 'hide';

          if (this.args.frameId < this.replayInputs.length) {
            var frame = this.replayInputs[this.args.frameId];

            if (frame) {
              for (var actorId in frame.args) {
                var actor = this.controlActor;

                if (!actor) {
                  continue;
                }

                if (frame.args) {
                  Object.assign(actor.args, frame.args[actorId]);
                }

                if (frame.input) {
                  actor.controller.replay(frame.input);
                  actor.readInput();
                }
              }
            }

            this.args.hasRecording = true;
            this.args.topLine.args.value = ' i cant believe its not canvas. ';
            this.args.topLine.args.hide = '';
            this.args.status.args.value = ' click here to exit demo. ';
            this.args.status.args.hide = '';
          } else {
            this.args.topLine.args.hide = 'hide';
            this.args.status.args.hide = 'hide';
            this.args.isReplaying = false;
          }
        } else {
          if (this.gamepad) {
            this.args.focusMe.args.hide = 'hide';
          }

          this.controlActor.controller && this.takeInput(this.controlActor.controller);

          if (!this.args.cutScene) {
            this.controlActor.readInput();
          }
        }
      }

      this.collisions = new Map();
      this.updateStarted.clear();
      this.updated.clear();

      if (this.controlActor) {
        this.controlActor.setCameraMode();
      }

      this.updateEnded.clear();

      for (var _i2 = 0, _arr2 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i2 < _arr2.length; _i2++) {
        var layer = _arr2[_i2];
        var xDir = Math.sign(layer.x - this.args.x);
        var yDir = Math.sign(layer.y - this.args.y);
        layer.x = this.args.x;
        layer.y = this.args.y;
        layer.update(this.tileMap, xDir, yDir);
      }

      for (var _i3 = 0, _arr3 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i3 < _arr3.length; _i3++) {
        var _layer = _arr3[_i3];

        _layer.move();
      }

      if (this.args.running && !this.args.debugEditMode) {
        var updatable = new Set();

        var _iterator12 = _createForOfIteratorHelper(this.regions),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var region = _step12.value;

            if (!this.actorIsOnScreen(region, 768)) {
              continue;
            }

            updatable.add(region);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }

        var _iterator13 = _createForOfIteratorHelper(this.auras),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _actor3 = _step13.value;

            if (_actor3 !== this.controlActor) {
              updatable.add(_actor3);
            }

            var nearbyActors = this.nearbyActors(_actor3);

            var _iterator20 = _createForOfIteratorHelper(nearbyActors),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var _actor4 = _step20.value;

                if (_actor4 !== this.controlActor) {
                  updatable.add(_actor4);
                }
              }
            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }

        var _iterator14 = _createForOfIteratorHelper(updatable),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _actor5 = _step14.value;

            if (_actor5[Run] === this[Run]) {
              this.actorUpdateStart(_actor5);
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdateStart(this.controlActor);
          }
        }

        var _iterator15 = _createForOfIteratorHelper(updatable),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var _actor6 = _step15.value;

            if (_actor6[Run] === this[Run]) {
              this.actorUpdate(_actor6);
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdate(this.controlActor);
          }
        }

        var _iterator16 = _createForOfIteratorHelper(updatable),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _actor7 = _step16.value;

            if (_actor7[Run] === this[Run]) {
              this.actorUpdateEnd(_actor7);
            }
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.actorUpdateEnd(this.controlActor);
          }
        }

        var _iterator17 = _createForOfIteratorHelper(updatable),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var _actor8 = _step17.value;

            if (_actor8[Run] === this[Run]) {
              this.setColCell(_actor8);
            }
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        if (this.controlActor) {
          if (this.controlActor[Run] === this[Run]) {
            this.setColCell(this.controlActor);
          }
        }

        if (this.collisions) {
          var _iterator18 = _createForOfIteratorHelper(this.collisions),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var _step18$value = _slicedToArray(_step18.value, 2),
                  collider = _step18$value[0],
                  collidees = _step18$value[1];

              var _iterator19 = _createForOfIteratorHelper(collidees),
                  _step19;

              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var _step19$value = _slicedToArray(_step19.value, 2),
                      collidee = _step19$value[0],
                      type = _step19$value[1];

                  if (!collidee) {
                    continue;
                  }

                  collidee.pause(false);
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }
        }

        if (this.controlActor) {
          this.args.score.args.value = String(this.controlActor.args.score).padStart(4, ' ');
          this.args.rings.args.value = String(this.controlActor.args.rings).padStart(4, ' ');
          this.args.hasRings = !!this.controlActor.args.rings;
          this.args.hasEmeralds = !!this.controlActor.args.emeralds;
          this.args["char"].args.value = this.controlActor.args.name;
          this.args.charName = this.controlActor.args.name;

          if (this.args.debugOsd) {
            this.args.xPos.args.value = Number(this.controlActor.x).toFixed(3);
            this.args.yPos.args.value = Number(this.controlActor.y).toFixed(3);
            this.args.layer.args.value = Number(this.controlActor.args.layer);
            this.args.ground.args.value = this.controlActor.args.landed;
            this.args.gSpeed.args.value = Number(this.controlActor.args.gSpeed).toFixed(3);
            this.args.xSpeed.args.value = Number(this.controlActor.args.xSpeed).toFixed(3);
            this.args.ySpeed.args.value = Number(this.controlActor.args.ySpeed).toFixed(3);
            this.args.angle.args.value = (Math.round(this.controlActor.args.groundAngle * 1000) / 1000).toFixed(3);
            this.args.airAngle.args.value = (Math.round(this.controlActor.args.airAngle * 1000) / 1000).toFixed(3);
            this.args.ignore.args.value = this.controlActor.args.ignore;
            var modes = ['FLOOR (0)', 'L-WALL (1)', 'CEILING (2)', 'R-WALL (3)'];
            this.args.mode.args.value = modes[Math.floor(this.controlActor.args.mode)] || Math.floor(this.controlActor.args.mode);
            this.args.cameraMode.args.value = this.controlActor.args.cameraMode;
          }
        }
      } else if (this.args.running && this.args.debugEditMode) {
        if (this.controlActor) {
          this.controlActor.args.x += controller.axes[0].magnitude * 4;
          this.controlActor.args.y += controller.axes[1].magnitude * 4;
          this.controlActor.args.respawning = false;
          this.controlActor.args.dead = false;
          this.controlActor.noClip = false;
          this.controlActor.args.xSpeed = 0;
          this.controlActor.args.ySpeed = 0;
          this.controlActor.args.gSpeed = 0;
        }
      }

      var width = this.args.width;
      var height = this.args.height;
      var margin = 16;
      var camLeft = -this.args.x + -16 + -margin;
      var camRight = -this.args.x + width + -16 + margin;
      var camTop = -this.args.y - margin;
      var camBottom = -this.args.y + height + margin;
      var inAuras = new WeakSet();

      if (this.controlActor) {
        (function () {
          var actorDoc = new DocumentFragment();
          var regionDoc = new DocumentFragment();
          var wakeActors = false;
          var wakeRegions = false;
          var focusedActor = _this8.controlActor;

          if (_this8.controlActor.focused) {
            focusedActor = _this8.controlActor.focused;
          }

          var nearbyActors = _this8.nearbyActors(focusedActor) || [];

          for (var _i4 = 0, _arr4 = [nearbyActors, _this8.regions]; _i4 < _arr4.length; _i4++) {
            var actorList = _arr4[_i4];

            var _iterator21 = _createForOfIteratorHelper(actorList),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var _actor9 = _step21.value;

                if (_actor9[Run] !== _this8[Run]) {
                  continue;
                }

                if (!_actor9.args.hidden && !_actor9.nodes.length) {
                  _actor9.render(_this8.tags.actors);
                }

                var actorIsOnScreen = _this8.actorIsOnScreen(_actor9);

                if (actorIsOnScreen && !(_actor9 instanceof _LayerSwitch.LayerSwitch)) {
                  _actor9.args.display = _actor9.defaultDisplay || null;

                  if (!_actor9.vizi) {
                    if (!_actor9.nodes.length) {
                      if (_actor9.onAttach && _actor9.onAttach() === false) {
                        _actor9.detach();
                      }
                    }

                    if (!_actor9.args.hidden) {
                      if (_actor9 instanceof _Region.Region) {
                        _actor9.nodes.map(function (n) {
                          return actorDoc.append(n);
                        });

                        wakeActors = true;
                      } else {
                        _actor9.nodes.map(function (n) {
                          return actorDoc.append(n);
                        });

                        wakeActors = true;
                      }
                    }

                    _actor9.wakeUp();
                  }

                  _this8.willDetach["delete"](_actor9);

                  _actor9.vizi = true;
                }

                inAuras.add(_actor9);

                _this8.recent.add(_actor9);
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }

          var _iterator22 = _createForOfIteratorHelper(_this8.recent),
              _step22;

          try {
            var _loop = function _loop() {
              var actor = _step22.value;

              if (actor[Run] !== _this8[Run]) {
                _this8.recent["delete"](actor);

                return "continue";
              }

              var actorIsOnScreen = _this8.actorIsOnScreen(actor);

              if (actor.vizi && !_this8.willDetach.has(actor) && !actorIsOnScreen) {
                _this8.willDetach.set(actor, function () {
                  actor.sleep();
                  actor.args.display = 'none';
                  actor.detach();
                  actor.vizi = false;
                  actor.willhide = null;

                  _this8.willDetach["delete"](actor);
                });

                _this8.recent["delete"](actor);
              }
            };

            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }
          } catch (err) {
            _iterator22.e(err);
          } finally {
            _iterator22.f();
          }

          if (wakeActors) {
            _this8.tags.actors.append(actorDoc);
          }

          if (wakeRegions) {
            _this8.tags.actors.append(regionDoc);
          }
        })();
      }

      if (this.nextControl) {
        !this.args.networked && this.auras.clear();
        this.controlActor && this.controlActor.sprite && this.controlActor.sprite.parentNode && this.controlActor.sprite.parentNode.classList.remove('actor-selected');

        if (this.controlActor) {
          this.controlActor.args.selected = false;
        }

        this.controlActor = this.nextControl;
        this.controlActor.args.selected = true;
        this.auras.add(this.controlActor);
        this.controlActor.args.display = this.controlActor.defaultDisplay || null;
        this.controlActor.nodes.map(function (n) {
          return _this8.tags.actors.append(n);
        });
        this.controlActor.vizi = true;
        this.args.maxSpeed = null;
        this.nextControl = null;
      }

      if (this.controlActor) {
        this.moveCamera();
        this.applyMotionBlur();

        if (this.controlActor.args.name === 'seymour' && this.controlActor.y < 3840 && this.controlActor.x > 38400 && this.controlActor.standingOn && this.controlActor.standingOn.isVehicle) {
          this.args.secret = 'aurora';

          if (!this.secretsFound.has('seymour-aurora')) {
            if (this.args.audio && this.secretSample) {
              this.secretSample.currentTime = 0;
              this.secretSample.volume = 0.25;
              this.secretSample.play();
            }

            this.showStatus(10000, ' A secret is revealed ');
            this.secretsFound.add('seymour-aurora');
          }
        } else {
          this.args.secret = '';
        }
      }

      this.updated.forEach(function (actor) {
        if (actor.args.standingLayer) {
          var groundShift = actor.args.standingLayer.offsetXChanged;

          if (groundShift) {
            var spaceLeft = actor.scanForward(groundShift);

            if (spaceLeft === false) {
              actor.args.x += groundShift || 0;
            } else {
              actor.args.x += spaceLeft * Math.sign(groundShift);
            }
          }

          actor.args.y += actor.args.standingLayer.offsetYChanged || 0;
        }
      });

      if (this.args.networked && this.controlActor) {
        var netState = {
          frame: this.serializePlayer()
        };

        if (this.args.playerId === 1) {
          this.server.send(JSON.stringify(netState));
        } else if (this.args.playerId === 2) {
          this.client.send(JSON.stringify(netState));
        }
      }

      this.spawnActors();
    }
  }, {
    key: "click",
    value: function click(event) {
      if (this.args.isReplaying) {
        this.controlActor && this.controlActor.controller.zero();
        this.stop();
      }
    }
  }, {
    key: "regionsAtPoint",
    value: function regionsAtPoint(x, y) {
      var regions = new Set();

      var _iterator23 = _createForOfIteratorHelper(this.regions),
          _step23;

      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var region = _step23.value;

          if (region[Run] !== this[Run]) {
            continue;
          }

          var regionArgs = region.args;
          var regionX = regionArgs.x;
          var regionY = regionArgs.y;
          var width = regionArgs.width;
          var height = regionArgs.height;
          var offset = Math.floor(width / 2);
          var left = regionX;
          var right = regionX + width;
          var top = regionY - height;
          var bottom = regionY;

          if (x >= left && right > x) {
            if (bottom >= y && y > top) {
              regions.add(region);
            }
          }
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }

      return regions;
    }
  }, {
    key: "actorsAtPoint",
    value: function actorsAtPoint(x, y) {
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var cacheKey = x + '::' + y + '::' + w + '::' + h;
      var actorPointCache = this[ActorPointCache];

      if (actorPointCache.has(cacheKey)) {
        return actorPointCache.get(cacheKey);
      }

      var actors = [];
      var nearbyActors = this.nearbyActors({
        x: x,
        y: y
      });

      var _iterator24 = _createForOfIteratorHelper(nearbyActors),
          _step24;

      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var actor = _step24.value;

          if (actor[Run] !== this[Run]) {
            continue;
          }

          var actorArgs = actor.args;
          var actorX = actorArgs.x;
          var actorY = actorArgs.y;
          var width = actorArgs.width;
          var height = actorArgs.height;
          var myRadius = Math.max(Math.floor(w / 2), 0);
          var myLeft = x - myRadius;
          var myRight = x + myRadius;
          var myTop = y - Math.max(h, 0);
          var myBottom = y;
          var offset = width / 2;
          var isRegion = actor.isRegion;
          var otherLeft = actorX - (isRegion ? 0 : offset);
          var otherRight = actorX + (isRegion ? width : offset);
          var otherTop = actorY - height;
          var otherBottom = actorY;

          if (myRight >= otherLeft && otherRight > myLeft) {
            if (otherBottom >= myTop && myBottom >= otherTop) {
              actors.push(actor);
            }
          }
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }

      actorPointCache.set(cacheKey, actors);
      return actors;
    }
  }, {
    key: "padConnected",
    value: function padConnected(event) {
      this.gamepad = event.gamepad;

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'gamepad',
          eventAction: 'connected',
          eventLabel: event.gamepad.id
        });
      }
    }
  }, {
    key: "padRemoved",
    value: function padRemoved(event) {
      if (!this.gamepad) {
        return;
      }

      if (this.args.started) {
        this.pauseGame();
      }

      if (this.gamepad.index === event.gamepad.index) {
        this.gamepad = null;
      }

      if (typeof ga === 'function') {
        ga('send', 'event', {
          eventCategory: 'gamepad',
          eventAction: 'disconnected',
          eventLabel: event.gamepad.id
        });
      }
    }
  }, {
    key: "getColCell",
    value: function getColCell(point) {
      var colCellDiv = this.colCellDiv;
      var colCells = this.colCells;
      var cellX = Math.floor(point.x / colCellDiv);
      var cellY = Math.floor(point.y / colCellDiv);
      var name = "".concat(cellX, ":").concat(cellY);

      if (!colCells.has(name)) {
        var cell = new Set();
        colCells.set(name, cell);
        cell.name = name;
        return cell;
      }

      return colCells.get(name);
    }
  }, {
    key: "getColCells",
    value: function getColCells(actor) {
      var colCellDiv = this.colCellDiv;
      var actorTop = actor.y - actor.args.height;
      var actorWidth = actor.args.width;
      var actorLeft = actor.x - actorWidth / 2;
      var actorRight = actor.x + actorWidth / 2;
      var cellMinX = Math.floor(actorLeft / colCellDiv);
      var cellMaxX = Math.ceil(actorRight / colCellDiv);
      var cellMinY = Math.floor(actorTop / colCellDiv);
      var cellMaxY = Math.ceil(actor.y / colCellDiv);
      var cells = new Set();

      for (var x = cellMinX; x <= cellMaxX; x++) {
        for (var y = cellMinY; y <= cellMaxY; y++) {
          cells.add(this.getColCell({
            x: x * colCellDiv,
            y: y * colCellDiv
          }));
        }
      }

      return cells;
    }
  }, {
    key: "setColCell",
    value: function setColCell(actor) {
      actor[_Bindable.Bindable.NoGetters] = true;
      actor = _Bindable.Bindable.make(actor);
      var cell = this.getColCell(actor);
      actor[ColCell] && actor[ColCell]["delete"](actor);
      cell.add(actor);
      actor[ColCell] = cell;
      return cell; // const cells = this.getColCell(actor);
      // const originalCells = actor[ColCell] || new Set;
      // cells.forEach(cell => cell.add(actor));
      // originalCells.forEach(originalCell => {
      // 	if(!cells.has(originalCell))
      // 	{
      // 		originalCell.delete(actor);
      // 	}
      // });
      // actor[ColCell] = cells;
      // return cells;
    }
  }, {
    key: "getNearbyColCells",
    value: function getNearbyColCells(actor) {
      var actorX = actor.x;
      var actorY = actor.y;
      var colCellDiv = this.colCellDiv;
      var cellX = Math.floor(actorX / colCellDiv);
      var cellY = Math.floor(actorY / colCellDiv);
      var name = "".concat(cellX, "::").concat(cellY);
      var cache = this.colCellCache.get(name);

      if (cache) {
        return cache.filter(function (set) {
          return set.size;
        });
      }

      var space = colCellDiv;
      var colA = actorX - space * 2;
      var colB = actorX - space;
      var colC = actorX;
      var colD = actorX + space;
      var colE = actorX + space * 2;
      var rowA = actorY - space * 2;
      var rowB = actorY - space;
      var rowC = actorY;
      var rowD = actorY + space;
      var rowE = actorY + space * 2;
      this.colCellCache.set(name, cache = [// this.getColCell({x:colA, y:rowA})
      // , this.getColCell({x:colA, y:rowB})
      // , this.getColCell({x:colA, y:rowC})
      // , this.getColCell({x:colA, y:rowD})
      // , this.getColCell({x:colA, y:rowE})
      // , this.getColCell({x:colB, y:rowA})
      this.getColCell({
        x: colB,
        y: rowB
      }), this.getColCell({
        x: colB,
        y: rowC
      }), this.getColCell({
        x: colB,
        y: rowD
      }) // , this.getColCell({x:colB, y:rowE})
      // , this.getColCell({x:colC, y:rowA})
      , this.getColCell({
        x: colC,
        y: rowB
      }), this.getColCell({
        x: colC,
        y: rowC
      }), this.getColCell({
        x: colC,
        y: rowD
      }) // , this.getColCell({x:colC, y:rowE})
      // , this.getColCell({x:colD, y:rowA})
      , this.getColCell({
        x: colD,
        y: rowB
      }), this.getColCell({
        x: colD,
        y: rowC
      }), this.getColCell({
        x: colD,
        y: rowD
      }) // , this.getColCell({x:colD, y:rowE})
      // , this.getColCell({x:colE, y:rowA})
      // , this.getColCell({x:colE, y:rowB})
      // , this.getColCell({x:colE, y:rowC})
      // , this.getColCell({x:colE, y:rowD})
      // , this.getColCell({x:colE, y:rowE})
      ]);
      return cache.filter(function (set) {
        return set.size;
      });
    }
  }, {
    key: "screenFilter",
    value: function screenFilter(filterName) {
      this.args.screenFilter = filterName;
    }
  }, {
    key: "reset",
    value: function reset() {
      console.clear();
      this[Run]++;
      this.stop();
      this.clearDialog();
      this.hideDialog();
      this.tileMap.replacements.clear();
      this.tileMap.tileSetCache.clear();
      this.tileMap.tileCache.clear();
      this.callFrames.clear();
      this.callIntervals.clear();
      this.collisions.clear();
      this.colCellCache.clear();
      this.colCells.clear();
      this.regions.clear();
      this.spawn.clear();
      this.auras.clear();
      this.updateStarted.clear();
      this.updateEnded.clear();
      this.updated.clear();
      this.objectDb.clear();
      this.args.actClear = false;
      this.args.cutScene = false;
      this.args.fade = false;
      this.args.xOffset = 0.5;
      this.args.yOffset = 0.5;
      var layers = this.tileMap.tileLayers;

      var _iterator25 = _createForOfIteratorHelper(layers),
          _step25;

      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var layerDef = _step25.value;
          layerDef.offsetX = 0;
          layerDef.offsetY = 0;
          layerDef.offsetXChanged = 0;
          layerDef.offsetYChanged = 0;
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }

      for (var _i5 = 0, _arr5 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i5 < _arr5.length; _i5++) {
        var layer = _arr5[_i5];
        layer.args.destroyed = false;
        layer.args.offsetX = 0;
        layer.args.offsetY = 0;
        layer.args.offsetXChanged = 0;
        layer.args.offsetYChanged = 0;
      }

      var _iterator26 = _createForOfIteratorHelper(this.actors.items()),
          _step26;

      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var actor = _step26.value;
          this.actors.remove(actor);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }

      this.controlActor && this.actors.remove(this.controlActor);
      this.nextControl = null;
      this.actorsById = {};

      var _iterator27 = _createForOfIteratorHelper(this.effects.list),
          _step27;

      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var effect = _step27.value;
          effect && this.effects.remove(effect);
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }

      var _iterator28 = _createForOfIteratorHelper(this.particles.list),
          _step28;

      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var particle = _step28.value;
          particle && this.particles.remove(particle);
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }

      this.spawn.clear();
      this[ActorPointCache].clear();
      this.args.isRecording = false;
      this.args.isReplaying = false;
      this.args.populated = false;
      this.controlActor = null; // this.args.frameId   = -1;

      this.tags.viewport.focus();
      this.args.paused = true;
    }
  }, {
    key: "quit",
    value: function quit() {
      var quick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.args.actClear = false;
      this.args.cutScene = false;
      this.args.fade = true;
      this.callFrames.clear();
      this.callIntervals.clear();
      this.collisions.clear();
      this.colCellCache.clear();
      this.colCells.clear();
      this.regions.clear();
      this.spawn.clear();
      this.auras.clear();
      this.args.timeBonus.args.value = 0;
      this.args.ringBonus.args.value = 0;
      this.args.speedBonus.args.value = 0;
      this.args.totalBonus.args.value = 0;
      this.meta = {};

      var _iterator29 = _createForOfIteratorHelper(this.actors.items()),
          _step29;

      try {
        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
          var actor = _step29.value;
          this.actors.remove(actor);
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }

      for (var _i6 = 0, _arr6 = [].concat(_toConsumableArray(this.args.layers), _toConsumableArray(this.args.fgLayers)); _i6 < _arr6.length; _i6++) {
        var layer = _arr6[_i6];
        layer.args.destroyed = false;
      }

      this.willDetach.clear();
      this.objectDb.clear();
      this.args.isRecording = false;
      this.args.isReplaying = false;
      this.playableIterator = false;
      this.args.populated = false;
      this.args.paused = false;
      this.args.started = false;
      this.controlActor = null;
      this.args.frameId = -1;
      this.args.timer.args.value = '';
      this.args.rings.args.value = 0; // this.emeralds.args.value = 0;
      // this.coins.args.value    = 0;

      this.args.hasRings = false;
      this.args.hasCoins = false;
      this.args.hasEmeralds = false;
      this.args["char"].args.value = '';
      this.args.charName = '';
      this.args.level = false;
      var layers = this.args.layers;
      var layerCount = layers.length;

      var _iterator30 = _createForOfIteratorHelper(this.args.layers),
          _step30;

      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var _layer2 = _step30.value;

          _layer2.remove();
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }

      var _iterator31 = _createForOfIteratorHelper(this.args.fgLayers),
          _step31;

      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var _layer3 = _step31.value;

          _layer3.remove();
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }

      var cards = [];

      if (quick === 2) {
        cards.push(new _LoadingCard.LoadingCard({
          timeout: 15000,
          text: 'loading'
        }, this));
      } else if (quick) {
        _Bgm.Bgm.fadeOut(2000);

        cards.push.apply(cards, _toConsumableArray(this.homeCards()));
      } else {
        _Bgm.Bgm.fadeOut(3000);

        cards.push.apply(cards, _toConsumableArray(this.returnHomeCards()));
      }

      this.args.titlecard = new _Series.Series({
        cards: cards
      }, this);
      this.args.bg = this.args.backdrop = null;

      _Keyboard.Keyboard.get().reset();

      this.args.titlecard.play();
      this.controller.zero();
    }
  }, {
    key: "introCards",
    value: function introCards() {
      return [new _LoadingCard.LoadingCard({
        timeout: 3500,
        text: 'loading'
      }, this), new _BootCard.BootCard({
        timeout: 3500
      }), new _DebianCard.DebianCard({
        timeout: 4500
      }), new _WebkitCard.WebkitCard({
        timeout: 3500
      }), new _GamepadCard.GamepadCard({
        timeout: 2500
      }), new _SeanCard.SeanCard({
        timeout: 5000
      }, this)].concat(_toConsumableArray(this.homeCards()));
    }
  }, {
    key: "homeCards",
    value: function homeCards() {
      return [new _TitleScreenCard.TitleScreenCard({
        timeout: 51000
      }, this), new _MainMenu.MainMenu({
        timeout: -1
      }, this)];
    }
  }, {
    key: "returnHomeCards",
    value: function returnHomeCards() {
      return [new _ThankYouCard.ThankYouCard({
        timeout: 5000
      }, this)].concat(_toConsumableArray(this.homeCards()));
    }
  }, {
    key: "record",
    value: function record() {
      this.args.demoIndicator = null;
      this.reset();
      this.args.frameId = 0;
      this.replayInputs = [];
      this.args.isRecording = true;
      this.args.isReplaying = false;
      this.args.hasRecording = true;
      this.args.paused = false;
      this.startLevel();
    }
  }, {
    key: "playback",
    value: function playback() {
      this.args.demoIndicator = null;
      this.reset();
      this.replayInputs = JSON.parse(localStorage.getItem('replay')) || [];
      this.startLevel();
      this.args.frameId = 0;
      this.args.isReplaying = true;
      this.args.isRecording = false;
      this.args.paused = false;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.args.isRecording) {
        var replay = JSON.stringify(_toConsumableArray(this.replayInputs));
        localStorage.setItem('replay', replay);
      }

      this.args.isReplaying = false;
      this.args.isRecording = false;
      this.args.paused = false;
      this.controlActor && this.controlActor.controller.zero();
      this.tags.viewport.focus();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.tags.viewport && this.tags.viewport.focus();
    }
  }, {
    key: "getServer",
    value: function getServer() {
      var _this9 = this;

      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var rtcConfig = {
        iceServers: [// {urls: 'stun:stun1.l.google.com:19302'},
          // {urls: 'stun:stun2.l.google.com:19302'}
        ]
      };
      var server = !refresh && server || new _RtcServer.RtcServer(rtcConfig);

      var onOpen = function onOpen(event) {
        console.log('Connection opened!');
        _this9.args.chatBox = new _ChatBox.ChatBox({
          pipe: server
        }); // const actors = this.actors.list;
        // if(actors[1])
        // {
        // 	actors[1].args.name = 'Player 2';
        // }

        _this9.args.playerId = 1;
      };

      var onMessage = function onMessage(event) {
        var actors = _this9.actors.list;

        if (_this9.remotePlayer) {
          var packet = JSON.parse(event.detail);
          var actor = _this9.remotePlayer;

          if (packet.frame) {
            if (packet.frame.frame > _this9.args.frameId) {
              _this9.args.frameId = -1 + packet.frame.frame;
            }

            if (packet.frame.input) {
              actor.controller.replay(packet.frame.input);
              actor.readInput();
            }

            if (packet.frame.args) {
              Object.assign(actor.args, packet.frame.args);
            }
          }
        }
      };

      this.listen(server, 'open', onOpen, {
        once: true
      });
      this.listen(server, 'message', onMessage);
      this.server = server; // console.log(server);

      return server;
    }
  }, {
    key: "getClient",
    value: function getClient() {
      var _this10 = this;

      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var rtcConfig = {
        iceServers: [// {urls: 'stun:stun1.l.google.com:19302'},
          // {urls: 'stun:stun2.l.google.com:19302'}
        ]
      };
      var client = !refresh && this.client || new _RtcClient.RtcClient(rtcConfig);

      var onOpen = function onOpen(event) {
        console.log('Connection opened!'); // const actors = this.actors.list;

        _this10.args.chatBox = new _ChatBox.ChatBox({
          pipe: client
        }); // if(actors[0])
        // {
        // 	actors[0].args.name = 'Player 1';
        // }

        _this10.args.playerId = 2;
      };

      var onMessage = function onMessage(event) {
        var actors = _this10.actors.list;

        if (_this10.remotePlayer) {
          var packet = JSON.parse(event.detail);
          var actor = _this10.remotePlayer;

          if (packet.frame) {
            if (packet.frame.frame > _this10.args.frameId) {
              _this10.args.frameId = -1 + packet.frame.frame;
            }

            if (packet.frame.input) {
              actor.controller.replay(packet.frame.input);
              actor.readInput();
            }

            if (packet.frame.args) {
              Object.assign(actor.args, packet.frame.args);
            }
          }
        }
      };

      this.listen(client, 'open', onOpen, {
        once: true
      });
      this.listen(client, 'message', onMessage);
      this.client = client; // console.log(client);

      return client;
    }
  }, {
    key: "serializePlayer",
    value: function serializePlayer() {
      if (!this.controlActor || !this.controlActor.controller) {
        return {};
      }

      var frame = this.args.frameId;
      var input = this.controlActor.controller.serialize();
      var args = {
        x: this.controlActor.args.x,
        y: this.controlActor.args.y,
        gSpeed: this.controlActor.args.gSpeed,
        xSpeed: this.controlActor.args.xSpeed,
        ySpeed: this.controlActor.args.ySpeed,
        direction: this.controlActor.args.direction,
        facing: this.controlActor.args.facing,
        falling: this.controlActor.args.falling,
        rolling: this.controlActor.args.rolling,
        jumping: this.controlActor.args.jumping,
        flying: this.controlActor.args.flying,
        "float": this.controlActor.args["float"],
        angle: this.controlActor.args.angle,
        mode: this.controlActor.args.mode,
        groundAngle: this.controlActor.args.groundAngle
      };
      return {
        frame: frame,
        input: input,
        args: args
      };
    }
  }, {
    key: "onFrameOut",
    value: function onFrameOut(frames, callback) {
      if (frames <= 0) {
        callback();
        return;
      }

      var callFrame = this.args.frameId + frames;

      if (!this.callFrames.has(callFrame)) {
        this.callFrames.set(callFrame, new Set());
      }

      var callbacks = this.callFrames.get(callFrame);
      callbacks.add(callback);
      return function () {
        return callbacks["delete"](callback);
      };
    }
  }, {
    key: "onFrameInterval",
    value: function onFrameInterval(interval, callback) {
      if (frames <= 0) {
        return;
      }

      var callInterval = interval;

      if (!this.callIntervals.has(callInterval)) {
        this.callIntervals.set(callInterval, new Set());
      }

      var callbacks = this.callIntervals.get(callInterval);
      callbacks.add(callback);
      return function () {
        return callbacks["delete"](callback);
      };
    }
  }, {
    key: "callFrameOuts",
    value: function callFrameOuts() {
      for (var i = this.args.lastFrameId; i <= this.args.frameId; i++) {
        if (!this.callFrames.has(i)) {
          continue;
        }

        var callbacks = this.callFrames.get(i);

        var _iterator32 = _createForOfIteratorHelper(callbacks),
            _step32;

        try {
          for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
            var callback = _step32.value;
            callback();
          }
        } catch (err) {
          _iterator32.e(err);
        } finally {
          _iterator32.f();
        }

        this.callFrames["delete"](i);
      }
    }
  }, {
    key: "callFrameIntervals",
    value: function callFrameIntervals() {
      for (var i = this.args.lastFrameId; i <= this.args.frameId; i++) {
        var _iterator33 = _createForOfIteratorHelper(this.callIntervals),
            _step33;

        try {
          for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
            var _step33$value = _slicedToArray(_step33.value, 2),
                interval = _step33$value[0],
                callbacks = _step33$value[1];

            if (i % interval === 0) {
              var _iterator34 = _createForOfIteratorHelper(callbacks),
                  _step34;

              try {
                for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                  var callback = _step34.value;
                  callback();
                }
              } catch (err) {
                _iterator34.e(err);
              } finally {
                _iterator34.f();
              }
            }
          }
        } catch (err) {
          _iterator33.e(err);
        } finally {
          _iterator33.f();
        }
      }
    }
  }, {
    key: "pauseGame",
    value: function pauseGame() {
      var _this11 = this;

      this.focus();
      this.args.paused = -1;
      this.args.pauseMenu.focusFirst();
      this.onTimeout(6, function () {
        _this11.controller && _this11.controller.zero();
      });
    }
  }, {
    key: "unpauseGame",
    value: function unpauseGame() {
      var _this12 = this;

      this.onTimeout(15, function () {
        _this12.controller && _this12.controller.zero();
      });
      this.onTimeout(30, function () {
        _this12.focus();
      });
      this.onTimeout(60, function () {
        _this12.args.paused = false;
      });
    }
  }, {
    key: "mousemove",
    value: function mousemove(event) {
      var _this13 = this;

      this.args.mouse = 'moved';
      this.onTimeout(5000, function () {
        _this13.args.mouse = 'hide';
      });
    }
  }, {
    key: "hyphenate",
    value: function hyphenate(string) {
      return String(string).replace(/\s/g, '-').toLowerCase();
    }
  }, {
    key: "storeCheckpoint",
    value: function storeCheckpoint(name, checkpointId) {
      if (!this.checkpoints[this.tileMap.mapUrl]) {
        this.checkpoints[this.tileMap.mapUrl] = {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      checkpointsByActor[name] = {
        checkpointId: checkpointId,
        frames: this.args.frameId - this.args.startFrameId
      };
      localStorage.setItem("checkpoints:::".concat(this.tileMap.mapUrl), JSON.stringify(this.checkpoints[this.tileMap.mapUrl]));
    }
  }, {
    key: "getCheckpoint",
    value: function getCheckpoint(name) {
      if (!this.checkpoints[this.tileMap.mapUrl]) {
        var checkpointSource = localStorage.getItem("checkpoints:::".concat(this.tileMap.mapUrl)) || '{}';
        this.checkpoints[this.tileMap.mapUrl] = JSON.parse(checkpointSource) || {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      var currentCheckpoint = checkpointsByActor[name];
      return currentCheckpoint;
    }
  }, {
    key: "setCheckpoint",
    value: function setCheckpoint(mapUrl, storedCheckpoint) {
      var checkpointSource = localStorage.setItem("checkpoints:::".concat(mapUrl), JSON.stringify(storedCheckpoint));
    }
  }, {
    key: "clearCheckpoints",
    value: function clearCheckpoints() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (name === null) {
        name = this.controlActor.args.canonical;
      }

      if (!this.checkpoints[this.tileMap.mapUrl]) {
        this.checkpoints[this.tileMap.mapUrl] = {};
      }

      var checkpointsByActor = this.checkpoints[this.tileMap.mapUrl];
      delete checkpointsByActor[name];
      localStorage.setItem("checkpoints:::".concat(this.tileMap.mapUrl), JSON.stringify(this.checkpoints[this.tileMap.mapUrl]));
    }
  }, {
    key: "showCenterMessage",
    value: function showCenterMessage(message, color) {
      this.args.centerMessage = new _CharacterString.CharacterString({
        value: message,
        color: color
      });
    }
  }, {
    key: "hideCenterMessage",
    value: function hideCenterMessage() {
      this.args.centerMessage = false;
    }
  }, {
    key: "showDialog",
    value: function showDialog() {
      var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      this.args.dialog = true;
      this.clearDialog();
      lines = lines.map(function (t) {
        return new _CharacterString.CharacterString({
          value: t
        });
      });
      var offset = 0;

      var _iterator35 = _createForOfIteratorHelper(lines),
          _step35;

      try {
        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
          var line = _step35.value;
          line.offset = offset;
          offset += line.args.value.length;
        }
      } catch (err) {
        _iterator35.e(err);
      } finally {
        _iterator35.f();
      }

      this.args.dialogLines = lines;
      this.args.dialogClasses = classes;
    }
  }, {
    key: "hideDialog",
    value: function hideDialog(message) {
      this.clearDialog();
      this.args.dialog = false;
    }
  }, {
    key: "clearDialog",
    value: function clearDialog() {
      this.args.dialogLines = [];
    }
  }, {
    key: "clearAct",
    value: function clearAct(message) {
      var _this14 = this;

      console.log(message);
      this.args.actClearLabel.args.value = message;
      var speedBonus = Math.trunc(this.controlActor.args.clearSpeed * 10);
      var ringBonus = this.controlActor.args.rings * 100;
      var airBonus = Math.round(10000 * this.controlActor.args.airTimeTotal / (this.controlActor.args.airTimeTotal + this.controlActor.args.groundTimeTotal)) / 100 + '%';
      var timeBonus = 0;
      var time = (this.args.frameId - this.args.startFrameId) / 60;
      var seconds = Math.trunc(Math.abs(time));

      if (seconds < 30) {
        timeBonus = 50000;
      } else if (seconds < 45) {
        timeBonus = 10000;
      } else if (seconds < 60) {
        timeBonus = 5000;
      } else if (seconds < 90) {
        timeBonus = 4000;
      } else if (seconds < 120) {
        timeBonus = 3000;
      } else if (seconds < 180) {
        timeBonus = 2000;
      } else if (seconds < 240) {
        timeBonus = 1000;
      } else {
        timeBonus = 500;
      }

      var totalBonus = timeBonus + ringBonus + speedBonus;
      this.controlActor.args.score += totalBonus;
      this.args.actClear = true;
      this.args.timeBonus.args.value = 0;
      this.args.ringBonus.args.value = 0;
      this.args.airBonus.args.value = 0;
      this.args.speedBonus.args.value = 0;
      this.args.totalBonus.args.value = 0;
      this.onFrameOut(45, function () {
        return _this14.args.timeBonus.args.value = timeBonus;
      });
      this.onFrameOut(90, function () {
        return _this14.args.ringBonus.args.value = ringBonus;
      });
      this.onFrameOut(135, function () {
        return _this14.args.speedBonus.args.value = speedBonus;
      });
      this.onFrameOut(180, function () {
        return _this14.args.airBonus.args.value = airBonus;
      });
      this.onFrameOut(205, function () {
        return _this14.args.totalBonus.args.value = totalBonus;
      });
      this.onFrameOut(420, function () {
        return _this14.args.actClear = false;
      });
    }
  }, {
    key: "cpuDetect",
    value: function cpuDetect() {
      try {
        ga('send', 'event', {
          eventCategory: 'cpu',
          eventAction: 'cores',
          eventLabel: "core check",
          eventValue: navigator.hardwareConcurrency
        });
      } catch (error) {
        ga && ga('send', 'event', {
          eventCategory: 'cpu',
          eventAction: 'core check fail',
          eventLabel: "Cpu Detect Failure: ".concat(error)
        });
      }
    }
  }, {
    key: "gpuDetect",
    value: function gpuDetect() {
      try {
        this.gpuDetector = this.gpuDetector || document.createElement('canvas').getContext('webgl');
        var debug = this.gpuDetector.getExtension('WEBGL_debug_renderer_info');
        var vendor = this.gpuDetector.getParameter(debug.UNMASKED_VENDOR_WEBGL);
        var gpu = this.gpuDetector.getParameter(debug.UNMASKED_RENDERER_WEBGL);
        ga('send', 'event', {
          eventCategory: 'gpu',
          eventAction: vendor,
          eventLabel: gpu
        });
      } catch (error) {
        ga && ga('send', 'event', {
          eventCategory: 'gpu',
          eventAction: 'fail',
          eventLabel: "Gpu Detect Failure: ".concat(error)
        });
      }
    }
  }, {
    key: "buildDetect",
    value: function buildDetect() {
      var buildTag = document.head.querySelector('meta[name="x-build-time"]');
      var build = buildTag.getAttribute('content');
      ga && ga('send', 'event', {
        eventCategory: 'build',
        eventAction: 'build check',
        eventLabel: build
      });
    }
  }]);

  return Viewport;
}(_View2.View);

exports.Viewport = Viewport;
});

;require.register("viewport/layer.html", function(exports, require, module) {
module.exports = "<div data-name = \"[[name]]\" class = \"viewport-background\" cv-each = \"blocks:block:b\" cv-ref = \"background\" data-layer = \"[[layerId]]\">[[block]]</div>\n"
});

;require.register("viewport/viewport.html", function(exports, require, module) {
module.exports = "<section class = \"filters\" cv-each = \"effects:effect\">[[effect]]</section>\n\n<div class = \"viewport-frame [[initializing]] [[standalone]] [[secret]] [[level]] [[noIntro]] [[inputType]] [[ntsc]]\" data-theme = \"[[theme]]\" data-bg = \"[[bg]]\" cv-ref = \"frame\" data-paused = \"[[paused]]\">\n\t<div class = \"viewport-header\">\n\t\t<span class = \"sean-icon\"></span>\n\t\t<h1>Pixel Physics</h1>\n\t</div>\n\t<div class = \"viewport [[standalone]] [[fullscreen]] displacement-[[displacement]] mouse-[[mouse]] [[theme]] [[hideNowPlaying]]\" cv-ref = \"viewport\" tabindex=\"0\" cv-on = \"click(event);mousemove(event)\">\n\n\t\t<svg height=\"32\" width=\"32\">\n\t\t<defs>\n\n\t\t\t<filter id=\"motionBlur\" x=\"0%\"\n y=\"0%\" width=\"100%\" height=\"100%\">\n\t\t\t\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0,0\" cv-ref = \"blur\" />\n\t\t\t</filter>\n\t\t</defs>\n\t\t</svg>\n\n\t\t<svg height=\"100\" width=\"100\">\n\t\t<defs>\n\t\t\t<filter id=\"waterBlur\">\n\t\t\t\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0.25,0\" />\n\t\t\t</filter>\n\n\t\t\t<filter id=\"dilate\">\n\t\t\t\t<feMorphology operator=\"dilate\" radius=\"0.25\" result = \"expanded\"/>\n\t\t\t\t<feMerge>\n\t\t\t\t\t<feMergeNode in=\"expanded\" />\n\t\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\n\t\t\t\t</feMerge>\n\t\t\t</filter>\n\n\t\t\t<filter id = \"waves\"\n\t\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\t\tx      =\"0%\"\n\t\t\t\ty      =\"0%\"\n\t\t\t\theight =\"100%\"\n\t\t\t\twidth  =\"100%\"\n\t\t\t>\n\t\t\t\t<feFlood\n\t\t\t\t\tflood-color=\"#408000\"\n\t\t\t\t\tresult = \"DisplacementGreen\"\n\t\t\t\t></feFlood>\n\n\t\t\t\t<feImage\n\t\t\t\t\txlink:href=\"/effects/wave.png\"\n\t\t\t\t\tresult=\"DisplacementSource\"\n\t\t\t\t\theight=\"64\"\n\t\t\t\t\twidth=\"64\"\n\t\t\t\t></feImage>\n\n\t\t\t\t<feTile\n\t\t\t\t\tin=\"DisplacementSource\"\n\t\t\t\t\tresult=\"DisplacementTile\"\n\t\t\t\t></feTile>\n\n\t\t\t\t<feComposite\n\t\t\t\t\tin  = \"DisplacementTile\"\n\t\t\t\t\tin2 = \"DisplacementGreen\"\n\t\t\t\t\tresult =\"DisplacementField\"\n\t\t\t\t\toperator =\"over\"\n\t\t\t\t></feComposite>\n\n\t\t\t\t<feOffset\n\t\t\t\t\tin  = \"DisplacementField\"\n\t\t\t\t\tout = \"DisplacementOffset\"\n\t\t\t\t\tdx  = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"dy\"\n\t\t\t\t\t\tvalues = \"0;-64\"\n\t\t\t\t\t\tdur=\"1500ms\"\n\t\t\t\t\t\trepeatCount=\"indefinite\" />\n\n\t\t\t\t</feOffset>\n\n\t\t\t\t<feDisplacementMap\n\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\tin2=\"DisplacementOffset\"\n\t\t\t\t\tresult=\"Displaced\"\n\t\t\t\t\txChannelSelector=\"R\"\n\t\t\t\t\tyChannelSelector=\"G\"\n\t\t\t\t\tscale=\"4\"\n\t\t\t\t></feDisplacementMap>\n\n\t\t\t\t<feGaussianBlur\n\t\t\t\t\tin=\"Displaced\"\n\t\t\t\t\tstdDeviation=\"0.35\"\n\t\t\t\t></feGaussianBlur>\n\n\t\t\t</filter>\n\n\t\t\t<filter id = \"ntsc\"\n\t\t\t\tcolor-interpolation-filters=\"sRGB\"\n\t\t\t\tx      = \"0%\"\n\t\t\t\ty      = \"0%\"\n\t\t\t\twidth  = \"100%\"\n\t\t\t\theight = \"200%\"\n\t\t\t>\n\t\t\t\t<feFlood\n\t\t\t\t\tflood-color=\"#808000\"\n\t\t\t\t\tresult = \"DisplacementGreen\"\n\t\t\t\t></feFlood>\n\n\t\t\t\t<feImage\n\t\t\t\t\txlink:href=\"/effects/ntsc-static.png\"\n\t\t\t\t\tresult =\"DisplacementSource\"\n\t\t\t\t\twidth  = \"128\"\n\t\t\t\t\theight = \"128\"\n\t\t\t\t></feImage>\n\n\t\t\t\t<feTile\n\t\t\t\t\tin=\"DisplacementSource\"\n\t\t\t\t\tresult=\"DisplacementTile\"\n\t\t\t\t></feTile>\n\n\t\t\t\t<feComposite\n\t\t\t\t\tin  = \"DisplacementTile\"\n\t\t\t\t\tin2 = \"DisplacementGreen\"\n\t\t\t\t\tresult =\"DisplacementField\"\n\t\t\t\t\toperator =\"over\"\n\t\t\t\t></feComposite>\n\n\t\t\t\t<feOffset\n\t\t\t\t\tin  = \"DisplacementField\"\n\t\t\t\t\tout = \"DisplacementOffset\"\n\t\t\t\t\tdx  = \"0\"\n\t\t\t\t\tdy  = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"dy\"\n\t\t\t\t\t\tvalues = \"-128;0\"\n\t\t\t\t\t\tbegin=\"2000ms\"\n\t\t\t\t\t\tdur=\"2000ms\"\n\t\t\t\t\t\trepeatCount=\"8\"\n\t\t\t\t\t></animate>\n\n\t\t\t\t</feOffset>\n\n\t\t\t\t<feDisplacementMap\n\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\tin2=\"DisplacementOffset\"\n\t\t\t\t\tresult=\"Displaced\"\n\t\t\t\t\txChannelSelector=\"R\"\n\t\t\t\t\tyChannelSelector=\"G\"\n\t\t\t\t\tscale = \"0\"\n\t\t\t\t>\n\t\t\t\t\t<animate\n\t\t\t\t\t\tattributeName=\"scale\"\n\t\t\t\t\t\tvalues = \"512;192;0\"\n\t\t\t\t\t\tbegin=\"2000ms\"\n\t\t\t\t\t\tdur=\"2000ms\"\n\t\t\t\t\t\trepeatCount=\"1\"\n\t\t\t\t\t></animate>\n\n\t\t\t\t</feDisplacementMap>\n\n\t\t\t</filter>\n\n\t\t</defs>\n\t\t</svg>\n\n\t\t<div class = \"viewport-zoom\">\n\n\t\t\t[[backdrop]]\n\n\t\t\t<div class = \"backdrops\" cv-ref =\"backdrops\"></div>\n\n\t\t\t<div class = \"blurAngle\" cv-ref = \"blurAngle\">\n\t\t\t<div class = \"blurDistance\" cv-ref = \"blurDistance\">\n\t\t\t<div class = \"blurAngleCancel\" cv-ref = \"blurAngleCancel\">\n\t\t\t\t<div\n\t\t\t\t\tcv-ref  = \"background\"\n\t\t\t\t\tclass   = \"viewport-bg-layers\"\n\t\t\t\t\tcv-each = \"layers:layer\"\n\t\t\t\t>[[layer]]</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"filters filters-background\" cv-ref = \"bgFilters\"></div>\n\n\t\t\t<div cv-ref = \"content\" class = \"viewport-content\">\n\t\t\t\t<div cv-ref = \"actors\" class = \"viewport-actors\"></div>\n\t\t\t\t<div cv-ref = \"particles\" class = \"viewport-particles\"></div>\n \t\t\t</div>\n\n\t\t\t<div class = \"blurAngle\" cv-ref = \"blurAngleFg\">\n\t\t\t<div class = \"blurDistance\" cv-ref = \"blurDistanceFg\">\n \t\t\t<div class = \"blurAngleCancel\" cv-ref = \"blurAngleCancelFg\">\n\t\t\t\t<div\n\t\t\t\t\tcv-ref  = \"foreground\"\n\t\t\t\t\tclass   = \"viewport-bg-layers\"\n\t\t\t\t\tcv-each = \"fgLayers:layer\"\n\t\t\t\t>[[layer]]</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n \t\t</div>\n\n \t\t<div class = \"viewport-overlay\">\n \t\t\t<div class = \"debug-spawn\" cv-if = \"debugEditMode\">\n \t\t\t\t<div class = \"debug-spawn\" cv-ref = \"spawnPreview\"></div>\n \t\t\t\t<div class = \"debug-spawn\">[[debugObjectName]]</div>\n \t\t\t</div>\n\t\t\t<div class = \"hud hud-top-right hud-table\"  cv-if = \"debugOsd\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colspan = \"2\">[[char]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelGround]]</td>\n\t\t\t\t\t\t<td>[[ground]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelCamera]]</td>\n\t\t\t\t\t\t<td>[[cameraMode]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelMode]]</td>\n\t\t\t\t\t\t<td>[[mode]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelX]]</td>\n\t\t\t\t\t\t<td>[[xPos]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelY]]</td>\n\t\t\t\t\t\t<td>[[yPos]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelLayer]]</td>\n\t\t\t\t\t\t<td>[[layer]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelGSpeed]]</td>\n\t\t\t\t\t\t<td>[[gSpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelXSpeed]]</td>\n\t\t\t\t\t\t<td>[[xSpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelYSpeed]]</td>\n\t\t\t\t\t\t<td>[[ySpeed]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelAirAngle]]</td>\n\t\t\t\t\t\t<td>[[airAngle]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelAngle]]</td>\n\t\t\t\t\t\t<td>[[angle]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelFrame]]</td>\n\t\t\t\t\t\t<td>[[frame]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[labelIgnore]]</td>\n\t\t\t\t\t\t<td>[[ignore]]</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-top-right\" cv-if = \"showHud\">\n\n\t\t\t\t<div class = \"char-hud\">\n\t\t\t\t\t[[char]]\n\t\t\t\t\t<div class = \"char-icon [[charName|hyphenate]]\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class = \"emerald-hud\" cv-each = \"emeralds:emerald:e\">\n\t\t\t\t\t<img src = \"/Sonic/emerald-[[emerald]]-mini.png\" />\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-bottom-right\">\n\n\t\t\t\t<div cv-if = \"showHud\" class =\"sheild-hud [[currentSheild]] [[hasElectric]] [[hasFire]] [[hasWater]] [[hasNormal]]\">\n\t\t\t\t\t<div class = \"sheild-icon sheild-electric\"></div>\n\t\t\t\t\t<div class = \"sheild-icon sheild-normal\"></div>\n\t\t\t\t\t<div class = \"sheild-icon sheild-fire\"></div>\n\t\t\t\t\t<div class = \"sheild-icon sheild-water\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class = \"contents\" cv-if = \"showFps\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>[[labelFps]]</td>\n\t\t\t\t\t\t\t<td>[[fpsSprite]]</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</span>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-bottom-left\" cv-if = \"showHud\">\n\t\t\t\t[[nowPlaying]]\n\t\t\t\t[[trackName]]\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-top-left hud-table\"  cv-if = \"showHud\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[scoreLabel]]</td><td>[[score]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[timerLabel]]</td><td>[[timer]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[ringLabel]]</td><td>[[rings]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t<div class = \"demo-hud\" cv-if = \"demoIndicator\">[[demoIndicator]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered\" cv-if = \"actClear\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr><td colspan=\"2\">\n\t\t\t\t\t\t<div class = \"centered\">[[actClearLabel]]</div>\n\t\t\t\t\t</td></tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[timeBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[timeBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[ringBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[ringBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<!-- <tr>\n\t\t\t\t\t\t<td>[[perfectBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[perfectBonus]]</td>\n\t\t\t\t\t</tr> -->\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[speedBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[speedBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[airBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[airBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>[[totalBonusLabel]]</td>\n\t\t\t\t\t\t<td>[[totalBonus]]</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered\" cv-if = \"centerMessage\">\n\t\t\t\t[[centerMessage]]\n\t\t\t</div>\n\n\t\t\t<div class = \"hud hud-dark hud-centered-raised\" cv-if = \"dialog\">\n\t\t\t\t<div class = \"dialog-frame [[dialogClasses]]\">\n\t\t\t\t\t<div class = \"dialog-icon\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div cv-each = \"dialogLines:line\" class = \"dialog-text\">\n\t\t\t\t\t\t<span style = \"--text-offset:[[line.offset]]\">[[line]]</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"screen-effects\" cv-each = \"screenEffects:effect\">\n\t\t\t\t[[effect]]\n\t\t\t</div>\n\n\t\t\t<section class = \"pause-menu full\" cv-if = \"paused\">[[pauseMenu]]</section>\n\n\t\t\t[[titlecard]]\n\n\t\t\t<div class = \"topLine\">\n\t\t\t\t<div class = \"status-message\">[[topLine]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"focus-me\">\n\t\t\t\t<div class = \"status-message\">[[focusMe]]</div>\n\t\t\t</div>\n\n\t\t\t<div class = \"status-message\">[[status]]</div>\n\n\t\t\t<section class = \"contents\" cv-if = \"networked\">[[chatBox]]</section>\n\n\t\t\t<!-- <div class = \"filters filters-foreground\" cv-ref = \"fgFilters\"></div> -->\n\n\t\t\t<div class = \"console [[showConsole]]\" cv-ref = \"subspace\" tab-index = \"0\">[[subspace]]</div>\n\n\t\t\t<div class = \"shade\" data-fade = \"[[fade]]\"></div>\n\n\t\t</div>\n\n\t\t<div class = \"quick-controls\" cv-if = \"shortcuts\">\n\n\t\t\t[[muteSwitch]]\n\n\t\t\t<div class = \"button\" cv-on = \"click:fullscreen()\">\n\t\t\t\t<image src = \"/ui/fullscreen.svg\" />\n\t\t\t</div>\n\n\t\t</div>\n\n\n\t</div>\n\n</div>\n"
});

;require.alias("three/build/three.js", "three");require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');

"use strict";

/* jshint ignore:start */
(function () {
  var WebSocket = window.WebSocket || window.MozWebSocket;
  var br = window.brunch = window.brunch || {};
  var ar = br['auto-reload'] = br['auto-reload'] || {};
  if (!WebSocket || ar.disabled) return;
  if (window._ar) return;
  window._ar = true;

  var cacheBuster = function cacheBuster(url) {
    var date = Math.round(Date.now() / 1000).toString();
    url = url.replace(/(\&|\\?)cacheBuster=\d*/, '');
    return url + (url.indexOf('?') >= 0 ? '&' : '?') + 'cacheBuster=' + date;
  };

  var browser = navigator.userAgent.toLowerCase();
  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;
  var reloaders = {
    page: function page() {
      window.location.reload(true);
    },
    stylesheet: function stylesheet() {
      [].slice.call(document.querySelectorAll('link[rel=stylesheet]')).filter(function (link) {
        var val = link.getAttribute('data-autoreload');
        return link.href && val != 'false';
      }).forEach(function (link) {
        link.href = cacheBuster(link.href);
      }); // Hack to force page repaint after 25ms.

      if (forceRepaint) setTimeout(function () {
        document.body.offsetHeight;
      }, 25);
    },
    javascript: function javascript() {
      var scripts = [].slice.call(document.querySelectorAll('script'));
      var textScripts = scripts.map(function (script) {
        return script.text;
      }).filter(function (text) {
        return text.length > 0;
      });
      var srcScripts = scripts.filter(function (script) {
        return script.src;
      });
      var loaded = 0;
      var all = srcScripts.length;

      var onLoad = function onLoad() {
        loaded = loaded + 1;

        if (loaded === all) {
          textScripts.forEach(function (script) {
            eval(script);
          });
        }
      };

      srcScripts.forEach(function (script) {
        var src = script.src;
        script.remove();
        var newScript = document.createElement('script');
        newScript.src = cacheBuster(src);
        newScript.async = true;
        newScript.onload = onLoad;
        document.head.appendChild(newScript);
      });
    }
  };
  var port = ar.port || 9485;
  var host = br.server || window.location.hostname || 'localhost';

  var connect = function connect() {
    var connection = new WebSocket('ws://' + host + ':' + port);

    connection.onmessage = function (event) {
      if (ar.disabled) return;
      var message = event.data;
      var reloader = reloaders[message] || reloaders.page;
      reloader();
    };

    connection.onerror = function () {
      if (connection.readyState) connection.close();
    };

    connection.onclose = function () {
      window.setTimeout(connect, 1000);
    };
  };

  connect();
})();
/* jshint ignore:end */
;
//# sourceMappingURL=app.js.map